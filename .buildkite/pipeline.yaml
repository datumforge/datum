env:
  APP_NAME: ${BUILDKITE_PIPELINE_SLUG}
  IMAGE_REPO: ghcr.io/datumforge/${APP_NAME}
  IMAGE_TAG: ${BUILDKITE_BUILD_NUMBER}-${BUILDKITE_COMMIT:0:8}

steps:
- group: ":knife: Pre-check"
  key: "precheck"
  steps:
  - label: ":golang: go generate"
    key: "generate"
    plugins:
      - docker#v5.9.0:
          image: "ghcr.io/datumforge/base-ci-image:5cba4a9a23b429c3650ac25da805104455fa696efc3eb6d367461230c028f77a"
          command: ["task", "ci"]

- group: ":test_tube: Tests"
  key: "tests"
  depends_on: "precheck"
  steps:
  - label: ":golangci-lint: lint :lint-roller:"
    key: "lint"
    plugins:
      - docker#v5.9.0:
          image: "registry.hub.docker.com/golangci/golangci-lint:v1.55.2"
          command: ["golangci-lint", "run", "-v", "--timeout", "10m"]
          environment: 
            - "GOTOOLCHAIN=auto"
  - label: ":golang: go test"
    key: "go_test"
    plugins:
      - docker#v5.9.0:
          image: golang:1.21.5
          command: ["go", "test", "./..."]

  - label: ":auth0: fga model test"
    key: "fga_test"
    plugins:
      - docker#v5.9.0:
          image: openfga/cli
          command: ["model", "test", "--tests", "fga/tests/tests.yaml"]

- group: ":closed_lock_with_key: Security Checks"
  depends_on: "tests"
  key: "security"
  steps:
  - label: ":closed_lock_with_key: gosec"
    key: "gosec"
    plugins:
      - docker#v5.9.0:
          image: "registry.hub.docker.com/securego/gosec:2.18.2"
          command: ["-no-fail", "-exclude-generated", "-fmt sarif", "-out", "results.sarif", "./..."]
    artifact_paths: ["results.sarif"]

  - label: ":github: upload fork PR sarif report"
    key: "gosec-upload-pr"
    if: (build.pull_request.labels includes "run-ci" ) 
    depends_on: ["gosec"]
    plugins:
      - artifacts#v1.9.2:
          download: results.sarif
      - docker#v5.9.0:
            image: "j3ssie/codeql-docker"
            entrypoint: codeql
            environment:
              - "GITHUB_TOKEN"
              - "BUILDKITE_PULL_REQUEST"
            command: ["github", "upload-results", "--sarif=results.sarif", "--ref=refs/pull/${BUILDKITE_PULL_REQUEST}/head"]

  - label: ":github: upload sarif report"
    key: "gosec-upload"
    if: (build.branch == "main") || (build.branch !~ /:/i)
    depends_on: ["gosec"]
    plugins:
      - artifacts#v1.9.2:
          download: results.sarif
      - docker#v5.9.0:
            image: "j3ssie/codeql-docker"
            entrypoint: codeql
            environment:
              - "GITHUB_TOKEN"
              - "BUILDKITE_BRANCH"
            command: ["github", "upload-results", "--sarif=results.sarif", "--ref=refs/heads/${BUILDKITE_BRANCH}"]

- group: ":golang: Builds"
  depends_on: "tests"
  key: "go-builds"
  steps:
  - label: ":golang: build"
    key: "gobuild-server"
    artifact_paths: "bin/${APP_NAME}"
    plugins:
      - docker#v5.9.0:
          image: "golang:1.21.5"
          environment:
            - CGO_ENABLED=0
            - GOOS=linux
          command: ["go", "build", "-buildvcs=false", "-mod=mod", "-a", "-o", "bin/$APP_NAME"]
    

  - label: ":terminal: build cli"
    key: "gobuild-cli"
    artifact_paths: "bin/${APP_NAME}-cli"
    plugins:
      - docker#v5.9.0:
          image: "golang:1.21.5"
          environment:
            - GOOS=darwin
            - GOARCH=arm64
          command: ["go", "build", "-buildvcs=false", "-mod=mod", "-a", "-o", "bin/${APP_NAME}-cli", "./cmd/cli"]


- group: ":docker: Image Build"
  depends_on: "go-builds"
  key: "image-build"
  steps:
  - label: ":docker: docker build and publish"
    key: "docker-build"
    env:
      BUILDKITE_PLUGINS_ALWAYS_CLONE_FRESH: "true"
    commands: |
      #!/bin/bash
      BUILDKITE_PLUGIN_DOCKER_BUILD_PUSH=false
      if [[ "${BUILDKITE_BRANCH}" == "test-main" ]]; then
          BUILDKITE_PLUGIN_DOCKER_BUILD_PUSH=true
      fi
      echo ${BUILDKITE_PLUGIN_DOCKER_BUILD_PUSH}
    plugins:
      - docker-login#v2.1.0:
          username: datum-bender
          password-env: SECRET_GHCR_PUBLISH_TOKEN
          server: ghcr.io
      - equinixmetal-buildkite/docker-metadata#v1.0.0:
          images:
          - "${IMAGE_REPO}"
          extra_tags:
          - "${IMAGE_TAG}"
      - equinixmetal-buildkite/docker-build#v1.1.0:
          dockerfile: docker/Dockerfile
          build-args:
            - NAME=${APP_NAME}
      - equinixmetal-buildkite/trivy#v1.18.3:
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          security-checks: config,secret,vuln
          skip-files: 'cosign.key,Dockerfile.dev'