env:
  APP_NAME: ${BUILDKITE_PIPELINE_SLUG}
  IMAGE_REPO: ghcr.io/datumforge/${APP_NAME}
  GCR_REPO: us-central1-docker.pkg.dev/vernal-sunspot-397816/${APP_NAME}/${APP_NAME}
  IMAGE_TAG: ${BUILDKITE_BUILD_NUMBER}-${BUILDKITE_COMMIT:0:8}
  SONAR_HOST: "https://sonarcloud.io"
steps:
  - group: ":knife: Pre-check"
    key: "precheck"
    steps:
      - label: ":golang: go generate"
        key: "generate"
        cancel_on_build_failing: true
        plugins:
          - docker#v5.11.0:
              image: "ghcr.io/datumforge/base-ci-image:v1.1.6"
              command: ["task", "ci"]
              environment:
                - "GOTOOLCHAIN=auto"
      - label: ":yaml: generate config"
        key: "generate_config"
        cancel_on_build_failing: true
        plugins:
          - docker#v5.11.0:
              image: "ghcr.io/datumforge/base-ci-image:v1.1.6"
              command: ["task", "config:ci"]
              environment:
                - "GOTOOLCHAIN=auto"
  - group: ":test_tube: Tests"
    key: "tests"
    steps:
      - label: ":golangci-lint: lint :lint-roller:"
        cancel_on_build_failing: true
        key: "lint"
        plugins:
          - docker#v5.11.0:
              image: "registry.hub.docker.com/golangci/golangci-lint:v1.59.0"
              command: ["golangci-lint", "run", "-v", "--timeout", "10m", "--config", ".golangci.yaml", "--concurrency", "32"]
              environment:
                - "GOTOOLCHAIN=auto"
      - label: ":golang: go test - libsql"
        key: "go_test_libsql"
        retry:
          automatic:
            - exit_status: "*"
              limit: 2
        cancel_on_build_failing: true
        env:
          TEST_DB_URL: "libsql://file::memory:?cache=shared"
        plugins:
          - docker#v5.11.0:
              image: golang:1.22.5
              command: ["go", "test", "-coverprofile=coverage.out", "./..."]
              environment:
                - "TEST_DB_URL"
        artifact_paths: ["coverage.out"]
      - label: ":golang: go test - {{matrix}}"
        key: "go_test"
        retry:
          automatic:
            - exit_status: "*"
              limit: 2
        env:
          TEST_DB_URL: "{{matrix}}"
        matrix:
          - "docker://postgres:16-alpine"
          - "docker://postgres:15-alpine"
          - "sqlite://file:ent?mode=memory&cache=shared"
        plugins:
          - docker#v5.11.0:
              image: golang:1.22.5
              command: ["go", "test", "-coverprofile=coverage.out", "./..."]
              environment:
                - "TEST_DB_URL"
                - "TEST_DB_CONTAINER_EXPIRY=8" # container expiry in minutes
                - "TEST_DB_HOST=172.17.0.1" # docker host ip on linux
              volumes:
                - "/var/run/docker.sock:/var/run/docker.sock"
        artifact_paths: ["coverage.out"]
      - label: ":auth0: fga model test"
        key: "fga_test"
        plugins:
          - docker#v5.11.0:
              image: openfga/cli
              command: ["model", "test", "--tests", "fga/tests/tests.yaml"]
  - group: ":closed_lock_with_key: Security Checks"
    depends_on: "go_test_libsql"
    key: "security"
    steps:
      - label: ":closed_lock_with_key: gosec"
        key: "gosec"
        plugins:
          - docker#v5.11.0:
              image: "registry.hub.docker.com/securego/gosec:2.20.0"
              command: ["-no-fail", "-exclude-generated", "-fmt sonarqube", "-out", "results.txt", "./..."]
              environment:
                - "GOTOOLCHAIN=auto"
        artifact_paths: ["results.txt"]
      - label: ":github: upload PR reports"
        key: "scan-upload-pr"
        if: build.pull_request.id != null
        depends_on: ["gosec", "go_test_libsql"]
        plugins:
          - artifacts#v1.9.4:
              download: "results.txt"
          - artifacts#v1.9.4:
              download: "coverage.out"
              step: "go_test_libsql"
          - docker#v5.11.0:
              image: "sonarsource/sonar-scanner-cli:5"
              environment:
                - "SONAR_TOKEN"
                - "SONAR_HOST_URL=$SONAR_HOST"
                - "SONAR_SCANNER_OPTS=-Dsonar.pullrequest.branch=$BUILDKITE_BRANCH -Dsonar.pullrequest.base=$BUILDKITE_PULL_REQUEST_BASE_BRANCH -Dsonar.pullrequest.key=$BUILDKITE_PULL_REQUEST"
      - label: ":github: upload reports"
        key: "scan-upload"
        if: build.branch == "main"
        depends_on: ["gosec", "go_test_libsql"]
        plugins:
          - artifacts#v1.9.4:
              download: results.txt
          - artifacts#v1.9.4:
              download: coverage.out
              step: "go_test_libsql"
          - docker#v5.11.0:
              image: "sonarsource/sonar-scanner-cli:5"
              environment:
                - "SONAR_TOKEN"
                - "SONAR_HOST_URL=$SONAR_HOST"
  - group: ":golang: Builds"
    key: "go-builds"
    steps:
      - label: ":golang: build"
        key: "gobuild-server"
        artifact_paths: "bin/${APP_NAME}"
        plugins:
          - docker#v5.11.0:
              image: "golang:1.22.5"
              environment:
                - CGO_ENABLED=0
                - GOOS=linux
              command: ["go", "build", "-buildvcs=false", "-mod=mod", "-a", "-o", "bin/$APP_NAME"]
      - label: ":terminal: build cli"
        key: "gobuild-cli"
        artifact_paths: "bin/${APP_NAME}-cli"
        plugins:
          - docker#v5.11.0:
              image: "golang:1.22.5"
              environment:
                - GOOS=darwin
                - GOARCH=arm64
              command: ["go", "build", "-buildvcs=false", "-mod=mod", "-a", "-o", "bin/${APP_NAME}-cli", "./cmd/cli"]
  - group: ":database: atlas migrate"
    key: "database"
    steps:
      - label: ":postgres: atlas lint"
        key: "atlas_lint"
        plugins:
          - datumforge/atlas#v0.0.3:
              project: datum
              dev-url: "docker://postgres/16/dev?search_path=public"
              dir: "file://db/migrations"
              step: lint
      - label: ":rocket: atlas push"
        if: build.branch == "main"
        key: "atlas_migrate"
        plugins:
          - datumforge/atlas#v0.0.3:
              project: datum
              dev-url: "docker://postgres/16/dev?search_path=public"
              dir: "file://db/migrations"
              step: migrate
  - group: ":docker: Image Build"
    depends_on: "go-builds"
    key: "image-build"
    steps:
      - label: ":docker: docker pr build"
        key: "docker-pr-build"
        cancel_on_build_failing: true
        if: build.branch != "main" && build.tag == null
        commands: |
          #!/bin/bash
          ls
        plugins:
          - datumforge/docker-metadata#v1.0.0:
              images:
                - "${IMAGE_REPO}"
              extra_tags:
                - "${IMAGE_TAG}"
          - datumforge/container-build#v1.1.0:
              dockerfile: docker/Dockerfile
              push: false
              build-args:
                - NAME=${APP_NAME}
          - equinixmetal-buildkite/trivy#v1.18.5:
              severity: CRITICAL,HIGH
              ignore-unfixed: true
              security-checks: config,secret,vuln
              skip-files: "cosign.key,Dockerfile.dev"
      - label: ":docker: docker build and publish"
        key: "docker-build"
        cancel_on_build_failing: true
        if: build.branch == "main"
        commands: |
          #!/bin/bash
          ls
        plugins:
          - docker-login#v3.0.0:
              username: datum-bender
              password-env: SECRET_GHCR_PUBLISH_TOKEN
              server: ghcr.io
          - datumforge/docker-metadata#v1.0.0:
              images:
                - "${IMAGE_REPO}"
              extra_tags:
                - "${IMAGE_TAG}"
          - datumforge/container-build#v1.1.0:
              dockerfile: docker/Dockerfile
              push: true
              build-args:
                - NAME=${APP_NAME}
          - equinixmetal-buildkite/trivy#v1.18.5:
              severity: CRITICAL,HIGH
              ignore-unfixed: true
              security-checks: config,secret,vuln
              skip-files: "cosign.key,Dockerfile.dev"
      - label: ":docker: docker build and publish all in one"
        key: "docker-build-aio"
        if: build.branch == "main"
        commands: |
          #!/bin/bash
        plugins:
          - docker-login#v3.0.0:
              username: _json_key_base64
              password-env: SECRET_GCR_PUBLISH_TOKEN
              server: us-central1-docker.pkg.dev
          - datumforge/docker-metadata#v1.0.0:
              tag_prefix: "aio-"
              debug: true
              images:
                - "${GCR_REPO}"
              extra_tags:
                - "${IMAGE_TAG}"
          - datumforge/container-build#v1.1.0:
              dockerfile: docker/all-in-one/Dockerfile.all-in-one
              push: true
              build-args:
                - NAME=${APP_NAME}
          - equinixmetal-buildkite/trivy#v1.18.5:
              severity: CRITICAL,HIGH
              ignore-unfixed: true
              security-checks: config,secret,vuln
              skip-files: "cosign.key,Dockerfile.dev"
      - label: ":docker: docker build and publish"
        key: "docker-build-and-tag"
        if: build.tag != null
        commands: |
          #!/bin/bash
          ls
        plugins:
          - docker-login#v3.0.0:
              username: datum-bender
              password-env: SECRET_GHCR_PUBLISH_TOKEN
              server: ghcr.io
          - datumforge/docker-metadata#v1.0.0:
              images:
                - "${IMAGE_REPO}"
              extra_tags:
                - "${BUILDKITE_TAG}"
          - datumforge/container-build#v1.1.0:
              dockerfile: docker/Dockerfile
              push: true
              build-args:
                - NAME=${APP_NAME}
          - equinixmetal-buildkite/trivy#v1.18.5:
              severity: CRITICAL,HIGH
              ignore-unfixed: true
              security-checks: config,secret,vuln
              skip-files: "cosign.key,Dockerfile.dev"
      - label: ":docker: docker build and publish all in one"
        key: "docker-build-aio-and-tag"
        if: build.tag != null
        commands: |
          #!/bin/bash
        plugins:
          - docker-login#v3.0.0:
              username: _json_key_base64
              password-env: SECRET_GCR_PUBLISH_TOKEN
              server: us-central1-docker.pkg.dev
          - datumforge/docker-metadata#v1.0.0:
              tag_prefix: "aio-"
              debug: true
              images:
                - "${GCR_REPO}"
              extra_tags:
                - "${BUILDKITE_TAG}"
          - datumforge/container-build#v1.1.0:
              dockerfile: docker/all-in-one/Dockerfile.all-in-one
              push: true
              build-args:
                - NAME=${APP_NAME}
          - equinixmetal-buildkite/trivy#v1.18.5:
              severity: CRITICAL,HIGH
              ignore-unfixed: true
              security-checks: config,secret,vuln
              skip-files: "cosign.key,Dockerfile.dev"
