version: "3"

includes:
  cli: ./cli

env:
  ATLAS_DB_URI: "sqlite://file?mode=memory&_fk=1"
  TEST_DB_URL: "file:ent?mode=memory&cache=shared&_fk=1"
  TEST_FGA_URL: "localhost:8080"

tasks:
  clean:generated:
    desc: cleans ent / gqlgen generated files to be re-generated
    cmds:
      - |
        echo "Enter the name of the ent schema object name to clean:"
        read clean;
        go run ./internal/entclean/main.go --path=internal/ent ${clean};
      - "rm -f schema/ent.graphql"
      - "rm -f schema.graphql"
      - "rm -rf internal/datumclient/"
  clean:local:
    desc: cleans up datum.db and datum-cli local
    cmds:
      - "rm -f datum.db"
      - "rm -f datum-cli"
  ent:
    desc: runs go generate against ent schema - see the entc.go file and generates the fga mock client
    cmds:
      - go generate ./...
  install:
    desc: installs tools and packages needed to develop against the datum repo
    cmds:
      - "go install github.com/go-task/task/v3/cmd/task@latest"
      - "go install github.com/hairyhenderson/gomplate/v4/cmd/gomplate@latest"
      - "go install entgo.io/ent/cmd/ent@latest"
      - "go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
      - "curl -sSf https://atlasgo.sh | sh"
      - "curl -sSL https://rover.apollo.dev/nix/latest | sh"
      - "go get -u github.com/openfga/go-sdk"
      - "brew install openfga/tap/fga"
      - "go install go.uber.org/mock/mockgen@latest"
      - defer: { task: go:tidy }
  graph:
    desc: runs scripts/gen_graphql.sh to stub out files in the schema/ directory
    cmds:
        - bash scripts/gen_graphql.sh
  gqlgen:
    desc: runs gqlgen and gqlgenc commands using gen_generate.go and entc
    cmds:
      - go run github.com/99designs/gqlgen generate --verbose
      - task: tidy
      - go run ./gen_schema.go
      - go run github.com/Yamashou/gqlgenc generate --configdir schema
  generate:
    desc: a combination of the ent, graph, and gqlgen tasks which are required to fully generate the necessary graph, server, resolvers, client, etc. 
    cmds:
      - task: ent
      - task: graph
      - task: gqlgen
  atlas:
    desc: runs the atlas create and lint commands
    aliases: [atlas]
    cmds:
      - task: atlas:create
      - task: atlas:lint
  atlas:create:
    desc: creates an atlas migration if one is needed based on the ent schema definitions
    cmds:
      - |
        echo "If there is no schema to generate, this will not create a file (hint: name it your branch name if you're not sure) - enter the name of the migration:"
        read migration;
        go run db/create_migrations.go ${migration};
  atlas:lint:
    desc: lints the pushed migration files
    cmds:
      - atlas migrate lint --dev-url "sqlite://file?mode=memory&_fk=1" --dir "file://db/migrations" -w   
  atlas:migrate:
    desc: pushes the generated migration files to atlas cloud
    cmds:
      - atlas migrate push datum --dev-url "sqlite://dev?mode=memory&_fk=1" --dir "file://db/migrations"
  atlas:resethash:
    desc: re-sets the checksum created by the atlas package so that a complete migration can be re-created if deleted
    cmds:
      - atlas migrate hash --dir="file://db/migrations"
  rover:
    desc: launches an interactive browser to navigate the configured graph schema
    cmds:
      - 'open "http://localhost:4000"'
      - rover dev -u http://localhost:17608/query -s schema.graphql -n datum --elv2-license=accept
  run-dev-auth:
    desc: runs the datum server with oidc enabled
    cmds: 
    - go run main.go serve  --debug --pretty --dev --fga-host=localhost:8080 --fga-scheme=http --jwt-audience=http://localhost:17608 --jwt-issuer=http://localhost:17608 --jwt-kid=01HHAS67AM73778S0QEZ3CEAGE --jwt-cookie-domain=localhost:17608
  run-dev:
    desc: runs the datum server with oidc disabled for easy local testing / querying
    cmds:
      - go run main.go serve  --debug --pretty --dev --auth=false
  go:build:
    desc: Runs go build for the datum server
    cmds:
      - go build -mod=mod -o datum
  go:build-cli:
    desc: Runs go build for the datum cli
    cmds:
      - go build -mod=mod -o datum-cli ./cmd/cli  
  go:lint:
    desc: runs golangci-lint, the most annoying opinionated linter ever
    cmds:
      - golangci-lint run -v
  go:test:
    desc: runs and outputs results of created go tests
    cmds:
      - go test -v ./... 
  go:tidy:
    desc: Runs go mod tidy on the backend
    aliases: [tidy]
    cmds:
      - go mod tidy
  go:all:
    aliases: [go]
    desc: Runs all go test and lint related tasks
    cmds:
      - task: go:tidy
      - task: go:lint
      - task: go:test
  compose:fga:
    desc: brings up the compose environment for openfga development
    cmds:
      - "docker compose -f ./docker/docker-compose-fga.yml -p fga up -d"
  fga:create:
    desc: creates a new fga store with the testdata model
    cmds:
      - fga store create --name "datum dev" --model fga/model/datum.fga
  fga:open:
    desc: opens the fga playground in a browser
    cmds: 
      - 'open "http://localhost:3000/playground"'
  fga:up:
    desc: brings the fga compose environment up and opens the fga playground
    cmds:
      - task: compose:fga
      - task: fga:open
  fga:test:
     desc: runs the fga model tests
     cmds: 
      - fga model test --tests fga/tests/tests.yaml 
  compose:fga:down:
    desc: brings the fga compose environment down
    cmds: 
      - docker compose -p fga down
  docker:build:
    desc: builds the datum docker image
    cmds:
      - docker build -f docker/Dockerfile . 
  compose:datum:
    desc: brings up the compose environment for the datum server
    deps: [docker:build]
    cmds:
      - "docker compose -f ./docker/docker-compose.yml -p datum up -d"
  compose:datum:down:
    desc: brings the datum compose environment down
    cmds:
      - "docker compose -p datum down"
  compose:all:up:
    desc: brings up the full docker compose development environment including datum server, fga, and rover
    cmds:
      - task: fga:up
      - task: compose:datum
      - task: rover
  compose:all:down: 
    desc: brings down both fga and datum server compose environments 
    cmds:
      - task: compose:fga:down
      - task: compose:datum:down
  pr:
    desc: runs the comprehensive roll-up tasks required to ensure all files are being committed / pushed as a part of opening a PR 
    cmds:
      - task: generate
      - task: atlas
      - task: go
      - task: fga:test
  db:console:
    desc: launches an interactive terminal to the local datum db with some tasty options
    cmds:
      -  sqlite3 -column  -header -box  datum.db
