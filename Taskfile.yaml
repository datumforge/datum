version: '3'

includes:
  cli: 
    taskfile: ./cmd/cli
    dir: ./cmd/cli
  docker: 
    taskfile: ./docker
    dir: ./docker
    aliases: [compose]
  fga: 
    taskfile: ./fga
    dir: ./fga
  db: 
    taskfile: ./db
    dir: ./db
    aliases: [atlas]
  config: 
    taskfile: ./jsonschema

env:
  ATLAS_DB_URI: "sqlite://file?mode=memory&_fk=1"
  TEST_DB_URL: "sqlite://file:ent?mode=memory&cache=shared&_fk=1"
  TEST_FGA_URL: "localhost:8080"
  ENV: config

tasks:
  install:
    desc: installs tools and packages needed to develop against the datum repo
    cmds:
      - "brew install gomplate"
      - "go install entgo.io/ent/cmd/ent@latest"
      - "go install github.com/golangci/golangci-lint/cmd/golangci-lint@latest"
      - "curl -sSf https://atlasgo.sh | sh"
      - "curl -sSL https://rover.apollo.dev/nix/latest | sh"
      - "go get -u github.com/openfga/go-sdk"
      - "brew install openfga/tap/fga"
      - go install github.com/vektra/mockery/v2@v2.40.1
      - task: config:install
      - defer: { task: go:tidy }

  ## Generate tasks
  ent:
    desc: runs go generate against ent schema - see the entc.go file and generates the fga mock client
    cmds:
      - go generate ./...

  gqlgen:
    desc: runs gqlgen and gqlgenc commands using gen_generate.go and entc
    cmds:
      - go run github.com/99designs/gqlgen generate --verbose
      - task: tidy
      - go run ./gen_schema.go
      - go run github.com/Yamashou/gqlgenc generate --configdir schema

  generate:
    desc: a combination of the ent, graph, and gqlgen tasks which are required to fully generate the necessary graph, server, resolvers, client, etc. 
    cmds:
      - task: ent
      - task: gqlgen
      - cp ./internal/ent/generated/openapi.json ./internal/httpserve/route

  clean:generated:
    desc: cleans ent / gqlgen generated files to be re-generated
    cmds:
      - |
        echo "Enter the name of the ent schema object name to clean:"
        read clean;
        go run ./internal/entclean/main.go --path=internal/ent ${clean};
      - "rm -f schema/ent.graphql"
      - "rm -f schema.graphql"
      - "rm -rf internal/datumclient/"

  ## Go tasks
  go:lint:
    desc: runs golangci-lint, the most annoying opinionated linter ever
    cmds:
      - golangci-lint run -v

  go:test:
    desc: runs and outputs results of created go tests
    cmds:
      - go test -v ./... 

  go:test:cover:
    desc: runs and outputs results of created go tests with coverage
    aliases: [cover]
    cmds:
      - go test -v ./... -coverprofile=coverage.out
      - go tool cover -html=coverage.out

  go:fmt:
    desc: format all go code
    cmds:
      - go fmt ./...

  go:tidy:
    desc: Runs go mod tidy on the backend
    aliases: [tidy]
    cmds:
      - go mod tidy

  go:build:
    desc: Runs go build for the datum server
    cmds:
      - go build -mod=mod -o datum

  go:build-cli:
    aliases: [buildcli]
    desc: Runs go build for the datum cli
    cmds:
      - go build -mod=mod -o datum-cli ./cmd/cli 

  go:all:
    aliases: [go]
    desc: Runs all go test and lint related tasks
    cmds:
      - task: go:tidy
      - task: go:fmt
      - task: go:lint
      - task: go:test
 
  # dev tasks
  run-dev:
    dotenv: ['{{.ENV}}/.env-dev']
    desc: runs the datum server in dev mode
    cmds:
    - task: compose:redis
    - task: compose:fga
    - go run main.go serve --debug --pretty

  pr:
    desc: runs the comprehensive roll-up tasks required to ensure all files are being committed / pushed as a part of opening a PR 
    cmds:
      - task: generate
      - task: config:generate
      - task: config:docs
      - task: atlas:all
      - task: go
      - task: fga:test

  ci:
    desc: a task that runs during CI
    cmds:
      - task: ent
      - task: gqlgen
      - task: tidy
      - "git config --global --add safe.directory /workdir"
      - |
        status=$(git status --porcelain)
        if [ -n "$status" ]; then
        echo "detected git diff after running generate; please re-run tasks"
        echo "$status"
        exit 1
        fi

  clean:local:
    desc: cleans up datum.db and datum-cli local
    cmds:
      - "rm -f datum.db"
      - "rm -f datum-cli"

  email:
    deps: [shell]
    desc: a task to burn local db and bring stack back up and re-test
    cmds:
      - task: buildcli
      - sleep 5
      - ./datum-cli register --email="manderson@datum.net" --first-name="matt" --last-name="anderson" --password="mattisthebest1234!"

  shell:
    desc: open a new shell to launch server as a dep
    cmds:
      - rm -f datum.db
      - rm -f datum-cli
      - osascript -e 'tell app "Terminal" to do script "cd {{.PWD}} && task run-dev"'
    vars:
      PWD:
        sh: pwd
      
