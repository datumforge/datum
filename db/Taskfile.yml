version: '3'

tasks: 
  atlas:
    desc: runs the atlas create and lint commands
    aliases: [atlas]
    cmds:
      - task: atlas:create
      - task: atlas:lint

  atlas:create:
    desc: creates an atlas migration if one is needed based on the ent schema definitions
    cmds:
      - |
        echo "If there is no schema to generate, this will not create a file (hint: name it your branch name if you're not sure) - enter the name of the migration:"
        read migration;
        go run db/create_migrations.go ${migration};

  atlas:lint:
    desc: lints the pushed migration files
    ignore_error: true
    cmds:
      - atlas migrate lint --dev-url "sqlite://file?mode=memory&_fk=1" --dir "file://db/migrations" -w

  atlas:migrate:
    desc: pushes the generated migration files to atlas cloud
    cmds:
      - atlas migrate push datum --dev-url "sqlite://dev?mode=memory&_fk=1" --dir "file://db/migrations"

  atlas:resethash:
    desc: re-sets the checksum created by the atlas package so that a complete migration can be re-created if deleted
    cmds:
      - atlas migrate hash --dir="file://db/migrations"

  db:console:
    desc: launches an interactive terminal to the local datum db with some tasty options
    cmds:
      -  sqlite3 -column -header -box datum.db

  newschema:
    desc: generate a new ent schema from template
    silent: true
    cmds:
      - go run -mod=mod entgo.io/ent/cmd/ent new --template ./internal/ent/base/entinit.tmpl --target ./internal/ent/schema {{.CLI_ARGS}}