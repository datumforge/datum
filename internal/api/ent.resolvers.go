package api

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"
	"fmt"
	"time"

	"entgo.io/contrib/entgql"
	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/internal/ent/generated/subscription"
)

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (generated.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]generated.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// Groups is the resolver for the groups field.
func (r *queryResolver) Groups(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.GroupOrder, where *generated.GroupWhereInput) (*generated.GroupConnection, error) {
	panic(fmt.Errorf("not implemented: Groups - groups"))
}

// GroupSettingsSlice is the resolver for the groupSettingsSlice field.
func (r *queryResolver) GroupSettingsSlice(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.GroupSettingsWhereInput) (*generated.GroupSettingsConnection, error) {
	panic(fmt.Errorf("not implemented: GroupSettingsSlice - groupSettingsSlice"))
}

// Integrations is the resolver for the integrations field.
func (r *queryResolver) Integrations(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.IntegrationOrder, where *generated.IntegrationWhereInput) (*generated.IntegrationConnection, error) {
	return r.client.Integration.Query().Paginate(ctx, after, first, before, last, generated.WithIntegrationOrder(orderBy), generated.WithIntegrationFilter(where.Filter))
}

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.OrganizationOrder, where *generated.OrganizationWhereInput) (*generated.OrganizationConnection, error) {
	return r.client.Organization.Query().Paginate(ctx, after, first, before, last, generated.WithOrganizationOrder(orderBy), generated.WithOrganizationFilter(where.Filter))
}

// OrganizationSettingsSlice is the resolver for the organizationSettingsSlice field.
func (r *queryResolver) OrganizationSettingsSlice(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.OrganizationSettingsWhereInput) (*generated.OrganizationSettingsConnection, error) {
	panic(fmt.Errorf("not implemented: OrganizationSettingsSlice - organizationSettingsSlice"))
}

// Sessions is the resolver for the sessions field.
func (r *queryResolver) Sessions(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, where *generated.SessionWhereInput) (*generated.SessionConnection, error) {
	return r.client.Session.Query().Paginate(ctx, after, first, before, last, generated.WithSessionFilter(where.Filter))
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, after *entgql.Cursor[string], first *int, before *entgql.Cursor[string], last *int, orderBy *generated.UserOrder, where *generated.UserWhereInput) (*generated.UserConnection, error) {
	return r.client.User.Query().Paginate(ctx, after, first, before, last, generated.WithUserOrder(orderBy), generated.WithUserFilter(where.Filter))
}

// ID is the resolver for the id field.
func (r *subscriptionResolver) ID(ctx context.Context) (<-chan string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Tier is the resolver for the tier field.
func (r *subscriptionResolver) Tier(ctx context.Context) (<-chan subscription.Tier, error) {
	panic(fmt.Errorf("not implemented: Tier - tier"))
}

// StripeCustomerID is the resolver for the stripeCustomerID field.
func (r *subscriptionResolver) StripeCustomerID(ctx context.Context) (<-chan *string, error) {
	panic(fmt.Errorf("not implemented: StripeCustomerID - stripeCustomerID"))
}

// StripeSubscriptionID is the resolver for the stripeSubscriptionID field.
func (r *subscriptionResolver) StripeSubscriptionID(ctx context.Context) (<-chan *string, error) {
	panic(fmt.Errorf("not implemented: StripeSubscriptionID - stripeSubscriptionID"))
}

// ExpiresAt is the resolver for the expiresAt field.
func (r *subscriptionResolver) ExpiresAt(ctx context.Context) (<-chan *time.Time, error) {
	panic(fmt.Errorf("not implemented: ExpiresAt - expiresAt"))
}

// Cancelled is the resolver for the cancelled field.
func (r *subscriptionResolver) Cancelled(ctx context.Context) (<-chan bool, error) {
	panic(fmt.Errorf("not implemented: Cancelled - cancelled"))
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
