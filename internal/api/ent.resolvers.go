package api

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/datumforge/datum/internal/ent/generated"
)

// ID is the resolver for the id field.
func (r *integrationResolver) ID(ctx context.Context, obj *generated.Integration) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *membershipResolver) ID(ctx context.Context, obj *generated.Membership) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *organizationResolver) ID(ctx context.Context, obj *generated.Organization) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// Node is the resolver for the node field.
func (r *queryResolver) Node(ctx context.Context, id string) (generated.Noder, error) {
	panic(fmt.Errorf("not implemented: Node - node"))
}

// Nodes is the resolver for the nodes field.
func (r *queryResolver) Nodes(ctx context.Context, ids []string) ([]generated.Noder, error) {
	panic(fmt.Errorf("not implemented: Nodes - nodes"))
}

// ID is the resolver for the id field.
func (r *userResolver) ID(ctx context.Context, obj *generated.User) (string, error) {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// ID is the resolver for the id field.
func (r *integrationWhereInputResolver) ID(ctx context.Context, obj *generated.IntegrationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *integrationWhereInputResolver) IDNeq(ctx context.Context, obj *generated.IntegrationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *integrationWhereInputResolver) IDIn(ctx context.Context, obj *generated.IntegrationWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *integrationWhereInputResolver) IDNotIn(ctx context.Context, obj *generated.IntegrationWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *integrationWhereInputResolver) IDGt(ctx context.Context, obj *generated.IntegrationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *integrationWhereInputResolver) IDGte(ctx context.Context, obj *generated.IntegrationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *integrationWhereInputResolver) IDLt(ctx context.Context, obj *generated.IntegrationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *integrationWhereInputResolver) IDLte(ctx context.Context, obj *generated.IntegrationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *membershipWhereInputResolver) ID(ctx context.Context, obj *generated.MembershipWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *membershipWhereInputResolver) IDNeq(ctx context.Context, obj *generated.MembershipWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *membershipWhereInputResolver) IDIn(ctx context.Context, obj *generated.MembershipWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *membershipWhereInputResolver) IDNotIn(ctx context.Context, obj *generated.MembershipWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *membershipWhereInputResolver) IDGt(ctx context.Context, obj *generated.MembershipWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *membershipWhereInputResolver) IDGte(ctx context.Context, obj *generated.MembershipWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *membershipWhereInputResolver) IDLt(ctx context.Context, obj *generated.MembershipWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *membershipWhereInputResolver) IDLte(ctx context.Context, obj *generated.MembershipWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *organizationWhereInputResolver) ID(ctx context.Context, obj *generated.OrganizationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *organizationWhereInputResolver) IDNeq(ctx context.Context, obj *generated.OrganizationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *organizationWhereInputResolver) IDIn(ctx context.Context, obj *generated.OrganizationWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *organizationWhereInputResolver) IDNotIn(ctx context.Context, obj *generated.OrganizationWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *organizationWhereInputResolver) IDGt(ctx context.Context, obj *generated.OrganizationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *organizationWhereInputResolver) IDGte(ctx context.Context, obj *generated.OrganizationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *organizationWhereInputResolver) IDLt(ctx context.Context, obj *generated.OrganizationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *organizationWhereInputResolver) IDLte(ctx context.Context, obj *generated.OrganizationWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// ID is the resolver for the id field.
func (r *userWhereInputResolver) ID(ctx context.Context, obj *generated.UserWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: ID - id"))
}

// IDNeq is the resolver for the idNEQ field.
func (r *userWhereInputResolver) IDNeq(ctx context.Context, obj *generated.UserWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDNeq - idNEQ"))
}

// IDIn is the resolver for the idIn field.
func (r *userWhereInputResolver) IDIn(ctx context.Context, obj *generated.UserWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDIn - idIn"))
}

// IDNotIn is the resolver for the idNotIn field.
func (r *userWhereInputResolver) IDNotIn(ctx context.Context, obj *generated.UserWhereInput, data []string) error {
	panic(fmt.Errorf("not implemented: IDNotIn - idNotIn"))
}

// IDGt is the resolver for the idGT field.
func (r *userWhereInputResolver) IDGt(ctx context.Context, obj *generated.UserWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGt - idGT"))
}

// IDGte is the resolver for the idGTE field.
func (r *userWhereInputResolver) IDGte(ctx context.Context, obj *generated.UserWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDGte - idGTE"))
}

// IDLt is the resolver for the idLT field.
func (r *userWhereInputResolver) IDLt(ctx context.Context, obj *generated.UserWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLt - idLT"))
}

// IDLte is the resolver for the idLTE field.
func (r *userWhereInputResolver) IDLte(ctx context.Context, obj *generated.UserWhereInput, data *string) error {
	panic(fmt.Errorf("not implemented: IDLte - idLTE"))
}

// Integration returns IntegrationResolver implementation.
func (r *Resolver) Integration() IntegrationResolver { return &integrationResolver{r} }

// Membership returns MembershipResolver implementation.
func (r *Resolver) Membership() MembershipResolver { return &membershipResolver{r} }

// Organization returns OrganizationResolver implementation.
func (r *Resolver) Organization() OrganizationResolver { return &organizationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// User returns UserResolver implementation.
func (r *Resolver) User() UserResolver { return &userResolver{r} }

// IntegrationWhereInput returns IntegrationWhereInputResolver implementation.
func (r *Resolver) IntegrationWhereInput() IntegrationWhereInputResolver {
	return &integrationWhereInputResolver{r}
}

// MembershipWhereInput returns MembershipWhereInputResolver implementation.
func (r *Resolver) MembershipWhereInput() MembershipWhereInputResolver {
	return &membershipWhereInputResolver{r}
}

// OrganizationWhereInput returns OrganizationWhereInputResolver implementation.
func (r *Resolver) OrganizationWhereInput() OrganizationWhereInputResolver {
	return &organizationWhereInputResolver{r}
}

// UserWhereInput returns UserWhereInputResolver implementation.
func (r *Resolver) UserWhereInput() UserWhereInputResolver { return &userWhereInputResolver{r} }

type integrationResolver struct{ *Resolver }
type membershipResolver struct{ *Resolver }
type organizationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type userResolver struct{ *Resolver }
type integrationWhereInputResolver struct{ *Resolver }
type membershipWhereInputResolver struct{ *Resolver }
type organizationWhereInputResolver struct{ *Resolver }
type userWhereInputResolver struct{ *Resolver }
