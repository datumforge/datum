package api

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/google/uuid"
)

// CreateOrganization is the resolver for the createOrganization field.
func (r *mutationResolver) CreateOrganization(ctx context.Context, input generated.CreateOrganizationInput) (*OrganizationCreatePayload, error) {
	org, err := r.client.Organization.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &OrganizationCreatePayload{Organization: org}, nil
}

// UpdateOrganization is the resolver for the updateOrganization field.
func (r *mutationResolver) UpdateOrganization(ctx context.Context, id uuid.UUID, input generated.UpdateOrganizationInput) (*OrganizationUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: UpdateOrganization - updateOrganization"))
}

// DeleteOrganization is the resolver for the deleteOrganization field.
func (r *mutationResolver) DeleteOrganization(ctx context.Context, id uuid.UUID) (*OrganizationDeletePayload, error) {
	panic(fmt.Errorf("not implemented: DeleteOrganization - deleteOrganization"))
}

// Organization is the resolver for the organization field.
func (r *queryResolver) Organization(ctx context.Context, id uuid.UUID) (*generated.Organization, error) {
	panic(fmt.Errorf("not implemented: Organization - organization"))
}
