package api

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.40

import (
	"context"

	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/internal/ent/generated/privacy"
	_ "github.com/datumforge/datum/internal/ent/generated/runtime"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input generated.CreateUserInput) (*UserCreatePayload, error) {
	if r.authDisabled {
		ctx = privacy.DecisionContext(ctx, privacy.Allow)
	}

	// user settings are required, if this is empty generate a default setting schema
	if input.SettingID == "" {
		// sets up default user settings using schema defaults
		userSettingID, err := r.defaultUserSettings(ctx)
		if err != nil {
			return nil, err
		}

		// add the user setting ID to the input
		input.SettingID = userSettingID
	}

	user, err := r.client.User.Create().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			return nil, err
		}

		if generated.IsConstraintError(err) {
			return nil, err
		}

		r.logger.Errorw("failed to create user", "error", err)
		return nil, ErrInternalServerError
	}

	// when a user is created, we create a personal user org
	if err := r.createPersonalOrg(ctx, user); err != nil {
		return nil, ErrInternalServerError
	}

	return &UserCreatePayload{User: user}, err
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input generated.UpdateUserInput) (*UserUpdatePayload, error) {
	// TODO - add permissions checks

	user, err := r.client.User.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		r.logger.Errorw("failed to get user", "error", err)
		return nil, ErrInternalServerError
	}

	user, err = user.Update().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			return nil, err
		}

		r.logger.Errorw("failed to update user", "error", err)
		return nil, ErrInternalServerError
	}

	return &UserUpdatePayload{User: user}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*UserDeletePayload, error) {
	// TODO - add permissions checks

	if err := r.client.User.DeleteOneID(id).Exec(ctx); err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		r.logger.Errorw("failed to delete user", "error", err)
		return nil, err
	}

	return &UserDeletePayload{DeletedID: id}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*generated.User, error) {
	user, err := r.client.User.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		r.logger.Errorw("failed to get user", "error", err)
		return nil, ErrInternalServerError
	}

	return user, nil
}
