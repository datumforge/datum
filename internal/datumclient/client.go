// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package datumclient

import (
	"context"
	"net/http"
	"time"

	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/internal/ent/generated/groupsetting"
	"github.com/datumforge/datum/internal/ent/generated/usersetting"
)

type DatumClient interface {
	GetGroupByID(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupByID, error)
	GetAllGroups(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroups, error)
	CreateGroup(ctx context.Context, input CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroup, error)
	UpdateGroup(ctx context.Context, updateGroupID string, input UpdateGroupInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroup, error)
	DeleteGroup(ctx context.Context, deleteGroupID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroup, error)
	GetOrganizationByID(ctx context.Context, organizationID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationByID, error)
	GetAllOrganizations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizations, error)
	CreateOrganization(ctx context.Context, input CreateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*CreateOrganization, error)
	UpdateOrganization(ctx context.Context, updateOrganizationID string, input UpdateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganization, error)
	DeleteOrganization(ctx context.Context, deleteOrganizationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOrganization, error)
	CreatePersonalAccessToken(ctx context.Context, input CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreatePersonalAccessToken, error)
	GetPersonalAccessTokenByID(ctx context.Context, personalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetPersonalAccessTokenByID, error)
	DeletePersonalAccessToken(ctx context.Context, deletePersonalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeletePersonalAccessToken, error)
	GetUserByID(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByID, error)
	GetUserByIDWithOrgs(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByIDWithOrgs, error)
	GetAllUsers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUsers, error)
	CreateUser(ctx context.Context, input CreateUserInput, interceptors ...clientv2.RequestInterceptor) (*CreateUser, error)
	UpdateUser(ctx context.Context, updateUserID string, input UpdateUserInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUser, error)
	DeleteUser(ctx context.Context, deleteUserID string, interceptors ...clientv2.RequestInterceptor) (*DeleteUser, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) DatumClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type Query struct {
	Node                 generated.Noder               "json:\"node,omitempty\" graphql:\"node\""
	Nodes                []generated.Noder             "json:\"nodes\" graphql:\"nodes\""
	Entitlements         EntitlementConnection         "json:\"entitlements\" graphql:\"entitlements\""
	Groups               GroupConnection               "json:\"groups\" graphql:\"groups\""
	GroupSettings        GroupSettingConnection        "json:\"groupSettings\" graphql:\"groupSettings\""
	Integrations         IntegrationConnection         "json:\"integrations\" graphql:\"integrations\""
	OauthProviders       OauthProviderConnection       "json:\"oauthProviders\" graphql:\"oauthProviders\""
	Organizations        OrganizationConnection        "json:\"organizations\" graphql:\"organizations\""
	OrganizationSettings OrganizationSettingConnection "json:\"organizationSettings\" graphql:\"organizationSettings\""
	PersonalAccessTokens PersonalAccessTokenConnection "json:\"personalAccessTokens\" graphql:\"personalAccessTokens\""
	RefreshTokens        RefreshTokenConnection        "json:\"refreshTokens\" graphql:\"refreshTokens\""
	Sessions             SessionConnection             "json:\"sessions\" graphql:\"sessions\""
	Users                UserConnection                "json:\"users\" graphql:\"users\""
	UserSettings         UserSettingConnection         "json:\"userSettings\" graphql:\"userSettings\""
	Entitlement          Entitlement                   "json:\"entitlement\" graphql:\"entitlement\""
	Group                Group                         "json:\"group\" graphql:\"group\""
	GroupSetting         GroupSetting                  "json:\"groupSetting\" graphql:\"groupSetting\""
	Integration          Integration                   "json:\"integration\" graphql:\"integration\""
	OauthProvider        OauthProvider                 "json:\"oauthProvider\" graphql:\"oauthProvider\""
	Organization         Organization                  "json:\"organization\" graphql:\"organization\""
	OrganizationSetting  OrganizationSetting           "json:\"organizationSetting\" graphql:\"organizationSetting\""
	PersonalAccessToken  PersonalAccessToken           "json:\"personalAccessToken\" graphql:\"personalAccessToken\""
	RefreshToken         RefreshToken                  "json:\"refreshToken\" graphql:\"refreshToken\""
	Session              Session                       "json:\"session\" graphql:\"session\""
	User                 User                          "json:\"user\" graphql:\"user\""
	UserSetting          UserSetting                   "json:\"userSetting\" graphql:\"userSetting\""
	Service              Service                       "json:\"_service\" graphql:\"_service\""
}
type Mutation struct {
	CreateEntitlement         EntitlementCreatePayload         "json:\"createEntitlement\" graphql:\"createEntitlement\""
	UpdateEntitlement         EntitlementUpdatePayload         "json:\"updateEntitlement\" graphql:\"updateEntitlement\""
	DeleteEntitlement         EntitlementDeletePayload         "json:\"deleteEntitlement\" graphql:\"deleteEntitlement\""
	CreateGroup               GroupCreatePayload               "json:\"createGroup\" graphql:\"createGroup\""
	UpdateGroup               GroupUpdatePayload               "json:\"updateGroup\" graphql:\"updateGroup\""
	DeleteGroup               GroupDeletePayload               "json:\"deleteGroup\" graphql:\"deleteGroup\""
	CreateGroupSetting        GroupSettingCreatePayload        "json:\"createGroupSetting\" graphql:\"createGroupSetting\""
	UpdateGroupSetting        GroupSettingUpdatePayload        "json:\"updateGroupSetting\" graphql:\"updateGroupSetting\""
	DeleteGroupSetting        GroupSettingDeletePayload        "json:\"deleteGroupSetting\" graphql:\"deleteGroupSetting\""
	CreateIntegration         IntegrationCreatePayload         "json:\"createIntegration\" graphql:\"createIntegration\""
	UpdateIntegration         IntegrationUpdatePayload         "json:\"updateIntegration\" graphql:\"updateIntegration\""
	DeleteIntegration         IntegrationDeletePayload         "json:\"deleteIntegration\" graphql:\"deleteIntegration\""
	CreateOauthProvider       OauthProviderCreatePayload       "json:\"createOauthProvider\" graphql:\"createOauthProvider\""
	UpdateOauthProvider       OauthProviderUpdatePayload       "json:\"updateOauthProvider\" graphql:\"updateOauthProvider\""
	DeleteOauthProvider       OauthProviderDeletePayload       "json:\"deleteOauthProvider\" graphql:\"deleteOauthProvider\""
	CreateOrganization        OrganizationCreatePayload        "json:\"createOrganization\" graphql:\"createOrganization\""
	UpdateOrganization        OrganizationUpdatePayload        "json:\"updateOrganization\" graphql:\"updateOrganization\""
	DeleteOrganization        OrganizationDeletePayload        "json:\"deleteOrganization\" graphql:\"deleteOrganization\""
	CreateOrganizationSetting OrganizationSettingCreatePayload "json:\"createOrganizationSetting\" graphql:\"createOrganizationSetting\""
	UpdateOrganizationSetting OrganizationSettingUpdatePayload "json:\"updateOrganizationSetting\" graphql:\"updateOrganizationSetting\""
	DeleteOrganizationSetting OrganizationSettingDeletePayload "json:\"deleteOrganizationSetting\" graphql:\"deleteOrganizationSetting\""
	CreatePersonalAccessToken PersonalAccessTokenCreatePayload "json:\"createPersonalAccessToken\" graphql:\"createPersonalAccessToken\""
	UpdatePersonalAccessToken PersonalAccessTokenUpdatePayload "json:\"updatePersonalAccessToken\" graphql:\"updatePersonalAccessToken\""
	DeletePersonalAccessToken PersonalAccessTokenDeletePayload "json:\"deletePersonalAccessToken\" graphql:\"deletePersonalAccessToken\""
	CreateRefreshToken        RefreshTokenCreatePayload        "json:\"createRefreshToken\" graphql:\"createRefreshToken\""
	UpdateRefreshToken        RefreshTokenUpdatePayload        "json:\"updateRefreshToken\" graphql:\"updateRefreshToken\""
	DeleteRefreshToken        RefreshTokenDeletePayload        "json:\"deleteRefreshToken\" graphql:\"deleteRefreshToken\""
	CreateSession             SessionCreatePayload             "json:\"createSession\" graphql:\"createSession\""
	UpdateSession             SessionUpdatePayload             "json:\"updateSession\" graphql:\"updateSession\""
	DeleteSession             SessionDeletePayload             "json:\"deleteSession\" graphql:\"deleteSession\""
	CreateUser                UserCreatePayload                "json:\"createUser\" graphql:\"createUser\""
	UpdateUser                UserUpdatePayload                "json:\"updateUser\" graphql:\"updateUser\""
	DeleteUser                UserDeletePayload                "json:\"deleteUser\" graphql:\"deleteUser\""
	CreateUserSetting         UserSettingCreatePayload         "json:\"createUserSetting\" graphql:\"createUserSetting\""
	UpdateUserSetting         UserSettingUpdatePayload         "json:\"updateUserSetting\" graphql:\"updateUserSetting\""
	DeleteUserSetting         UserSettingDeletePayload         "json:\"deleteUserSetting\" graphql:\"deleteUserSetting\""
}
type GetGroupByID_Group_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetGroupByID_Group_Owner) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Owner{}
	}
	return t.ID
}

type GetGroupByID_Group_Setting struct {
	ID           string                  "json:\"id\" graphql:\"id\""
	CreatedAt    time.Time               "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt    time.Time               "json:\"updatedAt\" graphql:\"updatedAt\""
	CreatedBy    *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy    *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   groupsetting.Visibility "json:\"visibility\" graphql:\"visibility\""
	JoinPolicy   groupsetting.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToSlack  bool                    "json:\"syncToSlack\" graphql:\"syncToSlack\""
	SyncToGithub bool                    "json:\"syncToGithub\" graphql:\"syncToGithub\""
	Tags         []string                "json:\"tags\" graphql:\"tags\""
}

func (t *GetGroupByID_Group_Setting) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return &t.CreatedAt
}
func (t *GetGroupByID_Group_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return &t.UpdatedAt
}
func (t *GetGroupByID_Group_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.CreatedBy
}
func (t *GetGroupByID_Group_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetGroupByID_Group_Setting) GetVisibility() *groupsetting.Visibility {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return &t.Visibility
}
func (t *GetGroupByID_Group_Setting) GetJoinPolicy() *groupsetting.JoinPolicy {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupByID_Group_Setting) GetSyncToSlack() bool {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.SyncToSlack
}
func (t *GetGroupByID_Group_Setting) GetSyncToGithub() bool {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.SyncToGithub
}
func (t *GetGroupByID_Group_Setting) GetTags() []string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.Tags
}

type GetGroupByID_Group_Users struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	Email       string "json:\"email\" graphql:\"email\""
}

func (t *GetGroupByID_Group_Users) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Users{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Users) GetDisplayName() string {
	if t == nil {
		t = &GetGroupByID_Group_Users{}
	}
	return t.DisplayName
}
func (t *GetGroupByID_Group_Users) GetEmail() string {
	if t == nil {
		t = &GetGroupByID_Group_Users{}
	}
	return t.Email
}

type GetGroupByID_Group struct {
	CreatedAt   time.Time                   "json:\"createdAt\" graphql:\"createdAt\""
	CreatedBy   *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description string                      "json:\"description\" graphql:\"description\""
	DisplayName string                      "json:\"displayName\" graphql:\"displayName\""
	ID          string                      "json:\"id\" graphql:\"id\""
	LogoURL     string                      "json:\"logoURL\" graphql:\"logoURL\""
	Name        string                      "json:\"name\" graphql:\"name\""
	Owner       GetGroupByID_Group_Owner    "json:\"owner\" graphql:\"owner\""
	Setting     GetGroupByID_Group_Setting  "json:\"setting\" graphql:\"setting\""
	UpdatedAt   time.Time                   "json:\"updatedAt\" graphql:\"updatedAt\""
	UpdatedBy   *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Users       []*GetGroupByID_Group_Users "json:\"users,omitempty\" graphql:\"users\""
}

func (t *GetGroupByID_Group) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return &t.CreatedAt
}
func (t *GetGroupByID_Group) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.CreatedBy
}
func (t *GetGroupByID_Group) GetDescription() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Description
}
func (t *GetGroupByID_Group) GetDisplayName() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.DisplayName
}
func (t *GetGroupByID_Group) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.ID
}
func (t *GetGroupByID_Group) GetLogoURL() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.LogoURL
}
func (t *GetGroupByID_Group) GetName() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Name
}
func (t *GetGroupByID_Group) GetOwner() *GetGroupByID_Group_Owner {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return &t.Owner
}
func (t *GetGroupByID_Group) GetSetting() *GetGroupByID_Group_Setting {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return &t.Setting
}
func (t *GetGroupByID_Group) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return &t.UpdatedAt
}
func (t *GetGroupByID_Group) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.UpdatedBy
}
func (t *GetGroupByID_Group) GetUsers() []*GetGroupByID_Group_Users {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Users
}

type GetAllGroups_Groups_Edges_Node_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllGroups_Groups_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Owner{}
	}
	return t.ID
}

type GetAllGroups_Groups_Edges_Node_Setting struct {
	ID           string                  "json:\"id\" graphql:\"id\""
	CreatedAt    time.Time               "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt    time.Time               "json:\"updatedAt\" graphql:\"updatedAt\""
	CreatedBy    *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy    *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   groupsetting.Visibility "json:\"visibility\" graphql:\"visibility\""
	JoinPolicy   groupsetting.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToSlack  bool                    "json:\"syncToSlack\" graphql:\"syncToSlack\""
	SyncToGithub bool                    "json:\"syncToGithub\" graphql:\"syncToGithub\""
	Tags         []string                "json:\"tags\" graphql:\"tags\""
}

func (t *GetAllGroups_Groups_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return &t.CreatedAt
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return &t.UpdatedAt
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetVisibility() *groupsetting.Visibility {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return &t.Visibility
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetJoinPolicy() *groupsetting.JoinPolicy {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return &t.JoinPolicy
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetSyncToSlack() bool {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToSlack
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetSyncToGithub() bool {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToGithub
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetTags() []string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.Tags
}

type GetAllGroups_Groups_Edges_Node_Users struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	Email       string "json:\"email\" graphql:\"email\""
}

func (t *GetAllGroups_Groups_Edges_Node_Users) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Users{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node_Users) GetDisplayName() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Users{}
	}
	return t.DisplayName
}
func (t *GetAllGroups_Groups_Edges_Node_Users) GetEmail() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Users{}
	}
	return t.Email
}

type GetAllGroups_Groups_Edges_Node struct {
	CreatedAt   time.Time                               "json:\"createdAt\" graphql:\"createdAt\""
	CreatedBy   *string                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description string                                  "json:\"description\" graphql:\"description\""
	DisplayName string                                  "json:\"displayName\" graphql:\"displayName\""
	ID          string                                  "json:\"id\" graphql:\"id\""
	LogoURL     string                                  "json:\"logoURL\" graphql:\"logoURL\""
	Name        string                                  "json:\"name\" graphql:\"name\""
	Owner       GetAllGroups_Groups_Edges_Node_Owner    "json:\"owner\" graphql:\"owner\""
	Setting     GetAllGroups_Groups_Edges_Node_Setting  "json:\"setting\" graphql:\"setting\""
	UpdatedAt   time.Time                               "json:\"updatedAt\" graphql:\"updatedAt\""
	UpdatedBy   *string                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Users       []*GetAllGroups_Groups_Edges_Node_Users "json:\"users,omitempty\" graphql:\"users\""
}

func (t *GetAllGroups_Groups_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return &t.CreatedAt
}
func (t *GetAllGroups_Groups_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroups_Groups_Edges_Node) GetDescription() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllGroups_Groups_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllGroups_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node) GetLogoURL() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetAllGroups_Groups_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllGroups_Groups_Edges_Node) GetOwner() *GetAllGroups_Groups_Edges_Node_Owner {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return &t.Owner
}
func (t *GetAllGroups_Groups_Edges_Node) GetSetting() *GetAllGroups_Groups_Edges_Node_Setting {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return &t.Setting
}
func (t *GetAllGroups_Groups_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return &t.UpdatedAt
}
func (t *GetAllGroups_Groups_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllGroups_Groups_Edges_Node) GetUsers() []*GetAllGroups_Groups_Edges_Node_Users {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Users
}

type GetAllGroups_Groups_Edges struct {
	Node *GetAllGroups_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroups_Groups_Edges) GetNode() *GetAllGroups_Groups_Edges_Node {
	if t == nil {
		t = &GetAllGroups_Groups_Edges{}
	}
	return t.Node
}

type GetAllGroups_Groups struct {
	Edges []*GetAllGroups_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllGroups_Groups) GetEdges() []*GetAllGroups_Groups_Edges {
	if t == nil {
		t = &GetAllGroups_Groups{}
	}
	return t.Edges
}

type CreateGroup_CreateGroup_Group_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateGroup_CreateGroup_Group_Owner) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Owner{}
	}
	return t.ID
}

type CreateGroup_CreateGroup_Group_Setting struct {
	ID           string                  "json:\"id\" graphql:\"id\""
	CreatedAt    time.Time               "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt    time.Time               "json:\"updatedAt\" graphql:\"updatedAt\""
	CreatedBy    *string                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy    *string                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   groupsetting.Visibility "json:\"visibility\" graphql:\"visibility\""
	JoinPolicy   groupsetting.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToSlack  bool                    "json:\"syncToSlack\" graphql:\"syncToSlack\""
	SyncToGithub bool                    "json:\"syncToGithub\" graphql:\"syncToGithub\""
	Tags         []string                "json:\"tags\" graphql:\"tags\""
}

func (t *CreateGroup_CreateGroup_Group_Setting) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return &t.CreatedAt
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return &t.UpdatedAt
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.CreatedBy
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.UpdatedBy
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetVisibility() *groupsetting.Visibility {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return &t.Visibility
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetJoinPolicy() *groupsetting.JoinPolicy {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return &t.JoinPolicy
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetSyncToSlack() bool {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.SyncToSlack
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetSyncToGithub() bool {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.SyncToGithub
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetTags() []string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.Tags
}

type CreateGroup_CreateGroup_Group_Users struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	Email       string "json:\"email\" graphql:\"email\""
}

func (t *CreateGroup_CreateGroup_Group_Users) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Users{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Users) GetDisplayName() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Users{}
	}
	return t.DisplayName
}
func (t *CreateGroup_CreateGroup_Group_Users) GetEmail() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Users{}
	}
	return t.Email
}

type CreateGroup_CreateGroup_Group struct {
	CreatedAt   time.Time                              "json:\"createdAt\" graphql:\"createdAt\""
	CreatedBy   *string                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description string                                 "json:\"description\" graphql:\"description\""
	DisplayName string                                 "json:\"displayName\" graphql:\"displayName\""
	ID          string                                 "json:\"id\" graphql:\"id\""
	LogoURL     string                                 "json:\"logoURL\" graphql:\"logoURL\""
	Name        string                                 "json:\"name\" graphql:\"name\""
	Owner       CreateGroup_CreateGroup_Group_Owner    "json:\"owner\" graphql:\"owner\""
	Setting     CreateGroup_CreateGroup_Group_Setting  "json:\"setting\" graphql:\"setting\""
	UpdatedAt   time.Time                              "json:\"updatedAt\" graphql:\"updatedAt\""
	UpdatedBy   *string                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Users       []*CreateGroup_CreateGroup_Group_Users "json:\"users,omitempty\" graphql:\"users\""
}

func (t *CreateGroup_CreateGroup_Group) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return &t.CreatedAt
}
func (t *CreateGroup_CreateGroup_Group) GetCreatedBy() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.CreatedBy
}
func (t *CreateGroup_CreateGroup_Group) GetDescription() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Description
}
func (t *CreateGroup_CreateGroup_Group) GetDisplayName() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.DisplayName
}
func (t *CreateGroup_CreateGroup_Group) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group) GetLogoURL() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.LogoURL
}
func (t *CreateGroup_CreateGroup_Group) GetName() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Name
}
func (t *CreateGroup_CreateGroup_Group) GetOwner() *CreateGroup_CreateGroup_Group_Owner {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return &t.Owner
}
func (t *CreateGroup_CreateGroup_Group) GetSetting() *CreateGroup_CreateGroup_Group_Setting {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return &t.Setting
}
func (t *CreateGroup_CreateGroup_Group) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return &t.UpdatedAt
}
func (t *CreateGroup_CreateGroup_Group) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.UpdatedBy
}
func (t *CreateGroup_CreateGroup_Group) GetUsers() []*CreateGroup_CreateGroup_Group_Users {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Users
}

type CreateGroup_CreateGroup struct {
	Group CreateGroup_CreateGroup_Group "json:\"group\" graphql:\"group\""
}

func (t *CreateGroup_CreateGroup) GetGroup() *CreateGroup_CreateGroup_Group {
	if t == nil {
		t = &CreateGroup_CreateGroup{}
	}
	return &t.Group
}

type UpdateGroup_UpdateGroup_Group struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	Description string "json:\"description\" graphql:\"description\""
}

func (t *UpdateGroup_UpdateGroup_Group) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group) GetName() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Name
}
func (t *UpdateGroup_UpdateGroup_Group) GetDisplayName() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.DisplayName
}
func (t *UpdateGroup_UpdateGroup_Group) GetDescription() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Description
}

type UpdateGroup_UpdateGroup struct {
	Group UpdateGroup_UpdateGroup_Group "json:\"group\" graphql:\"group\""
}

func (t *UpdateGroup_UpdateGroup) GetGroup() *UpdateGroup_UpdateGroup_Group {
	if t == nil {
		t = &UpdateGroup_UpdateGroup{}
	}
	return &t.Group
}

type DeleteGroup_DeleteGroup struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteGroup_DeleteGroup) GetDeletedID() string {
	if t == nil {
		t = &DeleteGroup_DeleteGroup{}
	}
	return t.DeletedID
}

type GetOrganizationByID_Organization_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationByID_Organization_Parent) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Parent{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Parent) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Parent{}
	}
	return t.Name
}

type GetOrganizationByID_Organization_Setting struct {
	ID             string    "json:\"id\" graphql:\"id\""
	CreatedAt      time.Time "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt      time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
	CreatedBy      *string   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy      *string   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Domains        []string  "json:\"domains\" graphql:\"domains\""
	SsoCert        string    "json:\"ssoCert\" graphql:\"ssoCert\""
	SsoEntrypoint  string    "json:\"ssoEntrypoint\" graphql:\"ssoEntrypoint\""
	SsoIssuer      string    "json:\"ssoIssuer\" graphql:\"ssoIssuer\""
	BillingContact string    "json:\"billingContact\" graphql:\"billingContact\""
	BillingEmail   string    "json:\"billingEmail\" graphql:\"billingEmail\""
	BillingPhone   string    "json:\"billingPhone\" graphql:\"billingPhone\""
	BillingAddress string    "json:\"billingAddress\" graphql:\"billingAddress\""
	TaxIdentifier  string    "json:\"taxIdentifier\" graphql:\"taxIdentifier\""
	Tags           []string  "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetOrganizationByID_Organization_Setting) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return &t.CreatedAt
}
func (t *GetOrganizationByID_Organization_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return &t.UpdatedAt
}
func (t *GetOrganizationByID_Organization_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationByID_Organization_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetOrganizationByID_Organization_Setting) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.Domains
}
func (t *GetOrganizationByID_Organization_Setting) GetSsoCert() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.SsoCert
}
func (t *GetOrganizationByID_Organization_Setting) GetSsoEntrypoint() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.SsoEntrypoint
}
func (t *GetOrganizationByID_Organization_Setting) GetSsoIssuer() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.SsoIssuer
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingContact() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingContact
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingEmail() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingPhone() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingAddress() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationByID_Organization_Setting) GetTaxIdentifier() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationByID_Organization_Setting) GetTags() []string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.Tags
}

type GetOrganizationByID_Organization struct {
	ID          string                                    "json:\"id\" graphql:\"id\""
	Name        string                                    "json:\"name\" graphql:\"name\""
	DisplayName string                                    "json:\"displayName\" graphql:\"displayName\""
	Description *string                                   "json:\"description,omitempty\" graphql:\"description\""
	Parent      *GetOrganizationByID_Organization_Parent  "json:\"parent,omitempty\" graphql:\"parent\""
	Setting     *GetOrganizationByID_Organization_Setting "json:\"setting,omitempty\" graphql:\"setting\""
	CreatedAt   time.Time                                 "json:\"createdAt\" graphql:\"createdAt\""
	CreatedBy   *string                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt   time.Time                                 "json:\"updatedAt\" graphql:\"updatedAt\""
	UpdatedBy   *string                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationByID_Organization) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Name
}
func (t *GetOrganizationByID_Organization) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization) GetDescription() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Description
}
func (t *GetOrganizationByID_Organization) GetParent() *GetOrganizationByID_Organization_Parent {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Parent
}
func (t *GetOrganizationByID_Organization) GetSetting() *GetOrganizationByID_Organization_Setting {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Setting
}
func (t *GetOrganizationByID_Organization) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return &t.CreatedAt
}
func (t *GetOrganizationByID_Organization) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationByID_Organization) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return &t.UpdatedAt
}
func (t *GetOrganizationByID_Organization) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.UpdatedBy
}

type GetAllOrganizations_Organizations_Edges_Node_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Parent) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Parent{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Parent) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Parent{}
	}
	return t.Name
}

type GetAllOrganizations_Organizations_Edges_Node_Setting struct {
	ID             string    "json:\"id\" graphql:\"id\""
	CreatedAt      time.Time "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt      time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
	CreatedBy      *string   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy      *string   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Domains        []string  "json:\"domains\" graphql:\"domains\""
	SsoCert        string    "json:\"ssoCert\" graphql:\"ssoCert\""
	SsoEntrypoint  string    "json:\"ssoEntrypoint\" graphql:\"ssoEntrypoint\""
	SsoIssuer      string    "json:\"ssoIssuer\" graphql:\"ssoIssuer\""
	BillingContact string    "json:\"billingContact\" graphql:\"billingContact\""
	BillingEmail   string    "json:\"billingEmail\" graphql:\"billingEmail\""
	BillingPhone   string    "json:\"billingPhone\" graphql:\"billingPhone\""
	BillingAddress string    "json:\"billingAddress\" graphql:\"billingAddress\""
	TaxIdentifier  string    "json:\"taxIdentifier\" graphql:\"taxIdentifier\""
	Tags           []string  "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return &t.CreatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return &t.UpdatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetDomains() []string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.Domains
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetSsoCert() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.SsoCert
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetSsoEntrypoint() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.SsoEntrypoint
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetSsoIssuer() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.SsoIssuer
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingContact() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingContact
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingEmail() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingEmail
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingPhone() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingPhone
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingAddress() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingAddress
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetTaxIdentifier() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.TaxIdentifier
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.Tags
}

type GetAllOrganizations_Organizations_Edges_Node struct {
	ID          string                                                "json:\"id\" graphql:\"id\""
	Name        string                                                "json:\"name\" graphql:\"name\""
	DisplayName string                                                "json:\"displayName\" graphql:\"displayName\""
	Description *string                                               "json:\"description,omitempty\" graphql:\"description\""
	Parent      *GetAllOrganizations_Organizations_Edges_Node_Parent  "json:\"parent,omitempty\" graphql:\"parent\""
	Setting     *GetAllOrganizations_Organizations_Edges_Node_Setting "json:\"setting,omitempty\" graphql:\"setting\""
	CreatedAt   time.Time                                             "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt   time.Time                                             "json:\"updatedAt\" graphql:\"updatedAt\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetParent() *GetAllOrganizations_Organizations_Edges_Node_Parent {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Parent
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetSetting() *GetAllOrganizations_Organizations_Edges_Node_Setting {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Setting
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return &t.CreatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return &t.UpdatedAt
}

type GetAllOrganizations_Organizations_Edges struct {
	Node *GetAllOrganizations_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizations_Organizations_Edges) GetNode() *GetAllOrganizations_Organizations_Edges_Node {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges{}
	}
	return t.Node
}

type GetAllOrganizations_Organizations struct {
	Edges []*GetAllOrganizations_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizations_Organizations) GetEdges() []*GetAllOrganizations_Organizations_Edges {
	if t == nil {
		t = &GetAllOrganizations_Organizations{}
	}
	return t.Edges
}

type CreateOrganization_CreateOrganization_Organization_Setting struct {
	ID             string    "json:\"id\" graphql:\"id\""
	CreatedAt      time.Time "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt      time.Time "json:\"updatedAt\" graphql:\"updatedAt\""
	CreatedBy      *string   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy      *string   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Domains        []string  "json:\"domains\" graphql:\"domains\""
	SsoCert        string    "json:\"ssoCert\" graphql:\"ssoCert\""
	SsoEntrypoint  string    "json:\"ssoEntrypoint\" graphql:\"ssoEntrypoint\""
	SsoIssuer      string    "json:\"ssoIssuer\" graphql:\"ssoIssuer\""
	BillingContact string    "json:\"billingContact\" graphql:\"billingContact\""
	BillingEmail   string    "json:\"billingEmail\" graphql:\"billingEmail\""
	BillingPhone   string    "json:\"billingPhone\" graphql:\"billingPhone\""
	BillingAddress string    "json:\"billingAddress\" graphql:\"billingAddress\""
	TaxIdentifier  string    "json:\"taxIdentifier\" graphql:\"taxIdentifier\""
	Tags           []string  "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return &t.CreatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return &t.UpdatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.CreatedBy
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.UpdatedBy
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetDomains() []string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.Domains
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetSsoCert() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.SsoCert
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetSsoEntrypoint() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.SsoEntrypoint
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetSsoIssuer() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.SsoIssuer
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingContact() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingContact
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingEmail() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingEmail
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingPhone() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingPhone
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingAddress() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingAddress
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetTaxIdentifier() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.TaxIdentifier
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetTags() []string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.Tags
}

type CreateOrganization_CreateOrganization_Organization_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Parent) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Parent{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization_Parent) GetName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Parent{}
	}
	return t.Name
}

type CreateOrganization_CreateOrganization_Organization struct {
	ID          string                                                      "json:\"id\" graphql:\"id\""
	Name        string                                                      "json:\"name\" graphql:\"name\""
	DisplayName string                                                      "json:\"displayName\" graphql:\"displayName\""
	Description *string                                                     "json:\"description,omitempty\" graphql:\"description\""
	CreatedAt   time.Time                                                   "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt   time.Time                                                   "json:\"updatedAt\" graphql:\"updatedAt\""
	Setting     *CreateOrganization_CreateOrganization_Organization_Setting "json:\"setting,omitempty\" graphql:\"setting\""
	Parent      *CreateOrganization_CreateOrganization_Organization_Parent  "json:\"parent,omitempty\" graphql:\"parent\""
}

func (t *CreateOrganization_CreateOrganization_Organization) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization) GetName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Name
}
func (t *CreateOrganization_CreateOrganization_Organization) GetDisplayName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.DisplayName
}
func (t *CreateOrganization_CreateOrganization_Organization) GetDescription() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Description
}
func (t *CreateOrganization_CreateOrganization_Organization) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return &t.CreatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return &t.UpdatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization) GetSetting() *CreateOrganization_CreateOrganization_Organization_Setting {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Setting
}
func (t *CreateOrganization_CreateOrganization_Organization) GetParent() *CreateOrganization_CreateOrganization_Organization_Parent {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Parent
}

type CreateOrganization_CreateOrganization struct {
	Organization CreateOrganization_CreateOrganization_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *CreateOrganization_CreateOrganization) GetOrganization() *CreateOrganization_CreateOrganization_Organization {
	if t == nil {
		t = &CreateOrganization_CreateOrganization{}
	}
	return &t.Organization
}

type UpdateOrganization_UpdateOrganization_Organization struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Name
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetDisplayName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.DisplayName
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetDescription() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Description
}

type UpdateOrganization_UpdateOrganization struct {
	Organization UpdateOrganization_UpdateOrganization_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *UpdateOrganization_UpdateOrganization) GetOrganization() *UpdateOrganization_UpdateOrganization_Organization {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization{}
	}
	return &t.Organization
}

type DeleteOrganization_DeleteOrganization struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteOrganization_DeleteOrganization) GetDeletedID() string {
	if t == nil {
		t = &DeleteOrganization_DeleteOrganization{}
	}
	return t.DeletedID
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner) GetID() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner{}
	}
	return t.ID
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken struct {
	Owner     CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner "json:\"owner\" graphql:\"owner\""
	Abilities []string                                                                      "json:\"abilities,omitempty\" graphql:\"abilities\""
	Name      string                                                                        "json:\"name\" graphql:\"name\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetOwner() *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return &t.Owner
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetAbilities() []string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Abilities
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetName() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Name
}

type CreatePersonalAccessToken_CreatePersonalAccessToken struct {
	PersonalAccessToken CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken "json:\"PersonalAccessToken\" graphql:\"PersonalAccessToken\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken) GetPersonalAccessToken() *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken{}
	}
	return &t.PersonalAccessToken
}

type GetPersonalAccessTokenByID_PersonalAccessToken_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetPersonalAccessTokenByID_PersonalAccessToken_Owner) GetID() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken_Owner{}
	}
	return t.ID
}

type GetPersonalAccessTokenByID_PersonalAccessToken struct {
	ID           string                                               "json:\"id\" graphql:\"id\""
	CreatedAt    time.Time                                            "json:\"createdAt\" graphql:\"createdAt\""
	UpdatedAt    time.Time                                            "json:\"updatedAt\" graphql:\"updatedAt\""
	CreatedBy    *string                                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy    *string                                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Name         string                                               "json:\"name\" graphql:\"name\""
	Owner        GetPersonalAccessTokenByID_PersonalAccessToken_Owner "json:\"owner\" graphql:\"owner\""
	Abilities    []string                                             "json:\"abilities,omitempty\" graphql:\"abilities\""
	ExpirationAt time.Time                                            "json:\"expirationAt\" graphql:\"expirationAt\""
	LastUsedAt   *time.Time                                           "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
}

func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.ID
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return &t.CreatedAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return &t.UpdatedAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetCreatedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.CreatedBy
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetUpdatedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.UpdatedBy
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetName() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Name
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetOwner() *GetPersonalAccessTokenByID_PersonalAccessToken_Owner {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return &t.Owner
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetAbilities() []string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Abilities
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetExpirationAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return &t.ExpirationAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.LastUsedAt
}

type DeletePersonalAccessToken_DeletePersonalAccessToken struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeletePersonalAccessToken_DeletePersonalAccessToken) GetDeletedID() string {
	if t == nil {
		t = &DeletePersonalAccessToken_DeletePersonalAccessToken{}
	}
	return t.DeletedID
}

type GetUserByID_User_Setting struct {
	Status         usersetting.Status "json:\"status\" graphql:\"status\""
	Locked         bool               "json:\"locked\" graphql:\"locked\""
	EmailConfirmed bool               "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
}

func (t *GetUserByID_User_Setting) GetStatus() *usersetting.Status {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return &t.Status
}
func (t *GetUserByID_User_Setting) GetLocked() bool {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.Locked
}
func (t *GetUserByID_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.EmailConfirmed
}

type GetUserByID_User struct {
	ID          string                   "json:\"id\" graphql:\"id\""
	FirstName   string                   "json:\"firstName\" graphql:\"firstName\""
	LastName    string                   "json:\"lastName\" graphql:\"lastName\""
	Email       string                   "json:\"email\" graphql:\"email\""
	DisplayName string                   "json:\"displayName\" graphql:\"displayName\""
	Setting     GetUserByID_User_Setting "json:\"setting\" graphql:\"setting\""
}

func (t *GetUserByID_User) GetID() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.ID
}
func (t *GetUserByID_User) GetFirstName() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.FirstName
}
func (t *GetUserByID_User) GetLastName() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.LastName
}
func (t *GetUserByID_User) GetEmail() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Email
}
func (t *GetUserByID_User) GetDisplayName() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.DisplayName
}
func (t *GetUserByID_User) GetSetting() *GetUserByID_User_Setting {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return &t.Setting
}

type GetUserByIDWithOrgs_User_Setting struct {
	Status         usersetting.Status "json:\"status\" graphql:\"status\""
	Locked         bool               "json:\"locked\" graphql:\"locked\""
	EmailConfirmed bool               "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
}

func (t *GetUserByIDWithOrgs_User_Setting) GetStatus() *usersetting.Status {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return &t.Status
}
func (t *GetUserByIDWithOrgs_User_Setting) GetLocked() bool {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.Locked
}
func (t *GetUserByIDWithOrgs_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.EmailConfirmed
}

type GetUserByIDWithOrgs_User_Organizations struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *GetUserByIDWithOrgs_User_Organizations) GetID() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Organizations{}
	}
	return t.ID
}
func (t *GetUserByIDWithOrgs_User_Organizations) GetName() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Organizations{}
	}
	return t.Name
}
func (t *GetUserByIDWithOrgs_User_Organizations) GetDisplayName() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Organizations{}
	}
	return t.DisplayName
}

type GetUserByIDWithOrgs_User struct {
	ID            string                                    "json:\"id\" graphql:\"id\""
	FirstName     string                                    "json:\"firstName\" graphql:\"firstName\""
	LastName      string                                    "json:\"lastName\" graphql:\"lastName\""
	Email         string                                    "json:\"email\" graphql:\"email\""
	DisplayName   string                                    "json:\"displayName\" graphql:\"displayName\""
	Setting       GetUserByIDWithOrgs_User_Setting          "json:\"setting\" graphql:\"setting\""
	Organizations []*GetUserByIDWithOrgs_User_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *GetUserByIDWithOrgs_User) GetID() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.ID
}
func (t *GetUserByIDWithOrgs_User) GetFirstName() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.FirstName
}
func (t *GetUserByIDWithOrgs_User) GetLastName() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.LastName
}
func (t *GetUserByIDWithOrgs_User) GetEmail() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.Email
}
func (t *GetUserByIDWithOrgs_User) GetDisplayName() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.DisplayName
}
func (t *GetUserByIDWithOrgs_User) GetSetting() *GetUserByIDWithOrgs_User_Setting {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return &t.Setting
}
func (t *GetUserByIDWithOrgs_User) GetOrganizations() []*GetUserByIDWithOrgs_User_Organizations {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.Organizations
}

type GetAllUsers_Users_Edges_Node_Setting struct {
	Status         usersetting.Status "json:\"status\" graphql:\"status\""
	Locked         bool               "json:\"locked\" graphql:\"locked\""
	EmailConfirmed bool               "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
}

func (t *GetAllUsers_Users_Edges_Node_Setting) GetStatus() *usersetting.Status {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return &t.Status
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetLocked() bool {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.Locked
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.EmailConfirmed
}

type GetAllUsers_Users_Edges_Node struct {
	ID          string                               "json:\"id\" graphql:\"id\""
	FirstName   string                               "json:\"firstName\" graphql:\"firstName\""
	LastName    string                               "json:\"lastName\" graphql:\"lastName\""
	Email       string                               "json:\"email\" graphql:\"email\""
	DisplayName string                               "json:\"displayName\" graphql:\"displayName\""
	Setting     GetAllUsers_Users_Edges_Node_Setting "json:\"setting\" graphql:\"setting\""
}

func (t *GetAllUsers_Users_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUsers_Users_Edges_Node) GetFirstName() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.FirstName
}
func (t *GetAllUsers_Users_Edges_Node) GetLastName() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.LastName
}
func (t *GetAllUsers_Users_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllUsers_Users_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllUsers_Users_Edges_Node) GetSetting() *GetAllUsers_Users_Edges_Node_Setting {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return &t.Setting
}

type GetAllUsers_Users_Edges struct {
	Node *GetAllUsers_Users_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUsers_Users_Edges) GetNode() *GetAllUsers_Users_Edges_Node {
	if t == nil {
		t = &GetAllUsers_Users_Edges{}
	}
	return t.Node
}

type GetAllUsers_Users struct {
	Edges []*GetAllUsers_Users_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllUsers_Users) GetEdges() []*GetAllUsers_Users_Edges {
	if t == nil {
		t = &GetAllUsers_Users{}
	}
	return t.Edges
}

type CreateUser_CreateUser_User_Organizations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateUser_CreateUser_User_Organizations) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Organizations{}
	}
	return t.ID
}

type CreateUser_CreateUser_User_Groups struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateUser_CreateUser_User_Groups) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Groups{}
	}
	return t.ID
}

type CreateUser_CreateUser_User_Setting struct {
	Status         usersetting.Status "json:\"status\" graphql:\"status\""
	Locked         bool               "json:\"locked\" graphql:\"locked\""
	EmailConfirmed bool               "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
}

func (t *CreateUser_CreateUser_User_Setting) GetStatus() *usersetting.Status {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return &t.Status
}
func (t *CreateUser_CreateUser_User_Setting) GetLocked() bool {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.Locked
}
func (t *CreateUser_CreateUser_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.EmailConfirmed
}

type CreateUser_CreateUser_User struct {
	Email           string                                      "json:\"email\" graphql:\"email\""
	FirstName       string                                      "json:\"firstName\" graphql:\"firstName\""
	LastName        string                                      "json:\"lastName\" graphql:\"lastName\""
	DisplayName     string                                      "json:\"displayName\" graphql:\"displayName\""
	AvatarRemoteURL *string                                     "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarLocalFile *string                                     "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	Password        *string                                     "json:\"password,omitempty\" graphql:\"password\""
	Sub             *string                                     "json:\"sub,omitempty\" graphql:\"sub\""
	Oauth           bool                                        "json:\"oauth\" graphql:\"oauth\""
	Organizations   []*CreateUser_CreateUser_User_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
	Groups          []*CreateUser_CreateUser_User_Groups        "json:\"groups,omitempty\" graphql:\"groups\""
	Setting         CreateUser_CreateUser_User_Setting          "json:\"setting\" graphql:\"setting\""
}

func (t *CreateUser_CreateUser_User) GetEmail() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Email
}
func (t *CreateUser_CreateUser_User) GetFirstName() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.FirstName
}
func (t *CreateUser_CreateUser_User) GetLastName() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.LastName
}
func (t *CreateUser_CreateUser_User) GetDisplayName() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.DisplayName
}
func (t *CreateUser_CreateUser_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.AvatarRemoteURL
}
func (t *CreateUser_CreateUser_User) GetAvatarLocalFile() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.AvatarLocalFile
}
func (t *CreateUser_CreateUser_User) GetPassword() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Password
}
func (t *CreateUser_CreateUser_User) GetSub() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Sub
}
func (t *CreateUser_CreateUser_User) GetOauth() bool {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Oauth
}
func (t *CreateUser_CreateUser_User) GetOrganizations() []*CreateUser_CreateUser_User_Organizations {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Organizations
}
func (t *CreateUser_CreateUser_User) GetGroups() []*CreateUser_CreateUser_User_Groups {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Groups
}
func (t *CreateUser_CreateUser_User) GetSetting() *CreateUser_CreateUser_User_Setting {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return &t.Setting
}

type CreateUser_CreateUser struct {
	User CreateUser_CreateUser_User "json:\"user\" graphql:\"user\""
}

func (t *CreateUser_CreateUser) GetUser() *CreateUser_CreateUser_User {
	if t == nil {
		t = &CreateUser_CreateUser{}
	}
	return &t.User
}

type UpdateUser_UpdateUser_User_Groups struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateUser_UpdateUser_User_Groups) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Groups{}
	}
	return t.ID
}

type UpdateUser_UpdateUser_User_Organizations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateUser_UpdateUser_User_Organizations) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Organizations{}
	}
	return t.ID
}

type UpdateUser_UpdateUser_User_PersonalAccessTokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateUser_UpdateUser_User_PersonalAccessTokens) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_PersonalAccessTokens{}
	}
	return t.ID
}

type UpdateUser_UpdateUser_User_Setting struct {
	Status         usersetting.Status "json:\"status\" graphql:\"status\""
	Locked         bool               "json:\"locked\" graphql:\"locked\""
	EmailConfirmed bool               "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
}

func (t *UpdateUser_UpdateUser_User_Setting) GetStatus() *usersetting.Status {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return &t.Status
}
func (t *UpdateUser_UpdateUser_User_Setting) GetLocked() bool {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.Locked
}
func (t *UpdateUser_UpdateUser_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.EmailConfirmed
}

type UpdateUser_UpdateUser_User struct {
	ID                   string                                             "json:\"id\" graphql:\"id\""
	Email                string                                             "json:\"email\" graphql:\"email\""
	FirstName            string                                             "json:\"firstName\" graphql:\"firstName\""
	LastName             string                                             "json:\"lastName\" graphql:\"lastName\""
	DisplayName          string                                             "json:\"displayName\" graphql:\"displayName\""
	AvatarRemoteURL      *string                                            "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarLocalFile      *string                                            "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	Password             *string                                            "json:\"password,omitempty\" graphql:\"password\""
	Sub                  *string                                            "json:\"sub,omitempty\" graphql:\"sub\""
	Oauth                bool                                               "json:\"oauth\" graphql:\"oauth\""
	Groups               []*UpdateUser_UpdateUser_User_Groups               "json:\"groups,omitempty\" graphql:\"groups\""
	Organizations        []*UpdateUser_UpdateUser_User_Organizations        "json:\"organizations,omitempty\" graphql:\"organizations\""
	PersonalAccessTokens []*UpdateUser_UpdateUser_User_PersonalAccessTokens "json:\"personalAccessTokens,omitempty\" graphql:\"personalAccessTokens\""
	Setting              UpdateUser_UpdateUser_User_Setting                 "json:\"setting\" graphql:\"setting\""
}

func (t *UpdateUser_UpdateUser_User) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.ID
}
func (t *UpdateUser_UpdateUser_User) GetEmail() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Email
}
func (t *UpdateUser_UpdateUser_User) GetFirstName() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.FirstName
}
func (t *UpdateUser_UpdateUser_User) GetLastName() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.LastName
}
func (t *UpdateUser_UpdateUser_User) GetDisplayName() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.DisplayName
}
func (t *UpdateUser_UpdateUser_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.AvatarRemoteURL
}
func (t *UpdateUser_UpdateUser_User) GetAvatarLocalFile() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.AvatarLocalFile
}
func (t *UpdateUser_UpdateUser_User) GetPassword() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Password
}
func (t *UpdateUser_UpdateUser_User) GetSub() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Sub
}
func (t *UpdateUser_UpdateUser_User) GetOauth() bool {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Oauth
}
func (t *UpdateUser_UpdateUser_User) GetGroups() []*UpdateUser_UpdateUser_User_Groups {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Groups
}
func (t *UpdateUser_UpdateUser_User) GetOrganizations() []*UpdateUser_UpdateUser_User_Organizations {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Organizations
}
func (t *UpdateUser_UpdateUser_User) GetPersonalAccessTokens() []*UpdateUser_UpdateUser_User_PersonalAccessTokens {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.PersonalAccessTokens
}
func (t *UpdateUser_UpdateUser_User) GetSetting() *UpdateUser_UpdateUser_User_Setting {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return &t.Setting
}

type UpdateUser_UpdateUser struct {
	User UpdateUser_UpdateUser_User "json:\"user\" graphql:\"user\""
}

func (t *UpdateUser_UpdateUser) GetUser() *UpdateUser_UpdateUser_User {
	if t == nil {
		t = &UpdateUser_UpdateUser{}
	}
	return &t.User
}

type DeleteUser_DeleteUser struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteUser_DeleteUser) GetDeletedID() string {
	if t == nil {
		t = &DeleteUser_DeleteUser{}
	}
	return t.DeletedID
}

type GetGroupByID struct {
	Group GetGroupByID_Group "json:\"group\" graphql:\"group\""
}

func (t *GetGroupByID) GetGroup() *GetGroupByID_Group {
	if t == nil {
		t = &GetGroupByID{}
	}
	return &t.Group
}

type GetAllGroups struct {
	Groups GetAllGroups_Groups "json:\"groups\" graphql:\"groups\""
}

func (t *GetAllGroups) GetGroups() *GetAllGroups_Groups {
	if t == nil {
		t = &GetAllGroups{}
	}
	return &t.Groups
}

type CreateGroup struct {
	CreateGroup CreateGroup_CreateGroup "json:\"createGroup\" graphql:\"createGroup\""
}

func (t *CreateGroup) GetCreateGroup() *CreateGroup_CreateGroup {
	if t == nil {
		t = &CreateGroup{}
	}
	return &t.CreateGroup
}

type UpdateGroup struct {
	UpdateGroup UpdateGroup_UpdateGroup "json:\"updateGroup\" graphql:\"updateGroup\""
}

func (t *UpdateGroup) GetUpdateGroup() *UpdateGroup_UpdateGroup {
	if t == nil {
		t = &UpdateGroup{}
	}
	return &t.UpdateGroup
}

type DeleteGroup struct {
	DeleteGroup DeleteGroup_DeleteGroup "json:\"deleteGroup\" graphql:\"deleteGroup\""
}

func (t *DeleteGroup) GetDeleteGroup() *DeleteGroup_DeleteGroup {
	if t == nil {
		t = &DeleteGroup{}
	}
	return &t.DeleteGroup
}

type GetOrganizationByID struct {
	Organization GetOrganizationByID_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *GetOrganizationByID) GetOrganization() *GetOrganizationByID_Organization {
	if t == nil {
		t = &GetOrganizationByID{}
	}
	return &t.Organization
}

type GetAllOrganizations struct {
	Organizations GetAllOrganizations_Organizations "json:\"organizations\" graphql:\"organizations\""
}

func (t *GetAllOrganizations) GetOrganizations() *GetAllOrganizations_Organizations {
	if t == nil {
		t = &GetAllOrganizations{}
	}
	return &t.Organizations
}

type CreateOrganization struct {
	CreateOrganization CreateOrganization_CreateOrganization "json:\"createOrganization\" graphql:\"createOrganization\""
}

func (t *CreateOrganization) GetCreateOrganization() *CreateOrganization_CreateOrganization {
	if t == nil {
		t = &CreateOrganization{}
	}
	return &t.CreateOrganization
}

type UpdateOrganization struct {
	UpdateOrganization UpdateOrganization_UpdateOrganization "json:\"updateOrganization\" graphql:\"updateOrganization\""
}

func (t *UpdateOrganization) GetUpdateOrganization() *UpdateOrganization_UpdateOrganization {
	if t == nil {
		t = &UpdateOrganization{}
	}
	return &t.UpdateOrganization
}

type DeleteOrganization struct {
	DeleteOrganization DeleteOrganization_DeleteOrganization "json:\"deleteOrganization\" graphql:\"deleteOrganization\""
}

func (t *DeleteOrganization) GetDeleteOrganization() *DeleteOrganization_DeleteOrganization {
	if t == nil {
		t = &DeleteOrganization{}
	}
	return &t.DeleteOrganization
}

type CreatePersonalAccessToken struct {
	CreatePersonalAccessToken CreatePersonalAccessToken_CreatePersonalAccessToken "json:\"createPersonalAccessToken\" graphql:\"createPersonalAccessToken\""
}

func (t *CreatePersonalAccessToken) GetCreatePersonalAccessToken() *CreatePersonalAccessToken_CreatePersonalAccessToken {
	if t == nil {
		t = &CreatePersonalAccessToken{}
	}
	return &t.CreatePersonalAccessToken
}

type GetPersonalAccessTokenByID struct {
	PersonalAccessToken GetPersonalAccessTokenByID_PersonalAccessToken "json:\"personalAccessToken\" graphql:\"personalAccessToken\""
}

func (t *GetPersonalAccessTokenByID) GetPersonalAccessToken() *GetPersonalAccessTokenByID_PersonalAccessToken {
	if t == nil {
		t = &GetPersonalAccessTokenByID{}
	}
	return &t.PersonalAccessToken
}

type DeletePersonalAccessToken struct {
	DeletePersonalAccessToken DeletePersonalAccessToken_DeletePersonalAccessToken "json:\"deletePersonalAccessToken\" graphql:\"deletePersonalAccessToken\""
}

func (t *DeletePersonalAccessToken) GetDeletePersonalAccessToken() *DeletePersonalAccessToken_DeletePersonalAccessToken {
	if t == nil {
		t = &DeletePersonalAccessToken{}
	}
	return &t.DeletePersonalAccessToken
}

type GetUserByID struct {
	User GetUserByID_User "json:\"user\" graphql:\"user\""
}

func (t *GetUserByID) GetUser() *GetUserByID_User {
	if t == nil {
		t = &GetUserByID{}
	}
	return &t.User
}

type GetUserByIDWithOrgs struct {
	User GetUserByIDWithOrgs_User "json:\"user\" graphql:\"user\""
}

func (t *GetUserByIDWithOrgs) GetUser() *GetUserByIDWithOrgs_User {
	if t == nil {
		t = &GetUserByIDWithOrgs{}
	}
	return &t.User
}

type GetAllUsers struct {
	Users GetAllUsers_Users "json:\"users\" graphql:\"users\""
}

func (t *GetAllUsers) GetUsers() *GetAllUsers_Users {
	if t == nil {
		t = &GetAllUsers{}
	}
	return &t.Users
}

type CreateUser struct {
	CreateUser CreateUser_CreateUser "json:\"createUser\" graphql:\"createUser\""
}

func (t *CreateUser) GetCreateUser() *CreateUser_CreateUser {
	if t == nil {
		t = &CreateUser{}
	}
	return &t.CreateUser
}

type UpdateUser struct {
	UpdateUser UpdateUser_UpdateUser "json:\"updateUser\" graphql:\"updateUser\""
}

func (t *UpdateUser) GetUpdateUser() *UpdateUser_UpdateUser {
	if t == nil {
		t = &UpdateUser{}
	}
	return &t.UpdateUser
}

type DeleteUser struct {
	DeleteUser DeleteUser_DeleteUser "json:\"deleteUser\" graphql:\"deleteUser\""
}

func (t *DeleteUser) GetDeleteUser() *DeleteUser_DeleteUser {
	if t == nil {
		t = &DeleteUser{}
	}
	return &t.DeleteUser
}

const GetGroupByIDDocument = `query GetGroupByID ($groupId: ID!) {
	group(id: $groupId) {
		createdAt
		createdBy
		description
		displayName
		id
		logoURL
		name
		owner {
			id
		}
		setting {
			id
			createdAt
			updatedAt
			createdBy
			updatedBy
			visibility
			joinPolicy
			syncToSlack
			syncToGithub
			tags
		}
		updatedAt
		updatedBy
		users {
			id
			displayName
			email
		}
	}
}
`

func (c *Client) GetGroupByID(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupByID, error) {
	vars := map[string]interface{}{
		"groupId": groupID,
	}

	var res GetGroupByID
	if err := c.Client.Post(ctx, "GetGroupByID", GetGroupByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupsDocument = `query GetAllGroups {
	groups {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				id
				logoURL
				name
				owner {
					id
				}
				setting {
					id
					createdAt
					updatedAt
					createdBy
					updatedBy
					visibility
					joinPolicy
					syncToSlack
					syncToGithub
					tags
				}
				updatedAt
				updatedBy
				users {
					id
					displayName
					email
				}
			}
		}
	}
}
`

func (c *Client) GetAllGroups(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroups, error) {
	vars := map[string]interface{}{}

	var res GetAllGroups
	if err := c.Client.Post(ctx, "GetAllGroups", GetAllGroupsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGroupDocument = `mutation CreateGroup ($input: CreateGroupInput!) {
	createGroup(input: $input) {
		group {
			createdAt
			createdBy
			description
			displayName
			id
			logoURL
			name
			owner {
				id
			}
			setting {
				id
				createdAt
				updatedAt
				createdBy
				updatedBy
				visibility
				joinPolicy
				syncToSlack
				syncToGithub
				tags
			}
			updatedAt
			updatedBy
			users {
				id
				displayName
				email
			}
		}
	}
}
`

func (c *Client) CreateGroup(ctx context.Context, input CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroup, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res CreateGroup
	if err := c.Client.Post(ctx, "CreateGroup", CreateGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGroupDocument = `mutation UpdateGroup ($updateGroupId: ID!, $input: UpdateGroupInput!) {
	updateGroup(id: $updateGroupId, input: $input) {
		group {
			id
			name
			displayName
			description
		}
	}
}
`

func (c *Client) UpdateGroup(ctx context.Context, updateGroupID string, input UpdateGroupInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroup, error) {
	vars := map[string]interface{}{
		"updateGroupId": updateGroupID,
		"input":         input,
	}

	var res UpdateGroup
	if err := c.Client.Post(ctx, "UpdateGroup", UpdateGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteGroupDocument = `mutation DeleteGroup ($deleteGroupId: ID!) {
	deleteGroup(id: $deleteGroupId) {
		deletedID
	}
}
`

func (c *Client) DeleteGroup(ctx context.Context, deleteGroupID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroup, error) {
	vars := map[string]interface{}{
		"deleteGroupId": deleteGroupID,
	}

	var res DeleteGroup
	if err := c.Client.Post(ctx, "DeleteGroup", DeleteGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationByIDDocument = `query GetOrganizationByID ($organizationId: ID!) {
	organization(id: $organizationId) {
		id
		name
		displayName
		description
		parent {
			id
			name
		}
		setting {
			id
			createdAt
			updatedAt
			createdBy
			updatedBy
			domains
			ssoCert
			ssoEntrypoint
			ssoIssuer
			billingContact
			billingEmail
			billingPhone
			billingAddress
			taxIdentifier
			tags
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetOrganizationByID(ctx context.Context, organizationID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationByID, error) {
	vars := map[string]interface{}{
		"organizationId": organizationID,
	}

	var res GetOrganizationByID
	if err := c.Client.Post(ctx, "GetOrganizationByID", GetOrganizationByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationsDocument = `query GetAllOrganizations {
	organizations {
		edges {
			node {
				id
				name
				displayName
				description
				parent {
					id
					name
				}
				setting {
					id
					createdAt
					updatedAt
					createdBy
					updatedBy
					domains
					ssoCert
					ssoEntrypoint
					ssoIssuer
					billingContact
					billingEmail
					billingPhone
					billingAddress
					taxIdentifier
					tags
				}
				createdAt
				updatedAt
			}
		}
	}
}
`

func (c *Client) GetAllOrganizations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizations, error) {
	vars := map[string]interface{}{}

	var res GetAllOrganizations
	if err := c.Client.Post(ctx, "GetAllOrganizations", GetAllOrganizationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateOrganizationDocument = `mutation CreateOrganization ($input: CreateOrganizationInput!) {
	createOrganization(input: $input) {
		organization {
			id
			name
			displayName
			description
			createdAt
			updatedAt
			setting {
				id
				createdAt
				updatedAt
				createdBy
				updatedBy
				domains
				ssoCert
				ssoEntrypoint
				ssoIssuer
				billingContact
				billingEmail
				billingPhone
				billingAddress
				taxIdentifier
				tags
			}
			parent {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateOrganization(ctx context.Context, input CreateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*CreateOrganization, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res CreateOrganization
	if err := c.Client.Post(ctx, "CreateOrganization", CreateOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateOrganizationDocument = `mutation UpdateOrganization ($updateOrganizationId: ID!, $input: UpdateOrganizationInput!) {
	updateOrganization(id: $updateOrganizationId, input: $input) {
		organization {
			id
			name
			displayName
			description
		}
	}
}
`

func (c *Client) UpdateOrganization(ctx context.Context, updateOrganizationID string, input UpdateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganization, error) {
	vars := map[string]interface{}{
		"updateOrganizationId": updateOrganizationID,
		"input":                input,
	}

	var res UpdateOrganization
	if err := c.Client.Post(ctx, "UpdateOrganization", UpdateOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteOrganizationDocument = `mutation DeleteOrganization ($deleteOrganizationId: ID!) {
	deleteOrganization(id: $deleteOrganizationId) {
		deletedID
	}
}
`

func (c *Client) DeleteOrganization(ctx context.Context, deleteOrganizationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOrganization, error) {
	vars := map[string]interface{}{
		"deleteOrganizationId": deleteOrganizationID,
	}

	var res DeleteOrganization
	if err := c.Client.Post(ctx, "DeleteOrganization", DeleteOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreatePersonalAccessTokenDocument = `mutation CreatePersonalAccessToken ($input: CreatePersonalAccessTokenInput!) {
	createPersonalAccessToken(input: $input) {
		PersonalAccessToken {
			owner {
				id
			}
			abilities
			name
		}
	}
}
`

func (c *Client) CreatePersonalAccessToken(ctx context.Context, input CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreatePersonalAccessToken, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res CreatePersonalAccessToken
	if err := c.Client.Post(ctx, "CreatePersonalAccessToken", CreatePersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPersonalAccessTokenByIDDocument = `query GetPersonalAccessTokenByID ($personalAccessTokenId: ID!) {
	personalAccessToken(id: $personalAccessTokenId) {
		id
		createdAt
		updatedAt
		createdBy
		updatedBy
		name
		owner {
			id
		}
		abilities
		expirationAt
		lastUsedAt
	}
}
`

func (c *Client) GetPersonalAccessTokenByID(ctx context.Context, personalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetPersonalAccessTokenByID, error) {
	vars := map[string]interface{}{
		"personalAccessTokenId": personalAccessTokenID,
	}

	var res GetPersonalAccessTokenByID
	if err := c.Client.Post(ctx, "GetPersonalAccessTokenByID", GetPersonalAccessTokenByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeletePersonalAccessTokenDocument = `mutation DeletePersonalAccessToken ($deletePersonalAccessTokenId: ID!) {
	deletePersonalAccessToken(id: $deletePersonalAccessTokenId) {
		deletedID
	}
}
`

func (c *Client) DeletePersonalAccessToken(ctx context.Context, deletePersonalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeletePersonalAccessToken, error) {
	vars := map[string]interface{}{
		"deletePersonalAccessTokenId": deletePersonalAccessTokenID,
	}

	var res DeletePersonalAccessToken
	if err := c.Client.Post(ctx, "DeletePersonalAccessToken", DeletePersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserByIDDocument = `query GetUserByID ($userId: ID!) {
	user(id: $userId) {
		id
		firstName
		lastName
		email
		displayName
		setting {
			status
			locked
			emailConfirmed
		}
	}
}
`

func (c *Client) GetUserByID(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByID, error) {
	vars := map[string]interface{}{
		"userId": userID,
	}

	var res GetUserByID
	if err := c.Client.Post(ctx, "GetUserByID", GetUserByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserByIDWithOrgsDocument = `query GetUserByIDWithOrgs ($userId: ID!) {
	user(id: $userId) {
		id
		firstName
		lastName
		email
		displayName
		setting {
			status
			locked
			emailConfirmed
		}
		organizations {
			id
			name
			displayName
		}
	}
}
`

func (c *Client) GetUserByIDWithOrgs(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByIDWithOrgs, error) {
	vars := map[string]interface{}{
		"userId": userID,
	}

	var res GetUserByIDWithOrgs
	if err := c.Client.Post(ctx, "GetUserByIDWithOrgs", GetUserByIDWithOrgsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUsersDocument = `query GetAllUsers {
	users {
		edges {
			node {
				id
				firstName
				lastName
				email
				displayName
				setting {
					status
					locked
					emailConfirmed
				}
			}
		}
	}
}
`

func (c *Client) GetAllUsers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUsers, error) {
	vars := map[string]interface{}{}

	var res GetAllUsers
	if err := c.Client.Post(ctx, "GetAllUsers", GetAllUsersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateUserDocument = `mutation CreateUser ($input: CreateUserInput!) {
	createUser(input: $input) {
		user {
			email
			firstName
			lastName
			displayName
			avatarRemoteURL
			avatarLocalFile
			password
			sub
			oauth
			organizations {
				id
			}
			groups {
				id
			}
			setting {
				status
				locked
				emailConfirmed
			}
		}
	}
}
`

func (c *Client) CreateUser(ctx context.Context, input CreateUserInput, interceptors ...clientv2.RequestInterceptor) (*CreateUser, error) {
	vars := map[string]interface{}{
		"input": input,
	}

	var res CreateUser
	if err := c.Client.Post(ctx, "CreateUser", CreateUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserDocument = `mutation UpdateUser ($updateUserId: ID!, $input: UpdateUserInput!) {
	updateUser(id: $updateUserId, input: $input) {
		user {
			id
			email
			firstName
			lastName
			displayName
			avatarRemoteURL
			avatarLocalFile
			password
			sub
			oauth
			groups {
				id
			}
			organizations {
				id
			}
			personalAccessTokens {
				id
			}
			setting {
				status
				locked
				emailConfirmed
			}
		}
	}
}
`

func (c *Client) UpdateUser(ctx context.Context, updateUserID string, input UpdateUserInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUser, error) {
	vars := map[string]interface{}{
		"updateUserId": updateUserID,
		"input":        input,
	}

	var res UpdateUser
	if err := c.Client.Post(ctx, "UpdateUser", UpdateUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteUserDocument = `mutation DeleteUser ($deleteUserId: ID!) {
	deleteUser(id: $deleteUserId) {
		deletedID
	}
}
`

func (c *Client) DeleteUser(ctx context.Context, deleteUserID string, interceptors ...clientv2.RequestInterceptor) (*DeleteUser, error) {
	vars := map[string]interface{}{
		"deleteUserId": deleteUserID,
	}

	var res DeleteUser
	if err := c.Client.Post(ctx, "DeleteUser", DeleteUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	GetGroupByIDDocument:               "GetGroupByID",
	GetAllGroupsDocument:               "GetAllGroups",
	CreateGroupDocument:                "CreateGroup",
	UpdateGroupDocument:                "UpdateGroup",
	DeleteGroupDocument:                "DeleteGroup",
	GetOrganizationByIDDocument:        "GetOrganizationByID",
	GetAllOrganizationsDocument:        "GetAllOrganizations",
	CreateOrganizationDocument:         "CreateOrganization",
	UpdateOrganizationDocument:         "UpdateOrganization",
	DeleteOrganizationDocument:         "DeleteOrganization",
	CreatePersonalAccessTokenDocument:  "CreatePersonalAccessToken",
	GetPersonalAccessTokenByIDDocument: "GetPersonalAccessTokenByID",
	DeletePersonalAccessTokenDocument:  "DeletePersonalAccessToken",
	GetUserByIDDocument:                "GetUserByID",
	GetUserByIDWithOrgsDocument:        "GetUserByIDWithOrgs",
	GetAllUsersDocument:                "GetAllUsers",
	CreateUserDocument:                 "CreateUser",
	UpdateUserDocument:                 "UpdateUser",
	DeleteUserDocument:                 "DeleteUser",
}
