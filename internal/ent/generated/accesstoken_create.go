// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/accesstoken"
	"github.com/datumforge/datum/internal/ent/generated/user"
)

// AccessTokenCreate is the builder for creating a AccessToken entity.
type AccessTokenCreate struct {
	config
	mutation *AccessTokenMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (atc *AccessTokenCreate) SetCreatedAt(t time.Time) *AccessTokenCreate {
	atc.mutation.SetCreatedAt(t)
	return atc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (atc *AccessTokenCreate) SetNillableCreatedAt(t *time.Time) *AccessTokenCreate {
	if t != nil {
		atc.SetCreatedAt(*t)
	}
	return atc
}

// SetUpdatedAt sets the "updated_at" field.
func (atc *AccessTokenCreate) SetUpdatedAt(t time.Time) *AccessTokenCreate {
	atc.mutation.SetUpdatedAt(t)
	return atc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (atc *AccessTokenCreate) SetNillableUpdatedAt(t *time.Time) *AccessTokenCreate {
	if t != nil {
		atc.SetUpdatedAt(*t)
	}
	return atc
}

// SetCreatedBy sets the "created_by" field.
func (atc *AccessTokenCreate) SetCreatedBy(s string) *AccessTokenCreate {
	atc.mutation.SetCreatedBy(s)
	return atc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (atc *AccessTokenCreate) SetNillableCreatedBy(s *string) *AccessTokenCreate {
	if s != nil {
		atc.SetCreatedBy(*s)
	}
	return atc
}

// SetUpdatedBy sets the "updated_by" field.
func (atc *AccessTokenCreate) SetUpdatedBy(s string) *AccessTokenCreate {
	atc.mutation.SetUpdatedBy(s)
	return atc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (atc *AccessTokenCreate) SetNillableUpdatedBy(s *string) *AccessTokenCreate {
	if s != nil {
		atc.SetUpdatedBy(*s)
	}
	return atc
}

// SetAccessToken sets the "access_token" field.
func (atc *AccessTokenCreate) SetAccessToken(s string) *AccessTokenCreate {
	atc.mutation.SetAccessToken(s)
	return atc
}

// SetExpiresAt sets the "expires_at" field.
func (atc *AccessTokenCreate) SetExpiresAt(t time.Time) *AccessTokenCreate {
	atc.mutation.SetExpiresAt(t)
	return atc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (atc *AccessTokenCreate) SetNillableExpiresAt(t *time.Time) *AccessTokenCreate {
	if t != nil {
		atc.SetExpiresAt(*t)
	}
	return atc
}

// SetIssuedAt sets the "issued_at" field.
func (atc *AccessTokenCreate) SetIssuedAt(t time.Time) *AccessTokenCreate {
	atc.mutation.SetIssuedAt(t)
	return atc
}

// SetNillableIssuedAt sets the "issued_at" field if the given value is not nil.
func (atc *AccessTokenCreate) SetNillableIssuedAt(t *time.Time) *AccessTokenCreate {
	if t != nil {
		atc.SetIssuedAt(*t)
	}
	return atc
}

// SetLastUsedAt sets the "last_used_at" field.
func (atc *AccessTokenCreate) SetLastUsedAt(t time.Time) *AccessTokenCreate {
	atc.mutation.SetLastUsedAt(t)
	return atc
}

// SetNillableLastUsedAt sets the "last_used_at" field if the given value is not nil.
func (atc *AccessTokenCreate) SetNillableLastUsedAt(t *time.Time) *AccessTokenCreate {
	if t != nil {
		atc.SetLastUsedAt(*t)
	}
	return atc
}

// SetOrganizationID sets the "organization_id" field.
func (atc *AccessTokenCreate) SetOrganizationID(s string) *AccessTokenCreate {
	atc.mutation.SetOrganizationID(s)
	return atc
}

// SetUserID sets the "user_id" field.
func (atc *AccessTokenCreate) SetUserID(s string) *AccessTokenCreate {
	atc.mutation.SetUserID(s)
	return atc
}

// SetID sets the "id" field.
func (atc *AccessTokenCreate) SetID(s string) *AccessTokenCreate {
	atc.mutation.SetID(s)
	return atc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (atc *AccessTokenCreate) SetNillableID(s *string) *AccessTokenCreate {
	if s != nil {
		atc.SetID(*s)
	}
	return atc
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (atc *AccessTokenCreate) SetOwnerID(id string) *AccessTokenCreate {
	atc.mutation.SetOwnerID(id)
	return atc
}

// SetOwner sets the "owner" edge to the User entity.
func (atc *AccessTokenCreate) SetOwner(u *User) *AccessTokenCreate {
	return atc.SetOwnerID(u.ID)
}

// Mutation returns the AccessTokenMutation object of the builder.
func (atc *AccessTokenCreate) Mutation() *AccessTokenMutation {
	return atc.mutation
}

// Save creates the AccessToken in the database.
func (atc *AccessTokenCreate) Save(ctx context.Context) (*AccessToken, error) {
	if err := atc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, atc.sqlSave, atc.mutation, atc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (atc *AccessTokenCreate) SaveX(ctx context.Context) *AccessToken {
	v, err := atc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atc *AccessTokenCreate) Exec(ctx context.Context) error {
	_, err := atc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atc *AccessTokenCreate) ExecX(ctx context.Context) {
	if err := atc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atc *AccessTokenCreate) defaults() error {
	if _, ok := atc.mutation.CreatedAt(); !ok {
		if accesstoken.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized accesstoken.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := accesstoken.DefaultCreatedAt()
		atc.mutation.SetCreatedAt(v)
	}
	if _, ok := atc.mutation.UpdatedAt(); !ok {
		if accesstoken.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized accesstoken.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := accesstoken.DefaultUpdatedAt()
		atc.mutation.SetUpdatedAt(v)
	}
	if _, ok := atc.mutation.ExpiresAt(); !ok {
		if accesstoken.DefaultExpiresAt == nil {
			return fmt.Errorf("generated: uninitialized accesstoken.DefaultExpiresAt (forgotten import generated/runtime?)")
		}
		v := accesstoken.DefaultExpiresAt()
		atc.mutation.SetExpiresAt(v)
	}
	if _, ok := atc.mutation.IssuedAt(); !ok {
		v := accesstoken.DefaultIssuedAt
		atc.mutation.SetIssuedAt(v)
	}
	if _, ok := atc.mutation.ID(); !ok {
		if accesstoken.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized accesstoken.DefaultID (forgotten import generated/runtime?)")
		}
		v := accesstoken.DefaultID()
		atc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (atc *AccessTokenCreate) check() error {
	if _, ok := atc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "AccessToken.created_at"`)}
	}
	if _, ok := atc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "AccessToken.updated_at"`)}
	}
	if _, ok := atc.mutation.AccessToken(); !ok {
		return &ValidationError{Name: "access_token", err: errors.New(`generated: missing required field "AccessToken.access_token"`)}
	}
	if _, ok := atc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`generated: missing required field "AccessToken.expires_at"`)}
	}
	if _, ok := atc.mutation.IssuedAt(); !ok {
		return &ValidationError{Name: "issued_at", err: errors.New(`generated: missing required field "AccessToken.issued_at"`)}
	}
	if _, ok := atc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`generated: missing required field "AccessToken.organization_id"`)}
	}
	if _, ok := atc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`generated: missing required field "AccessToken.user_id"`)}
	}
	if _, ok := atc.mutation.OwnerID(); !ok {
		return &ValidationError{Name: "owner", err: errors.New(`generated: missing required edge "AccessToken.owner"`)}
	}
	return nil
}

func (atc *AccessTokenCreate) sqlSave(ctx context.Context) (*AccessToken, error) {
	if err := atc.check(); err != nil {
		return nil, err
	}
	_node, _spec := atc.createSpec()
	if err := sqlgraph.CreateNode(ctx, atc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected AccessToken.ID type: %T", _spec.ID.Value)
		}
	}
	atc.mutation.id = &_node.ID
	atc.mutation.done = true
	return _node, nil
}

func (atc *AccessTokenCreate) createSpec() (*AccessToken, *sqlgraph.CreateSpec) {
	var (
		_node = &AccessToken{config: atc.config}
		_spec = sqlgraph.NewCreateSpec(accesstoken.Table, sqlgraph.NewFieldSpec(accesstoken.FieldID, field.TypeString))
	)
	_spec.Schema = atc.schemaConfig.AccessToken
	if id, ok := atc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := atc.mutation.CreatedAt(); ok {
		_spec.SetField(accesstoken.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := atc.mutation.UpdatedAt(); ok {
		_spec.SetField(accesstoken.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := atc.mutation.CreatedBy(); ok {
		_spec.SetField(accesstoken.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := atc.mutation.UpdatedBy(); ok {
		_spec.SetField(accesstoken.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := atc.mutation.AccessToken(); ok {
		_spec.SetField(accesstoken.FieldAccessToken, field.TypeString, value)
		_node.AccessToken = value
	}
	if value, ok := atc.mutation.ExpiresAt(); ok {
		_spec.SetField(accesstoken.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := atc.mutation.IssuedAt(); ok {
		_spec.SetField(accesstoken.FieldIssuedAt, field.TypeTime, value)
		_node.IssuedAt = value
	}
	if value, ok := atc.mutation.LastUsedAt(); ok {
		_spec.SetField(accesstoken.FieldLastUsedAt, field.TypeTime, value)
		_node.LastUsedAt = &value
	}
	if value, ok := atc.mutation.OrganizationID(); ok {
		_spec.SetField(accesstoken.FieldOrganizationID, field.TypeString, value)
		_node.OrganizationID = value
	}
	if nodes := atc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesstoken.OwnerTable,
			Columns: []string{accesstoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = atc.schemaConfig.AccessToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.UserID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// AccessTokenCreateBulk is the builder for creating many AccessToken entities in bulk.
type AccessTokenCreateBulk struct {
	config
	err      error
	builders []*AccessTokenCreate
}

// Save creates the AccessToken entities in the database.
func (atcb *AccessTokenCreateBulk) Save(ctx context.Context) ([]*AccessToken, error) {
	if atcb.err != nil {
		return nil, atcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(atcb.builders))
	nodes := make([]*AccessToken, len(atcb.builders))
	mutators := make([]Mutator, len(atcb.builders))
	for i := range atcb.builders {
		func(i int, root context.Context) {
			builder := atcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AccessTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, atcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, atcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, atcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (atcb *AccessTokenCreateBulk) SaveX(ctx context.Context) []*AccessToken {
	v, err := atcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (atcb *AccessTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := atcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atcb *AccessTokenCreateBulk) ExecX(ctx context.Context) {
	if err := atcb.Exec(ctx); err != nil {
		panic(err)
	}
}
