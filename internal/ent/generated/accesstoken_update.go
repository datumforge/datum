// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/accesstoken"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/datumforge/datum/internal/ent/generated/user"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// AccessTokenUpdate is the builder for updating AccessToken entities.
type AccessTokenUpdate struct {
	config
	hooks    []Hook
	mutation *AccessTokenMutation
}

// Where appends a list predicates to the AccessTokenUpdate builder.
func (atu *AccessTokenUpdate) Where(ps ...predicate.AccessToken) *AccessTokenUpdate {
	atu.mutation.Where(ps...)
	return atu
}

// SetUpdatedAt sets the "updated_at" field.
func (atu *AccessTokenUpdate) SetUpdatedAt(t time.Time) *AccessTokenUpdate {
	atu.mutation.SetUpdatedAt(t)
	return atu
}

// SetUpdatedBy sets the "updated_by" field.
func (atu *AccessTokenUpdate) SetUpdatedBy(s string) *AccessTokenUpdate {
	atu.mutation.SetUpdatedBy(s)
	return atu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (atu *AccessTokenUpdate) SetNillableUpdatedBy(s *string) *AccessTokenUpdate {
	if s != nil {
		atu.SetUpdatedBy(*s)
	}
	return atu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (atu *AccessTokenUpdate) ClearUpdatedBy() *AccessTokenUpdate {
	atu.mutation.ClearUpdatedBy()
	return atu
}

// SetExpiresAt sets the "expires_at" field.
func (atu *AccessTokenUpdate) SetExpiresAt(t time.Time) *AccessTokenUpdate {
	atu.mutation.SetExpiresAt(t)
	return atu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (atu *AccessTokenUpdate) SetNillableExpiresAt(t *time.Time) *AccessTokenUpdate {
	if t != nil {
		atu.SetExpiresAt(*t)
	}
	return atu
}

// SetIssuedAt sets the "issued_at" field.
func (atu *AccessTokenUpdate) SetIssuedAt(t time.Time) *AccessTokenUpdate {
	atu.mutation.SetIssuedAt(t)
	return atu
}

// SetNillableIssuedAt sets the "issued_at" field if the given value is not nil.
func (atu *AccessTokenUpdate) SetNillableIssuedAt(t *time.Time) *AccessTokenUpdate {
	if t != nil {
		atu.SetIssuedAt(*t)
	}
	return atu
}

// SetLastUsedAt sets the "last_used_at" field.
func (atu *AccessTokenUpdate) SetLastUsedAt(t time.Time) *AccessTokenUpdate {
	atu.mutation.SetLastUsedAt(t)
	return atu
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (atu *AccessTokenUpdate) ClearLastUsedAt() *AccessTokenUpdate {
	atu.mutation.ClearLastUsedAt()
	return atu
}

// SetOrganizationID sets the "organization_id" field.
func (atu *AccessTokenUpdate) SetOrganizationID(s string) *AccessTokenUpdate {
	atu.mutation.SetOrganizationID(s)
	return atu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (atu *AccessTokenUpdate) SetNillableOrganizationID(s *string) *AccessTokenUpdate {
	if s != nil {
		atu.SetOrganizationID(*s)
	}
	return atu
}

// SetUserID sets the "user_id" field.
func (atu *AccessTokenUpdate) SetUserID(s string) *AccessTokenUpdate {
	atu.mutation.SetUserID(s)
	return atu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (atu *AccessTokenUpdate) SetNillableUserID(s *string) *AccessTokenUpdate {
	if s != nil {
		atu.SetUserID(*s)
	}
	return atu
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (atu *AccessTokenUpdate) SetOwnerID(id string) *AccessTokenUpdate {
	atu.mutation.SetOwnerID(id)
	return atu
}

// SetOwner sets the "owner" edge to the User entity.
func (atu *AccessTokenUpdate) SetOwner(u *User) *AccessTokenUpdate {
	return atu.SetOwnerID(u.ID)
}

// Mutation returns the AccessTokenMutation object of the builder.
func (atu *AccessTokenUpdate) Mutation() *AccessTokenMutation {
	return atu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (atu *AccessTokenUpdate) ClearOwner() *AccessTokenUpdate {
	atu.mutation.ClearOwner()
	return atu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (atu *AccessTokenUpdate) Save(ctx context.Context) (int, error) {
	if err := atu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, atu.sqlSave, atu.mutation, atu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atu *AccessTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := atu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (atu *AccessTokenUpdate) Exec(ctx context.Context) error {
	_, err := atu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atu *AccessTokenUpdate) ExecX(ctx context.Context) {
	if err := atu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atu *AccessTokenUpdate) defaults() error {
	if _, ok := atu.mutation.UpdatedAt(); !ok {
		if accesstoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized accesstoken.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := accesstoken.UpdateDefaultUpdatedAt()
		atu.mutation.SetUpdatedAt(v)
	}
	if _, ok := atu.mutation.LastUsedAt(); !ok && !atu.mutation.LastUsedAtCleared() {
		if accesstoken.UpdateDefaultLastUsedAt == nil {
			return fmt.Errorf("generated: uninitialized accesstoken.UpdateDefaultLastUsedAt (forgotten import generated/runtime?)")
		}
		v := accesstoken.UpdateDefaultLastUsedAt()
		atu.mutation.SetLastUsedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (atu *AccessTokenUpdate) check() error {
	if _, ok := atu.mutation.OwnerID(); atu.mutation.OwnerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "AccessToken.owner"`)
	}
	return nil
}

func (atu *AccessTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := atu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(accesstoken.Table, accesstoken.Columns, sqlgraph.NewFieldSpec(accesstoken.FieldID, field.TypeString))
	if ps := atu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atu.mutation.UpdatedAt(); ok {
		_spec.SetField(accesstoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if atu.mutation.CreatedByCleared() {
		_spec.ClearField(accesstoken.FieldCreatedBy, field.TypeString)
	}
	if value, ok := atu.mutation.UpdatedBy(); ok {
		_spec.SetField(accesstoken.FieldUpdatedBy, field.TypeString, value)
	}
	if atu.mutation.UpdatedByCleared() {
		_spec.ClearField(accesstoken.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := atu.mutation.ExpiresAt(); ok {
		_spec.SetField(accesstoken.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := atu.mutation.IssuedAt(); ok {
		_spec.SetField(accesstoken.FieldIssuedAt, field.TypeTime, value)
	}
	if value, ok := atu.mutation.LastUsedAt(); ok {
		_spec.SetField(accesstoken.FieldLastUsedAt, field.TypeTime, value)
	}
	if atu.mutation.LastUsedAtCleared() {
		_spec.ClearField(accesstoken.FieldLastUsedAt, field.TypeTime)
	}
	if value, ok := atu.mutation.OrganizationID(); ok {
		_spec.SetField(accesstoken.FieldOrganizationID, field.TypeString, value)
	}
	if atu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesstoken.OwnerTable,
			Columns: []string{accesstoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = atu.schemaConfig.AccessToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesstoken.OwnerTable,
			Columns: []string{accesstoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = atu.schemaConfig.AccessToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = atu.schemaConfig.AccessToken
	ctx = internal.NewSchemaConfigContext(ctx, atu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, atu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accesstoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	atu.mutation.done = true
	return n, nil
}

// AccessTokenUpdateOne is the builder for updating a single AccessToken entity.
type AccessTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AccessTokenMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (atuo *AccessTokenUpdateOne) SetUpdatedAt(t time.Time) *AccessTokenUpdateOne {
	atuo.mutation.SetUpdatedAt(t)
	return atuo
}

// SetUpdatedBy sets the "updated_by" field.
func (atuo *AccessTokenUpdateOne) SetUpdatedBy(s string) *AccessTokenUpdateOne {
	atuo.mutation.SetUpdatedBy(s)
	return atuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (atuo *AccessTokenUpdateOne) SetNillableUpdatedBy(s *string) *AccessTokenUpdateOne {
	if s != nil {
		atuo.SetUpdatedBy(*s)
	}
	return atuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (atuo *AccessTokenUpdateOne) ClearUpdatedBy() *AccessTokenUpdateOne {
	atuo.mutation.ClearUpdatedBy()
	return atuo
}

// SetExpiresAt sets the "expires_at" field.
func (atuo *AccessTokenUpdateOne) SetExpiresAt(t time.Time) *AccessTokenUpdateOne {
	atuo.mutation.SetExpiresAt(t)
	return atuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (atuo *AccessTokenUpdateOne) SetNillableExpiresAt(t *time.Time) *AccessTokenUpdateOne {
	if t != nil {
		atuo.SetExpiresAt(*t)
	}
	return atuo
}

// SetIssuedAt sets the "issued_at" field.
func (atuo *AccessTokenUpdateOne) SetIssuedAt(t time.Time) *AccessTokenUpdateOne {
	atuo.mutation.SetIssuedAt(t)
	return atuo
}

// SetNillableIssuedAt sets the "issued_at" field if the given value is not nil.
func (atuo *AccessTokenUpdateOne) SetNillableIssuedAt(t *time.Time) *AccessTokenUpdateOne {
	if t != nil {
		atuo.SetIssuedAt(*t)
	}
	return atuo
}

// SetLastUsedAt sets the "last_used_at" field.
func (atuo *AccessTokenUpdateOne) SetLastUsedAt(t time.Time) *AccessTokenUpdateOne {
	atuo.mutation.SetLastUsedAt(t)
	return atuo
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (atuo *AccessTokenUpdateOne) ClearLastUsedAt() *AccessTokenUpdateOne {
	atuo.mutation.ClearLastUsedAt()
	return atuo
}

// SetOrganizationID sets the "organization_id" field.
func (atuo *AccessTokenUpdateOne) SetOrganizationID(s string) *AccessTokenUpdateOne {
	atuo.mutation.SetOrganizationID(s)
	return atuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (atuo *AccessTokenUpdateOne) SetNillableOrganizationID(s *string) *AccessTokenUpdateOne {
	if s != nil {
		atuo.SetOrganizationID(*s)
	}
	return atuo
}

// SetUserID sets the "user_id" field.
func (atuo *AccessTokenUpdateOne) SetUserID(s string) *AccessTokenUpdateOne {
	atuo.mutation.SetUserID(s)
	return atuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (atuo *AccessTokenUpdateOne) SetNillableUserID(s *string) *AccessTokenUpdateOne {
	if s != nil {
		atuo.SetUserID(*s)
	}
	return atuo
}

// SetOwnerID sets the "owner" edge to the User entity by ID.
func (atuo *AccessTokenUpdateOne) SetOwnerID(id string) *AccessTokenUpdateOne {
	atuo.mutation.SetOwnerID(id)
	return atuo
}

// SetOwner sets the "owner" edge to the User entity.
func (atuo *AccessTokenUpdateOne) SetOwner(u *User) *AccessTokenUpdateOne {
	return atuo.SetOwnerID(u.ID)
}

// Mutation returns the AccessTokenMutation object of the builder.
func (atuo *AccessTokenUpdateOne) Mutation() *AccessTokenMutation {
	return atuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (atuo *AccessTokenUpdateOne) ClearOwner() *AccessTokenUpdateOne {
	atuo.mutation.ClearOwner()
	return atuo
}

// Where appends a list predicates to the AccessTokenUpdate builder.
func (atuo *AccessTokenUpdateOne) Where(ps ...predicate.AccessToken) *AccessTokenUpdateOne {
	atuo.mutation.Where(ps...)
	return atuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (atuo *AccessTokenUpdateOne) Select(field string, fields ...string) *AccessTokenUpdateOne {
	atuo.fields = append([]string{field}, fields...)
	return atuo
}

// Save executes the query and returns the updated AccessToken entity.
func (atuo *AccessTokenUpdateOne) Save(ctx context.Context) (*AccessToken, error) {
	if err := atuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, atuo.sqlSave, atuo.mutation, atuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (atuo *AccessTokenUpdateOne) SaveX(ctx context.Context) *AccessToken {
	node, err := atuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (atuo *AccessTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := atuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (atuo *AccessTokenUpdateOne) ExecX(ctx context.Context) {
	if err := atuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (atuo *AccessTokenUpdateOne) defaults() error {
	if _, ok := atuo.mutation.UpdatedAt(); !ok {
		if accesstoken.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized accesstoken.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := accesstoken.UpdateDefaultUpdatedAt()
		atuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := atuo.mutation.LastUsedAt(); !ok && !atuo.mutation.LastUsedAtCleared() {
		if accesstoken.UpdateDefaultLastUsedAt == nil {
			return fmt.Errorf("generated: uninitialized accesstoken.UpdateDefaultLastUsedAt (forgotten import generated/runtime?)")
		}
		v := accesstoken.UpdateDefaultLastUsedAt()
		atuo.mutation.SetLastUsedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (atuo *AccessTokenUpdateOne) check() error {
	if _, ok := atuo.mutation.OwnerID(); atuo.mutation.OwnerCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "AccessToken.owner"`)
	}
	return nil
}

func (atuo *AccessTokenUpdateOne) sqlSave(ctx context.Context) (_node *AccessToken, err error) {
	if err := atuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(accesstoken.Table, accesstoken.Columns, sqlgraph.NewFieldSpec(accesstoken.FieldID, field.TypeString))
	id, ok := atuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "AccessToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := atuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, accesstoken.FieldID)
		for _, f := range fields {
			if !accesstoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != accesstoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := atuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := atuo.mutation.UpdatedAt(); ok {
		_spec.SetField(accesstoken.FieldUpdatedAt, field.TypeTime, value)
	}
	if atuo.mutation.CreatedByCleared() {
		_spec.ClearField(accesstoken.FieldCreatedBy, field.TypeString)
	}
	if value, ok := atuo.mutation.UpdatedBy(); ok {
		_spec.SetField(accesstoken.FieldUpdatedBy, field.TypeString, value)
	}
	if atuo.mutation.UpdatedByCleared() {
		_spec.ClearField(accesstoken.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := atuo.mutation.ExpiresAt(); ok {
		_spec.SetField(accesstoken.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.IssuedAt(); ok {
		_spec.SetField(accesstoken.FieldIssuedAt, field.TypeTime, value)
	}
	if value, ok := atuo.mutation.LastUsedAt(); ok {
		_spec.SetField(accesstoken.FieldLastUsedAt, field.TypeTime, value)
	}
	if atuo.mutation.LastUsedAtCleared() {
		_spec.ClearField(accesstoken.FieldLastUsedAt, field.TypeTime)
	}
	if value, ok := atuo.mutation.OrganizationID(); ok {
		_spec.SetField(accesstoken.FieldOrganizationID, field.TypeString, value)
	}
	if atuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesstoken.OwnerTable,
			Columns: []string{accesstoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = atuo.schemaConfig.AccessToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := atuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   accesstoken.OwnerTable,
			Columns: []string{accesstoken.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = atuo.schemaConfig.AccessToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = atuo.schemaConfig.AccessToken
	ctx = internal.NewSchemaConfigContext(ctx, atuo.schemaConfig)
	_node = &AccessToken{config: atuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, atuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{accesstoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	atuo.mutation.done = true
	return _node, nil
}
