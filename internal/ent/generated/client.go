// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/datumforge/datum/internal/ent/generated/migrate"
	"github.com/flume/enthistory"

	"net/http"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/datumforge/datum/internal/ent/generated/emailverificationtoken"
	"github.com/datumforge/datum/internal/ent/generated/emailverificationtokenhistory"
	"github.com/datumforge/datum/internal/ent/generated/entitlement"
	"github.com/datumforge/datum/internal/ent/generated/entitlementhistory"
	"github.com/datumforge/datum/internal/ent/generated/group"
	"github.com/datumforge/datum/internal/ent/generated/grouphistory"
	"github.com/datumforge/datum/internal/ent/generated/groupsetting"
	"github.com/datumforge/datum/internal/ent/generated/groupsettinghistory"
	"github.com/datumforge/datum/internal/ent/generated/integration"
	"github.com/datumforge/datum/internal/ent/generated/integrationhistory"
	"github.com/datumforge/datum/internal/ent/generated/oauthprovider"
	"github.com/datumforge/datum/internal/ent/generated/oauthproviderhistory"
	"github.com/datumforge/datum/internal/ent/generated/ohauthtootoken"
	"github.com/datumforge/datum/internal/ent/generated/ohauthtootokenhistory"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/organizationhistory"
	"github.com/datumforge/datum/internal/ent/generated/organizationsetting"
	"github.com/datumforge/datum/internal/ent/generated/organizationsettinghistory"
	"github.com/datumforge/datum/internal/ent/generated/passwordresettoken"
	"github.com/datumforge/datum/internal/ent/generated/passwordresettokenhistory"
	"github.com/datumforge/datum/internal/ent/generated/personalaccesstoken"
	"github.com/datumforge/datum/internal/ent/generated/personalaccesstokenhistory"
	"github.com/datumforge/datum/internal/ent/generated/session"
	"github.com/datumforge/datum/internal/ent/generated/sessionhistory"
	"github.com/datumforge/datum/internal/ent/generated/user"
	"github.com/datumforge/datum/internal/ent/generated/userhistory"
	"github.com/datumforge/datum/internal/ent/generated/usersetting"
	"github.com/datumforge/datum/internal/ent/generated/usersettinghistory"
	"github.com/datumforge/datum/internal/fga"
	"go.uber.org/zap"
	"gocloud.dev/secrets"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// EmailVerificationToken is the client for interacting with the EmailVerificationToken builders.
	EmailVerificationToken *EmailVerificationTokenClient
	// EmailVerificationTokenHistory is the client for interacting with the EmailVerificationTokenHistory builders.
	EmailVerificationTokenHistory *EmailVerificationTokenHistoryClient
	// Entitlement is the client for interacting with the Entitlement builders.
	Entitlement *EntitlementClient
	// EntitlementHistory is the client for interacting with the EntitlementHistory builders.
	EntitlementHistory *EntitlementHistoryClient
	// Group is the client for interacting with the Group builders.
	Group *GroupClient
	// GroupHistory is the client for interacting with the GroupHistory builders.
	GroupHistory *GroupHistoryClient
	// GroupSetting is the client for interacting with the GroupSetting builders.
	GroupSetting *GroupSettingClient
	// GroupSettingHistory is the client for interacting with the GroupSettingHistory builders.
	GroupSettingHistory *GroupSettingHistoryClient
	// Integration is the client for interacting with the Integration builders.
	Integration *IntegrationClient
	// IntegrationHistory is the client for interacting with the IntegrationHistory builders.
	IntegrationHistory *IntegrationHistoryClient
	// OauthProvider is the client for interacting with the OauthProvider builders.
	OauthProvider *OauthProviderClient
	// OauthProviderHistory is the client for interacting with the OauthProviderHistory builders.
	OauthProviderHistory *OauthProviderHistoryClient
	// OhAuthTooToken is the client for interacting with the OhAuthTooToken builders.
	OhAuthTooToken *OhAuthTooTokenClient
	// OhAuthTooTokenHistory is the client for interacting with the OhAuthTooTokenHistory builders.
	OhAuthTooTokenHistory *OhAuthTooTokenHistoryClient
	// Organization is the client for interacting with the Organization builders.
	Organization *OrganizationClient
	// OrganizationHistory is the client for interacting with the OrganizationHistory builders.
	OrganizationHistory *OrganizationHistoryClient
	// OrganizationSetting is the client for interacting with the OrganizationSetting builders.
	OrganizationSetting *OrganizationSettingClient
	// OrganizationSettingHistory is the client for interacting with the OrganizationSettingHistory builders.
	OrganizationSettingHistory *OrganizationSettingHistoryClient
	// PasswordResetToken is the client for interacting with the PasswordResetToken builders.
	PasswordResetToken *PasswordResetTokenClient
	// PasswordResetTokenHistory is the client for interacting with the PasswordResetTokenHistory builders.
	PasswordResetTokenHistory *PasswordResetTokenHistoryClient
	// PersonalAccessToken is the client for interacting with the PersonalAccessToken builders.
	PersonalAccessToken *PersonalAccessTokenClient
	// PersonalAccessTokenHistory is the client for interacting with the PersonalAccessTokenHistory builders.
	PersonalAccessTokenHistory *PersonalAccessTokenHistoryClient
	// Session is the client for interacting with the Session builders.
	Session *SessionClient
	// SessionHistory is the client for interacting with the SessionHistory builders.
	SessionHistory *SessionHistoryClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// UserHistory is the client for interacting with the UserHistory builders.
	UserHistory *UserHistoryClient
	// UserSetting is the client for interacting with the UserSetting builders.
	UserSetting *UserSettingClient
	// UserSettingHistory is the client for interacting with the UserSettingHistory builders.
	UserSettingHistory *UserSettingHistoryClient

	// historyActivated determines if the history hooks have already been activated
	historyActivated bool
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.EmailVerificationToken = NewEmailVerificationTokenClient(c.config)
	c.EmailVerificationTokenHistory = NewEmailVerificationTokenHistoryClient(c.config)
	c.Entitlement = NewEntitlementClient(c.config)
	c.EntitlementHistory = NewEntitlementHistoryClient(c.config)
	c.Group = NewGroupClient(c.config)
	c.GroupHistory = NewGroupHistoryClient(c.config)
	c.GroupSetting = NewGroupSettingClient(c.config)
	c.GroupSettingHistory = NewGroupSettingHistoryClient(c.config)
	c.Integration = NewIntegrationClient(c.config)
	c.IntegrationHistory = NewIntegrationHistoryClient(c.config)
	c.OauthProvider = NewOauthProviderClient(c.config)
	c.OauthProviderHistory = NewOauthProviderHistoryClient(c.config)
	c.OhAuthTooToken = NewOhAuthTooTokenClient(c.config)
	c.OhAuthTooTokenHistory = NewOhAuthTooTokenHistoryClient(c.config)
	c.Organization = NewOrganizationClient(c.config)
	c.OrganizationHistory = NewOrganizationHistoryClient(c.config)
	c.OrganizationSetting = NewOrganizationSettingClient(c.config)
	c.OrganizationSettingHistory = NewOrganizationSettingHistoryClient(c.config)
	c.PasswordResetToken = NewPasswordResetTokenClient(c.config)
	c.PasswordResetTokenHistory = NewPasswordResetTokenHistoryClient(c.config)
	c.PersonalAccessToken = NewPersonalAccessTokenClient(c.config)
	c.PersonalAccessTokenHistory = NewPersonalAccessTokenHistoryClient(c.config)
	c.Session = NewSessionClient(c.config)
	c.SessionHistory = NewSessionHistoryClient(c.config)
	c.User = NewUserClient(c.config)
	c.UserHistory = NewUserHistoryClient(c.config)
	c.UserSetting = NewUserSettingClient(c.config)
	c.UserSettingHistory = NewUserSettingHistoryClient(c.config)
}

// withHistory adds the history hooks to the appropriate schemas - generated by enthistory
func (c *Client) WithHistory() {
	if !c.historyActivated {
		for _, hook := range enthistory.HistoryHooks[*EmailVerificationTokenMutation]() {
			c.EmailVerificationToken.Use(hook)
		}
		for _, hook := range enthistory.HistoryHooks[*EntitlementMutation]() {
			c.Entitlement.Use(hook)
		}
		for _, hook := range enthistory.HistoryHooks[*GroupMutation]() {
			c.Group.Use(hook)
		}
		for _, hook := range enthistory.HistoryHooks[*GroupSettingMutation]() {
			c.GroupSetting.Use(hook)
		}
		for _, hook := range enthistory.HistoryHooks[*IntegrationMutation]() {
			c.Integration.Use(hook)
		}
		for _, hook := range enthistory.HistoryHooks[*OauthProviderMutation]() {
			c.OauthProvider.Use(hook)
		}
		for _, hook := range enthistory.HistoryHooks[*OhAuthTooTokenMutation]() {
			c.OhAuthTooToken.Use(hook)
		}
		for _, hook := range enthistory.HistoryHooks[*OrganizationMutation]() {
			c.Organization.Use(hook)
		}
		for _, hook := range enthistory.HistoryHooks[*OrganizationSettingMutation]() {
			c.OrganizationSetting.Use(hook)
		}
		for _, hook := range enthistory.HistoryHooks[*PasswordResetTokenMutation]() {
			c.PasswordResetToken.Use(hook)
		}
		for _, hook := range enthistory.HistoryHooks[*PersonalAccessTokenMutation]() {
			c.PersonalAccessToken.Use(hook)
		}
		for _, hook := range enthistory.HistoryHooks[*SessionMutation]() {
			c.Session.Use(hook)
		}
		for _, hook := range enthistory.HistoryHooks[*UserMutation]() {
			c.User.Use(hook)
		}
		for _, hook := range enthistory.HistoryHooks[*UserSettingMutation]() {
			c.UserSetting.Use(hook)
		}
		c.historyActivated = true
	}
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters        *inters
		SecretsKeeper *secrets.Keeper
		Authz         fga.Client
		Logger        zap.SugaredLogger
		HTTPClient    *http.Client
		// schemaConfig contains alternative names for all tables.
		schemaConfig SchemaConfig
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// SecretsKeeper configures the SecretsKeeper.
func SecretsKeeper(v *secrets.Keeper) Option {
	return func(c *config) {
		c.SecretsKeeper = v
	}
}

// Authz configures the Authz.
func Authz(v fga.Client) Option {
	return func(c *config) {
		c.Authz = v
	}
}

// Logger configures the Logger.
func Logger(v zap.SugaredLogger) Option {
	return func(c *config) {
		c.Logger = v
	}
}

// HTTPClient configures the HTTPClient.
func HTTPClient(v *http.Client) Option {
	return func(c *config) {
		c.HTTPClient = v
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("generated: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("generated: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                           ctx,
		config:                        cfg,
		EmailVerificationToken:        NewEmailVerificationTokenClient(cfg),
		EmailVerificationTokenHistory: NewEmailVerificationTokenHistoryClient(cfg),
		Entitlement:                   NewEntitlementClient(cfg),
		EntitlementHistory:            NewEntitlementHistoryClient(cfg),
		Group:                         NewGroupClient(cfg),
		GroupHistory:                  NewGroupHistoryClient(cfg),
		GroupSetting:                  NewGroupSettingClient(cfg),
		GroupSettingHistory:           NewGroupSettingHistoryClient(cfg),
		Integration:                   NewIntegrationClient(cfg),
		IntegrationHistory:            NewIntegrationHistoryClient(cfg),
		OauthProvider:                 NewOauthProviderClient(cfg),
		OauthProviderHistory:          NewOauthProviderHistoryClient(cfg),
		OhAuthTooToken:                NewOhAuthTooTokenClient(cfg),
		OhAuthTooTokenHistory:         NewOhAuthTooTokenHistoryClient(cfg),
		Organization:                  NewOrganizationClient(cfg),
		OrganizationHistory:           NewOrganizationHistoryClient(cfg),
		OrganizationSetting:           NewOrganizationSettingClient(cfg),
		OrganizationSettingHistory:    NewOrganizationSettingHistoryClient(cfg),
		PasswordResetToken:            NewPasswordResetTokenClient(cfg),
		PasswordResetTokenHistory:     NewPasswordResetTokenHistoryClient(cfg),
		PersonalAccessToken:           NewPersonalAccessTokenClient(cfg),
		PersonalAccessTokenHistory:    NewPersonalAccessTokenHistoryClient(cfg),
		Session:                       NewSessionClient(cfg),
		SessionHistory:                NewSessionHistoryClient(cfg),
		User:                          NewUserClient(cfg),
		UserHistory:                   NewUserHistoryClient(cfg),
		UserSetting:                   NewUserSettingClient(cfg),
		UserSettingHistory:            NewUserSettingHistoryClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                           ctx,
		config:                        cfg,
		EmailVerificationToken:        NewEmailVerificationTokenClient(cfg),
		EmailVerificationTokenHistory: NewEmailVerificationTokenHistoryClient(cfg),
		Entitlement:                   NewEntitlementClient(cfg),
		EntitlementHistory:            NewEntitlementHistoryClient(cfg),
		Group:                         NewGroupClient(cfg),
		GroupHistory:                  NewGroupHistoryClient(cfg),
		GroupSetting:                  NewGroupSettingClient(cfg),
		GroupSettingHistory:           NewGroupSettingHistoryClient(cfg),
		Integration:                   NewIntegrationClient(cfg),
		IntegrationHistory:            NewIntegrationHistoryClient(cfg),
		OauthProvider:                 NewOauthProviderClient(cfg),
		OauthProviderHistory:          NewOauthProviderHistoryClient(cfg),
		OhAuthTooToken:                NewOhAuthTooTokenClient(cfg),
		OhAuthTooTokenHistory:         NewOhAuthTooTokenHistoryClient(cfg),
		Organization:                  NewOrganizationClient(cfg),
		OrganizationHistory:           NewOrganizationHistoryClient(cfg),
		OrganizationSetting:           NewOrganizationSettingClient(cfg),
		OrganizationSettingHistory:    NewOrganizationSettingHistoryClient(cfg),
		PasswordResetToken:            NewPasswordResetTokenClient(cfg),
		PasswordResetTokenHistory:     NewPasswordResetTokenHistoryClient(cfg),
		PersonalAccessToken:           NewPersonalAccessTokenClient(cfg),
		PersonalAccessTokenHistory:    NewPersonalAccessTokenHistoryClient(cfg),
		Session:                       NewSessionClient(cfg),
		SessionHistory:                NewSessionHistoryClient(cfg),
		User:                          NewUserClient(cfg),
		UserHistory:                   NewUserHistoryClient(cfg),
		UserSetting:                   NewUserSettingClient(cfg),
		UserSettingHistory:            NewUserSettingHistoryClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		EmailVerificationToken.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.EmailVerificationToken, c.EmailVerificationTokenHistory, c.Entitlement,
		c.EntitlementHistory, c.Group, c.GroupHistory, c.GroupSetting,
		c.GroupSettingHistory, c.Integration, c.IntegrationHistory, c.OauthProvider,
		c.OauthProviderHistory, c.OhAuthTooToken, c.OhAuthTooTokenHistory,
		c.Organization, c.OrganizationHistory, c.OrganizationSetting,
		c.OrganizationSettingHistory, c.PasswordResetToken,
		c.PasswordResetTokenHistory, c.PersonalAccessToken,
		c.PersonalAccessTokenHistory, c.Session, c.SessionHistory, c.User,
		c.UserHistory, c.UserSetting, c.UserSettingHistory,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.EmailVerificationToken, c.EmailVerificationTokenHistory, c.Entitlement,
		c.EntitlementHistory, c.Group, c.GroupHistory, c.GroupSetting,
		c.GroupSettingHistory, c.Integration, c.IntegrationHistory, c.OauthProvider,
		c.OauthProviderHistory, c.OhAuthTooToken, c.OhAuthTooTokenHistory,
		c.Organization, c.OrganizationHistory, c.OrganizationSetting,
		c.OrganizationSettingHistory, c.PasswordResetToken,
		c.PasswordResetTokenHistory, c.PersonalAccessToken,
		c.PersonalAccessTokenHistory, c.Session, c.SessionHistory, c.User,
		c.UserHistory, c.UserSetting, c.UserSettingHistory,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *EmailVerificationTokenMutation:
		return c.EmailVerificationToken.mutate(ctx, m)
	case *EmailVerificationTokenHistoryMutation:
		return c.EmailVerificationTokenHistory.mutate(ctx, m)
	case *EntitlementMutation:
		return c.Entitlement.mutate(ctx, m)
	case *EntitlementHistoryMutation:
		return c.EntitlementHistory.mutate(ctx, m)
	case *GroupMutation:
		return c.Group.mutate(ctx, m)
	case *GroupHistoryMutation:
		return c.GroupHistory.mutate(ctx, m)
	case *GroupSettingMutation:
		return c.GroupSetting.mutate(ctx, m)
	case *GroupSettingHistoryMutation:
		return c.GroupSettingHistory.mutate(ctx, m)
	case *IntegrationMutation:
		return c.Integration.mutate(ctx, m)
	case *IntegrationHistoryMutation:
		return c.IntegrationHistory.mutate(ctx, m)
	case *OauthProviderMutation:
		return c.OauthProvider.mutate(ctx, m)
	case *OauthProviderHistoryMutation:
		return c.OauthProviderHistory.mutate(ctx, m)
	case *OhAuthTooTokenMutation:
		return c.OhAuthTooToken.mutate(ctx, m)
	case *OhAuthTooTokenHistoryMutation:
		return c.OhAuthTooTokenHistory.mutate(ctx, m)
	case *OrganizationMutation:
		return c.Organization.mutate(ctx, m)
	case *OrganizationHistoryMutation:
		return c.OrganizationHistory.mutate(ctx, m)
	case *OrganizationSettingMutation:
		return c.OrganizationSetting.mutate(ctx, m)
	case *OrganizationSettingHistoryMutation:
		return c.OrganizationSettingHistory.mutate(ctx, m)
	case *PasswordResetTokenMutation:
		return c.PasswordResetToken.mutate(ctx, m)
	case *PasswordResetTokenHistoryMutation:
		return c.PasswordResetTokenHistory.mutate(ctx, m)
	case *PersonalAccessTokenMutation:
		return c.PersonalAccessToken.mutate(ctx, m)
	case *PersonalAccessTokenHistoryMutation:
		return c.PersonalAccessTokenHistory.mutate(ctx, m)
	case *SessionMutation:
		return c.Session.mutate(ctx, m)
	case *SessionHistoryMutation:
		return c.SessionHistory.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *UserHistoryMutation:
		return c.UserHistory.mutate(ctx, m)
	case *UserSettingMutation:
		return c.UserSetting.mutate(ctx, m)
	case *UserSettingHistoryMutation:
		return c.UserSettingHistory.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("generated: unknown mutation type %T", m)
	}
}

// EmailVerificationTokenClient is a client for the EmailVerificationToken schema.
type EmailVerificationTokenClient struct {
	config
}

// NewEmailVerificationTokenClient returns a client for the EmailVerificationToken from the given config.
func NewEmailVerificationTokenClient(c config) *EmailVerificationTokenClient {
	return &EmailVerificationTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emailverificationtoken.Hooks(f(g(h())))`.
func (c *EmailVerificationTokenClient) Use(hooks ...Hook) {
	c.hooks.EmailVerificationToken = append(c.hooks.EmailVerificationToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `emailverificationtoken.Intercept(f(g(h())))`.
func (c *EmailVerificationTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmailVerificationToken = append(c.inters.EmailVerificationToken, interceptors...)
}

// Create returns a builder for creating a EmailVerificationToken entity.
func (c *EmailVerificationTokenClient) Create() *EmailVerificationTokenCreate {
	mutation := newEmailVerificationTokenMutation(c.config, OpCreate)
	return &EmailVerificationTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmailVerificationToken entities.
func (c *EmailVerificationTokenClient) CreateBulk(builders ...*EmailVerificationTokenCreate) *EmailVerificationTokenCreateBulk {
	return &EmailVerificationTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmailVerificationTokenClient) MapCreateBulk(slice any, setFunc func(*EmailVerificationTokenCreate, int)) *EmailVerificationTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmailVerificationTokenCreateBulk{err: fmt.Errorf("calling to EmailVerificationTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmailVerificationTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmailVerificationTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmailVerificationToken.
func (c *EmailVerificationTokenClient) Update() *EmailVerificationTokenUpdate {
	mutation := newEmailVerificationTokenMutation(c.config, OpUpdate)
	return &EmailVerificationTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailVerificationTokenClient) UpdateOne(evt *EmailVerificationToken) *EmailVerificationTokenUpdateOne {
	mutation := newEmailVerificationTokenMutation(c.config, OpUpdateOne, withEmailVerificationToken(evt))
	return &EmailVerificationTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailVerificationTokenClient) UpdateOneID(id string) *EmailVerificationTokenUpdateOne {
	mutation := newEmailVerificationTokenMutation(c.config, OpUpdateOne, withEmailVerificationTokenID(id))
	return &EmailVerificationTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmailVerificationToken.
func (c *EmailVerificationTokenClient) Delete() *EmailVerificationTokenDelete {
	mutation := newEmailVerificationTokenMutation(c.config, OpDelete)
	return &EmailVerificationTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailVerificationTokenClient) DeleteOne(evt *EmailVerificationToken) *EmailVerificationTokenDeleteOne {
	return c.DeleteOneID(evt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailVerificationTokenClient) DeleteOneID(id string) *EmailVerificationTokenDeleteOne {
	builder := c.Delete().Where(emailverificationtoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailVerificationTokenDeleteOne{builder}
}

// Query returns a query builder for EmailVerificationToken.
func (c *EmailVerificationTokenClient) Query() *EmailVerificationTokenQuery {
	return &EmailVerificationTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmailVerificationToken},
		inters: c.Interceptors(),
	}
}

// Get returns a EmailVerificationToken entity by its id.
func (c *EmailVerificationTokenClient) Get(ctx context.Context, id string) (*EmailVerificationToken, error) {
	return c.Query().Where(emailverificationtoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailVerificationTokenClient) GetX(ctx context.Context, id string) *EmailVerificationToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a EmailVerificationToken.
func (c *EmailVerificationTokenClient) QueryOwner(evt *EmailVerificationToken) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := evt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(emailverificationtoken.Table, emailverificationtoken.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, emailverificationtoken.OwnerTable, emailverificationtoken.OwnerColumn),
		)
		schemaConfig := evt.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.EmailVerificationToken
		fromV = sqlgraph.Neighbors(evt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EmailVerificationTokenClient) Hooks() []Hook {
	hooks := c.hooks.EmailVerificationToken
	return append(hooks[:len(hooks):len(hooks)], emailverificationtoken.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EmailVerificationTokenClient) Interceptors() []Interceptor {
	inters := c.inters.EmailVerificationToken
	return append(inters[:len(inters):len(inters)], emailverificationtoken.Interceptors[:]...)
}

func (c *EmailVerificationTokenClient) mutate(ctx context.Context, m *EmailVerificationTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmailVerificationTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmailVerificationTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmailVerificationTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmailVerificationTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown EmailVerificationToken mutation op: %q", m.Op())
	}
}

// EmailVerificationTokenHistoryClient is a client for the EmailVerificationTokenHistory schema.
type EmailVerificationTokenHistoryClient struct {
	config
}

// NewEmailVerificationTokenHistoryClient returns a client for the EmailVerificationTokenHistory from the given config.
func NewEmailVerificationTokenHistoryClient(c config) *EmailVerificationTokenHistoryClient {
	return &EmailVerificationTokenHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `emailverificationtokenhistory.Hooks(f(g(h())))`.
func (c *EmailVerificationTokenHistoryClient) Use(hooks ...Hook) {
	c.hooks.EmailVerificationTokenHistory = append(c.hooks.EmailVerificationTokenHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `emailverificationtokenhistory.Intercept(f(g(h())))`.
func (c *EmailVerificationTokenHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.EmailVerificationTokenHistory = append(c.inters.EmailVerificationTokenHistory, interceptors...)
}

// Create returns a builder for creating a EmailVerificationTokenHistory entity.
func (c *EmailVerificationTokenHistoryClient) Create() *EmailVerificationTokenHistoryCreate {
	mutation := newEmailVerificationTokenHistoryMutation(c.config, OpCreate)
	return &EmailVerificationTokenHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EmailVerificationTokenHistory entities.
func (c *EmailVerificationTokenHistoryClient) CreateBulk(builders ...*EmailVerificationTokenHistoryCreate) *EmailVerificationTokenHistoryCreateBulk {
	return &EmailVerificationTokenHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EmailVerificationTokenHistoryClient) MapCreateBulk(slice any, setFunc func(*EmailVerificationTokenHistoryCreate, int)) *EmailVerificationTokenHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EmailVerificationTokenHistoryCreateBulk{err: fmt.Errorf("calling to EmailVerificationTokenHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EmailVerificationTokenHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EmailVerificationTokenHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EmailVerificationTokenHistory.
func (c *EmailVerificationTokenHistoryClient) Update() *EmailVerificationTokenHistoryUpdate {
	mutation := newEmailVerificationTokenHistoryMutation(c.config, OpUpdate)
	return &EmailVerificationTokenHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EmailVerificationTokenHistoryClient) UpdateOne(evth *EmailVerificationTokenHistory) *EmailVerificationTokenHistoryUpdateOne {
	mutation := newEmailVerificationTokenHistoryMutation(c.config, OpUpdateOne, withEmailVerificationTokenHistory(evth))
	return &EmailVerificationTokenHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EmailVerificationTokenHistoryClient) UpdateOneID(id string) *EmailVerificationTokenHistoryUpdateOne {
	mutation := newEmailVerificationTokenHistoryMutation(c.config, OpUpdateOne, withEmailVerificationTokenHistoryID(id))
	return &EmailVerificationTokenHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EmailVerificationTokenHistory.
func (c *EmailVerificationTokenHistoryClient) Delete() *EmailVerificationTokenHistoryDelete {
	mutation := newEmailVerificationTokenHistoryMutation(c.config, OpDelete)
	return &EmailVerificationTokenHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EmailVerificationTokenHistoryClient) DeleteOne(evth *EmailVerificationTokenHistory) *EmailVerificationTokenHistoryDeleteOne {
	return c.DeleteOneID(evth.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EmailVerificationTokenHistoryClient) DeleteOneID(id string) *EmailVerificationTokenHistoryDeleteOne {
	builder := c.Delete().Where(emailverificationtokenhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EmailVerificationTokenHistoryDeleteOne{builder}
}

// Query returns a query builder for EmailVerificationTokenHistory.
func (c *EmailVerificationTokenHistoryClient) Query() *EmailVerificationTokenHistoryQuery {
	return &EmailVerificationTokenHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEmailVerificationTokenHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a EmailVerificationTokenHistory entity by its id.
func (c *EmailVerificationTokenHistoryClient) Get(ctx context.Context, id string) (*EmailVerificationTokenHistory, error) {
	return c.Query().Where(emailverificationtokenhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EmailVerificationTokenHistoryClient) GetX(ctx context.Context, id string) *EmailVerificationTokenHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EmailVerificationTokenHistoryClient) Hooks() []Hook {
	return c.hooks.EmailVerificationTokenHistory
}

// Interceptors returns the client interceptors.
func (c *EmailVerificationTokenHistoryClient) Interceptors() []Interceptor {
	return c.inters.EmailVerificationTokenHistory
}

func (c *EmailVerificationTokenHistoryClient) mutate(ctx context.Context, m *EmailVerificationTokenHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EmailVerificationTokenHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EmailVerificationTokenHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EmailVerificationTokenHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EmailVerificationTokenHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown EmailVerificationTokenHistory mutation op: %q", m.Op())
	}
}

// EntitlementClient is a client for the Entitlement schema.
type EntitlementClient struct {
	config
}

// NewEntitlementClient returns a client for the Entitlement from the given config.
func NewEntitlementClient(c config) *EntitlementClient {
	return &EntitlementClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entitlement.Hooks(f(g(h())))`.
func (c *EntitlementClient) Use(hooks ...Hook) {
	c.hooks.Entitlement = append(c.hooks.Entitlement, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `entitlement.Intercept(f(g(h())))`.
func (c *EntitlementClient) Intercept(interceptors ...Interceptor) {
	c.inters.Entitlement = append(c.inters.Entitlement, interceptors...)
}

// Create returns a builder for creating a Entitlement entity.
func (c *EntitlementClient) Create() *EntitlementCreate {
	mutation := newEntitlementMutation(c.config, OpCreate)
	return &EntitlementCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Entitlement entities.
func (c *EntitlementClient) CreateBulk(builders ...*EntitlementCreate) *EntitlementCreateBulk {
	return &EntitlementCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntitlementClient) MapCreateBulk(slice any, setFunc func(*EntitlementCreate, int)) *EntitlementCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntitlementCreateBulk{err: fmt.Errorf("calling to EntitlementClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntitlementCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntitlementCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Entitlement.
func (c *EntitlementClient) Update() *EntitlementUpdate {
	mutation := newEntitlementMutation(c.config, OpUpdate)
	return &EntitlementUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntitlementClient) UpdateOne(e *Entitlement) *EntitlementUpdateOne {
	mutation := newEntitlementMutation(c.config, OpUpdateOne, withEntitlement(e))
	return &EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntitlementClient) UpdateOneID(id string) *EntitlementUpdateOne {
	mutation := newEntitlementMutation(c.config, OpUpdateOne, withEntitlementID(id))
	return &EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Entitlement.
func (c *EntitlementClient) Delete() *EntitlementDelete {
	mutation := newEntitlementMutation(c.config, OpDelete)
	return &EntitlementDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntitlementClient) DeleteOne(e *Entitlement) *EntitlementDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntitlementClient) DeleteOneID(id string) *EntitlementDeleteOne {
	builder := c.Delete().Where(entitlement.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntitlementDeleteOne{builder}
}

// Query returns a query builder for Entitlement.
func (c *EntitlementClient) Query() *EntitlementQuery {
	return &EntitlementQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntitlement},
		inters: c.Interceptors(),
	}
}

// Get returns a Entitlement entity by its id.
func (c *EntitlementClient) Get(ctx context.Context, id string) (*Entitlement, error) {
	return c.Query().Where(entitlement.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntitlementClient) GetX(ctx context.Context, id string) *Entitlement {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Entitlement.
func (c *EntitlementClient) QueryOwner(e *Entitlement) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := e.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(entitlement.Table, entitlement.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, entitlement.OwnerTable, entitlement.OwnerColumn),
		)
		schemaConfig := e.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Entitlement
		fromV = sqlgraph.Neighbors(e.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *EntitlementClient) Hooks() []Hook {
	hooks := c.hooks.Entitlement
	return append(hooks[:len(hooks):len(hooks)], entitlement.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *EntitlementClient) Interceptors() []Interceptor {
	inters := c.inters.Entitlement
	return append(inters[:len(inters):len(inters)], entitlement.Interceptors[:]...)
}

func (c *EntitlementClient) mutate(ctx context.Context, m *EntitlementMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntitlementCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntitlementUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntitlementUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntitlementDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Entitlement mutation op: %q", m.Op())
	}
}

// EntitlementHistoryClient is a client for the EntitlementHistory schema.
type EntitlementHistoryClient struct {
	config
}

// NewEntitlementHistoryClient returns a client for the EntitlementHistory from the given config.
func NewEntitlementHistoryClient(c config) *EntitlementHistoryClient {
	return &EntitlementHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `entitlementhistory.Hooks(f(g(h())))`.
func (c *EntitlementHistoryClient) Use(hooks ...Hook) {
	c.hooks.EntitlementHistory = append(c.hooks.EntitlementHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `entitlementhistory.Intercept(f(g(h())))`.
func (c *EntitlementHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.EntitlementHistory = append(c.inters.EntitlementHistory, interceptors...)
}

// Create returns a builder for creating a EntitlementHistory entity.
func (c *EntitlementHistoryClient) Create() *EntitlementHistoryCreate {
	mutation := newEntitlementHistoryMutation(c.config, OpCreate)
	return &EntitlementHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of EntitlementHistory entities.
func (c *EntitlementHistoryClient) CreateBulk(builders ...*EntitlementHistoryCreate) *EntitlementHistoryCreateBulk {
	return &EntitlementHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *EntitlementHistoryClient) MapCreateBulk(slice any, setFunc func(*EntitlementHistoryCreate, int)) *EntitlementHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &EntitlementHistoryCreateBulk{err: fmt.Errorf("calling to EntitlementHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*EntitlementHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &EntitlementHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for EntitlementHistory.
func (c *EntitlementHistoryClient) Update() *EntitlementHistoryUpdate {
	mutation := newEntitlementHistoryMutation(c.config, OpUpdate)
	return &EntitlementHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *EntitlementHistoryClient) UpdateOne(eh *EntitlementHistory) *EntitlementHistoryUpdateOne {
	mutation := newEntitlementHistoryMutation(c.config, OpUpdateOne, withEntitlementHistory(eh))
	return &EntitlementHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *EntitlementHistoryClient) UpdateOneID(id string) *EntitlementHistoryUpdateOne {
	mutation := newEntitlementHistoryMutation(c.config, OpUpdateOne, withEntitlementHistoryID(id))
	return &EntitlementHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for EntitlementHistory.
func (c *EntitlementHistoryClient) Delete() *EntitlementHistoryDelete {
	mutation := newEntitlementHistoryMutation(c.config, OpDelete)
	return &EntitlementHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *EntitlementHistoryClient) DeleteOne(eh *EntitlementHistory) *EntitlementHistoryDeleteOne {
	return c.DeleteOneID(eh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *EntitlementHistoryClient) DeleteOneID(id string) *EntitlementHistoryDeleteOne {
	builder := c.Delete().Where(entitlementhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &EntitlementHistoryDeleteOne{builder}
}

// Query returns a query builder for EntitlementHistory.
func (c *EntitlementHistoryClient) Query() *EntitlementHistoryQuery {
	return &EntitlementHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeEntitlementHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a EntitlementHistory entity by its id.
func (c *EntitlementHistoryClient) Get(ctx context.Context, id string) (*EntitlementHistory, error) {
	return c.Query().Where(entitlementhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *EntitlementHistoryClient) GetX(ctx context.Context, id string) *EntitlementHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *EntitlementHistoryClient) Hooks() []Hook {
	return c.hooks.EntitlementHistory
}

// Interceptors returns the client interceptors.
func (c *EntitlementHistoryClient) Interceptors() []Interceptor {
	return c.inters.EntitlementHistory
}

func (c *EntitlementHistoryClient) mutate(ctx context.Context, m *EntitlementHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&EntitlementHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&EntitlementHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&EntitlementHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&EntitlementHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown EntitlementHistory mutation op: %q", m.Op())
	}
}

// GroupClient is a client for the Group schema.
type GroupClient struct {
	config
}

// NewGroupClient returns a client for the Group from the given config.
func NewGroupClient(c config) *GroupClient {
	return &GroupClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `group.Hooks(f(g(h())))`.
func (c *GroupClient) Use(hooks ...Hook) {
	c.hooks.Group = append(c.hooks.Group, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `group.Intercept(f(g(h())))`.
func (c *GroupClient) Intercept(interceptors ...Interceptor) {
	c.inters.Group = append(c.inters.Group, interceptors...)
}

// Create returns a builder for creating a Group entity.
func (c *GroupClient) Create() *GroupCreate {
	mutation := newGroupMutation(c.config, OpCreate)
	return &GroupCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Group entities.
func (c *GroupClient) CreateBulk(builders ...*GroupCreate) *GroupCreateBulk {
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GroupClient) MapCreateBulk(slice any, setFunc func(*GroupCreate, int)) *GroupCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GroupCreateBulk{err: fmt.Errorf("calling to GroupClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GroupCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GroupCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Group.
func (c *GroupClient) Update() *GroupUpdate {
	mutation := newGroupMutation(c.config, OpUpdate)
	return &GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupClient) UpdateOne(gr *Group) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroup(gr))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupClient) UpdateOneID(id string) *GroupUpdateOne {
	mutation := newGroupMutation(c.config, OpUpdateOne, withGroupID(id))
	return &GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Group.
func (c *GroupClient) Delete() *GroupDelete {
	mutation := newGroupMutation(c.config, OpDelete)
	return &GroupDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupClient) DeleteOne(gr *Group) *GroupDeleteOne {
	return c.DeleteOneID(gr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupClient) DeleteOneID(id string) *GroupDeleteOne {
	builder := c.Delete().Where(group.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupDeleteOne{builder}
}

// Query returns a query builder for Group.
func (c *GroupClient) Query() *GroupQuery {
	return &GroupQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroup},
		inters: c.Interceptors(),
	}
}

// Get returns a Group entity by its id.
func (c *GroupClient) Get(ctx context.Context, id string) (*Group, error) {
	return c.Query().Where(group.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupClient) GetX(ctx context.Context, id string) *Group {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySetting queries the setting edge of a Group.
func (c *GroupClient) QuerySetting(gr *Group) *GroupSettingQuery {
	query := (&GroupSettingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(groupsetting.Table, groupsetting.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, group.SettingTable, group.SettingColumn),
		)
		schemaConfig := gr.schemaConfig
		step.To.Schema = schemaConfig.GroupSetting
		step.Edge.Schema = schemaConfig.GroupSetting
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a Group.
func (c *GroupClient) QueryUsers(gr *Group) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, group.UsersTable, group.UsersPrimaryKey...),
		)
		schemaConfig := gr.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.GroupUsers
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOwner queries the owner edge of a Group.
func (c *GroupClient) QueryOwner(gr *Group) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(group.Table, group.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, group.OwnerTable, group.OwnerColumn),
		)
		schemaConfig := gr.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Group
		fromV = sqlgraph.Neighbors(gr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupClient) Hooks() []Hook {
	hooks := c.hooks.Group
	return append(hooks[:len(hooks):len(hooks)], group.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *GroupClient) Interceptors() []Interceptor {
	inters := c.inters.Group
	return append(inters[:len(inters):len(inters)], group.Interceptors[:]...)
}

func (c *GroupClient) mutate(ctx context.Context, m *GroupMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Group mutation op: %q", m.Op())
	}
}

// GroupHistoryClient is a client for the GroupHistory schema.
type GroupHistoryClient struct {
	config
}

// NewGroupHistoryClient returns a client for the GroupHistory from the given config.
func NewGroupHistoryClient(c config) *GroupHistoryClient {
	return &GroupHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `grouphistory.Hooks(f(g(h())))`.
func (c *GroupHistoryClient) Use(hooks ...Hook) {
	c.hooks.GroupHistory = append(c.hooks.GroupHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `grouphistory.Intercept(f(g(h())))`.
func (c *GroupHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.GroupHistory = append(c.inters.GroupHistory, interceptors...)
}

// Create returns a builder for creating a GroupHistory entity.
func (c *GroupHistoryClient) Create() *GroupHistoryCreate {
	mutation := newGroupHistoryMutation(c.config, OpCreate)
	return &GroupHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupHistory entities.
func (c *GroupHistoryClient) CreateBulk(builders ...*GroupHistoryCreate) *GroupHistoryCreateBulk {
	return &GroupHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GroupHistoryClient) MapCreateBulk(slice any, setFunc func(*GroupHistoryCreate, int)) *GroupHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GroupHistoryCreateBulk{err: fmt.Errorf("calling to GroupHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GroupHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GroupHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupHistory.
func (c *GroupHistoryClient) Update() *GroupHistoryUpdate {
	mutation := newGroupHistoryMutation(c.config, OpUpdate)
	return &GroupHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupHistoryClient) UpdateOne(gh *GroupHistory) *GroupHistoryUpdateOne {
	mutation := newGroupHistoryMutation(c.config, OpUpdateOne, withGroupHistory(gh))
	return &GroupHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupHistoryClient) UpdateOneID(id string) *GroupHistoryUpdateOne {
	mutation := newGroupHistoryMutation(c.config, OpUpdateOne, withGroupHistoryID(id))
	return &GroupHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupHistory.
func (c *GroupHistoryClient) Delete() *GroupHistoryDelete {
	mutation := newGroupHistoryMutation(c.config, OpDelete)
	return &GroupHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupHistoryClient) DeleteOne(gh *GroupHistory) *GroupHistoryDeleteOne {
	return c.DeleteOneID(gh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupHistoryClient) DeleteOneID(id string) *GroupHistoryDeleteOne {
	builder := c.Delete().Where(grouphistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupHistoryDeleteOne{builder}
}

// Query returns a query builder for GroupHistory.
func (c *GroupHistoryClient) Query() *GroupHistoryQuery {
	return &GroupHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroupHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a GroupHistory entity by its id.
func (c *GroupHistoryClient) Get(ctx context.Context, id string) (*GroupHistory, error) {
	return c.Query().Where(grouphistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupHistoryClient) GetX(ctx context.Context, id string) *GroupHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GroupHistoryClient) Hooks() []Hook {
	return c.hooks.GroupHistory
}

// Interceptors returns the client interceptors.
func (c *GroupHistoryClient) Interceptors() []Interceptor {
	return c.inters.GroupHistory
}

func (c *GroupHistoryClient) mutate(ctx context.Context, m *GroupHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown GroupHistory mutation op: %q", m.Op())
	}
}

// GroupSettingClient is a client for the GroupSetting schema.
type GroupSettingClient struct {
	config
}

// NewGroupSettingClient returns a client for the GroupSetting from the given config.
func NewGroupSettingClient(c config) *GroupSettingClient {
	return &GroupSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupsetting.Hooks(f(g(h())))`.
func (c *GroupSettingClient) Use(hooks ...Hook) {
	c.hooks.GroupSetting = append(c.hooks.GroupSetting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `groupsetting.Intercept(f(g(h())))`.
func (c *GroupSettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.GroupSetting = append(c.inters.GroupSetting, interceptors...)
}

// Create returns a builder for creating a GroupSetting entity.
func (c *GroupSettingClient) Create() *GroupSettingCreate {
	mutation := newGroupSettingMutation(c.config, OpCreate)
	return &GroupSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupSetting entities.
func (c *GroupSettingClient) CreateBulk(builders ...*GroupSettingCreate) *GroupSettingCreateBulk {
	return &GroupSettingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GroupSettingClient) MapCreateBulk(slice any, setFunc func(*GroupSettingCreate, int)) *GroupSettingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GroupSettingCreateBulk{err: fmt.Errorf("calling to GroupSettingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GroupSettingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GroupSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupSetting.
func (c *GroupSettingClient) Update() *GroupSettingUpdate {
	mutation := newGroupSettingMutation(c.config, OpUpdate)
	return &GroupSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupSettingClient) UpdateOne(gs *GroupSetting) *GroupSettingUpdateOne {
	mutation := newGroupSettingMutation(c.config, OpUpdateOne, withGroupSetting(gs))
	return &GroupSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupSettingClient) UpdateOneID(id string) *GroupSettingUpdateOne {
	mutation := newGroupSettingMutation(c.config, OpUpdateOne, withGroupSettingID(id))
	return &GroupSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupSetting.
func (c *GroupSettingClient) Delete() *GroupSettingDelete {
	mutation := newGroupSettingMutation(c.config, OpDelete)
	return &GroupSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupSettingClient) DeleteOne(gs *GroupSetting) *GroupSettingDeleteOne {
	return c.DeleteOneID(gs.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupSettingClient) DeleteOneID(id string) *GroupSettingDeleteOne {
	builder := c.Delete().Where(groupsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupSettingDeleteOne{builder}
}

// Query returns a query builder for GroupSetting.
func (c *GroupSettingClient) Query() *GroupSettingQuery {
	return &GroupSettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroupSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a GroupSetting entity by its id.
func (c *GroupSettingClient) Get(ctx context.Context, id string) (*GroupSetting, error) {
	return c.Query().Where(groupsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupSettingClient) GetX(ctx context.Context, id string) *GroupSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryGroup queries the group edge of a GroupSetting.
func (c *GroupSettingClient) QueryGroup(gs *GroupSetting) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := gs.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(groupsetting.Table, groupsetting.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, groupsetting.GroupTable, groupsetting.GroupColumn),
		)
		schemaConfig := gs.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.GroupSetting
		fromV = sqlgraph.Neighbors(gs.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *GroupSettingClient) Hooks() []Hook {
	hooks := c.hooks.GroupSetting
	return append(hooks[:len(hooks):len(hooks)], groupsetting.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *GroupSettingClient) Interceptors() []Interceptor {
	inters := c.inters.GroupSetting
	return append(inters[:len(inters):len(inters)], groupsetting.Interceptors[:]...)
}

func (c *GroupSettingClient) mutate(ctx context.Context, m *GroupSettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupSettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupSettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown GroupSetting mutation op: %q", m.Op())
	}
}

// GroupSettingHistoryClient is a client for the GroupSettingHistory schema.
type GroupSettingHistoryClient struct {
	config
}

// NewGroupSettingHistoryClient returns a client for the GroupSettingHistory from the given config.
func NewGroupSettingHistoryClient(c config) *GroupSettingHistoryClient {
	return &GroupSettingHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `groupsettinghistory.Hooks(f(g(h())))`.
func (c *GroupSettingHistoryClient) Use(hooks ...Hook) {
	c.hooks.GroupSettingHistory = append(c.hooks.GroupSettingHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `groupsettinghistory.Intercept(f(g(h())))`.
func (c *GroupSettingHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.GroupSettingHistory = append(c.inters.GroupSettingHistory, interceptors...)
}

// Create returns a builder for creating a GroupSettingHistory entity.
func (c *GroupSettingHistoryClient) Create() *GroupSettingHistoryCreate {
	mutation := newGroupSettingHistoryMutation(c.config, OpCreate)
	return &GroupSettingHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of GroupSettingHistory entities.
func (c *GroupSettingHistoryClient) CreateBulk(builders ...*GroupSettingHistoryCreate) *GroupSettingHistoryCreateBulk {
	return &GroupSettingHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *GroupSettingHistoryClient) MapCreateBulk(slice any, setFunc func(*GroupSettingHistoryCreate, int)) *GroupSettingHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &GroupSettingHistoryCreateBulk{err: fmt.Errorf("calling to GroupSettingHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*GroupSettingHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &GroupSettingHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for GroupSettingHistory.
func (c *GroupSettingHistoryClient) Update() *GroupSettingHistoryUpdate {
	mutation := newGroupSettingHistoryMutation(c.config, OpUpdate)
	return &GroupSettingHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *GroupSettingHistoryClient) UpdateOne(gsh *GroupSettingHistory) *GroupSettingHistoryUpdateOne {
	mutation := newGroupSettingHistoryMutation(c.config, OpUpdateOne, withGroupSettingHistory(gsh))
	return &GroupSettingHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *GroupSettingHistoryClient) UpdateOneID(id string) *GroupSettingHistoryUpdateOne {
	mutation := newGroupSettingHistoryMutation(c.config, OpUpdateOne, withGroupSettingHistoryID(id))
	return &GroupSettingHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for GroupSettingHistory.
func (c *GroupSettingHistoryClient) Delete() *GroupSettingHistoryDelete {
	mutation := newGroupSettingHistoryMutation(c.config, OpDelete)
	return &GroupSettingHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *GroupSettingHistoryClient) DeleteOne(gsh *GroupSettingHistory) *GroupSettingHistoryDeleteOne {
	return c.DeleteOneID(gsh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *GroupSettingHistoryClient) DeleteOneID(id string) *GroupSettingHistoryDeleteOne {
	builder := c.Delete().Where(groupsettinghistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &GroupSettingHistoryDeleteOne{builder}
}

// Query returns a query builder for GroupSettingHistory.
func (c *GroupSettingHistoryClient) Query() *GroupSettingHistoryQuery {
	return &GroupSettingHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeGroupSettingHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a GroupSettingHistory entity by its id.
func (c *GroupSettingHistoryClient) Get(ctx context.Context, id string) (*GroupSettingHistory, error) {
	return c.Query().Where(groupsettinghistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *GroupSettingHistoryClient) GetX(ctx context.Context, id string) *GroupSettingHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *GroupSettingHistoryClient) Hooks() []Hook {
	return c.hooks.GroupSettingHistory
}

// Interceptors returns the client interceptors.
func (c *GroupSettingHistoryClient) Interceptors() []Interceptor {
	return c.inters.GroupSettingHistory
}

func (c *GroupSettingHistoryClient) mutate(ctx context.Context, m *GroupSettingHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&GroupSettingHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&GroupSettingHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&GroupSettingHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&GroupSettingHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown GroupSettingHistory mutation op: %q", m.Op())
	}
}

// IntegrationClient is a client for the Integration schema.
type IntegrationClient struct {
	config
}

// NewIntegrationClient returns a client for the Integration from the given config.
func NewIntegrationClient(c config) *IntegrationClient {
	return &IntegrationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `integration.Hooks(f(g(h())))`.
func (c *IntegrationClient) Use(hooks ...Hook) {
	c.hooks.Integration = append(c.hooks.Integration, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `integration.Intercept(f(g(h())))`.
func (c *IntegrationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Integration = append(c.inters.Integration, interceptors...)
}

// Create returns a builder for creating a Integration entity.
func (c *IntegrationClient) Create() *IntegrationCreate {
	mutation := newIntegrationMutation(c.config, OpCreate)
	return &IntegrationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Integration entities.
func (c *IntegrationClient) CreateBulk(builders ...*IntegrationCreate) *IntegrationCreateBulk {
	return &IntegrationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IntegrationClient) MapCreateBulk(slice any, setFunc func(*IntegrationCreate, int)) *IntegrationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IntegrationCreateBulk{err: fmt.Errorf("calling to IntegrationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IntegrationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IntegrationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Integration.
func (c *IntegrationClient) Update() *IntegrationUpdate {
	mutation := newIntegrationMutation(c.config, OpUpdate)
	return &IntegrationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IntegrationClient) UpdateOne(i *Integration) *IntegrationUpdateOne {
	mutation := newIntegrationMutation(c.config, OpUpdateOne, withIntegration(i))
	return &IntegrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IntegrationClient) UpdateOneID(id string) *IntegrationUpdateOne {
	mutation := newIntegrationMutation(c.config, OpUpdateOne, withIntegrationID(id))
	return &IntegrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Integration.
func (c *IntegrationClient) Delete() *IntegrationDelete {
	mutation := newIntegrationMutation(c.config, OpDelete)
	return &IntegrationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IntegrationClient) DeleteOne(i *Integration) *IntegrationDeleteOne {
	return c.DeleteOneID(i.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IntegrationClient) DeleteOneID(id string) *IntegrationDeleteOne {
	builder := c.Delete().Where(integration.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IntegrationDeleteOne{builder}
}

// Query returns a query builder for Integration.
func (c *IntegrationClient) Query() *IntegrationQuery {
	return &IntegrationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIntegration},
		inters: c.Interceptors(),
	}
}

// Get returns a Integration entity by its id.
func (c *IntegrationClient) Get(ctx context.Context, id string) (*Integration, error) {
	return c.Query().Where(integration.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IntegrationClient) GetX(ctx context.Context, id string) *Integration {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Integration.
func (c *IntegrationClient) QueryOwner(i *Integration) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := i.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(integration.Table, integration.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, integration.OwnerTable, integration.OwnerColumn),
		)
		schemaConfig := i.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Integration
		fromV = sqlgraph.Neighbors(i.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *IntegrationClient) Hooks() []Hook {
	hooks := c.hooks.Integration
	return append(hooks[:len(hooks):len(hooks)], integration.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *IntegrationClient) Interceptors() []Interceptor {
	inters := c.inters.Integration
	return append(inters[:len(inters):len(inters)], integration.Interceptors[:]...)
}

func (c *IntegrationClient) mutate(ctx context.Context, m *IntegrationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IntegrationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IntegrationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IntegrationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IntegrationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Integration mutation op: %q", m.Op())
	}
}

// IntegrationHistoryClient is a client for the IntegrationHistory schema.
type IntegrationHistoryClient struct {
	config
}

// NewIntegrationHistoryClient returns a client for the IntegrationHistory from the given config.
func NewIntegrationHistoryClient(c config) *IntegrationHistoryClient {
	return &IntegrationHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `integrationhistory.Hooks(f(g(h())))`.
func (c *IntegrationHistoryClient) Use(hooks ...Hook) {
	c.hooks.IntegrationHistory = append(c.hooks.IntegrationHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `integrationhistory.Intercept(f(g(h())))`.
func (c *IntegrationHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.IntegrationHistory = append(c.inters.IntegrationHistory, interceptors...)
}

// Create returns a builder for creating a IntegrationHistory entity.
func (c *IntegrationHistoryClient) Create() *IntegrationHistoryCreate {
	mutation := newIntegrationHistoryMutation(c.config, OpCreate)
	return &IntegrationHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IntegrationHistory entities.
func (c *IntegrationHistoryClient) CreateBulk(builders ...*IntegrationHistoryCreate) *IntegrationHistoryCreateBulk {
	return &IntegrationHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *IntegrationHistoryClient) MapCreateBulk(slice any, setFunc func(*IntegrationHistoryCreate, int)) *IntegrationHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &IntegrationHistoryCreateBulk{err: fmt.Errorf("calling to IntegrationHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*IntegrationHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &IntegrationHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IntegrationHistory.
func (c *IntegrationHistoryClient) Update() *IntegrationHistoryUpdate {
	mutation := newIntegrationHistoryMutation(c.config, OpUpdate)
	return &IntegrationHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IntegrationHistoryClient) UpdateOne(ih *IntegrationHistory) *IntegrationHistoryUpdateOne {
	mutation := newIntegrationHistoryMutation(c.config, OpUpdateOne, withIntegrationHistory(ih))
	return &IntegrationHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IntegrationHistoryClient) UpdateOneID(id string) *IntegrationHistoryUpdateOne {
	mutation := newIntegrationHistoryMutation(c.config, OpUpdateOne, withIntegrationHistoryID(id))
	return &IntegrationHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IntegrationHistory.
func (c *IntegrationHistoryClient) Delete() *IntegrationHistoryDelete {
	mutation := newIntegrationHistoryMutation(c.config, OpDelete)
	return &IntegrationHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IntegrationHistoryClient) DeleteOne(ih *IntegrationHistory) *IntegrationHistoryDeleteOne {
	return c.DeleteOneID(ih.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *IntegrationHistoryClient) DeleteOneID(id string) *IntegrationHistoryDeleteOne {
	builder := c.Delete().Where(integrationhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IntegrationHistoryDeleteOne{builder}
}

// Query returns a query builder for IntegrationHistory.
func (c *IntegrationHistoryClient) Query() *IntegrationHistoryQuery {
	return &IntegrationHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeIntegrationHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a IntegrationHistory entity by its id.
func (c *IntegrationHistoryClient) Get(ctx context.Context, id string) (*IntegrationHistory, error) {
	return c.Query().Where(integrationhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IntegrationHistoryClient) GetX(ctx context.Context, id string) *IntegrationHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *IntegrationHistoryClient) Hooks() []Hook {
	return c.hooks.IntegrationHistory
}

// Interceptors returns the client interceptors.
func (c *IntegrationHistoryClient) Interceptors() []Interceptor {
	return c.inters.IntegrationHistory
}

func (c *IntegrationHistoryClient) mutate(ctx context.Context, m *IntegrationHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&IntegrationHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&IntegrationHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&IntegrationHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&IntegrationHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown IntegrationHistory mutation op: %q", m.Op())
	}
}

// OauthProviderClient is a client for the OauthProvider schema.
type OauthProviderClient struct {
	config
}

// NewOauthProviderClient returns a client for the OauthProvider from the given config.
func NewOauthProviderClient(c config) *OauthProviderClient {
	return &OauthProviderClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthprovider.Hooks(f(g(h())))`.
func (c *OauthProviderClient) Use(hooks ...Hook) {
	c.hooks.OauthProvider = append(c.hooks.OauthProvider, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauthprovider.Intercept(f(g(h())))`.
func (c *OauthProviderClient) Intercept(interceptors ...Interceptor) {
	c.inters.OauthProvider = append(c.inters.OauthProvider, interceptors...)
}

// Create returns a builder for creating a OauthProvider entity.
func (c *OauthProviderClient) Create() *OauthProviderCreate {
	mutation := newOauthProviderMutation(c.config, OpCreate)
	return &OauthProviderCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OauthProvider entities.
func (c *OauthProviderClient) CreateBulk(builders ...*OauthProviderCreate) *OauthProviderCreateBulk {
	return &OauthProviderCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OauthProviderClient) MapCreateBulk(slice any, setFunc func(*OauthProviderCreate, int)) *OauthProviderCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OauthProviderCreateBulk{err: fmt.Errorf("calling to OauthProviderClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OauthProviderCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OauthProviderCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OauthProvider.
func (c *OauthProviderClient) Update() *OauthProviderUpdate {
	mutation := newOauthProviderMutation(c.config, OpUpdate)
	return &OauthProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OauthProviderClient) UpdateOne(op *OauthProvider) *OauthProviderUpdateOne {
	mutation := newOauthProviderMutation(c.config, OpUpdateOne, withOauthProvider(op))
	return &OauthProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OauthProviderClient) UpdateOneID(id string) *OauthProviderUpdateOne {
	mutation := newOauthProviderMutation(c.config, OpUpdateOne, withOauthProviderID(id))
	return &OauthProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OauthProvider.
func (c *OauthProviderClient) Delete() *OauthProviderDelete {
	mutation := newOauthProviderMutation(c.config, OpDelete)
	return &OauthProviderDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OauthProviderClient) DeleteOne(op *OauthProvider) *OauthProviderDeleteOne {
	return c.DeleteOneID(op.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OauthProviderClient) DeleteOneID(id string) *OauthProviderDeleteOne {
	builder := c.Delete().Where(oauthprovider.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OauthProviderDeleteOne{builder}
}

// Query returns a query builder for OauthProvider.
func (c *OauthProviderClient) Query() *OauthProviderQuery {
	return &OauthProviderQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOauthProvider},
		inters: c.Interceptors(),
	}
}

// Get returns a OauthProvider entity by its id.
func (c *OauthProviderClient) Get(ctx context.Context, id string) (*OauthProvider, error) {
	return c.Query().Where(oauthprovider.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OauthProviderClient) GetX(ctx context.Context, id string) *OauthProvider {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a OauthProvider.
func (c *OauthProviderClient) QueryOwner(op *OauthProvider) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := op.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(oauthprovider.Table, oauthprovider.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, oauthprovider.OwnerTable, oauthprovider.OwnerColumn),
		)
		schemaConfig := op.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OauthProvider
		fromV = sqlgraph.Neighbors(op.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OauthProviderClient) Hooks() []Hook {
	hooks := c.hooks.OauthProvider
	return append(hooks[:len(hooks):len(hooks)], oauthprovider.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OauthProviderClient) Interceptors() []Interceptor {
	inters := c.inters.OauthProvider
	return append(inters[:len(inters):len(inters)], oauthprovider.Interceptors[:]...)
}

func (c *OauthProviderClient) mutate(ctx context.Context, m *OauthProviderMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OauthProviderCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OauthProviderUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OauthProviderUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OauthProviderDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OauthProvider mutation op: %q", m.Op())
	}
}

// OauthProviderHistoryClient is a client for the OauthProviderHistory schema.
type OauthProviderHistoryClient struct {
	config
}

// NewOauthProviderHistoryClient returns a client for the OauthProviderHistory from the given config.
func NewOauthProviderHistoryClient(c config) *OauthProviderHistoryClient {
	return &OauthProviderHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `oauthproviderhistory.Hooks(f(g(h())))`.
func (c *OauthProviderHistoryClient) Use(hooks ...Hook) {
	c.hooks.OauthProviderHistory = append(c.hooks.OauthProviderHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `oauthproviderhistory.Intercept(f(g(h())))`.
func (c *OauthProviderHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.OauthProviderHistory = append(c.inters.OauthProviderHistory, interceptors...)
}

// Create returns a builder for creating a OauthProviderHistory entity.
func (c *OauthProviderHistoryClient) Create() *OauthProviderHistoryCreate {
	mutation := newOauthProviderHistoryMutation(c.config, OpCreate)
	return &OauthProviderHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OauthProviderHistory entities.
func (c *OauthProviderHistoryClient) CreateBulk(builders ...*OauthProviderHistoryCreate) *OauthProviderHistoryCreateBulk {
	return &OauthProviderHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OauthProviderHistoryClient) MapCreateBulk(slice any, setFunc func(*OauthProviderHistoryCreate, int)) *OauthProviderHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OauthProviderHistoryCreateBulk{err: fmt.Errorf("calling to OauthProviderHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OauthProviderHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OauthProviderHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OauthProviderHistory.
func (c *OauthProviderHistoryClient) Update() *OauthProviderHistoryUpdate {
	mutation := newOauthProviderHistoryMutation(c.config, OpUpdate)
	return &OauthProviderHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OauthProviderHistoryClient) UpdateOne(oph *OauthProviderHistory) *OauthProviderHistoryUpdateOne {
	mutation := newOauthProviderHistoryMutation(c.config, OpUpdateOne, withOauthProviderHistory(oph))
	return &OauthProviderHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OauthProviderHistoryClient) UpdateOneID(id string) *OauthProviderHistoryUpdateOne {
	mutation := newOauthProviderHistoryMutation(c.config, OpUpdateOne, withOauthProviderHistoryID(id))
	return &OauthProviderHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OauthProviderHistory.
func (c *OauthProviderHistoryClient) Delete() *OauthProviderHistoryDelete {
	mutation := newOauthProviderHistoryMutation(c.config, OpDelete)
	return &OauthProviderHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OauthProviderHistoryClient) DeleteOne(oph *OauthProviderHistory) *OauthProviderHistoryDeleteOne {
	return c.DeleteOneID(oph.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OauthProviderHistoryClient) DeleteOneID(id string) *OauthProviderHistoryDeleteOne {
	builder := c.Delete().Where(oauthproviderhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OauthProviderHistoryDeleteOne{builder}
}

// Query returns a query builder for OauthProviderHistory.
func (c *OauthProviderHistoryClient) Query() *OauthProviderHistoryQuery {
	return &OauthProviderHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOauthProviderHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a OauthProviderHistory entity by its id.
func (c *OauthProviderHistoryClient) Get(ctx context.Context, id string) (*OauthProviderHistory, error) {
	return c.Query().Where(oauthproviderhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OauthProviderHistoryClient) GetX(ctx context.Context, id string) *OauthProviderHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OauthProviderHistoryClient) Hooks() []Hook {
	return c.hooks.OauthProviderHistory
}

// Interceptors returns the client interceptors.
func (c *OauthProviderHistoryClient) Interceptors() []Interceptor {
	return c.inters.OauthProviderHistory
}

func (c *OauthProviderHistoryClient) mutate(ctx context.Context, m *OauthProviderHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OauthProviderHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OauthProviderHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OauthProviderHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OauthProviderHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OauthProviderHistory mutation op: %q", m.Op())
	}
}

// OhAuthTooTokenClient is a client for the OhAuthTooToken schema.
type OhAuthTooTokenClient struct {
	config
}

// NewOhAuthTooTokenClient returns a client for the OhAuthTooToken from the given config.
func NewOhAuthTooTokenClient(c config) *OhAuthTooTokenClient {
	return &OhAuthTooTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ohauthtootoken.Hooks(f(g(h())))`.
func (c *OhAuthTooTokenClient) Use(hooks ...Hook) {
	c.hooks.OhAuthTooToken = append(c.hooks.OhAuthTooToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ohauthtootoken.Intercept(f(g(h())))`.
func (c *OhAuthTooTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.OhAuthTooToken = append(c.inters.OhAuthTooToken, interceptors...)
}

// Create returns a builder for creating a OhAuthTooToken entity.
func (c *OhAuthTooTokenClient) Create() *OhAuthTooTokenCreate {
	mutation := newOhAuthTooTokenMutation(c.config, OpCreate)
	return &OhAuthTooTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OhAuthTooToken entities.
func (c *OhAuthTooTokenClient) CreateBulk(builders ...*OhAuthTooTokenCreate) *OhAuthTooTokenCreateBulk {
	return &OhAuthTooTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OhAuthTooTokenClient) MapCreateBulk(slice any, setFunc func(*OhAuthTooTokenCreate, int)) *OhAuthTooTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OhAuthTooTokenCreateBulk{err: fmt.Errorf("calling to OhAuthTooTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OhAuthTooTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OhAuthTooTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OhAuthTooToken.
func (c *OhAuthTooTokenClient) Update() *OhAuthTooTokenUpdate {
	mutation := newOhAuthTooTokenMutation(c.config, OpUpdate)
	return &OhAuthTooTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OhAuthTooTokenClient) UpdateOne(oatt *OhAuthTooToken) *OhAuthTooTokenUpdateOne {
	mutation := newOhAuthTooTokenMutation(c.config, OpUpdateOne, withOhAuthTooToken(oatt))
	return &OhAuthTooTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OhAuthTooTokenClient) UpdateOneID(id string) *OhAuthTooTokenUpdateOne {
	mutation := newOhAuthTooTokenMutation(c.config, OpUpdateOne, withOhAuthTooTokenID(id))
	return &OhAuthTooTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OhAuthTooToken.
func (c *OhAuthTooTokenClient) Delete() *OhAuthTooTokenDelete {
	mutation := newOhAuthTooTokenMutation(c.config, OpDelete)
	return &OhAuthTooTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OhAuthTooTokenClient) DeleteOne(oatt *OhAuthTooToken) *OhAuthTooTokenDeleteOne {
	return c.DeleteOneID(oatt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OhAuthTooTokenClient) DeleteOneID(id string) *OhAuthTooTokenDeleteOne {
	builder := c.Delete().Where(ohauthtootoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OhAuthTooTokenDeleteOne{builder}
}

// Query returns a query builder for OhAuthTooToken.
func (c *OhAuthTooTokenClient) Query() *OhAuthTooTokenQuery {
	return &OhAuthTooTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOhAuthTooToken},
		inters: c.Interceptors(),
	}
}

// Get returns a OhAuthTooToken entity by its id.
func (c *OhAuthTooTokenClient) Get(ctx context.Context, id string) (*OhAuthTooToken, error) {
	return c.Query().Where(ohauthtootoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OhAuthTooTokenClient) GetX(ctx context.Context, id string) *OhAuthTooToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OhAuthTooTokenClient) Hooks() []Hook {
	return c.hooks.OhAuthTooToken
}

// Interceptors returns the client interceptors.
func (c *OhAuthTooTokenClient) Interceptors() []Interceptor {
	return c.inters.OhAuthTooToken
}

func (c *OhAuthTooTokenClient) mutate(ctx context.Context, m *OhAuthTooTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OhAuthTooTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OhAuthTooTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OhAuthTooTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OhAuthTooTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OhAuthTooToken mutation op: %q", m.Op())
	}
}

// OhAuthTooTokenHistoryClient is a client for the OhAuthTooTokenHistory schema.
type OhAuthTooTokenHistoryClient struct {
	config
}

// NewOhAuthTooTokenHistoryClient returns a client for the OhAuthTooTokenHistory from the given config.
func NewOhAuthTooTokenHistoryClient(c config) *OhAuthTooTokenHistoryClient {
	return &OhAuthTooTokenHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `ohauthtootokenhistory.Hooks(f(g(h())))`.
func (c *OhAuthTooTokenHistoryClient) Use(hooks ...Hook) {
	c.hooks.OhAuthTooTokenHistory = append(c.hooks.OhAuthTooTokenHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `ohauthtootokenhistory.Intercept(f(g(h())))`.
func (c *OhAuthTooTokenHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.OhAuthTooTokenHistory = append(c.inters.OhAuthTooTokenHistory, interceptors...)
}

// Create returns a builder for creating a OhAuthTooTokenHistory entity.
func (c *OhAuthTooTokenHistoryClient) Create() *OhAuthTooTokenHistoryCreate {
	mutation := newOhAuthTooTokenHistoryMutation(c.config, OpCreate)
	return &OhAuthTooTokenHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OhAuthTooTokenHistory entities.
func (c *OhAuthTooTokenHistoryClient) CreateBulk(builders ...*OhAuthTooTokenHistoryCreate) *OhAuthTooTokenHistoryCreateBulk {
	return &OhAuthTooTokenHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OhAuthTooTokenHistoryClient) MapCreateBulk(slice any, setFunc func(*OhAuthTooTokenHistoryCreate, int)) *OhAuthTooTokenHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OhAuthTooTokenHistoryCreateBulk{err: fmt.Errorf("calling to OhAuthTooTokenHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OhAuthTooTokenHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OhAuthTooTokenHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OhAuthTooTokenHistory.
func (c *OhAuthTooTokenHistoryClient) Update() *OhAuthTooTokenHistoryUpdate {
	mutation := newOhAuthTooTokenHistoryMutation(c.config, OpUpdate)
	return &OhAuthTooTokenHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OhAuthTooTokenHistoryClient) UpdateOne(oatth *OhAuthTooTokenHistory) *OhAuthTooTokenHistoryUpdateOne {
	mutation := newOhAuthTooTokenHistoryMutation(c.config, OpUpdateOne, withOhAuthTooTokenHistory(oatth))
	return &OhAuthTooTokenHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OhAuthTooTokenHistoryClient) UpdateOneID(id string) *OhAuthTooTokenHistoryUpdateOne {
	mutation := newOhAuthTooTokenHistoryMutation(c.config, OpUpdateOne, withOhAuthTooTokenHistoryID(id))
	return &OhAuthTooTokenHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OhAuthTooTokenHistory.
func (c *OhAuthTooTokenHistoryClient) Delete() *OhAuthTooTokenHistoryDelete {
	mutation := newOhAuthTooTokenHistoryMutation(c.config, OpDelete)
	return &OhAuthTooTokenHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OhAuthTooTokenHistoryClient) DeleteOne(oatth *OhAuthTooTokenHistory) *OhAuthTooTokenHistoryDeleteOne {
	return c.DeleteOneID(oatth.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OhAuthTooTokenHistoryClient) DeleteOneID(id string) *OhAuthTooTokenHistoryDeleteOne {
	builder := c.Delete().Where(ohauthtootokenhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OhAuthTooTokenHistoryDeleteOne{builder}
}

// Query returns a query builder for OhAuthTooTokenHistory.
func (c *OhAuthTooTokenHistoryClient) Query() *OhAuthTooTokenHistoryQuery {
	return &OhAuthTooTokenHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOhAuthTooTokenHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a OhAuthTooTokenHistory entity by its id.
func (c *OhAuthTooTokenHistoryClient) Get(ctx context.Context, id string) (*OhAuthTooTokenHistory, error) {
	return c.Query().Where(ohauthtootokenhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OhAuthTooTokenHistoryClient) GetX(ctx context.Context, id string) *OhAuthTooTokenHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OhAuthTooTokenHistoryClient) Hooks() []Hook {
	return c.hooks.OhAuthTooTokenHistory
}

// Interceptors returns the client interceptors.
func (c *OhAuthTooTokenHistoryClient) Interceptors() []Interceptor {
	return c.inters.OhAuthTooTokenHistory
}

func (c *OhAuthTooTokenHistoryClient) mutate(ctx context.Context, m *OhAuthTooTokenHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OhAuthTooTokenHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OhAuthTooTokenHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OhAuthTooTokenHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OhAuthTooTokenHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OhAuthTooTokenHistory mutation op: %q", m.Op())
	}
}

// OrganizationClient is a client for the Organization schema.
type OrganizationClient struct {
	config
}

// NewOrganizationClient returns a client for the Organization from the given config.
func NewOrganizationClient(c config) *OrganizationClient {
	return &OrganizationClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organization.Hooks(f(g(h())))`.
func (c *OrganizationClient) Use(hooks ...Hook) {
	c.hooks.Organization = append(c.hooks.Organization, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organization.Intercept(f(g(h())))`.
func (c *OrganizationClient) Intercept(interceptors ...Interceptor) {
	c.inters.Organization = append(c.inters.Organization, interceptors...)
}

// Create returns a builder for creating a Organization entity.
func (c *OrganizationClient) Create() *OrganizationCreate {
	mutation := newOrganizationMutation(c.config, OpCreate)
	return &OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Organization entities.
func (c *OrganizationClient) CreateBulk(builders ...*OrganizationCreate) *OrganizationCreateBulk {
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationClient) MapCreateBulk(slice any, setFunc func(*OrganizationCreate, int)) *OrganizationCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationCreateBulk{err: fmt.Errorf("calling to OrganizationClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Organization.
func (c *OrganizationClient) Update() *OrganizationUpdate {
	mutation := newOrganizationMutation(c.config, OpUpdate)
	return &OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationClient) UpdateOne(o *Organization) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganization(o))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationClient) UpdateOneID(id string) *OrganizationUpdateOne {
	mutation := newOrganizationMutation(c.config, OpUpdateOne, withOrganizationID(id))
	return &OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Organization.
func (c *OrganizationClient) Delete() *OrganizationDelete {
	mutation := newOrganizationMutation(c.config, OpDelete)
	return &OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationClient) DeleteOne(o *Organization) *OrganizationDeleteOne {
	return c.DeleteOneID(o.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationClient) DeleteOneID(id string) *OrganizationDeleteOne {
	builder := c.Delete().Where(organization.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationDeleteOne{builder}
}

// Query returns a query builder for Organization.
func (c *OrganizationClient) Query() *OrganizationQuery {
	return &OrganizationQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganization},
		inters: c.Interceptors(),
	}
}

// Get returns a Organization entity by its id.
func (c *OrganizationClient) Get(ctx context.Context, id string) (*Organization, error) {
	return c.Query().Where(organization.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationClient) GetX(ctx context.Context, id string) *Organization {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryParent queries the parent edge of a Organization.
func (c *OrganizationClient) QueryParent(o *Organization) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organization.ParentTable, organization.ParentColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Organization
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryChildren queries the children edge of a Organization.
func (c *OrganizationClient) QueryChildren(o *Organization) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ChildrenTable, organization.ChildrenColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Organization
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUsers queries the users edge of a Organization.
func (c *OrganizationClient) QueryUsers(o *Organization) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, organization.UsersTable, organization.UsersPrimaryKey...),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserOrganizations
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroups queries the groups edge of a Organization.
func (c *OrganizationClient) QueryGroups(o *Organization) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.GroupsTable, organization.GroupsColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryIntegrations queries the integrations edge of a Organization.
func (c *OrganizationClient) QueryIntegrations(o *Organization) *IntegrationQuery {
	query := (&IntegrationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(integration.Table, integration.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.IntegrationsTable, organization.IntegrationsColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.Integration
		step.Edge.Schema = schemaConfig.Integration
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySetting queries the setting edge of a Organization.
func (c *OrganizationClient) QuerySetting(o *Organization) *OrganizationSettingQuery {
	query := (&OrganizationSettingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(organizationsetting.Table, organizationsetting.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, organization.SettingTable, organization.SettingColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.OrganizationSetting
		step.Edge.Schema = schemaConfig.OrganizationSetting
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEntitlements queries the entitlements edge of a Organization.
func (c *OrganizationClient) QueryEntitlements(o *Organization) *EntitlementQuery {
	query := (&EntitlementClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.EntitlementsTable, organization.EntitlementsColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.Entitlement
		step.Edge.Schema = schemaConfig.Entitlement
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryOauthprovider queries the oauthprovider edge of a Organization.
func (c *OrganizationClient) QueryOauthprovider(o *Organization) *OauthProviderQuery {
	query := (&OauthProviderClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := o.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, id),
			sqlgraph.To(oauthprovider.Table, oauthprovider.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.OauthproviderTable, organization.OauthproviderColumn),
		)
		schemaConfig := o.schemaConfig
		step.To.Schema = schemaConfig.OauthProvider
		step.Edge.Schema = schemaConfig.OauthProvider
		fromV = sqlgraph.Neighbors(o.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationClient) Hooks() []Hook {
	hooks := c.hooks.Organization
	return append(hooks[:len(hooks):len(hooks)], organization.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrganizationClient) Interceptors() []Interceptor {
	inters := c.inters.Organization
	return append(inters[:len(inters):len(inters)], organization.Interceptors[:]...)
}

func (c *OrganizationClient) mutate(ctx context.Context, m *OrganizationMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Organization mutation op: %q", m.Op())
	}
}

// OrganizationHistoryClient is a client for the OrganizationHistory schema.
type OrganizationHistoryClient struct {
	config
}

// NewOrganizationHistoryClient returns a client for the OrganizationHistory from the given config.
func NewOrganizationHistoryClient(c config) *OrganizationHistoryClient {
	return &OrganizationHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationhistory.Hooks(f(g(h())))`.
func (c *OrganizationHistoryClient) Use(hooks ...Hook) {
	c.hooks.OrganizationHistory = append(c.hooks.OrganizationHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationhistory.Intercept(f(g(h())))`.
func (c *OrganizationHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationHistory = append(c.inters.OrganizationHistory, interceptors...)
}

// Create returns a builder for creating a OrganizationHistory entity.
func (c *OrganizationHistoryClient) Create() *OrganizationHistoryCreate {
	mutation := newOrganizationHistoryMutation(c.config, OpCreate)
	return &OrganizationHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationHistory entities.
func (c *OrganizationHistoryClient) CreateBulk(builders ...*OrganizationHistoryCreate) *OrganizationHistoryCreateBulk {
	return &OrganizationHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationHistoryClient) MapCreateBulk(slice any, setFunc func(*OrganizationHistoryCreate, int)) *OrganizationHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationHistoryCreateBulk{err: fmt.Errorf("calling to OrganizationHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationHistory.
func (c *OrganizationHistoryClient) Update() *OrganizationHistoryUpdate {
	mutation := newOrganizationHistoryMutation(c.config, OpUpdate)
	return &OrganizationHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationHistoryClient) UpdateOne(oh *OrganizationHistory) *OrganizationHistoryUpdateOne {
	mutation := newOrganizationHistoryMutation(c.config, OpUpdateOne, withOrganizationHistory(oh))
	return &OrganizationHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationHistoryClient) UpdateOneID(id string) *OrganizationHistoryUpdateOne {
	mutation := newOrganizationHistoryMutation(c.config, OpUpdateOne, withOrganizationHistoryID(id))
	return &OrganizationHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationHistory.
func (c *OrganizationHistoryClient) Delete() *OrganizationHistoryDelete {
	mutation := newOrganizationHistoryMutation(c.config, OpDelete)
	return &OrganizationHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationHistoryClient) DeleteOne(oh *OrganizationHistory) *OrganizationHistoryDeleteOne {
	return c.DeleteOneID(oh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationHistoryClient) DeleteOneID(id string) *OrganizationHistoryDeleteOne {
	builder := c.Delete().Where(organizationhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationHistoryDeleteOne{builder}
}

// Query returns a query builder for OrganizationHistory.
func (c *OrganizationHistoryClient) Query() *OrganizationHistoryQuery {
	return &OrganizationHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a OrganizationHistory entity by its id.
func (c *OrganizationHistoryClient) Get(ctx context.Context, id string) (*OrganizationHistory, error) {
	return c.Query().Where(organizationhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationHistoryClient) GetX(ctx context.Context, id string) *OrganizationHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrganizationHistoryClient) Hooks() []Hook {
	return c.hooks.OrganizationHistory
}

// Interceptors returns the client interceptors.
func (c *OrganizationHistoryClient) Interceptors() []Interceptor {
	return c.inters.OrganizationHistory
}

func (c *OrganizationHistoryClient) mutate(ctx context.Context, m *OrganizationHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OrganizationHistory mutation op: %q", m.Op())
	}
}

// OrganizationSettingClient is a client for the OrganizationSetting schema.
type OrganizationSettingClient struct {
	config
}

// NewOrganizationSettingClient returns a client for the OrganizationSetting from the given config.
func NewOrganizationSettingClient(c config) *OrganizationSettingClient {
	return &OrganizationSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationsetting.Hooks(f(g(h())))`.
func (c *OrganizationSettingClient) Use(hooks ...Hook) {
	c.hooks.OrganizationSetting = append(c.hooks.OrganizationSetting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationsetting.Intercept(f(g(h())))`.
func (c *OrganizationSettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationSetting = append(c.inters.OrganizationSetting, interceptors...)
}

// Create returns a builder for creating a OrganizationSetting entity.
func (c *OrganizationSettingClient) Create() *OrganizationSettingCreate {
	mutation := newOrganizationSettingMutation(c.config, OpCreate)
	return &OrganizationSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationSetting entities.
func (c *OrganizationSettingClient) CreateBulk(builders ...*OrganizationSettingCreate) *OrganizationSettingCreateBulk {
	return &OrganizationSettingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationSettingClient) MapCreateBulk(slice any, setFunc func(*OrganizationSettingCreate, int)) *OrganizationSettingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationSettingCreateBulk{err: fmt.Errorf("calling to OrganizationSettingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationSettingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationSetting.
func (c *OrganizationSettingClient) Update() *OrganizationSettingUpdate {
	mutation := newOrganizationSettingMutation(c.config, OpUpdate)
	return &OrganizationSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationSettingClient) UpdateOne(os *OrganizationSetting) *OrganizationSettingUpdateOne {
	mutation := newOrganizationSettingMutation(c.config, OpUpdateOne, withOrganizationSetting(os))
	return &OrganizationSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationSettingClient) UpdateOneID(id string) *OrganizationSettingUpdateOne {
	mutation := newOrganizationSettingMutation(c.config, OpUpdateOne, withOrganizationSettingID(id))
	return &OrganizationSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationSetting.
func (c *OrganizationSettingClient) Delete() *OrganizationSettingDelete {
	mutation := newOrganizationSettingMutation(c.config, OpDelete)
	return &OrganizationSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationSettingClient) DeleteOne(os *OrganizationSetting) *OrganizationSettingDeleteOne {
	return c.DeleteOneID(os.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationSettingClient) DeleteOneID(id string) *OrganizationSettingDeleteOne {
	builder := c.Delete().Where(organizationsetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationSettingDeleteOne{builder}
}

// Query returns a query builder for OrganizationSetting.
func (c *OrganizationSettingClient) Query() *OrganizationSettingQuery {
	return &OrganizationSettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a OrganizationSetting entity by its id.
func (c *OrganizationSettingClient) Get(ctx context.Context, id string) (*OrganizationSetting, error) {
	return c.Query().Where(organizationsetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationSettingClient) GetX(ctx context.Context, id string) *OrganizationSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganization queries the organization edge of a OrganizationSetting.
func (c *OrganizationSettingClient) QueryOrganization(os *OrganizationSetting) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := os.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(organizationsetting.Table, organizationsetting.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, organizationsetting.OrganizationTable, organizationsetting.OrganizationColumn),
		)
		schemaConfig := os.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrganizationSetting
		fromV = sqlgraph.Neighbors(os.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *OrganizationSettingClient) Hooks() []Hook {
	hooks := c.hooks.OrganizationSetting
	return append(hooks[:len(hooks):len(hooks)], organizationsetting.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *OrganizationSettingClient) Interceptors() []Interceptor {
	inters := c.inters.OrganizationSetting
	return append(inters[:len(inters):len(inters)], organizationsetting.Interceptors[:]...)
}

func (c *OrganizationSettingClient) mutate(ctx context.Context, m *OrganizationSettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationSettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationSettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OrganizationSetting mutation op: %q", m.Op())
	}
}

// OrganizationSettingHistoryClient is a client for the OrganizationSettingHistory schema.
type OrganizationSettingHistoryClient struct {
	config
}

// NewOrganizationSettingHistoryClient returns a client for the OrganizationSettingHistory from the given config.
func NewOrganizationSettingHistoryClient(c config) *OrganizationSettingHistoryClient {
	return &OrganizationSettingHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `organizationsettinghistory.Hooks(f(g(h())))`.
func (c *OrganizationSettingHistoryClient) Use(hooks ...Hook) {
	c.hooks.OrganizationSettingHistory = append(c.hooks.OrganizationSettingHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `organizationsettinghistory.Intercept(f(g(h())))`.
func (c *OrganizationSettingHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.OrganizationSettingHistory = append(c.inters.OrganizationSettingHistory, interceptors...)
}

// Create returns a builder for creating a OrganizationSettingHistory entity.
func (c *OrganizationSettingHistoryClient) Create() *OrganizationSettingHistoryCreate {
	mutation := newOrganizationSettingHistoryMutation(c.config, OpCreate)
	return &OrganizationSettingHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of OrganizationSettingHistory entities.
func (c *OrganizationSettingHistoryClient) CreateBulk(builders ...*OrganizationSettingHistoryCreate) *OrganizationSettingHistoryCreateBulk {
	return &OrganizationSettingHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *OrganizationSettingHistoryClient) MapCreateBulk(slice any, setFunc func(*OrganizationSettingHistoryCreate, int)) *OrganizationSettingHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &OrganizationSettingHistoryCreateBulk{err: fmt.Errorf("calling to OrganizationSettingHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*OrganizationSettingHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &OrganizationSettingHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for OrganizationSettingHistory.
func (c *OrganizationSettingHistoryClient) Update() *OrganizationSettingHistoryUpdate {
	mutation := newOrganizationSettingHistoryMutation(c.config, OpUpdate)
	return &OrganizationSettingHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *OrganizationSettingHistoryClient) UpdateOne(osh *OrganizationSettingHistory) *OrganizationSettingHistoryUpdateOne {
	mutation := newOrganizationSettingHistoryMutation(c.config, OpUpdateOne, withOrganizationSettingHistory(osh))
	return &OrganizationSettingHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *OrganizationSettingHistoryClient) UpdateOneID(id string) *OrganizationSettingHistoryUpdateOne {
	mutation := newOrganizationSettingHistoryMutation(c.config, OpUpdateOne, withOrganizationSettingHistoryID(id))
	return &OrganizationSettingHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for OrganizationSettingHistory.
func (c *OrganizationSettingHistoryClient) Delete() *OrganizationSettingHistoryDelete {
	mutation := newOrganizationSettingHistoryMutation(c.config, OpDelete)
	return &OrganizationSettingHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *OrganizationSettingHistoryClient) DeleteOne(osh *OrganizationSettingHistory) *OrganizationSettingHistoryDeleteOne {
	return c.DeleteOneID(osh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *OrganizationSettingHistoryClient) DeleteOneID(id string) *OrganizationSettingHistoryDeleteOne {
	builder := c.Delete().Where(organizationsettinghistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &OrganizationSettingHistoryDeleteOne{builder}
}

// Query returns a query builder for OrganizationSettingHistory.
func (c *OrganizationSettingHistoryClient) Query() *OrganizationSettingHistoryQuery {
	return &OrganizationSettingHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeOrganizationSettingHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a OrganizationSettingHistory entity by its id.
func (c *OrganizationSettingHistoryClient) Get(ctx context.Context, id string) (*OrganizationSettingHistory, error) {
	return c.Query().Where(organizationsettinghistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *OrganizationSettingHistoryClient) GetX(ctx context.Context, id string) *OrganizationSettingHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *OrganizationSettingHistoryClient) Hooks() []Hook {
	return c.hooks.OrganizationSettingHistory
}

// Interceptors returns the client interceptors.
func (c *OrganizationSettingHistoryClient) Interceptors() []Interceptor {
	return c.inters.OrganizationSettingHistory
}

func (c *OrganizationSettingHistoryClient) mutate(ctx context.Context, m *OrganizationSettingHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&OrganizationSettingHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&OrganizationSettingHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&OrganizationSettingHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&OrganizationSettingHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown OrganizationSettingHistory mutation op: %q", m.Op())
	}
}

// PasswordResetTokenClient is a client for the PasswordResetToken schema.
type PasswordResetTokenClient struct {
	config
}

// NewPasswordResetTokenClient returns a client for the PasswordResetToken from the given config.
func NewPasswordResetTokenClient(c config) *PasswordResetTokenClient {
	return &PasswordResetTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `passwordresettoken.Hooks(f(g(h())))`.
func (c *PasswordResetTokenClient) Use(hooks ...Hook) {
	c.hooks.PasswordResetToken = append(c.hooks.PasswordResetToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `passwordresettoken.Intercept(f(g(h())))`.
func (c *PasswordResetTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.PasswordResetToken = append(c.inters.PasswordResetToken, interceptors...)
}

// Create returns a builder for creating a PasswordResetToken entity.
func (c *PasswordResetTokenClient) Create() *PasswordResetTokenCreate {
	mutation := newPasswordResetTokenMutation(c.config, OpCreate)
	return &PasswordResetTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PasswordResetToken entities.
func (c *PasswordResetTokenClient) CreateBulk(builders ...*PasswordResetTokenCreate) *PasswordResetTokenCreateBulk {
	return &PasswordResetTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PasswordResetTokenClient) MapCreateBulk(slice any, setFunc func(*PasswordResetTokenCreate, int)) *PasswordResetTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PasswordResetTokenCreateBulk{err: fmt.Errorf("calling to PasswordResetTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PasswordResetTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PasswordResetTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PasswordResetToken.
func (c *PasswordResetTokenClient) Update() *PasswordResetTokenUpdate {
	mutation := newPasswordResetTokenMutation(c.config, OpUpdate)
	return &PasswordResetTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PasswordResetTokenClient) UpdateOne(prt *PasswordResetToken) *PasswordResetTokenUpdateOne {
	mutation := newPasswordResetTokenMutation(c.config, OpUpdateOne, withPasswordResetToken(prt))
	return &PasswordResetTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PasswordResetTokenClient) UpdateOneID(id string) *PasswordResetTokenUpdateOne {
	mutation := newPasswordResetTokenMutation(c.config, OpUpdateOne, withPasswordResetTokenID(id))
	return &PasswordResetTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PasswordResetToken.
func (c *PasswordResetTokenClient) Delete() *PasswordResetTokenDelete {
	mutation := newPasswordResetTokenMutation(c.config, OpDelete)
	return &PasswordResetTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PasswordResetTokenClient) DeleteOne(prt *PasswordResetToken) *PasswordResetTokenDeleteOne {
	return c.DeleteOneID(prt.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PasswordResetTokenClient) DeleteOneID(id string) *PasswordResetTokenDeleteOne {
	builder := c.Delete().Where(passwordresettoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PasswordResetTokenDeleteOne{builder}
}

// Query returns a query builder for PasswordResetToken.
func (c *PasswordResetTokenClient) Query() *PasswordResetTokenQuery {
	return &PasswordResetTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePasswordResetToken},
		inters: c.Interceptors(),
	}
}

// Get returns a PasswordResetToken entity by its id.
func (c *PasswordResetTokenClient) Get(ctx context.Context, id string) (*PasswordResetToken, error) {
	return c.Query().Where(passwordresettoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PasswordResetTokenClient) GetX(ctx context.Context, id string) *PasswordResetToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a PasswordResetToken.
func (c *PasswordResetTokenClient) QueryOwner(prt *PasswordResetToken) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := prt.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(passwordresettoken.Table, passwordresettoken.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, passwordresettoken.OwnerTable, passwordresettoken.OwnerColumn),
		)
		schemaConfig := prt.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.PasswordResetToken
		fromV = sqlgraph.Neighbors(prt.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PasswordResetTokenClient) Hooks() []Hook {
	hooks := c.hooks.PasswordResetToken
	return append(hooks[:len(hooks):len(hooks)], passwordresettoken.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PasswordResetTokenClient) Interceptors() []Interceptor {
	inters := c.inters.PasswordResetToken
	return append(inters[:len(inters):len(inters)], passwordresettoken.Interceptors[:]...)
}

func (c *PasswordResetTokenClient) mutate(ctx context.Context, m *PasswordResetTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PasswordResetTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PasswordResetTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PasswordResetTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PasswordResetTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown PasswordResetToken mutation op: %q", m.Op())
	}
}

// PasswordResetTokenHistoryClient is a client for the PasswordResetTokenHistory schema.
type PasswordResetTokenHistoryClient struct {
	config
}

// NewPasswordResetTokenHistoryClient returns a client for the PasswordResetTokenHistory from the given config.
func NewPasswordResetTokenHistoryClient(c config) *PasswordResetTokenHistoryClient {
	return &PasswordResetTokenHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `passwordresettokenhistory.Hooks(f(g(h())))`.
func (c *PasswordResetTokenHistoryClient) Use(hooks ...Hook) {
	c.hooks.PasswordResetTokenHistory = append(c.hooks.PasswordResetTokenHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `passwordresettokenhistory.Intercept(f(g(h())))`.
func (c *PasswordResetTokenHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.PasswordResetTokenHistory = append(c.inters.PasswordResetTokenHistory, interceptors...)
}

// Create returns a builder for creating a PasswordResetTokenHistory entity.
func (c *PasswordResetTokenHistoryClient) Create() *PasswordResetTokenHistoryCreate {
	mutation := newPasswordResetTokenHistoryMutation(c.config, OpCreate)
	return &PasswordResetTokenHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PasswordResetTokenHistory entities.
func (c *PasswordResetTokenHistoryClient) CreateBulk(builders ...*PasswordResetTokenHistoryCreate) *PasswordResetTokenHistoryCreateBulk {
	return &PasswordResetTokenHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PasswordResetTokenHistoryClient) MapCreateBulk(slice any, setFunc func(*PasswordResetTokenHistoryCreate, int)) *PasswordResetTokenHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PasswordResetTokenHistoryCreateBulk{err: fmt.Errorf("calling to PasswordResetTokenHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PasswordResetTokenHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PasswordResetTokenHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PasswordResetTokenHistory.
func (c *PasswordResetTokenHistoryClient) Update() *PasswordResetTokenHistoryUpdate {
	mutation := newPasswordResetTokenHistoryMutation(c.config, OpUpdate)
	return &PasswordResetTokenHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PasswordResetTokenHistoryClient) UpdateOne(prth *PasswordResetTokenHistory) *PasswordResetTokenHistoryUpdateOne {
	mutation := newPasswordResetTokenHistoryMutation(c.config, OpUpdateOne, withPasswordResetTokenHistory(prth))
	return &PasswordResetTokenHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PasswordResetTokenHistoryClient) UpdateOneID(id string) *PasswordResetTokenHistoryUpdateOne {
	mutation := newPasswordResetTokenHistoryMutation(c.config, OpUpdateOne, withPasswordResetTokenHistoryID(id))
	return &PasswordResetTokenHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PasswordResetTokenHistory.
func (c *PasswordResetTokenHistoryClient) Delete() *PasswordResetTokenHistoryDelete {
	mutation := newPasswordResetTokenHistoryMutation(c.config, OpDelete)
	return &PasswordResetTokenHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PasswordResetTokenHistoryClient) DeleteOne(prth *PasswordResetTokenHistory) *PasswordResetTokenHistoryDeleteOne {
	return c.DeleteOneID(prth.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PasswordResetTokenHistoryClient) DeleteOneID(id string) *PasswordResetTokenHistoryDeleteOne {
	builder := c.Delete().Where(passwordresettokenhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PasswordResetTokenHistoryDeleteOne{builder}
}

// Query returns a query builder for PasswordResetTokenHistory.
func (c *PasswordResetTokenHistoryClient) Query() *PasswordResetTokenHistoryQuery {
	return &PasswordResetTokenHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePasswordResetTokenHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a PasswordResetTokenHistory entity by its id.
func (c *PasswordResetTokenHistoryClient) Get(ctx context.Context, id string) (*PasswordResetTokenHistory, error) {
	return c.Query().Where(passwordresettokenhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PasswordResetTokenHistoryClient) GetX(ctx context.Context, id string) *PasswordResetTokenHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PasswordResetTokenHistoryClient) Hooks() []Hook {
	return c.hooks.PasswordResetTokenHistory
}

// Interceptors returns the client interceptors.
func (c *PasswordResetTokenHistoryClient) Interceptors() []Interceptor {
	return c.inters.PasswordResetTokenHistory
}

func (c *PasswordResetTokenHistoryClient) mutate(ctx context.Context, m *PasswordResetTokenHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PasswordResetTokenHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PasswordResetTokenHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PasswordResetTokenHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PasswordResetTokenHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown PasswordResetTokenHistory mutation op: %q", m.Op())
	}
}

// PersonalAccessTokenClient is a client for the PersonalAccessToken schema.
type PersonalAccessTokenClient struct {
	config
}

// NewPersonalAccessTokenClient returns a client for the PersonalAccessToken from the given config.
func NewPersonalAccessTokenClient(c config) *PersonalAccessTokenClient {
	return &PersonalAccessTokenClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personalaccesstoken.Hooks(f(g(h())))`.
func (c *PersonalAccessTokenClient) Use(hooks ...Hook) {
	c.hooks.PersonalAccessToken = append(c.hooks.PersonalAccessToken, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `personalaccesstoken.Intercept(f(g(h())))`.
func (c *PersonalAccessTokenClient) Intercept(interceptors ...Interceptor) {
	c.inters.PersonalAccessToken = append(c.inters.PersonalAccessToken, interceptors...)
}

// Create returns a builder for creating a PersonalAccessToken entity.
func (c *PersonalAccessTokenClient) Create() *PersonalAccessTokenCreate {
	mutation := newPersonalAccessTokenMutation(c.config, OpCreate)
	return &PersonalAccessTokenCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PersonalAccessToken entities.
func (c *PersonalAccessTokenClient) CreateBulk(builders ...*PersonalAccessTokenCreate) *PersonalAccessTokenCreateBulk {
	return &PersonalAccessTokenCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PersonalAccessTokenClient) MapCreateBulk(slice any, setFunc func(*PersonalAccessTokenCreate, int)) *PersonalAccessTokenCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PersonalAccessTokenCreateBulk{err: fmt.Errorf("calling to PersonalAccessTokenClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PersonalAccessTokenCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PersonalAccessTokenCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PersonalAccessToken.
func (c *PersonalAccessTokenClient) Update() *PersonalAccessTokenUpdate {
	mutation := newPersonalAccessTokenMutation(c.config, OpUpdate)
	return &PersonalAccessTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonalAccessTokenClient) UpdateOne(pat *PersonalAccessToken) *PersonalAccessTokenUpdateOne {
	mutation := newPersonalAccessTokenMutation(c.config, OpUpdateOne, withPersonalAccessToken(pat))
	return &PersonalAccessTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonalAccessTokenClient) UpdateOneID(id string) *PersonalAccessTokenUpdateOne {
	mutation := newPersonalAccessTokenMutation(c.config, OpUpdateOne, withPersonalAccessTokenID(id))
	return &PersonalAccessTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PersonalAccessToken.
func (c *PersonalAccessTokenClient) Delete() *PersonalAccessTokenDelete {
	mutation := newPersonalAccessTokenMutation(c.config, OpDelete)
	return &PersonalAccessTokenDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PersonalAccessTokenClient) DeleteOne(pat *PersonalAccessToken) *PersonalAccessTokenDeleteOne {
	return c.DeleteOneID(pat.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PersonalAccessTokenClient) DeleteOneID(id string) *PersonalAccessTokenDeleteOne {
	builder := c.Delete().Where(personalaccesstoken.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonalAccessTokenDeleteOne{builder}
}

// Query returns a query builder for PersonalAccessToken.
func (c *PersonalAccessTokenClient) Query() *PersonalAccessTokenQuery {
	return &PersonalAccessTokenQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePersonalAccessToken},
		inters: c.Interceptors(),
	}
}

// Get returns a PersonalAccessToken entity by its id.
func (c *PersonalAccessTokenClient) Get(ctx context.Context, id string) (*PersonalAccessToken, error) {
	return c.Query().Where(personalaccesstoken.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonalAccessTokenClient) GetX(ctx context.Context, id string) *PersonalAccessToken {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a PersonalAccessToken.
func (c *PersonalAccessTokenClient) QueryOwner(pat *PersonalAccessToken) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pat.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(personalaccesstoken.Table, personalaccesstoken.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, personalaccesstoken.OwnerTable, personalaccesstoken.OwnerColumn),
		)
		schemaConfig := pat.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.PersonalAccessToken
		fromV = sqlgraph.Neighbors(pat.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *PersonalAccessTokenClient) Hooks() []Hook {
	hooks := c.hooks.PersonalAccessToken
	return append(hooks[:len(hooks):len(hooks)], personalaccesstoken.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *PersonalAccessTokenClient) Interceptors() []Interceptor {
	inters := c.inters.PersonalAccessToken
	return append(inters[:len(inters):len(inters)], personalaccesstoken.Interceptors[:]...)
}

func (c *PersonalAccessTokenClient) mutate(ctx context.Context, m *PersonalAccessTokenMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PersonalAccessTokenCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PersonalAccessTokenUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PersonalAccessTokenUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PersonalAccessTokenDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown PersonalAccessToken mutation op: %q", m.Op())
	}
}

// PersonalAccessTokenHistoryClient is a client for the PersonalAccessTokenHistory schema.
type PersonalAccessTokenHistoryClient struct {
	config
}

// NewPersonalAccessTokenHistoryClient returns a client for the PersonalAccessTokenHistory from the given config.
func NewPersonalAccessTokenHistoryClient(c config) *PersonalAccessTokenHistoryClient {
	return &PersonalAccessTokenHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personalaccesstokenhistory.Hooks(f(g(h())))`.
func (c *PersonalAccessTokenHistoryClient) Use(hooks ...Hook) {
	c.hooks.PersonalAccessTokenHistory = append(c.hooks.PersonalAccessTokenHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `personalaccesstokenhistory.Intercept(f(g(h())))`.
func (c *PersonalAccessTokenHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.PersonalAccessTokenHistory = append(c.inters.PersonalAccessTokenHistory, interceptors...)
}

// Create returns a builder for creating a PersonalAccessTokenHistory entity.
func (c *PersonalAccessTokenHistoryClient) Create() *PersonalAccessTokenHistoryCreate {
	mutation := newPersonalAccessTokenHistoryMutation(c.config, OpCreate)
	return &PersonalAccessTokenHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PersonalAccessTokenHistory entities.
func (c *PersonalAccessTokenHistoryClient) CreateBulk(builders ...*PersonalAccessTokenHistoryCreate) *PersonalAccessTokenHistoryCreateBulk {
	return &PersonalAccessTokenHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *PersonalAccessTokenHistoryClient) MapCreateBulk(slice any, setFunc func(*PersonalAccessTokenHistoryCreate, int)) *PersonalAccessTokenHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &PersonalAccessTokenHistoryCreateBulk{err: fmt.Errorf("calling to PersonalAccessTokenHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*PersonalAccessTokenHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &PersonalAccessTokenHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PersonalAccessTokenHistory.
func (c *PersonalAccessTokenHistoryClient) Update() *PersonalAccessTokenHistoryUpdate {
	mutation := newPersonalAccessTokenHistoryMutation(c.config, OpUpdate)
	return &PersonalAccessTokenHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonalAccessTokenHistoryClient) UpdateOne(path *PersonalAccessTokenHistory) *PersonalAccessTokenHistoryUpdateOne {
	mutation := newPersonalAccessTokenHistoryMutation(c.config, OpUpdateOne, withPersonalAccessTokenHistory(path))
	return &PersonalAccessTokenHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonalAccessTokenHistoryClient) UpdateOneID(id string) *PersonalAccessTokenHistoryUpdateOne {
	mutation := newPersonalAccessTokenHistoryMutation(c.config, OpUpdateOne, withPersonalAccessTokenHistoryID(id))
	return &PersonalAccessTokenHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PersonalAccessTokenHistory.
func (c *PersonalAccessTokenHistoryClient) Delete() *PersonalAccessTokenHistoryDelete {
	mutation := newPersonalAccessTokenHistoryMutation(c.config, OpDelete)
	return &PersonalAccessTokenHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *PersonalAccessTokenHistoryClient) DeleteOne(path *PersonalAccessTokenHistory) *PersonalAccessTokenHistoryDeleteOne {
	return c.DeleteOneID(path.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *PersonalAccessTokenHistoryClient) DeleteOneID(id string) *PersonalAccessTokenHistoryDeleteOne {
	builder := c.Delete().Where(personalaccesstokenhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonalAccessTokenHistoryDeleteOne{builder}
}

// Query returns a query builder for PersonalAccessTokenHistory.
func (c *PersonalAccessTokenHistoryClient) Query() *PersonalAccessTokenHistoryQuery {
	return &PersonalAccessTokenHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypePersonalAccessTokenHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a PersonalAccessTokenHistory entity by its id.
func (c *PersonalAccessTokenHistoryClient) Get(ctx context.Context, id string) (*PersonalAccessTokenHistory, error) {
	return c.Query().Where(personalaccesstokenhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonalAccessTokenHistoryClient) GetX(ctx context.Context, id string) *PersonalAccessTokenHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PersonalAccessTokenHistoryClient) Hooks() []Hook {
	return c.hooks.PersonalAccessTokenHistory
}

// Interceptors returns the client interceptors.
func (c *PersonalAccessTokenHistoryClient) Interceptors() []Interceptor {
	return c.inters.PersonalAccessTokenHistory
}

func (c *PersonalAccessTokenHistoryClient) mutate(ctx context.Context, m *PersonalAccessTokenHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&PersonalAccessTokenHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&PersonalAccessTokenHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&PersonalAccessTokenHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&PersonalAccessTokenHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown PersonalAccessTokenHistory mutation op: %q", m.Op())
	}
}

// SessionClient is a client for the Session schema.
type SessionClient struct {
	config
}

// NewSessionClient returns a client for the Session from the given config.
func NewSessionClient(c config) *SessionClient {
	return &SessionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `session.Hooks(f(g(h())))`.
func (c *SessionClient) Use(hooks ...Hook) {
	c.hooks.Session = append(c.hooks.Session, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `session.Intercept(f(g(h())))`.
func (c *SessionClient) Intercept(interceptors ...Interceptor) {
	c.inters.Session = append(c.inters.Session, interceptors...)
}

// Create returns a builder for creating a Session entity.
func (c *SessionClient) Create() *SessionCreate {
	mutation := newSessionMutation(c.config, OpCreate)
	return &SessionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Session entities.
func (c *SessionClient) CreateBulk(builders ...*SessionCreate) *SessionCreateBulk {
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SessionClient) MapCreateBulk(slice any, setFunc func(*SessionCreate, int)) *SessionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SessionCreateBulk{err: fmt.Errorf("calling to SessionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SessionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SessionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Session.
func (c *SessionClient) Update() *SessionUpdate {
	mutation := newSessionMutation(c.config, OpUpdate)
	return &SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionClient) UpdateOne(s *Session) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSession(s))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionClient) UpdateOneID(id string) *SessionUpdateOne {
	mutation := newSessionMutation(c.config, OpUpdateOne, withSessionID(id))
	return &SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Session.
func (c *SessionClient) Delete() *SessionDelete {
	mutation := newSessionMutation(c.config, OpDelete)
	return &SessionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionClient) DeleteOne(s *Session) *SessionDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SessionClient) DeleteOneID(id string) *SessionDeleteOne {
	builder := c.Delete().Where(session.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionDeleteOne{builder}
}

// Query returns a query builder for Session.
func (c *SessionClient) Query() *SessionQuery {
	return &SessionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSession},
		inters: c.Interceptors(),
	}
}

// Get returns a Session entity by its id.
func (c *SessionClient) Get(ctx context.Context, id string) (*Session, error) {
	return c.Query().Where(session.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionClient) GetX(ctx context.Context, id string) *Session {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOwner queries the owner edge of a Session.
func (c *SessionClient) QueryOwner(s *Session) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(session.Table, session.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, session.OwnerTable, session.OwnerColumn),
		)
		schemaConfig := s.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.Session
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SessionClient) Hooks() []Hook {
	hooks := c.hooks.Session
	return append(hooks[:len(hooks):len(hooks)], session.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *SessionClient) Interceptors() []Interceptor {
	return c.inters.Session
}

func (c *SessionClient) mutate(ctx context.Context, m *SessionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SessionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SessionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SessionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SessionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown Session mutation op: %q", m.Op())
	}
}

// SessionHistoryClient is a client for the SessionHistory schema.
type SessionHistoryClient struct {
	config
}

// NewSessionHistoryClient returns a client for the SessionHistory from the given config.
func NewSessionHistoryClient(c config) *SessionHistoryClient {
	return &SessionHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `sessionhistory.Hooks(f(g(h())))`.
func (c *SessionHistoryClient) Use(hooks ...Hook) {
	c.hooks.SessionHistory = append(c.hooks.SessionHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `sessionhistory.Intercept(f(g(h())))`.
func (c *SessionHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.SessionHistory = append(c.inters.SessionHistory, interceptors...)
}

// Create returns a builder for creating a SessionHistory entity.
func (c *SessionHistoryClient) Create() *SessionHistoryCreate {
	mutation := newSessionHistoryMutation(c.config, OpCreate)
	return &SessionHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SessionHistory entities.
func (c *SessionHistoryClient) CreateBulk(builders ...*SessionHistoryCreate) *SessionHistoryCreateBulk {
	return &SessionHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SessionHistoryClient) MapCreateBulk(slice any, setFunc func(*SessionHistoryCreate, int)) *SessionHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SessionHistoryCreateBulk{err: fmt.Errorf("calling to SessionHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SessionHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SessionHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SessionHistory.
func (c *SessionHistoryClient) Update() *SessionHistoryUpdate {
	mutation := newSessionHistoryMutation(c.config, OpUpdate)
	return &SessionHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SessionHistoryClient) UpdateOne(sh *SessionHistory) *SessionHistoryUpdateOne {
	mutation := newSessionHistoryMutation(c.config, OpUpdateOne, withSessionHistory(sh))
	return &SessionHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SessionHistoryClient) UpdateOneID(id string) *SessionHistoryUpdateOne {
	mutation := newSessionHistoryMutation(c.config, OpUpdateOne, withSessionHistoryID(id))
	return &SessionHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SessionHistory.
func (c *SessionHistoryClient) Delete() *SessionHistoryDelete {
	mutation := newSessionHistoryMutation(c.config, OpDelete)
	return &SessionHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SessionHistoryClient) DeleteOne(sh *SessionHistory) *SessionHistoryDeleteOne {
	return c.DeleteOneID(sh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SessionHistoryClient) DeleteOneID(id string) *SessionHistoryDeleteOne {
	builder := c.Delete().Where(sessionhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SessionHistoryDeleteOne{builder}
}

// Query returns a query builder for SessionHistory.
func (c *SessionHistoryClient) Query() *SessionHistoryQuery {
	return &SessionHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSessionHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a SessionHistory entity by its id.
func (c *SessionHistoryClient) Get(ctx context.Context, id string) (*SessionHistory, error) {
	return c.Query().Where(sessionhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SessionHistoryClient) GetX(ctx context.Context, id string) *SessionHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SessionHistoryClient) Hooks() []Hook {
	return c.hooks.SessionHistory
}

// Interceptors returns the client interceptors.
func (c *SessionHistoryClient) Interceptors() []Interceptor {
	return c.inters.SessionHistory
}

func (c *SessionHistoryClient) mutate(ctx context.Context, m *SessionHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SessionHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SessionHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SessionHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SessionHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown SessionHistory mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id string) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id string) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id string) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id string) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryOrganizations queries the organizations edge of a User.
func (c *UserClient) QueryOrganizations(u *User) *OrganizationQuery {
	query := (&OrganizationClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, user.OrganizationsTable, user.OrganizationsPrimaryKey...),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.UserOrganizations
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySessions queries the sessions edge of a User.
func (c *UserClient) QuerySessions(u *User) *SessionQuery {
	query := (&SessionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(session.Table, session.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.SessionsTable, user.SessionsColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.Session
		step.Edge.Schema = schemaConfig.Session
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryGroups queries the groups edge of a User.
func (c *UserClient) QueryGroups(u *User) *GroupQuery {
	query := (&GroupClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, user.GroupsTable, user.GroupsPrimaryKey...),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.GroupUsers
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryPersonalAccessTokens queries the personal_access_tokens edge of a User.
func (c *UserClient) QueryPersonalAccessTokens(u *User) *PersonalAccessTokenQuery {
	query := (&PersonalAccessTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(personalaccesstoken.Table, personalaccesstoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.PersonalAccessTokensTable, user.PersonalAccessTokensColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.PersonalAccessToken
		step.Edge.Schema = schemaConfig.PersonalAccessToken
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QuerySetting queries the setting edge of a User.
func (c *UserClient) QuerySetting(u *User) *UserSettingQuery {
	query := (&UserSettingClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(usersetting.Table, usersetting.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, user.SettingTable, user.SettingColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.UserSetting
		step.Edge.Schema = schemaConfig.UserSetting
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryEmailVerificationTokens queries the email_verification_tokens edge of a User.
func (c *UserClient) QueryEmailVerificationTokens(u *User) *EmailVerificationTokenQuery {
	query := (&EmailVerificationTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(emailverificationtoken.Table, emailverificationtoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.EmailVerificationTokensTable, user.EmailVerificationTokensColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.EmailVerificationToken
		step.Edge.Schema = schemaConfig.EmailVerificationToken
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryResetTokens queries the reset_tokens edge of a User.
func (c *UserClient) QueryResetTokens(u *User) *PasswordResetTokenQuery {
	query := (&PasswordResetTokenClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(passwordresettoken.Table, passwordresettoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ResetTokensTable, user.ResetTokensColumn),
		)
		schemaConfig := u.schemaConfig
		step.To.Schema = schemaConfig.PasswordResetToken
		step.Edge.Schema = schemaConfig.PasswordResetToken
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	hooks := c.hooks.User
	return append(hooks[:len(hooks):len(hooks)], user.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	inters := c.inters.User
	return append(inters[:len(inters):len(inters)], user.Interceptors[:]...)
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown User mutation op: %q", m.Op())
	}
}

// UserHistoryClient is a client for the UserHistory schema.
type UserHistoryClient struct {
	config
}

// NewUserHistoryClient returns a client for the UserHistory from the given config.
func NewUserHistoryClient(c config) *UserHistoryClient {
	return &UserHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `userhistory.Hooks(f(g(h())))`.
func (c *UserHistoryClient) Use(hooks ...Hook) {
	c.hooks.UserHistory = append(c.hooks.UserHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `userhistory.Intercept(f(g(h())))`.
func (c *UserHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserHistory = append(c.inters.UserHistory, interceptors...)
}

// Create returns a builder for creating a UserHistory entity.
func (c *UserHistoryClient) Create() *UserHistoryCreate {
	mutation := newUserHistoryMutation(c.config, OpCreate)
	return &UserHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserHistory entities.
func (c *UserHistoryClient) CreateBulk(builders ...*UserHistoryCreate) *UserHistoryCreateBulk {
	return &UserHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserHistoryClient) MapCreateBulk(slice any, setFunc func(*UserHistoryCreate, int)) *UserHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserHistoryCreateBulk{err: fmt.Errorf("calling to UserHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserHistory.
func (c *UserHistoryClient) Update() *UserHistoryUpdate {
	mutation := newUserHistoryMutation(c.config, OpUpdate)
	return &UserHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserHistoryClient) UpdateOne(uh *UserHistory) *UserHistoryUpdateOne {
	mutation := newUserHistoryMutation(c.config, OpUpdateOne, withUserHistory(uh))
	return &UserHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserHistoryClient) UpdateOneID(id string) *UserHistoryUpdateOne {
	mutation := newUserHistoryMutation(c.config, OpUpdateOne, withUserHistoryID(id))
	return &UserHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserHistory.
func (c *UserHistoryClient) Delete() *UserHistoryDelete {
	mutation := newUserHistoryMutation(c.config, OpDelete)
	return &UserHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserHistoryClient) DeleteOne(uh *UserHistory) *UserHistoryDeleteOne {
	return c.DeleteOneID(uh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserHistoryClient) DeleteOneID(id string) *UserHistoryDeleteOne {
	builder := c.Delete().Where(userhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserHistoryDeleteOne{builder}
}

// Query returns a query builder for UserHistory.
func (c *UserHistoryClient) Query() *UserHistoryQuery {
	return &UserHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a UserHistory entity by its id.
func (c *UserHistoryClient) Get(ctx context.Context, id string) (*UserHistory, error) {
	return c.Query().Where(userhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserHistoryClient) GetX(ctx context.Context, id string) *UserHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserHistoryClient) Hooks() []Hook {
	return c.hooks.UserHistory
}

// Interceptors returns the client interceptors.
func (c *UserHistoryClient) Interceptors() []Interceptor {
	return c.inters.UserHistory
}

func (c *UserHistoryClient) mutate(ctx context.Context, m *UserHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown UserHistory mutation op: %q", m.Op())
	}
}

// UserSettingClient is a client for the UserSetting schema.
type UserSettingClient struct {
	config
}

// NewUserSettingClient returns a client for the UserSetting from the given config.
func NewUserSettingClient(c config) *UserSettingClient {
	return &UserSettingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usersetting.Hooks(f(g(h())))`.
func (c *UserSettingClient) Use(hooks ...Hook) {
	c.hooks.UserSetting = append(c.hooks.UserSetting, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usersetting.Intercept(f(g(h())))`.
func (c *UserSettingClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserSetting = append(c.inters.UserSetting, interceptors...)
}

// Create returns a builder for creating a UserSetting entity.
func (c *UserSettingClient) Create() *UserSettingCreate {
	mutation := newUserSettingMutation(c.config, OpCreate)
	return &UserSettingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserSetting entities.
func (c *UserSettingClient) CreateBulk(builders ...*UserSettingCreate) *UserSettingCreateBulk {
	return &UserSettingCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserSettingClient) MapCreateBulk(slice any, setFunc func(*UserSettingCreate, int)) *UserSettingCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserSettingCreateBulk{err: fmt.Errorf("calling to UserSettingClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserSettingCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserSettingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserSetting.
func (c *UserSettingClient) Update() *UserSettingUpdate {
	mutation := newUserSettingMutation(c.config, OpUpdate)
	return &UserSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserSettingClient) UpdateOne(us *UserSetting) *UserSettingUpdateOne {
	mutation := newUserSettingMutation(c.config, OpUpdateOne, withUserSetting(us))
	return &UserSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserSettingClient) UpdateOneID(id string) *UserSettingUpdateOne {
	mutation := newUserSettingMutation(c.config, OpUpdateOne, withUserSettingID(id))
	return &UserSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserSetting.
func (c *UserSettingClient) Delete() *UserSettingDelete {
	mutation := newUserSettingMutation(c.config, OpDelete)
	return &UserSettingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserSettingClient) DeleteOne(us *UserSetting) *UserSettingDeleteOne {
	return c.DeleteOneID(us.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserSettingClient) DeleteOneID(id string) *UserSettingDeleteOne {
	builder := c.Delete().Where(usersetting.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserSettingDeleteOne{builder}
}

// Query returns a query builder for UserSetting.
func (c *UserSettingClient) Query() *UserSettingQuery {
	return &UserSettingQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserSetting},
		inters: c.Interceptors(),
	}
}

// Get returns a UserSetting entity by its id.
func (c *UserSettingClient) Get(ctx context.Context, id string) (*UserSetting, error) {
	return c.Query().Where(usersetting.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserSettingClient) GetX(ctx context.Context, id string) *UserSetting {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a UserSetting.
func (c *UserSettingClient) QueryUser(us *UserSetting) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := us.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(usersetting.Table, usersetting.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, usersetting.UserTable, usersetting.UserColumn),
		)
		schemaConfig := us.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserSetting
		fromV = sqlgraph.Neighbors(us.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserSettingClient) Hooks() []Hook {
	hooks := c.hooks.UserSetting
	return append(hooks[:len(hooks):len(hooks)], usersetting.Hooks[:]...)
}

// Interceptors returns the client interceptors.
func (c *UserSettingClient) Interceptors() []Interceptor {
	inters := c.inters.UserSetting
	return append(inters[:len(inters):len(inters)], usersetting.Interceptors[:]...)
}

func (c *UserSettingClient) mutate(ctx context.Context, m *UserSettingMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserSettingCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserSettingUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserSettingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserSettingDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown UserSetting mutation op: %q", m.Op())
	}
}

// UserSettingHistoryClient is a client for the UserSettingHistory schema.
type UserSettingHistoryClient struct {
	config
}

// NewUserSettingHistoryClient returns a client for the UserSettingHistory from the given config.
func NewUserSettingHistoryClient(c config) *UserSettingHistoryClient {
	return &UserSettingHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `usersettinghistory.Hooks(f(g(h())))`.
func (c *UserSettingHistoryClient) Use(hooks ...Hook) {
	c.hooks.UserSettingHistory = append(c.hooks.UserSettingHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `usersettinghistory.Intercept(f(g(h())))`.
func (c *UserSettingHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.UserSettingHistory = append(c.inters.UserSettingHistory, interceptors...)
}

// Create returns a builder for creating a UserSettingHistory entity.
func (c *UserSettingHistoryClient) Create() *UserSettingHistoryCreate {
	mutation := newUserSettingHistoryMutation(c.config, OpCreate)
	return &UserSettingHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of UserSettingHistory entities.
func (c *UserSettingHistoryClient) CreateBulk(builders ...*UserSettingHistoryCreate) *UserSettingHistoryCreateBulk {
	return &UserSettingHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserSettingHistoryClient) MapCreateBulk(slice any, setFunc func(*UserSettingHistoryCreate, int)) *UserSettingHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserSettingHistoryCreateBulk{err: fmt.Errorf("calling to UserSettingHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserSettingHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserSettingHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for UserSettingHistory.
func (c *UserSettingHistoryClient) Update() *UserSettingHistoryUpdate {
	mutation := newUserSettingHistoryMutation(c.config, OpUpdate)
	return &UserSettingHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserSettingHistoryClient) UpdateOne(ush *UserSettingHistory) *UserSettingHistoryUpdateOne {
	mutation := newUserSettingHistoryMutation(c.config, OpUpdateOne, withUserSettingHistory(ush))
	return &UserSettingHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserSettingHistoryClient) UpdateOneID(id string) *UserSettingHistoryUpdateOne {
	mutation := newUserSettingHistoryMutation(c.config, OpUpdateOne, withUserSettingHistoryID(id))
	return &UserSettingHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for UserSettingHistory.
func (c *UserSettingHistoryClient) Delete() *UserSettingHistoryDelete {
	mutation := newUserSettingHistoryMutation(c.config, OpDelete)
	return &UserSettingHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserSettingHistoryClient) DeleteOne(ush *UserSettingHistory) *UserSettingHistoryDeleteOne {
	return c.DeleteOneID(ush.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserSettingHistoryClient) DeleteOneID(id string) *UserSettingHistoryDeleteOne {
	builder := c.Delete().Where(usersettinghistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserSettingHistoryDeleteOne{builder}
}

// Query returns a query builder for UserSettingHistory.
func (c *UserSettingHistoryClient) Query() *UserSettingHistoryQuery {
	return &UserSettingHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUserSettingHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a UserSettingHistory entity by its id.
func (c *UserSettingHistoryClient) Get(ctx context.Context, id string) (*UserSettingHistory, error) {
	return c.Query().Where(usersettinghistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserSettingHistoryClient) GetX(ctx context.Context, id string) *UserSettingHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserSettingHistoryClient) Hooks() []Hook {
	return c.hooks.UserSettingHistory
}

// Interceptors returns the client interceptors.
func (c *UserSettingHistoryClient) Interceptors() []Interceptor {
	return c.inters.UserSettingHistory
}

func (c *UserSettingHistoryClient) mutate(ctx context.Context, m *UserSettingHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserSettingHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserSettingHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserSettingHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserSettingHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("generated: unknown UserSettingHistory mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		EmailVerificationToken, EmailVerificationTokenHistory, Entitlement,
		EntitlementHistory, Group, GroupHistory, GroupSetting, GroupSettingHistory,
		Integration, IntegrationHistory, OauthProvider, OauthProviderHistory,
		OhAuthTooToken, OhAuthTooTokenHistory, Organization, OrganizationHistory,
		OrganizationSetting, OrganizationSettingHistory, PasswordResetToken,
		PasswordResetTokenHistory, PersonalAccessToken, PersonalAccessTokenHistory,
		Session, SessionHistory, User, UserHistory, UserSetting,
		UserSettingHistory []ent.Hook
	}
	inters struct {
		EmailVerificationToken, EmailVerificationTokenHistory, Entitlement,
		EntitlementHistory, Group, GroupHistory, GroupSetting, GroupSettingHistory,
		Integration, IntegrationHistory, OauthProvider, OauthProviderHistory,
		OhAuthTooToken, OhAuthTooTokenHistory, Organization, OrganizationHistory,
		OrganizationSetting, OrganizationSettingHistory, PasswordResetToken,
		PasswordResetTokenHistory, PersonalAccessToken, PersonalAccessTokenHistory,
		Session, SessionHistory, User, UserHistory, UserSetting,
		UserSettingHistory []ent.Interceptor
	}
)

// SchemaConfig represents alternative schema names for all tables
// that can be passed at runtime.
type SchemaConfig = internal.SchemaConfig

// AlternateSchemas allows alternate schema names to be
// passed into ent operations.
func AlternateSchema(schemaConfig SchemaConfig) Option {
	return func(c *config) {
		c.schemaConfig = schemaConfig
	}
}
