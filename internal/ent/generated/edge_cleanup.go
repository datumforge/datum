// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/datumforge/datum/internal/ent/generated/group"
	"github.com/datumforge/datum/internal/ent/generated/integration"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/organizationsetting"
)

func EntitlementEdgeCleanup(ctx context.Context, id string) error {
	// TODO: pass in transaction so that all upstream
	// deletes can be rolled back if one fails

	return nil
}

func GroupEdgeCleanup(ctx context.Context, id string) error {
	// TODO: pass in transaction so that all upstream
	// deletes can be rolled back if one fails

	return nil
}

func GroupSettingEdgeCleanup(ctx context.Context, id string) error {
	// TODO: pass in transaction so that all upstream
	// deletes can be rolled back if one fails

	return nil
}

func IntegrationEdgeCleanup(ctx context.Context, id string) error {
	// TODO: pass in transaction so that all upstream
	// deletes can be rolled back if one fails

	return nil
}

func OauthProviderEdgeCleanup(ctx context.Context, id string) error {
	// TODO: pass in transaction so that all upstream
	// deletes can be rolled back if one fails

	return nil
}

func OhAuthTooTokenEdgeCleanup(ctx context.Context, id string) error {
	// TODO: pass in transaction so that all upstream
	// deletes can be rolled back if one fails

	return nil
}

func OrganizationEdgeCleanup(ctx context.Context, id string) error {
	// TODO: pass in transaction so that all upstream
	// deletes can be rolled back if one fails

	if exists, err := FromContext(ctx).Group.Query().Where((group.HasOwnerWith(organization.ID(id)))).Exist(ctx); err != nil && exists {
		if groupCount, err := FromContext(ctx).Group.Delete().Where(group.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			FromContext(ctx).Logger.Debugw("deleting group", "count", groupCount, "err", err)
			return err
		}
	}

	if exists, err := FromContext(ctx).Integration.Query().Where((integration.HasOwnerWith(organization.ID(id)))).Exist(ctx); err != nil && exists {
		if integrationCount, err := FromContext(ctx).Integration.Delete().Where(integration.HasOwnerWith(organization.ID(id))).Exec(ctx); err != nil {
			FromContext(ctx).Logger.Debugw("deleting integration", "count", integrationCount, "err", err)
			return err
		}
	}

	if exists, err := FromContext(ctx).OrganizationSetting.Query().Where((organizationsetting.HasOrganizationWith(organization.ID(id)))).Exist(ctx); err != nil && exists {
		if organizationsettingCount, err := FromContext(ctx).OrganizationSetting.Delete().Where(organizationsetting.HasOrganizationWith(organization.ID(id))).Exec(ctx); err != nil {
			FromContext(ctx).Logger.Debugw("deleting organizationsetting", "count", organizationsettingCount, "err", err)
			return err
		}
	}

	return nil
}

func OrganizationSettingEdgeCleanup(ctx context.Context, id string) error {
	// TODO: pass in transaction so that all upstream
	// deletes can be rolled back if one fails

	return nil
}

func PersonalAccessTokenEdgeCleanup(ctx context.Context, id string) error {
	// TODO: pass in transaction so that all upstream
	// deletes can be rolled back if one fails

	return nil
}

func SessionEdgeCleanup(ctx context.Context, id string) error {
	// TODO: pass in transaction so that all upstream
	// deletes can be rolled back if one fails

	return nil
}

func UserEdgeCleanup(ctx context.Context, id string) error {
	// TODO: pass in transaction so that all upstream
	// deletes can be rolled back if one fails

	return nil
}

func UserSettingEdgeCleanup(ctx context.Context, id string) error {
	// TODO: pass in transaction so that all upstream
	// deletes can be rolled back if one fails

	return nil
}
