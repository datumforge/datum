// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datumforge/datum/internal/ent/generated/emailverificationtokenhistory"
	"github.com/flume/enthistory"
)

// EmailVerificationTokenHistory is the model entity for the EmailVerificationTokenHistory schema.
type EmailVerificationTokenHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation enthistory.OpType `json:"operation,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the verification token sent to the user via email which should only be provided to the /verify endpoint + handler
	Token string `json:"token,omitempty"`
	// the ttl of the verification token which defaults to 7 days
	TTL *time.Time `json:"ttl,omitempty"`
	// the email used as input to generate the verification token; this is used to verify that the token when regenerated within the server matches the token emailed
	Email string `json:"email,omitempty"`
	// the comparison secret to verify the token's signature
	Secret       *[]byte `json:"secret,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*EmailVerificationTokenHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case emailverificationtokenhistory.FieldSecret:
			values[i] = new([]byte)
		case emailverificationtokenhistory.FieldID, emailverificationtokenhistory.FieldOperation, emailverificationtokenhistory.FieldRef, emailverificationtokenhistory.FieldCreatedBy, emailverificationtokenhistory.FieldUpdatedBy, emailverificationtokenhistory.FieldDeletedBy, emailverificationtokenhistory.FieldToken, emailverificationtokenhistory.FieldEmail:
			values[i] = new(sql.NullString)
		case emailverificationtokenhistory.FieldHistoryTime, emailverificationtokenhistory.FieldCreatedAt, emailverificationtokenhistory.FieldUpdatedAt, emailverificationtokenhistory.FieldDeletedAt, emailverificationtokenhistory.FieldTTL:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the EmailVerificationTokenHistory fields.
func (evth *EmailVerificationTokenHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case emailverificationtokenhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				evth.ID = value.String
			}
		case emailverificationtokenhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				evth.HistoryTime = value.Time
			}
		case emailverificationtokenhistory.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				evth.Operation = enthistory.OpType(value.String)
			}
		case emailverificationtokenhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				evth.Ref = value.String
			}
		case emailverificationtokenhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				evth.CreatedAt = value.Time
			}
		case emailverificationtokenhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				evth.UpdatedAt = value.Time
			}
		case emailverificationtokenhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				evth.CreatedBy = value.String
			}
		case emailverificationtokenhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				evth.UpdatedBy = value.String
			}
		case emailverificationtokenhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				evth.DeletedAt = value.Time
			}
		case emailverificationtokenhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				evth.DeletedBy = value.String
			}
		case emailverificationtokenhistory.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				evth.Token = value.String
			}
		case emailverificationtokenhistory.FieldTTL:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ttl", values[i])
			} else if value.Valid {
				evth.TTL = new(time.Time)
				*evth.TTL = value.Time
			}
		case emailverificationtokenhistory.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				evth.Email = value.String
			}
		case emailverificationtokenhistory.FieldSecret:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value != nil {
				evth.Secret = value
			}
		default:
			evth.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the EmailVerificationTokenHistory.
// This includes values selected through modifiers, order, etc.
func (evth *EmailVerificationTokenHistory) Value(name string) (ent.Value, error) {
	return evth.selectValues.Get(name)
}

// Update returns a builder for updating this EmailVerificationTokenHistory.
// Note that you need to call EmailVerificationTokenHistory.Unwrap() before calling this method if this EmailVerificationTokenHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (evth *EmailVerificationTokenHistory) Update() *EmailVerificationTokenHistoryUpdateOne {
	return NewEmailVerificationTokenHistoryClient(evth.config).UpdateOne(evth)
}

// Unwrap unwraps the EmailVerificationTokenHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (evth *EmailVerificationTokenHistory) Unwrap() *EmailVerificationTokenHistory {
	_tx, ok := evth.config.driver.(*txDriver)
	if !ok {
		panic("generated: EmailVerificationTokenHistory is not a transactional entity")
	}
	evth.config.driver = _tx.drv
	return evth
}

// String implements the fmt.Stringer.
func (evth *EmailVerificationTokenHistory) String() string {
	var builder strings.Builder
	builder.WriteString("EmailVerificationTokenHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", evth.ID))
	builder.WriteString("history_time=")
	builder.WriteString(evth.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", evth.Operation))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(evth.Ref)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(evth.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(evth.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(evth.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(evth.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(evth.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(evth.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(evth.Token)
	builder.WriteString(", ")
	if v := evth.TTL; v != nil {
		builder.WriteString("ttl=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(evth.Email)
	builder.WriteString(", ")
	if v := evth.Secret; v != nil {
		builder.WriteString("secret=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// EmailVerificationTokenHistories is a parsable slice of EmailVerificationTokenHistory.
type EmailVerificationTokenHistories []*EmailVerificationTokenHistory
