// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/emailverificationtokenhistory"
	"github.com/flume/enthistory"
)

// EmailVerificationTokenHistoryCreate is the builder for creating a EmailVerificationTokenHistory entity.
type EmailVerificationTokenHistoryCreate struct {
	config
	mutation *EmailVerificationTokenHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (evthc *EmailVerificationTokenHistoryCreate) SetHistoryTime(t time.Time) *EmailVerificationTokenHistoryCreate {
	evthc.mutation.SetHistoryTime(t)
	return evthc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (evthc *EmailVerificationTokenHistoryCreate) SetNillableHistoryTime(t *time.Time) *EmailVerificationTokenHistoryCreate {
	if t != nil {
		evthc.SetHistoryTime(*t)
	}
	return evthc
}

// SetOperation sets the "operation" field.
func (evthc *EmailVerificationTokenHistoryCreate) SetOperation(et enthistory.OpType) *EmailVerificationTokenHistoryCreate {
	evthc.mutation.SetOperation(et)
	return evthc
}

// SetRef sets the "ref" field.
func (evthc *EmailVerificationTokenHistoryCreate) SetRef(s string) *EmailVerificationTokenHistoryCreate {
	evthc.mutation.SetRef(s)
	return evthc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (evthc *EmailVerificationTokenHistoryCreate) SetNillableRef(s *string) *EmailVerificationTokenHistoryCreate {
	if s != nil {
		evthc.SetRef(*s)
	}
	return evthc
}

// SetCreatedAt sets the "created_at" field.
func (evthc *EmailVerificationTokenHistoryCreate) SetCreatedAt(t time.Time) *EmailVerificationTokenHistoryCreate {
	evthc.mutation.SetCreatedAt(t)
	return evthc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (evthc *EmailVerificationTokenHistoryCreate) SetNillableCreatedAt(t *time.Time) *EmailVerificationTokenHistoryCreate {
	if t != nil {
		evthc.SetCreatedAt(*t)
	}
	return evthc
}

// SetUpdatedAt sets the "updated_at" field.
func (evthc *EmailVerificationTokenHistoryCreate) SetUpdatedAt(t time.Time) *EmailVerificationTokenHistoryCreate {
	evthc.mutation.SetUpdatedAt(t)
	return evthc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (evthc *EmailVerificationTokenHistoryCreate) SetNillableUpdatedAt(t *time.Time) *EmailVerificationTokenHistoryCreate {
	if t != nil {
		evthc.SetUpdatedAt(*t)
	}
	return evthc
}

// SetCreatedBy sets the "created_by" field.
func (evthc *EmailVerificationTokenHistoryCreate) SetCreatedBy(s string) *EmailVerificationTokenHistoryCreate {
	evthc.mutation.SetCreatedBy(s)
	return evthc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (evthc *EmailVerificationTokenHistoryCreate) SetNillableCreatedBy(s *string) *EmailVerificationTokenHistoryCreate {
	if s != nil {
		evthc.SetCreatedBy(*s)
	}
	return evthc
}

// SetUpdatedBy sets the "updated_by" field.
func (evthc *EmailVerificationTokenHistoryCreate) SetUpdatedBy(s string) *EmailVerificationTokenHistoryCreate {
	evthc.mutation.SetUpdatedBy(s)
	return evthc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (evthc *EmailVerificationTokenHistoryCreate) SetNillableUpdatedBy(s *string) *EmailVerificationTokenHistoryCreate {
	if s != nil {
		evthc.SetUpdatedBy(*s)
	}
	return evthc
}

// SetDeletedAt sets the "deleted_at" field.
func (evthc *EmailVerificationTokenHistoryCreate) SetDeletedAt(t time.Time) *EmailVerificationTokenHistoryCreate {
	evthc.mutation.SetDeletedAt(t)
	return evthc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (evthc *EmailVerificationTokenHistoryCreate) SetNillableDeletedAt(t *time.Time) *EmailVerificationTokenHistoryCreate {
	if t != nil {
		evthc.SetDeletedAt(*t)
	}
	return evthc
}

// SetDeletedBy sets the "deleted_by" field.
func (evthc *EmailVerificationTokenHistoryCreate) SetDeletedBy(s string) *EmailVerificationTokenHistoryCreate {
	evthc.mutation.SetDeletedBy(s)
	return evthc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (evthc *EmailVerificationTokenHistoryCreate) SetNillableDeletedBy(s *string) *EmailVerificationTokenHistoryCreate {
	if s != nil {
		evthc.SetDeletedBy(*s)
	}
	return evthc
}

// SetToken sets the "token" field.
func (evthc *EmailVerificationTokenHistoryCreate) SetToken(s string) *EmailVerificationTokenHistoryCreate {
	evthc.mutation.SetToken(s)
	return evthc
}

// SetTTL sets the "ttl" field.
func (evthc *EmailVerificationTokenHistoryCreate) SetTTL(t time.Time) *EmailVerificationTokenHistoryCreate {
	evthc.mutation.SetTTL(t)
	return evthc
}

// SetEmail sets the "email" field.
func (evthc *EmailVerificationTokenHistoryCreate) SetEmail(s string) *EmailVerificationTokenHistoryCreate {
	evthc.mutation.SetEmail(s)
	return evthc
}

// SetSecret sets the "secret" field.
func (evthc *EmailVerificationTokenHistoryCreate) SetSecret(b []byte) *EmailVerificationTokenHistoryCreate {
	evthc.mutation.SetSecret(b)
	return evthc
}

// Mutation returns the EmailVerificationTokenHistoryMutation object of the builder.
func (evthc *EmailVerificationTokenHistoryCreate) Mutation() *EmailVerificationTokenHistoryMutation {
	return evthc.mutation
}

// Save creates the EmailVerificationTokenHistory in the database.
func (evthc *EmailVerificationTokenHistoryCreate) Save(ctx context.Context) (*EmailVerificationTokenHistory, error) {
	evthc.defaults()
	return withHooks(ctx, evthc.sqlSave, evthc.mutation, evthc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (evthc *EmailVerificationTokenHistoryCreate) SaveX(ctx context.Context) *EmailVerificationTokenHistory {
	v, err := evthc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (evthc *EmailVerificationTokenHistoryCreate) Exec(ctx context.Context) error {
	_, err := evthc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evthc *EmailVerificationTokenHistoryCreate) ExecX(ctx context.Context) {
	if err := evthc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (evthc *EmailVerificationTokenHistoryCreate) defaults() {
	if _, ok := evthc.mutation.HistoryTime(); !ok {
		v := emailverificationtokenhistory.DefaultHistoryTime()
		evthc.mutation.SetHistoryTime(v)
	}
	if _, ok := evthc.mutation.CreatedAt(); !ok {
		v := emailverificationtokenhistory.DefaultCreatedAt()
		evthc.mutation.SetCreatedAt(v)
	}
	if _, ok := evthc.mutation.UpdatedAt(); !ok {
		v := emailverificationtokenhistory.DefaultUpdatedAt()
		evthc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (evthc *EmailVerificationTokenHistoryCreate) check() error {
	if _, ok := evthc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "EmailVerificationTokenHistory.history_time"`)}
	}
	if _, ok := evthc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "EmailVerificationTokenHistory.operation"`)}
	}
	if v, ok := evthc.mutation.Operation(); ok {
		if err := emailverificationtokenhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationTokenHistory.operation": %w`, err)}
		}
	}
	if _, ok := evthc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "EmailVerificationTokenHistory.created_at"`)}
	}
	if _, ok := evthc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "EmailVerificationTokenHistory.updated_at"`)}
	}
	if _, ok := evthc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`generated: missing required field "EmailVerificationTokenHistory.token"`)}
	}
	if v, ok := evthc.mutation.Token(); ok {
		if err := emailverificationtokenhistory.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationTokenHistory.token": %w`, err)}
		}
	}
	if _, ok := evthc.mutation.TTL(); !ok {
		return &ValidationError{Name: "ttl", err: errors.New(`generated: missing required field "EmailVerificationTokenHistory.ttl"`)}
	}
	if _, ok := evthc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`generated: missing required field "EmailVerificationTokenHistory.email"`)}
	}
	if v, ok := evthc.mutation.Email(); ok {
		if err := emailverificationtokenhistory.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationTokenHistory.email": %w`, err)}
		}
	}
	if _, ok := evthc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`generated: missing required field "EmailVerificationTokenHistory.secret"`)}
	}
	if v, ok := evthc.mutation.Secret(); ok {
		if err := emailverificationtokenhistory.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationTokenHistory.secret": %w`, err)}
		}
	}
	return nil
}

func (evthc *EmailVerificationTokenHistoryCreate) sqlSave(ctx context.Context) (*EmailVerificationTokenHistory, error) {
	if err := evthc.check(); err != nil {
		return nil, err
	}
	_node, _spec := evthc.createSpec()
	if err := sqlgraph.CreateNode(ctx, evthc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected EmailVerificationTokenHistory.ID type: %T", _spec.ID.Value)
		}
	}
	evthc.mutation.id = &_node.ID
	evthc.mutation.done = true
	return _node, nil
}

func (evthc *EmailVerificationTokenHistoryCreate) createSpec() (*EmailVerificationTokenHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &EmailVerificationTokenHistory{config: evthc.config}
		_spec = sqlgraph.NewCreateSpec(emailverificationtokenhistory.Table, sqlgraph.NewFieldSpec(emailverificationtokenhistory.FieldID, field.TypeString))
	)
	_spec.Schema = evthc.schemaConfig.EmailVerificationTokenHistory
	if value, ok := evthc.mutation.HistoryTime(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := evthc.mutation.Operation(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := evthc.mutation.Ref(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := evthc.mutation.CreatedAt(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := evthc.mutation.UpdatedAt(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := evthc.mutation.CreatedBy(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := evthc.mutation.UpdatedBy(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := evthc.mutation.DeletedAt(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := evthc.mutation.DeletedBy(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := evthc.mutation.Token(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := evthc.mutation.TTL(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldTTL, field.TypeTime, value)
		_node.TTL = &value
	}
	if value, ok := evthc.mutation.Email(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := evthc.mutation.Secret(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldSecret, field.TypeBytes, value)
		_node.Secret = &value
	}
	return _node, _spec
}

// EmailVerificationTokenHistoryCreateBulk is the builder for creating many EmailVerificationTokenHistory entities in bulk.
type EmailVerificationTokenHistoryCreateBulk struct {
	config
	err      error
	builders []*EmailVerificationTokenHistoryCreate
}

// Save creates the EmailVerificationTokenHistory entities in the database.
func (evthcb *EmailVerificationTokenHistoryCreateBulk) Save(ctx context.Context) ([]*EmailVerificationTokenHistory, error) {
	if evthcb.err != nil {
		return nil, evthcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(evthcb.builders))
	nodes := make([]*EmailVerificationTokenHistory, len(evthcb.builders))
	mutators := make([]Mutator, len(evthcb.builders))
	for i := range evthcb.builders {
		func(i int, root context.Context) {
			builder := evthcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*EmailVerificationTokenHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, evthcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, evthcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, evthcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (evthcb *EmailVerificationTokenHistoryCreateBulk) SaveX(ctx context.Context) []*EmailVerificationTokenHistory {
	v, err := evthcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (evthcb *EmailVerificationTokenHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := evthcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evthcb *EmailVerificationTokenHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := evthcb.Exec(ctx); err != nil {
		panic(err)
	}
}
