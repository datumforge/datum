// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/predicate"

	"github.com/datumforge/datum/internal/ent/generated/emailverificationtokenhistory"
	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// EmailVerificationTokenHistoryDelete is the builder for deleting a EmailVerificationTokenHistory entity.
type EmailVerificationTokenHistoryDelete struct {
	config
	hooks    []Hook
	mutation *EmailVerificationTokenHistoryMutation
}

// Where appends a list predicates to the EmailVerificationTokenHistoryDelete builder.
func (evthd *EmailVerificationTokenHistoryDelete) Where(ps ...predicate.EmailVerificationTokenHistory) *EmailVerificationTokenHistoryDelete {
	evthd.mutation.Where(ps...)
	return evthd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (evthd *EmailVerificationTokenHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, evthd.sqlExec, evthd.mutation, evthd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (evthd *EmailVerificationTokenHistoryDelete) ExecX(ctx context.Context) int {
	n, err := evthd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (evthd *EmailVerificationTokenHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(emailverificationtokenhistory.Table, sqlgraph.NewFieldSpec(emailverificationtokenhistory.FieldID, field.TypeString))
	_spec.Node.Schema = evthd.schemaConfig.EmailVerificationTokenHistory
	ctx = internal.NewSchemaConfigContext(ctx, evthd.schemaConfig)
	if ps := evthd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, evthd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	evthd.mutation.done = true
	return affected, err
}

// EmailVerificationTokenHistoryDeleteOne is the builder for deleting a single EmailVerificationTokenHistory entity.
type EmailVerificationTokenHistoryDeleteOne struct {
	evthd *EmailVerificationTokenHistoryDelete
}

// Where appends a list predicates to the EmailVerificationTokenHistoryDelete builder.
func (evthdo *EmailVerificationTokenHistoryDeleteOne) Where(ps ...predicate.EmailVerificationTokenHistory) *EmailVerificationTokenHistoryDeleteOne {
	evthdo.evthd.mutation.Where(ps...)
	return evthdo
}

// Exec executes the deletion query.
func (evthdo *EmailVerificationTokenHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := evthdo.evthd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{emailverificationtokenhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (evthdo *EmailVerificationTokenHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := evthdo.Exec(ctx); err != nil {
		panic(err)
	}
}
