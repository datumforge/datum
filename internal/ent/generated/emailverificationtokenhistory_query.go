// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/emailverificationtokenhistory"
	"github.com/datumforge/datum/internal/ent/generated/predicate"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// EmailVerificationTokenHistoryQuery is the builder for querying EmailVerificationTokenHistory entities.
type EmailVerificationTokenHistoryQuery struct {
	config
	ctx        *QueryContext
	order      []emailverificationtokenhistory.OrderOption
	inters     []Interceptor
	predicates []predicate.EmailVerificationTokenHistory
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*EmailVerificationTokenHistory) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the EmailVerificationTokenHistoryQuery builder.
func (evthq *EmailVerificationTokenHistoryQuery) Where(ps ...predicate.EmailVerificationTokenHistory) *EmailVerificationTokenHistoryQuery {
	evthq.predicates = append(evthq.predicates, ps...)
	return evthq
}

// Limit the number of records to be returned by this query.
func (evthq *EmailVerificationTokenHistoryQuery) Limit(limit int) *EmailVerificationTokenHistoryQuery {
	evthq.ctx.Limit = &limit
	return evthq
}

// Offset to start from.
func (evthq *EmailVerificationTokenHistoryQuery) Offset(offset int) *EmailVerificationTokenHistoryQuery {
	evthq.ctx.Offset = &offset
	return evthq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (evthq *EmailVerificationTokenHistoryQuery) Unique(unique bool) *EmailVerificationTokenHistoryQuery {
	evthq.ctx.Unique = &unique
	return evthq
}

// Order specifies how the records should be ordered.
func (evthq *EmailVerificationTokenHistoryQuery) Order(o ...emailverificationtokenhistory.OrderOption) *EmailVerificationTokenHistoryQuery {
	evthq.order = append(evthq.order, o...)
	return evthq
}

// First returns the first EmailVerificationTokenHistory entity from the query.
// Returns a *NotFoundError when no EmailVerificationTokenHistory was found.
func (evthq *EmailVerificationTokenHistoryQuery) First(ctx context.Context) (*EmailVerificationTokenHistory, error) {
	nodes, err := evthq.Limit(1).All(setContextOp(ctx, evthq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{emailverificationtokenhistory.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (evthq *EmailVerificationTokenHistoryQuery) FirstX(ctx context.Context) *EmailVerificationTokenHistory {
	node, err := evthq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first EmailVerificationTokenHistory ID from the query.
// Returns a *NotFoundError when no EmailVerificationTokenHistory ID was found.
func (evthq *EmailVerificationTokenHistoryQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = evthq.Limit(1).IDs(setContextOp(ctx, evthq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{emailverificationtokenhistory.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (evthq *EmailVerificationTokenHistoryQuery) FirstIDX(ctx context.Context) string {
	id, err := evthq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single EmailVerificationTokenHistory entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one EmailVerificationTokenHistory entity is found.
// Returns a *NotFoundError when no EmailVerificationTokenHistory entities are found.
func (evthq *EmailVerificationTokenHistoryQuery) Only(ctx context.Context) (*EmailVerificationTokenHistory, error) {
	nodes, err := evthq.Limit(2).All(setContextOp(ctx, evthq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{emailverificationtokenhistory.Label}
	default:
		return nil, &NotSingularError{emailverificationtokenhistory.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (evthq *EmailVerificationTokenHistoryQuery) OnlyX(ctx context.Context) *EmailVerificationTokenHistory {
	node, err := evthq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only EmailVerificationTokenHistory ID in the query.
// Returns a *NotSingularError when more than one EmailVerificationTokenHistory ID is found.
// Returns a *NotFoundError when no entities are found.
func (evthq *EmailVerificationTokenHistoryQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = evthq.Limit(2).IDs(setContextOp(ctx, evthq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{emailverificationtokenhistory.Label}
	default:
		err = &NotSingularError{emailverificationtokenhistory.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (evthq *EmailVerificationTokenHistoryQuery) OnlyIDX(ctx context.Context) string {
	id, err := evthq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of EmailVerificationTokenHistories.
func (evthq *EmailVerificationTokenHistoryQuery) All(ctx context.Context) ([]*EmailVerificationTokenHistory, error) {
	ctx = setContextOp(ctx, evthq.ctx, "All")
	if err := evthq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*EmailVerificationTokenHistory, *EmailVerificationTokenHistoryQuery]()
	return withInterceptors[[]*EmailVerificationTokenHistory](ctx, evthq, qr, evthq.inters)
}

// AllX is like All, but panics if an error occurs.
func (evthq *EmailVerificationTokenHistoryQuery) AllX(ctx context.Context) []*EmailVerificationTokenHistory {
	nodes, err := evthq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of EmailVerificationTokenHistory IDs.
func (evthq *EmailVerificationTokenHistoryQuery) IDs(ctx context.Context) (ids []string, err error) {
	if evthq.ctx.Unique == nil && evthq.path != nil {
		evthq.Unique(true)
	}
	ctx = setContextOp(ctx, evthq.ctx, "IDs")
	if err = evthq.Select(emailverificationtokenhistory.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (evthq *EmailVerificationTokenHistoryQuery) IDsX(ctx context.Context) []string {
	ids, err := evthq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (evthq *EmailVerificationTokenHistoryQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, evthq.ctx, "Count")
	if err := evthq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, evthq, querierCount[*EmailVerificationTokenHistoryQuery](), evthq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (evthq *EmailVerificationTokenHistoryQuery) CountX(ctx context.Context) int {
	count, err := evthq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (evthq *EmailVerificationTokenHistoryQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, evthq.ctx, "Exist")
	switch _, err := evthq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (evthq *EmailVerificationTokenHistoryQuery) ExistX(ctx context.Context) bool {
	exist, err := evthq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the EmailVerificationTokenHistoryQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (evthq *EmailVerificationTokenHistoryQuery) Clone() *EmailVerificationTokenHistoryQuery {
	if evthq == nil {
		return nil
	}
	return &EmailVerificationTokenHistoryQuery{
		config:     evthq.config,
		ctx:        evthq.ctx.Clone(),
		order:      append([]emailverificationtokenhistory.OrderOption{}, evthq.order...),
		inters:     append([]Interceptor{}, evthq.inters...),
		predicates: append([]predicate.EmailVerificationTokenHistory{}, evthq.predicates...),
		// clone intermediate query.
		sql:  evthq.sql.Clone(),
		path: evthq.path,
	}
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.EmailVerificationTokenHistory.Query().
//		GroupBy(emailverificationtokenhistory.FieldHistoryTime).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (evthq *EmailVerificationTokenHistoryQuery) GroupBy(field string, fields ...string) *EmailVerificationTokenHistoryGroupBy {
	evthq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &EmailVerificationTokenHistoryGroupBy{build: evthq}
	grbuild.flds = &evthq.ctx.Fields
	grbuild.label = emailverificationtokenhistory.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		HistoryTime time.Time `json:"history_time,omitempty"`
//	}
//
//	client.EmailVerificationTokenHistory.Query().
//		Select(emailverificationtokenhistory.FieldHistoryTime).
//		Scan(ctx, &v)
func (evthq *EmailVerificationTokenHistoryQuery) Select(fields ...string) *EmailVerificationTokenHistorySelect {
	evthq.ctx.Fields = append(evthq.ctx.Fields, fields...)
	sbuild := &EmailVerificationTokenHistorySelect{EmailVerificationTokenHistoryQuery: evthq}
	sbuild.label = emailverificationtokenhistory.Label
	sbuild.flds, sbuild.scan = &evthq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a EmailVerificationTokenHistorySelect configured with the given aggregations.
func (evthq *EmailVerificationTokenHistoryQuery) Aggregate(fns ...AggregateFunc) *EmailVerificationTokenHistorySelect {
	return evthq.Select().Aggregate(fns...)
}

func (evthq *EmailVerificationTokenHistoryQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range evthq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, evthq); err != nil {
				return err
			}
		}
	}
	for _, f := range evthq.ctx.Fields {
		if !emailverificationtokenhistory.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if evthq.path != nil {
		prev, err := evthq.path(ctx)
		if err != nil {
			return err
		}
		evthq.sql = prev
	}
	return nil
}

func (evthq *EmailVerificationTokenHistoryQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*EmailVerificationTokenHistory, error) {
	var (
		nodes = []*EmailVerificationTokenHistory{}
		_spec = evthq.querySpec()
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*EmailVerificationTokenHistory).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &EmailVerificationTokenHistory{config: evthq.config}
		nodes = append(nodes, node)
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = evthq.schemaConfig.EmailVerificationTokenHistory
	ctx = internal.NewSchemaConfigContext(ctx, evthq.schemaConfig)
	if len(evthq.modifiers) > 0 {
		_spec.Modifiers = evthq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, evthq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	for i := range evthq.loadTotal {
		if err := evthq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (evthq *EmailVerificationTokenHistoryQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := evthq.querySpec()
	_spec.Node.Schema = evthq.schemaConfig.EmailVerificationTokenHistory
	ctx = internal.NewSchemaConfigContext(ctx, evthq.schemaConfig)
	if len(evthq.modifiers) > 0 {
		_spec.Modifiers = evthq.modifiers
	}
	_spec.Node.Columns = evthq.ctx.Fields
	if len(evthq.ctx.Fields) > 0 {
		_spec.Unique = evthq.ctx.Unique != nil && *evthq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, evthq.driver, _spec)
}

func (evthq *EmailVerificationTokenHistoryQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(emailverificationtokenhistory.Table, emailverificationtokenhistory.Columns, sqlgraph.NewFieldSpec(emailverificationtokenhistory.FieldID, field.TypeString))
	_spec.From = evthq.sql
	if unique := evthq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if evthq.path != nil {
		_spec.Unique = true
	}
	if fields := evthq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailverificationtokenhistory.FieldID)
		for i := range fields {
			if fields[i] != emailverificationtokenhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := evthq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := evthq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := evthq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := evthq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (evthq *EmailVerificationTokenHistoryQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(evthq.driver.Dialect())
	t1 := builder.Table(emailverificationtokenhistory.Table)
	columns := evthq.ctx.Fields
	if len(columns) == 0 {
		columns = emailverificationtokenhistory.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if evthq.sql != nil {
		selector = evthq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if evthq.ctx.Unique != nil && *evthq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(evthq.schemaConfig.EmailVerificationTokenHistory)
	ctx = internal.NewSchemaConfigContext(ctx, evthq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range evthq.predicates {
		p(selector)
	}
	for _, p := range evthq.order {
		p(selector)
	}
	if offset := evthq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := evthq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// EmailVerificationTokenHistoryGroupBy is the group-by builder for EmailVerificationTokenHistory entities.
type EmailVerificationTokenHistoryGroupBy struct {
	selector
	build *EmailVerificationTokenHistoryQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (evthgb *EmailVerificationTokenHistoryGroupBy) Aggregate(fns ...AggregateFunc) *EmailVerificationTokenHistoryGroupBy {
	evthgb.fns = append(evthgb.fns, fns...)
	return evthgb
}

// Scan applies the selector query and scans the result into the given value.
func (evthgb *EmailVerificationTokenHistoryGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, evthgb.build.ctx, "GroupBy")
	if err := evthgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EmailVerificationTokenHistoryQuery, *EmailVerificationTokenHistoryGroupBy](ctx, evthgb.build, evthgb, evthgb.build.inters, v)
}

func (evthgb *EmailVerificationTokenHistoryGroupBy) sqlScan(ctx context.Context, root *EmailVerificationTokenHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(evthgb.fns))
	for _, fn := range evthgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*evthgb.flds)+len(evthgb.fns))
		for _, f := range *evthgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*evthgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := evthgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// EmailVerificationTokenHistorySelect is the builder for selecting fields of EmailVerificationTokenHistory entities.
type EmailVerificationTokenHistorySelect struct {
	*EmailVerificationTokenHistoryQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (evths *EmailVerificationTokenHistorySelect) Aggregate(fns ...AggregateFunc) *EmailVerificationTokenHistorySelect {
	evths.fns = append(evths.fns, fns...)
	return evths
}

// Scan applies the selector query and scans the result into the given value.
func (evths *EmailVerificationTokenHistorySelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, evths.ctx, "Select")
	if err := evths.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*EmailVerificationTokenHistoryQuery, *EmailVerificationTokenHistorySelect](ctx, evths.EmailVerificationTokenHistoryQuery, evths, evths.inters, v)
}

func (evths *EmailVerificationTokenHistorySelect) sqlScan(ctx context.Context, root *EmailVerificationTokenHistoryQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(evths.fns))
	for _, fn := range evths.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*evths.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := evths.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
