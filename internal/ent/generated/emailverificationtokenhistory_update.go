// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/emailverificationtokenhistory"
	"github.com/datumforge/datum/internal/ent/generated/predicate"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// EmailVerificationTokenHistoryUpdate is the builder for updating EmailVerificationTokenHistory entities.
type EmailVerificationTokenHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *EmailVerificationTokenHistoryMutation
}

// Where appends a list predicates to the EmailVerificationTokenHistoryUpdate builder.
func (evthu *EmailVerificationTokenHistoryUpdate) Where(ps ...predicate.EmailVerificationTokenHistory) *EmailVerificationTokenHistoryUpdate {
	evthu.mutation.Where(ps...)
	return evthu
}

// SetUpdatedAt sets the "updated_at" field.
func (evthu *EmailVerificationTokenHistoryUpdate) SetUpdatedAt(t time.Time) *EmailVerificationTokenHistoryUpdate {
	evthu.mutation.SetUpdatedAt(t)
	return evthu
}

// SetUpdatedBy sets the "updated_by" field.
func (evthu *EmailVerificationTokenHistoryUpdate) SetUpdatedBy(s string) *EmailVerificationTokenHistoryUpdate {
	evthu.mutation.SetUpdatedBy(s)
	return evthu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (evthu *EmailVerificationTokenHistoryUpdate) SetNillableUpdatedBy(s *string) *EmailVerificationTokenHistoryUpdate {
	if s != nil {
		evthu.SetUpdatedBy(*s)
	}
	return evthu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (evthu *EmailVerificationTokenHistoryUpdate) ClearUpdatedBy() *EmailVerificationTokenHistoryUpdate {
	evthu.mutation.ClearUpdatedBy()
	return evthu
}

// SetDeletedAt sets the "deleted_at" field.
func (evthu *EmailVerificationTokenHistoryUpdate) SetDeletedAt(t time.Time) *EmailVerificationTokenHistoryUpdate {
	evthu.mutation.SetDeletedAt(t)
	return evthu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (evthu *EmailVerificationTokenHistoryUpdate) SetNillableDeletedAt(t *time.Time) *EmailVerificationTokenHistoryUpdate {
	if t != nil {
		evthu.SetDeletedAt(*t)
	}
	return evthu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (evthu *EmailVerificationTokenHistoryUpdate) ClearDeletedAt() *EmailVerificationTokenHistoryUpdate {
	evthu.mutation.ClearDeletedAt()
	return evthu
}

// SetDeletedBy sets the "deleted_by" field.
func (evthu *EmailVerificationTokenHistoryUpdate) SetDeletedBy(s string) *EmailVerificationTokenHistoryUpdate {
	evthu.mutation.SetDeletedBy(s)
	return evthu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (evthu *EmailVerificationTokenHistoryUpdate) SetNillableDeletedBy(s *string) *EmailVerificationTokenHistoryUpdate {
	if s != nil {
		evthu.SetDeletedBy(*s)
	}
	return evthu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (evthu *EmailVerificationTokenHistoryUpdate) ClearDeletedBy() *EmailVerificationTokenHistoryUpdate {
	evthu.mutation.ClearDeletedBy()
	return evthu
}

// SetToken sets the "token" field.
func (evthu *EmailVerificationTokenHistoryUpdate) SetToken(s string) *EmailVerificationTokenHistoryUpdate {
	evthu.mutation.SetToken(s)
	return evthu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (evthu *EmailVerificationTokenHistoryUpdate) SetNillableToken(s *string) *EmailVerificationTokenHistoryUpdate {
	if s != nil {
		evthu.SetToken(*s)
	}
	return evthu
}

// SetTTL sets the "ttl" field.
func (evthu *EmailVerificationTokenHistoryUpdate) SetTTL(t time.Time) *EmailVerificationTokenHistoryUpdate {
	evthu.mutation.SetTTL(t)
	return evthu
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (evthu *EmailVerificationTokenHistoryUpdate) SetNillableTTL(t *time.Time) *EmailVerificationTokenHistoryUpdate {
	if t != nil {
		evthu.SetTTL(*t)
	}
	return evthu
}

// SetEmail sets the "email" field.
func (evthu *EmailVerificationTokenHistoryUpdate) SetEmail(s string) *EmailVerificationTokenHistoryUpdate {
	evthu.mutation.SetEmail(s)
	return evthu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (evthu *EmailVerificationTokenHistoryUpdate) SetNillableEmail(s *string) *EmailVerificationTokenHistoryUpdate {
	if s != nil {
		evthu.SetEmail(*s)
	}
	return evthu
}

// SetSecret sets the "secret" field.
func (evthu *EmailVerificationTokenHistoryUpdate) SetSecret(b []byte) *EmailVerificationTokenHistoryUpdate {
	evthu.mutation.SetSecret(b)
	return evthu
}

// Mutation returns the EmailVerificationTokenHistoryMutation object of the builder.
func (evthu *EmailVerificationTokenHistoryUpdate) Mutation() *EmailVerificationTokenHistoryMutation {
	return evthu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (evthu *EmailVerificationTokenHistoryUpdate) Save(ctx context.Context) (int, error) {
	evthu.defaults()
	return withHooks(ctx, evthu.sqlSave, evthu.mutation, evthu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (evthu *EmailVerificationTokenHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := evthu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (evthu *EmailVerificationTokenHistoryUpdate) Exec(ctx context.Context) error {
	_, err := evthu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evthu *EmailVerificationTokenHistoryUpdate) ExecX(ctx context.Context) {
	if err := evthu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (evthu *EmailVerificationTokenHistoryUpdate) defaults() {
	if _, ok := evthu.mutation.UpdatedAt(); !ok {
		v := emailverificationtokenhistory.UpdateDefaultUpdatedAt()
		evthu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (evthu *EmailVerificationTokenHistoryUpdate) check() error {
	if v, ok := evthu.mutation.Token(); ok {
		if err := emailverificationtokenhistory.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationTokenHistory.token": %w`, err)}
		}
	}
	if v, ok := evthu.mutation.Email(); ok {
		if err := emailverificationtokenhistory.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationTokenHistory.email": %w`, err)}
		}
	}
	if v, ok := evthu.mutation.Secret(); ok {
		if err := emailverificationtokenhistory.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationTokenHistory.secret": %w`, err)}
		}
	}
	return nil
}

func (evthu *EmailVerificationTokenHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := evthu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailverificationtokenhistory.Table, emailverificationtokenhistory.Columns, sqlgraph.NewFieldSpec(emailverificationtokenhistory.FieldID, field.TypeString))
	if ps := evthu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if evthu.mutation.RefCleared() {
		_spec.ClearField(emailverificationtokenhistory.FieldRef, field.TypeString)
	}
	if value, ok := evthu.mutation.UpdatedAt(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if evthu.mutation.CreatedByCleared() {
		_spec.ClearField(emailverificationtokenhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := evthu.mutation.UpdatedBy(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if evthu.mutation.UpdatedByCleared() {
		_spec.ClearField(emailverificationtokenhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := evthu.mutation.DeletedAt(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if evthu.mutation.DeletedAtCleared() {
		_spec.ClearField(emailverificationtokenhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := evthu.mutation.DeletedBy(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldDeletedBy, field.TypeString, value)
	}
	if evthu.mutation.DeletedByCleared() {
		_spec.ClearField(emailverificationtokenhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := evthu.mutation.Token(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldToken, field.TypeString, value)
	}
	if value, ok := evthu.mutation.TTL(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldTTL, field.TypeTime, value)
	}
	if value, ok := evthu.mutation.Email(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldEmail, field.TypeString, value)
	}
	if value, ok := evthu.mutation.Secret(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldSecret, field.TypeBytes, value)
	}
	_spec.Node.Schema = evthu.schemaConfig.EmailVerificationTokenHistory
	ctx = internal.NewSchemaConfigContext(ctx, evthu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, evthu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailverificationtokenhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	evthu.mutation.done = true
	return n, nil
}

// EmailVerificationTokenHistoryUpdateOne is the builder for updating a single EmailVerificationTokenHistory entity.
type EmailVerificationTokenHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *EmailVerificationTokenHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SetUpdatedAt(t time.Time) *EmailVerificationTokenHistoryUpdateOne {
	evthuo.mutation.SetUpdatedAt(t)
	return evthuo
}

// SetUpdatedBy sets the "updated_by" field.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SetUpdatedBy(s string) *EmailVerificationTokenHistoryUpdateOne {
	evthuo.mutation.SetUpdatedBy(s)
	return evthuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SetNillableUpdatedBy(s *string) *EmailVerificationTokenHistoryUpdateOne {
	if s != nil {
		evthuo.SetUpdatedBy(*s)
	}
	return evthuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) ClearUpdatedBy() *EmailVerificationTokenHistoryUpdateOne {
	evthuo.mutation.ClearUpdatedBy()
	return evthuo
}

// SetDeletedAt sets the "deleted_at" field.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SetDeletedAt(t time.Time) *EmailVerificationTokenHistoryUpdateOne {
	evthuo.mutation.SetDeletedAt(t)
	return evthuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *EmailVerificationTokenHistoryUpdateOne {
	if t != nil {
		evthuo.SetDeletedAt(*t)
	}
	return evthuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) ClearDeletedAt() *EmailVerificationTokenHistoryUpdateOne {
	evthuo.mutation.ClearDeletedAt()
	return evthuo
}

// SetDeletedBy sets the "deleted_by" field.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SetDeletedBy(s string) *EmailVerificationTokenHistoryUpdateOne {
	evthuo.mutation.SetDeletedBy(s)
	return evthuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SetNillableDeletedBy(s *string) *EmailVerificationTokenHistoryUpdateOne {
	if s != nil {
		evthuo.SetDeletedBy(*s)
	}
	return evthuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) ClearDeletedBy() *EmailVerificationTokenHistoryUpdateOne {
	evthuo.mutation.ClearDeletedBy()
	return evthuo
}

// SetToken sets the "token" field.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SetToken(s string) *EmailVerificationTokenHistoryUpdateOne {
	evthuo.mutation.SetToken(s)
	return evthuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SetNillableToken(s *string) *EmailVerificationTokenHistoryUpdateOne {
	if s != nil {
		evthuo.SetToken(*s)
	}
	return evthuo
}

// SetTTL sets the "ttl" field.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SetTTL(t time.Time) *EmailVerificationTokenHistoryUpdateOne {
	evthuo.mutation.SetTTL(t)
	return evthuo
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SetNillableTTL(t *time.Time) *EmailVerificationTokenHistoryUpdateOne {
	if t != nil {
		evthuo.SetTTL(*t)
	}
	return evthuo
}

// SetEmail sets the "email" field.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SetEmail(s string) *EmailVerificationTokenHistoryUpdateOne {
	evthuo.mutation.SetEmail(s)
	return evthuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SetNillableEmail(s *string) *EmailVerificationTokenHistoryUpdateOne {
	if s != nil {
		evthuo.SetEmail(*s)
	}
	return evthuo
}

// SetSecret sets the "secret" field.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SetSecret(b []byte) *EmailVerificationTokenHistoryUpdateOne {
	evthuo.mutation.SetSecret(b)
	return evthuo
}

// Mutation returns the EmailVerificationTokenHistoryMutation object of the builder.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) Mutation() *EmailVerificationTokenHistoryMutation {
	return evthuo.mutation
}

// Where appends a list predicates to the EmailVerificationTokenHistoryUpdate builder.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) Where(ps ...predicate.EmailVerificationTokenHistory) *EmailVerificationTokenHistoryUpdateOne {
	evthuo.mutation.Where(ps...)
	return evthuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) Select(field string, fields ...string) *EmailVerificationTokenHistoryUpdateOne {
	evthuo.fields = append([]string{field}, fields...)
	return evthuo
}

// Save executes the query and returns the updated EmailVerificationTokenHistory entity.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) Save(ctx context.Context) (*EmailVerificationTokenHistory, error) {
	evthuo.defaults()
	return withHooks(ctx, evthuo.sqlSave, evthuo.mutation, evthuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) SaveX(ctx context.Context) *EmailVerificationTokenHistory {
	node, err := evthuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := evthuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := evthuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) defaults() {
	if _, ok := evthuo.mutation.UpdatedAt(); !ok {
		v := emailverificationtokenhistory.UpdateDefaultUpdatedAt()
		evthuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (evthuo *EmailVerificationTokenHistoryUpdateOne) check() error {
	if v, ok := evthuo.mutation.Token(); ok {
		if err := emailverificationtokenhistory.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationTokenHistory.token": %w`, err)}
		}
	}
	if v, ok := evthuo.mutation.Email(); ok {
		if err := emailverificationtokenhistory.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationTokenHistory.email": %w`, err)}
		}
	}
	if v, ok := evthuo.mutation.Secret(); ok {
		if err := emailverificationtokenhistory.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "EmailVerificationTokenHistory.secret": %w`, err)}
		}
	}
	return nil
}

func (evthuo *EmailVerificationTokenHistoryUpdateOne) sqlSave(ctx context.Context) (_node *EmailVerificationTokenHistory, err error) {
	if err := evthuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(emailverificationtokenhistory.Table, emailverificationtokenhistory.Columns, sqlgraph.NewFieldSpec(emailverificationtokenhistory.FieldID, field.TypeString))
	id, ok := evthuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "EmailVerificationTokenHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := evthuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, emailverificationtokenhistory.FieldID)
		for _, f := range fields {
			if !emailverificationtokenhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != emailverificationtokenhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := evthuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if evthuo.mutation.RefCleared() {
		_spec.ClearField(emailverificationtokenhistory.FieldRef, field.TypeString)
	}
	if value, ok := evthuo.mutation.UpdatedAt(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if evthuo.mutation.CreatedByCleared() {
		_spec.ClearField(emailverificationtokenhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := evthuo.mutation.UpdatedBy(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if evthuo.mutation.UpdatedByCleared() {
		_spec.ClearField(emailverificationtokenhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := evthuo.mutation.DeletedAt(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if evthuo.mutation.DeletedAtCleared() {
		_spec.ClearField(emailverificationtokenhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := evthuo.mutation.DeletedBy(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldDeletedBy, field.TypeString, value)
	}
	if evthuo.mutation.DeletedByCleared() {
		_spec.ClearField(emailverificationtokenhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := evthuo.mutation.Token(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldToken, field.TypeString, value)
	}
	if value, ok := evthuo.mutation.TTL(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldTTL, field.TypeTime, value)
	}
	if value, ok := evthuo.mutation.Email(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldEmail, field.TypeString, value)
	}
	if value, ok := evthuo.mutation.Secret(); ok {
		_spec.SetField(emailverificationtokenhistory.FieldSecret, field.TypeBytes, value)
	}
	_spec.Node.Schema = evthuo.schemaConfig.EmailVerificationTokenHistory
	ctx = internal.NewSchemaConfigContext(ctx, evthuo.schemaConfig)
	_node = &EmailVerificationTokenHistory{config: evthuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, evthuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{emailverificationtokenhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	evthuo.mutation.done = true
	return _node, nil
}
