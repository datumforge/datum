// Code generated by ent, DO NOT EDIT.

package entitlement

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the entitlement type in the database.
	Label = "entitlement"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldTier holds the string denoting the tier field in the database.
	FieldTier = "tier"
	// FieldExternalCustomerID holds the string denoting the external_customer_id field in the database.
	FieldExternalCustomerID = "external_customer_id"
	// FieldExternalSubscriptionID holds the string denoting the external_subscription_id field in the database.
	FieldExternalSubscriptionID = "external_subscription_id"
	// FieldExpiresAt holds the string denoting the expires_at field in the database.
	FieldExpiresAt = "expires_at"
	// FieldUpgradedAt holds the string denoting the upgraded_at field in the database.
	FieldUpgradedAt = "upgraded_at"
	// FieldUpgradedTier holds the string denoting the upgraded_tier field in the database.
	FieldUpgradedTier = "upgraded_tier"
	// FieldDowngradedAt holds the string denoting the downgraded_at field in the database.
	FieldDowngradedAt = "downgraded_at"
	// FieldDowngradedTier holds the string denoting the downgraded_tier field in the database.
	FieldDowngradedTier = "downgraded_tier"
	// FieldCancelled holds the string denoting the cancelled field in the database.
	FieldCancelled = "cancelled"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// Table holds the table name of the entitlement in the database.
	Table = "entitlements"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "entitlements"
	// OwnerInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OwnerInverseTable = "organizations"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "organization_entitlements"
)

// Columns holds all SQL columns for entitlement fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldTier,
	FieldExternalCustomerID,
	FieldExternalSubscriptionID,
	FieldExpiresAt,
	FieldUpgradedAt,
	FieldUpgradedTier,
	FieldDowngradedAt,
	FieldDowngradedTier,
	FieldCancelled,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "entitlements"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"organization_entitlements",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/datumforge/datum/internal/ent/generated/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultCancelled holds the default value on creation for the "cancelled" field.
	DefaultCancelled bool
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// Tier defines the type for the "tier" enum field.
type Tier string

// TierFree is the default value of the Tier enum.
const DefaultTier = TierFree

// Tier values.
const (
	TierFree       Tier = "free"
	TierPro        Tier = "pro"
	TierEnterprise Tier = "enterprise"
)

func (t Tier) String() string {
	return string(t)
}

// TierValidator is a validator for the "tier" field enum values. It is called by the builders before save.
func TierValidator(t Tier) error {
	switch t {
	case TierFree, TierPro, TierEnterprise:
		return nil
	default:
		return fmt.Errorf("entitlement: invalid enum value for tier field: %q", t)
	}
}

// OrderOption defines the ordering options for the Entitlement queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// ByTier orders the results by the tier field.
func ByTier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTier, opts...).ToFunc()
}

// ByExternalCustomerID orders the results by the external_customer_id field.
func ByExternalCustomerID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalCustomerID, opts...).ToFunc()
}

// ByExternalSubscriptionID orders the results by the external_subscription_id field.
func ByExternalSubscriptionID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExternalSubscriptionID, opts...).ToFunc()
}

// ByExpiresAt orders the results by the expires_at field.
func ByExpiresAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldExpiresAt, opts...).ToFunc()
}

// ByUpgradedAt orders the results by the upgraded_at field.
func ByUpgradedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpgradedAt, opts...).ToFunc()
}

// ByUpgradedTier orders the results by the upgraded_tier field.
func ByUpgradedTier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpgradedTier, opts...).ToFunc()
}

// ByDowngradedAt orders the results by the downgraded_at field.
func ByDowngradedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDowngradedAt, opts...).ToFunc()
}

// ByDowngradedTier orders the results by the downgraded_tier field.
func ByDowngradedTier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDowngradedTier, opts...).ToFunc()
}

// ByCancelled orders the results by the cancelled field.
func ByCancelled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCancelled, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}

// MarshalGQL implements graphql.Marshaler interface.
func (e Tier) MarshalGQL(w io.Writer) {
	io.WriteString(w, strconv.Quote(e.String()))
}

// UnmarshalGQL implements graphql.Unmarshaler interface.
func (e *Tier) UnmarshalGQL(val interface{}) error {
	str, ok := val.(string)
	if !ok {
		return fmt.Errorf("enum %T must be a string", val)
	}
	*e = Tier(str)
	if err := TierValidator(*e); err != nil {
		return fmt.Errorf("%s is not a valid Tier", str)
	}
	return nil
}
