// Code generated by ent, DO NOT EDIT.

package entitlement

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/datumforge/datum/internal/ent/generated/predicate"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUpdatedBy, v))
}

// ExternalCustomerID applies equality check predicate on the "external_customer_id" field. It's identical to ExternalCustomerIDEQ.
func ExternalCustomerID(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldExternalCustomerID, v))
}

// ExternalSubscriptionID applies equality check predicate on the "external_subscription_id" field. It's identical to ExternalSubscriptionIDEQ.
func ExternalSubscriptionID(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldExternalSubscriptionID, v))
}

// ExpiresAt applies equality check predicate on the "expires_at" field. It's identical to ExpiresAtEQ.
func ExpiresAt(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldExpiresAt, v))
}

// UpgradedAt applies equality check predicate on the "upgraded_at" field. It's identical to UpgradedAtEQ.
func UpgradedAt(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUpgradedAt, v))
}

// UpgradedTier applies equality check predicate on the "upgraded_tier" field. It's identical to UpgradedTierEQ.
func UpgradedTier(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUpgradedTier, v))
}

// DowngradedAt applies equality check predicate on the "downgraded_at" field. It's identical to DowngradedAtEQ.
func DowngradedAt(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldDowngradedAt, v))
}

// DowngradedTier applies equality check predicate on the "downgraded_tier" field. It's identical to DowngradedTierEQ.
func DowngradedTier(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldDowngradedTier, v))
}

// Cancelled applies equality check predicate on the "cancelled" field. It's identical to CancelledEQ.
func Cancelled(v bool) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldCancelled, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// TierEQ applies the EQ predicate on the "tier" field.
func TierEQ(v Tier) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldTier, v))
}

// TierNEQ applies the NEQ predicate on the "tier" field.
func TierNEQ(v Tier) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldTier, v))
}

// TierIn applies the In predicate on the "tier" field.
func TierIn(vs ...Tier) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldTier, vs...))
}

// TierNotIn applies the NotIn predicate on the "tier" field.
func TierNotIn(vs ...Tier) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldTier, vs...))
}

// ExternalCustomerIDEQ applies the EQ predicate on the "external_customer_id" field.
func ExternalCustomerIDEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldExternalCustomerID, v))
}

// ExternalCustomerIDNEQ applies the NEQ predicate on the "external_customer_id" field.
func ExternalCustomerIDNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldExternalCustomerID, v))
}

// ExternalCustomerIDIn applies the In predicate on the "external_customer_id" field.
func ExternalCustomerIDIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldExternalCustomerID, vs...))
}

// ExternalCustomerIDNotIn applies the NotIn predicate on the "external_customer_id" field.
func ExternalCustomerIDNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldExternalCustomerID, vs...))
}

// ExternalCustomerIDGT applies the GT predicate on the "external_customer_id" field.
func ExternalCustomerIDGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldExternalCustomerID, v))
}

// ExternalCustomerIDGTE applies the GTE predicate on the "external_customer_id" field.
func ExternalCustomerIDGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldExternalCustomerID, v))
}

// ExternalCustomerIDLT applies the LT predicate on the "external_customer_id" field.
func ExternalCustomerIDLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldExternalCustomerID, v))
}

// ExternalCustomerIDLTE applies the LTE predicate on the "external_customer_id" field.
func ExternalCustomerIDLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldExternalCustomerID, v))
}

// ExternalCustomerIDContains applies the Contains predicate on the "external_customer_id" field.
func ExternalCustomerIDContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldExternalCustomerID, v))
}

// ExternalCustomerIDHasPrefix applies the HasPrefix predicate on the "external_customer_id" field.
func ExternalCustomerIDHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldExternalCustomerID, v))
}

// ExternalCustomerIDHasSuffix applies the HasSuffix predicate on the "external_customer_id" field.
func ExternalCustomerIDHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldExternalCustomerID, v))
}

// ExternalCustomerIDIsNil applies the IsNil predicate on the "external_customer_id" field.
func ExternalCustomerIDIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldExternalCustomerID))
}

// ExternalCustomerIDNotNil applies the NotNil predicate on the "external_customer_id" field.
func ExternalCustomerIDNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldExternalCustomerID))
}

// ExternalCustomerIDEqualFold applies the EqualFold predicate on the "external_customer_id" field.
func ExternalCustomerIDEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldExternalCustomerID, v))
}

// ExternalCustomerIDContainsFold applies the ContainsFold predicate on the "external_customer_id" field.
func ExternalCustomerIDContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldExternalCustomerID, v))
}

// ExternalSubscriptionIDEQ applies the EQ predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldExternalSubscriptionID, v))
}

// ExternalSubscriptionIDNEQ applies the NEQ predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldExternalSubscriptionID, v))
}

// ExternalSubscriptionIDIn applies the In predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldExternalSubscriptionID, vs...))
}

// ExternalSubscriptionIDNotIn applies the NotIn predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldExternalSubscriptionID, vs...))
}

// ExternalSubscriptionIDGT applies the GT predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldExternalSubscriptionID, v))
}

// ExternalSubscriptionIDGTE applies the GTE predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldExternalSubscriptionID, v))
}

// ExternalSubscriptionIDLT applies the LT predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldExternalSubscriptionID, v))
}

// ExternalSubscriptionIDLTE applies the LTE predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldExternalSubscriptionID, v))
}

// ExternalSubscriptionIDContains applies the Contains predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldExternalSubscriptionID, v))
}

// ExternalSubscriptionIDHasPrefix applies the HasPrefix predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldExternalSubscriptionID, v))
}

// ExternalSubscriptionIDHasSuffix applies the HasSuffix predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldExternalSubscriptionID, v))
}

// ExternalSubscriptionIDIsNil applies the IsNil predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldExternalSubscriptionID))
}

// ExternalSubscriptionIDNotNil applies the NotNil predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldExternalSubscriptionID))
}

// ExternalSubscriptionIDEqualFold applies the EqualFold predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldExternalSubscriptionID, v))
}

// ExternalSubscriptionIDContainsFold applies the ContainsFold predicate on the "external_subscription_id" field.
func ExternalSubscriptionIDContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldExternalSubscriptionID, v))
}

// ExpiresAtEQ applies the EQ predicate on the "expires_at" field.
func ExpiresAtEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldExpiresAt, v))
}

// ExpiresAtNEQ applies the NEQ predicate on the "expires_at" field.
func ExpiresAtNEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldExpiresAt, v))
}

// ExpiresAtIn applies the In predicate on the "expires_at" field.
func ExpiresAtIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldExpiresAt, vs...))
}

// ExpiresAtNotIn applies the NotIn predicate on the "expires_at" field.
func ExpiresAtNotIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldExpiresAt, vs...))
}

// ExpiresAtGT applies the GT predicate on the "expires_at" field.
func ExpiresAtGT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldExpiresAt, v))
}

// ExpiresAtGTE applies the GTE predicate on the "expires_at" field.
func ExpiresAtGTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldExpiresAt, v))
}

// ExpiresAtLT applies the LT predicate on the "expires_at" field.
func ExpiresAtLT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldExpiresAt, v))
}

// ExpiresAtLTE applies the LTE predicate on the "expires_at" field.
func ExpiresAtLTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldExpiresAt, v))
}

// ExpiresAtIsNil applies the IsNil predicate on the "expires_at" field.
func ExpiresAtIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldExpiresAt))
}

// ExpiresAtNotNil applies the NotNil predicate on the "expires_at" field.
func ExpiresAtNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldExpiresAt))
}

// UpgradedAtEQ applies the EQ predicate on the "upgraded_at" field.
func UpgradedAtEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUpgradedAt, v))
}

// UpgradedAtNEQ applies the NEQ predicate on the "upgraded_at" field.
func UpgradedAtNEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldUpgradedAt, v))
}

// UpgradedAtIn applies the In predicate on the "upgraded_at" field.
func UpgradedAtIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldUpgradedAt, vs...))
}

// UpgradedAtNotIn applies the NotIn predicate on the "upgraded_at" field.
func UpgradedAtNotIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldUpgradedAt, vs...))
}

// UpgradedAtGT applies the GT predicate on the "upgraded_at" field.
func UpgradedAtGT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldUpgradedAt, v))
}

// UpgradedAtGTE applies the GTE predicate on the "upgraded_at" field.
func UpgradedAtGTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldUpgradedAt, v))
}

// UpgradedAtLT applies the LT predicate on the "upgraded_at" field.
func UpgradedAtLT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldUpgradedAt, v))
}

// UpgradedAtLTE applies the LTE predicate on the "upgraded_at" field.
func UpgradedAtLTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldUpgradedAt, v))
}

// UpgradedAtIsNil applies the IsNil predicate on the "upgraded_at" field.
func UpgradedAtIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldUpgradedAt))
}

// UpgradedAtNotNil applies the NotNil predicate on the "upgraded_at" field.
func UpgradedAtNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldUpgradedAt))
}

// UpgradedTierEQ applies the EQ predicate on the "upgraded_tier" field.
func UpgradedTierEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldUpgradedTier, v))
}

// UpgradedTierNEQ applies the NEQ predicate on the "upgraded_tier" field.
func UpgradedTierNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldUpgradedTier, v))
}

// UpgradedTierIn applies the In predicate on the "upgraded_tier" field.
func UpgradedTierIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldUpgradedTier, vs...))
}

// UpgradedTierNotIn applies the NotIn predicate on the "upgraded_tier" field.
func UpgradedTierNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldUpgradedTier, vs...))
}

// UpgradedTierGT applies the GT predicate on the "upgraded_tier" field.
func UpgradedTierGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldUpgradedTier, v))
}

// UpgradedTierGTE applies the GTE predicate on the "upgraded_tier" field.
func UpgradedTierGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldUpgradedTier, v))
}

// UpgradedTierLT applies the LT predicate on the "upgraded_tier" field.
func UpgradedTierLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldUpgradedTier, v))
}

// UpgradedTierLTE applies the LTE predicate on the "upgraded_tier" field.
func UpgradedTierLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldUpgradedTier, v))
}

// UpgradedTierContains applies the Contains predicate on the "upgraded_tier" field.
func UpgradedTierContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldUpgradedTier, v))
}

// UpgradedTierHasPrefix applies the HasPrefix predicate on the "upgraded_tier" field.
func UpgradedTierHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldUpgradedTier, v))
}

// UpgradedTierHasSuffix applies the HasSuffix predicate on the "upgraded_tier" field.
func UpgradedTierHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldUpgradedTier, v))
}

// UpgradedTierIsNil applies the IsNil predicate on the "upgraded_tier" field.
func UpgradedTierIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldUpgradedTier))
}

// UpgradedTierNotNil applies the NotNil predicate on the "upgraded_tier" field.
func UpgradedTierNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldUpgradedTier))
}

// UpgradedTierEqualFold applies the EqualFold predicate on the "upgraded_tier" field.
func UpgradedTierEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldUpgradedTier, v))
}

// UpgradedTierContainsFold applies the ContainsFold predicate on the "upgraded_tier" field.
func UpgradedTierContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldUpgradedTier, v))
}

// DowngradedAtEQ applies the EQ predicate on the "downgraded_at" field.
func DowngradedAtEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldDowngradedAt, v))
}

// DowngradedAtNEQ applies the NEQ predicate on the "downgraded_at" field.
func DowngradedAtNEQ(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldDowngradedAt, v))
}

// DowngradedAtIn applies the In predicate on the "downgraded_at" field.
func DowngradedAtIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldDowngradedAt, vs...))
}

// DowngradedAtNotIn applies the NotIn predicate on the "downgraded_at" field.
func DowngradedAtNotIn(vs ...time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldDowngradedAt, vs...))
}

// DowngradedAtGT applies the GT predicate on the "downgraded_at" field.
func DowngradedAtGT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldDowngradedAt, v))
}

// DowngradedAtGTE applies the GTE predicate on the "downgraded_at" field.
func DowngradedAtGTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldDowngradedAt, v))
}

// DowngradedAtLT applies the LT predicate on the "downgraded_at" field.
func DowngradedAtLT(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldDowngradedAt, v))
}

// DowngradedAtLTE applies the LTE predicate on the "downgraded_at" field.
func DowngradedAtLTE(v time.Time) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldDowngradedAt, v))
}

// DowngradedAtIsNil applies the IsNil predicate on the "downgraded_at" field.
func DowngradedAtIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldDowngradedAt))
}

// DowngradedAtNotNil applies the NotNil predicate on the "downgraded_at" field.
func DowngradedAtNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldDowngradedAt))
}

// DowngradedTierEQ applies the EQ predicate on the "downgraded_tier" field.
func DowngradedTierEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldDowngradedTier, v))
}

// DowngradedTierNEQ applies the NEQ predicate on the "downgraded_tier" field.
func DowngradedTierNEQ(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldDowngradedTier, v))
}

// DowngradedTierIn applies the In predicate on the "downgraded_tier" field.
func DowngradedTierIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIn(FieldDowngradedTier, vs...))
}

// DowngradedTierNotIn applies the NotIn predicate on the "downgraded_tier" field.
func DowngradedTierNotIn(vs ...string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotIn(FieldDowngradedTier, vs...))
}

// DowngradedTierGT applies the GT predicate on the "downgraded_tier" field.
func DowngradedTierGT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGT(FieldDowngradedTier, v))
}

// DowngradedTierGTE applies the GTE predicate on the "downgraded_tier" field.
func DowngradedTierGTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldGTE(FieldDowngradedTier, v))
}

// DowngradedTierLT applies the LT predicate on the "downgraded_tier" field.
func DowngradedTierLT(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLT(FieldDowngradedTier, v))
}

// DowngradedTierLTE applies the LTE predicate on the "downgraded_tier" field.
func DowngradedTierLTE(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldLTE(FieldDowngradedTier, v))
}

// DowngradedTierContains applies the Contains predicate on the "downgraded_tier" field.
func DowngradedTierContains(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContains(FieldDowngradedTier, v))
}

// DowngradedTierHasPrefix applies the HasPrefix predicate on the "downgraded_tier" field.
func DowngradedTierHasPrefix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasPrefix(FieldDowngradedTier, v))
}

// DowngradedTierHasSuffix applies the HasSuffix predicate on the "downgraded_tier" field.
func DowngradedTierHasSuffix(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldHasSuffix(FieldDowngradedTier, v))
}

// DowngradedTierIsNil applies the IsNil predicate on the "downgraded_tier" field.
func DowngradedTierIsNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldIsNull(FieldDowngradedTier))
}

// DowngradedTierNotNil applies the NotNil predicate on the "downgraded_tier" field.
func DowngradedTierNotNil() predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNotNull(FieldDowngradedTier))
}

// DowngradedTierEqualFold applies the EqualFold predicate on the "downgraded_tier" field.
func DowngradedTierEqualFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEqualFold(FieldDowngradedTier, v))
}

// DowngradedTierContainsFold applies the ContainsFold predicate on the "downgraded_tier" field.
func DowngradedTierContainsFold(v string) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldContainsFold(FieldDowngradedTier, v))
}

// CancelledEQ applies the EQ predicate on the "cancelled" field.
func CancelledEQ(v bool) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldEQ(FieldCancelled, v))
}

// CancelledNEQ applies the NEQ predicate on the "cancelled" field.
func CancelledNEQ(v bool) predicate.Entitlement {
	return predicate.Entitlement(sql.FieldNEQ(FieldCancelled, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.Entitlement {
	return predicate.Entitlement(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Entitlement
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Organization) predicate.Entitlement {
	return predicate.Entitlement(func(s *sql.Selector) {
		step := newOwnerStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Entitlement
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Entitlement) predicate.Entitlement {
	return predicate.Entitlement(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Entitlement) predicate.Entitlement {
	return predicate.Entitlement(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Entitlement) predicate.Entitlement {
	return predicate.Entitlement(sql.NotPredicates(p))
}
