// Code generated by ent, DO NOT EDIT.

package generated

import (
	"github.com/datumforge/datum/internal/ent/generated/emailverificationtoken"
	"github.com/datumforge/datum/internal/ent/generated/entitlement"
	"github.com/datumforge/datum/internal/ent/generated/group"
	"github.com/datumforge/datum/internal/ent/generated/groupmembership"
	"github.com/datumforge/datum/internal/ent/generated/groupsetting"
	"github.com/datumforge/datum/internal/ent/generated/integration"
	"github.com/datumforge/datum/internal/ent/generated/invite"
	"github.com/datumforge/datum/internal/ent/generated/oauthprovider"
	"github.com/datumforge/datum/internal/ent/generated/ohauthtootoken"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/organizationsetting"
	"github.com/datumforge/datum/internal/ent/generated/orgmembership"
	"github.com/datumforge/datum/internal/ent/generated/passwordresettoken"
	"github.com/datumforge/datum/internal/ent/generated/personalaccesstoken"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/datumforge/datum/internal/ent/generated/user"
	"github.com/datumforge/datum/internal/ent/generated/usersetting"
	"github.com/datumforge/datum/internal/ent/generated/webauthn"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/entql"
	"entgo.io/ent/schema/field"
)

// schemaGraph holds a representation of ent/schema at runtime.
var schemaGraph = func() *sqlgraph.Schema {
	graph := &sqlgraph.Schema{Nodes: make([]*sqlgraph.Node, 17)}
	graph.Nodes[0] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   emailverificationtoken.Table,
			Columns: emailverificationtoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: emailverificationtoken.FieldID,
			},
		},
		Type: "EmailVerificationToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			emailverificationtoken.FieldCreatedAt: {Type: field.TypeTime, Column: emailverificationtoken.FieldCreatedAt},
			emailverificationtoken.FieldUpdatedAt: {Type: field.TypeTime, Column: emailverificationtoken.FieldUpdatedAt},
			emailverificationtoken.FieldCreatedBy: {Type: field.TypeString, Column: emailverificationtoken.FieldCreatedBy},
			emailverificationtoken.FieldUpdatedBy: {Type: field.TypeString, Column: emailverificationtoken.FieldUpdatedBy},
			emailverificationtoken.FieldDeletedAt: {Type: field.TypeTime, Column: emailverificationtoken.FieldDeletedAt},
			emailverificationtoken.FieldDeletedBy: {Type: field.TypeString, Column: emailverificationtoken.FieldDeletedBy},
			emailverificationtoken.FieldOwnerID:   {Type: field.TypeString, Column: emailverificationtoken.FieldOwnerID},
			emailverificationtoken.FieldToken:     {Type: field.TypeString, Column: emailverificationtoken.FieldToken},
			emailverificationtoken.FieldTTL:       {Type: field.TypeTime, Column: emailverificationtoken.FieldTTL},
			emailverificationtoken.FieldEmail:     {Type: field.TypeString, Column: emailverificationtoken.FieldEmail},
			emailverificationtoken.FieldSecret:    {Type: field.TypeBytes, Column: emailverificationtoken.FieldSecret},
		},
	}
	graph.Nodes[1] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   entitlement.Table,
			Columns: entitlement.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: entitlement.FieldID,
			},
		},
		Type: "Entitlement",
		Fields: map[string]*sqlgraph.FieldSpec{
			entitlement.FieldCreatedAt:              {Type: field.TypeTime, Column: entitlement.FieldCreatedAt},
			entitlement.FieldUpdatedAt:              {Type: field.TypeTime, Column: entitlement.FieldUpdatedAt},
			entitlement.FieldCreatedBy:              {Type: field.TypeString, Column: entitlement.FieldCreatedBy},
			entitlement.FieldUpdatedBy:              {Type: field.TypeString, Column: entitlement.FieldUpdatedBy},
			entitlement.FieldDeletedAt:              {Type: field.TypeTime, Column: entitlement.FieldDeletedAt},
			entitlement.FieldDeletedBy:              {Type: field.TypeString, Column: entitlement.FieldDeletedBy},
			entitlement.FieldOwnerID:                {Type: field.TypeString, Column: entitlement.FieldOwnerID},
			entitlement.FieldTier:                   {Type: field.TypeEnum, Column: entitlement.FieldTier},
			entitlement.FieldExternalCustomerID:     {Type: field.TypeString, Column: entitlement.FieldExternalCustomerID},
			entitlement.FieldExternalSubscriptionID: {Type: field.TypeString, Column: entitlement.FieldExternalSubscriptionID},
			entitlement.FieldExpires:                {Type: field.TypeBool, Column: entitlement.FieldExpires},
			entitlement.FieldExpiresAt:              {Type: field.TypeTime, Column: entitlement.FieldExpiresAt},
			entitlement.FieldCancelled:              {Type: field.TypeBool, Column: entitlement.FieldCancelled},
		},
	}
	graph.Nodes[2] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   group.Table,
			Columns: group.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: group.FieldID,
			},
		},
		Type: "Group",
		Fields: map[string]*sqlgraph.FieldSpec{
			group.FieldCreatedAt:       {Type: field.TypeTime, Column: group.FieldCreatedAt},
			group.FieldUpdatedAt:       {Type: field.TypeTime, Column: group.FieldUpdatedAt},
			group.FieldCreatedBy:       {Type: field.TypeString, Column: group.FieldCreatedBy},
			group.FieldUpdatedBy:       {Type: field.TypeString, Column: group.FieldUpdatedBy},
			group.FieldDeletedAt:       {Type: field.TypeTime, Column: group.FieldDeletedAt},
			group.FieldDeletedBy:       {Type: field.TypeString, Column: group.FieldDeletedBy},
			group.FieldOwnerID:         {Type: field.TypeString, Column: group.FieldOwnerID},
			group.FieldName:            {Type: field.TypeString, Column: group.FieldName},
			group.FieldDescription:     {Type: field.TypeString, Column: group.FieldDescription},
			group.FieldGravatarLogoURL: {Type: field.TypeString, Column: group.FieldGravatarLogoURL},
			group.FieldLogoURL:         {Type: field.TypeString, Column: group.FieldLogoURL},
			group.FieldDisplayName:     {Type: field.TypeString, Column: group.FieldDisplayName},
		},
	}
	graph.Nodes[3] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   groupmembership.Table,
			Columns: groupmembership.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: groupmembership.FieldID,
			},
		},
		Type: "GroupMembership",
		Fields: map[string]*sqlgraph.FieldSpec{
			groupmembership.FieldCreatedAt: {Type: field.TypeTime, Column: groupmembership.FieldCreatedAt},
			groupmembership.FieldUpdatedAt: {Type: field.TypeTime, Column: groupmembership.FieldUpdatedAt},
			groupmembership.FieldCreatedBy: {Type: field.TypeString, Column: groupmembership.FieldCreatedBy},
			groupmembership.FieldUpdatedBy: {Type: field.TypeString, Column: groupmembership.FieldUpdatedBy},
			groupmembership.FieldDeletedAt: {Type: field.TypeTime, Column: groupmembership.FieldDeletedAt},
			groupmembership.FieldDeletedBy: {Type: field.TypeString, Column: groupmembership.FieldDeletedBy},
			groupmembership.FieldRole:      {Type: field.TypeEnum, Column: groupmembership.FieldRole},
			groupmembership.FieldGroupID:   {Type: field.TypeString, Column: groupmembership.FieldGroupID},
			groupmembership.FieldUserID:    {Type: field.TypeString, Column: groupmembership.FieldUserID},
		},
	}
	graph.Nodes[4] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   groupsetting.Table,
			Columns: groupsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: groupsetting.FieldID,
			},
		},
		Type: "GroupSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			groupsetting.FieldCreatedAt:    {Type: field.TypeTime, Column: groupsetting.FieldCreatedAt},
			groupsetting.FieldUpdatedAt:    {Type: field.TypeTime, Column: groupsetting.FieldUpdatedAt},
			groupsetting.FieldCreatedBy:    {Type: field.TypeString, Column: groupsetting.FieldCreatedBy},
			groupsetting.FieldUpdatedBy:    {Type: field.TypeString, Column: groupsetting.FieldUpdatedBy},
			groupsetting.FieldDeletedAt:    {Type: field.TypeTime, Column: groupsetting.FieldDeletedAt},
			groupsetting.FieldDeletedBy:    {Type: field.TypeString, Column: groupsetting.FieldDeletedBy},
			groupsetting.FieldVisibility:   {Type: field.TypeEnum, Column: groupsetting.FieldVisibility},
			groupsetting.FieldJoinPolicy:   {Type: field.TypeEnum, Column: groupsetting.FieldJoinPolicy},
			groupsetting.FieldTags:         {Type: field.TypeJSON, Column: groupsetting.FieldTags},
			groupsetting.FieldSyncToSlack:  {Type: field.TypeBool, Column: groupsetting.FieldSyncToSlack},
			groupsetting.FieldSyncToGithub: {Type: field.TypeBool, Column: groupsetting.FieldSyncToGithub},
		},
	}
	graph.Nodes[5] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   integration.Table,
			Columns: integration.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: integration.FieldID,
			},
		},
		Type: "Integration",
		Fields: map[string]*sqlgraph.FieldSpec{
			integration.FieldCreatedAt:   {Type: field.TypeTime, Column: integration.FieldCreatedAt},
			integration.FieldUpdatedAt:   {Type: field.TypeTime, Column: integration.FieldUpdatedAt},
			integration.FieldCreatedBy:   {Type: field.TypeString, Column: integration.FieldCreatedBy},
			integration.FieldUpdatedBy:   {Type: field.TypeString, Column: integration.FieldUpdatedBy},
			integration.FieldDeletedAt:   {Type: field.TypeTime, Column: integration.FieldDeletedAt},
			integration.FieldDeletedBy:   {Type: field.TypeString, Column: integration.FieldDeletedBy},
			integration.FieldName:        {Type: field.TypeString, Column: integration.FieldName},
			integration.FieldDescription: {Type: field.TypeString, Column: integration.FieldDescription},
			integration.FieldKind:        {Type: field.TypeString, Column: integration.FieldKind},
			integration.FieldSecretName:  {Type: field.TypeString, Column: integration.FieldSecretName},
		},
	}
	graph.Nodes[6] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   invite.Table,
			Columns: invite.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: invite.FieldID,
			},
		},
		Type: "Invite",
		Fields: map[string]*sqlgraph.FieldSpec{
			invite.FieldCreatedAt:    {Type: field.TypeTime, Column: invite.FieldCreatedAt},
			invite.FieldUpdatedAt:    {Type: field.TypeTime, Column: invite.FieldUpdatedAt},
			invite.FieldCreatedBy:    {Type: field.TypeString, Column: invite.FieldCreatedBy},
			invite.FieldUpdatedBy:    {Type: field.TypeString, Column: invite.FieldUpdatedBy},
			invite.FieldDeletedAt:    {Type: field.TypeTime, Column: invite.FieldDeletedAt},
			invite.FieldDeletedBy:    {Type: field.TypeString, Column: invite.FieldDeletedBy},
			invite.FieldOwnerID:      {Type: field.TypeString, Column: invite.FieldOwnerID},
			invite.FieldToken:        {Type: field.TypeString, Column: invite.FieldToken},
			invite.FieldExpires:      {Type: field.TypeTime, Column: invite.FieldExpires},
			invite.FieldRecipient:    {Type: field.TypeString, Column: invite.FieldRecipient},
			invite.FieldStatus:       {Type: field.TypeEnum, Column: invite.FieldStatus},
			invite.FieldRole:         {Type: field.TypeEnum, Column: invite.FieldRole},
			invite.FieldSendAttempts: {Type: field.TypeInt, Column: invite.FieldSendAttempts},
			invite.FieldRequestorID:  {Type: field.TypeString, Column: invite.FieldRequestorID},
			invite.FieldSecret:       {Type: field.TypeBytes, Column: invite.FieldSecret},
		},
	}
	graph.Nodes[7] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   oauthprovider.Table,
			Columns: oauthprovider.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: oauthprovider.FieldID,
			},
		},
		Type: "OauthProvider",
		Fields: map[string]*sqlgraph.FieldSpec{
			oauthprovider.FieldCreatedAt:    {Type: field.TypeTime, Column: oauthprovider.FieldCreatedAt},
			oauthprovider.FieldUpdatedAt:    {Type: field.TypeTime, Column: oauthprovider.FieldUpdatedAt},
			oauthprovider.FieldCreatedBy:    {Type: field.TypeString, Column: oauthprovider.FieldCreatedBy},
			oauthprovider.FieldUpdatedBy:    {Type: field.TypeString, Column: oauthprovider.FieldUpdatedBy},
			oauthprovider.FieldDeletedAt:    {Type: field.TypeTime, Column: oauthprovider.FieldDeletedAt},
			oauthprovider.FieldDeletedBy:    {Type: field.TypeString, Column: oauthprovider.FieldDeletedBy},
			oauthprovider.FieldName:         {Type: field.TypeString, Column: oauthprovider.FieldName},
			oauthprovider.FieldClientID:     {Type: field.TypeString, Column: oauthprovider.FieldClientID},
			oauthprovider.FieldClientSecret: {Type: field.TypeString, Column: oauthprovider.FieldClientSecret},
			oauthprovider.FieldRedirectURL:  {Type: field.TypeString, Column: oauthprovider.FieldRedirectURL},
			oauthprovider.FieldScopes:       {Type: field.TypeString, Column: oauthprovider.FieldScopes},
			oauthprovider.FieldAuthURL:      {Type: field.TypeString, Column: oauthprovider.FieldAuthURL},
			oauthprovider.FieldTokenURL:     {Type: field.TypeString, Column: oauthprovider.FieldTokenURL},
			oauthprovider.FieldAuthStyle:    {Type: field.TypeUint8, Column: oauthprovider.FieldAuthStyle},
			oauthprovider.FieldInfoURL:      {Type: field.TypeString, Column: oauthprovider.FieldInfoURL},
		},
	}
	graph.Nodes[8] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   ohauthtootoken.Table,
			Columns: ohauthtootoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: ohauthtootoken.FieldID,
			},
		},
		Type: "OhAuthTooToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			ohauthtootoken.FieldClientID:                {Type: field.TypeString, Column: ohauthtootoken.FieldClientID},
			ohauthtootoken.FieldScopes:                  {Type: field.TypeJSON, Column: ohauthtootoken.FieldScopes},
			ohauthtootoken.FieldNonce:                   {Type: field.TypeString, Column: ohauthtootoken.FieldNonce},
			ohauthtootoken.FieldClaimsUserID:            {Type: field.TypeString, Column: ohauthtootoken.FieldClaimsUserID},
			ohauthtootoken.FieldClaimsUsername:          {Type: field.TypeString, Column: ohauthtootoken.FieldClaimsUsername},
			ohauthtootoken.FieldClaimsEmail:             {Type: field.TypeString, Column: ohauthtootoken.FieldClaimsEmail},
			ohauthtootoken.FieldClaimsEmailVerified:     {Type: field.TypeBool, Column: ohauthtootoken.FieldClaimsEmailVerified},
			ohauthtootoken.FieldClaimsGroups:            {Type: field.TypeJSON, Column: ohauthtootoken.FieldClaimsGroups},
			ohauthtootoken.FieldClaimsPreferredUsername: {Type: field.TypeString, Column: ohauthtootoken.FieldClaimsPreferredUsername},
			ohauthtootoken.FieldConnectorID:             {Type: field.TypeString, Column: ohauthtootoken.FieldConnectorID},
			ohauthtootoken.FieldConnectorData:           {Type: field.TypeJSON, Column: ohauthtootoken.FieldConnectorData},
			ohauthtootoken.FieldLastUsed:                {Type: field.TypeTime, Column: ohauthtootoken.FieldLastUsed},
		},
	}
	graph.Nodes[9] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   orgmembership.Table,
			Columns: orgmembership.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: orgmembership.FieldID,
			},
		},
		Type: "OrgMembership",
		Fields: map[string]*sqlgraph.FieldSpec{
			orgmembership.FieldCreatedAt:      {Type: field.TypeTime, Column: orgmembership.FieldCreatedAt},
			orgmembership.FieldUpdatedAt:      {Type: field.TypeTime, Column: orgmembership.FieldUpdatedAt},
			orgmembership.FieldCreatedBy:      {Type: field.TypeString, Column: orgmembership.FieldCreatedBy},
			orgmembership.FieldUpdatedBy:      {Type: field.TypeString, Column: orgmembership.FieldUpdatedBy},
			orgmembership.FieldDeletedAt:      {Type: field.TypeTime, Column: orgmembership.FieldDeletedAt},
			orgmembership.FieldDeletedBy:      {Type: field.TypeString, Column: orgmembership.FieldDeletedBy},
			orgmembership.FieldRole:           {Type: field.TypeEnum, Column: orgmembership.FieldRole},
			orgmembership.FieldOrganizationID: {Type: field.TypeString, Column: orgmembership.FieldOrganizationID},
			orgmembership.FieldUserID:         {Type: field.TypeString, Column: orgmembership.FieldUserID},
		},
	}
	graph.Nodes[10] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organization.Table,
			Columns: organization.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organization.FieldID,
			},
		},
		Type: "Organization",
		Fields: map[string]*sqlgraph.FieldSpec{
			organization.FieldCreatedAt:            {Type: field.TypeTime, Column: organization.FieldCreatedAt},
			organization.FieldUpdatedAt:            {Type: field.TypeTime, Column: organization.FieldUpdatedAt},
			organization.FieldCreatedBy:            {Type: field.TypeString, Column: organization.FieldCreatedBy},
			organization.FieldUpdatedBy:            {Type: field.TypeString, Column: organization.FieldUpdatedBy},
			organization.FieldDeletedAt:            {Type: field.TypeTime, Column: organization.FieldDeletedAt},
			organization.FieldDeletedBy:            {Type: field.TypeString, Column: organization.FieldDeletedBy},
			organization.FieldName:                 {Type: field.TypeString, Column: organization.FieldName},
			organization.FieldDisplayName:          {Type: field.TypeString, Column: organization.FieldDisplayName},
			organization.FieldDescription:          {Type: field.TypeString, Column: organization.FieldDescription},
			organization.FieldParentOrganizationID: {Type: field.TypeString, Column: organization.FieldParentOrganizationID},
			organization.FieldPersonalOrg:          {Type: field.TypeBool, Column: organization.FieldPersonalOrg},
		},
	}
	graph.Nodes[11] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   organizationsetting.Table,
			Columns: organizationsetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: organizationsetting.FieldID,
			},
		},
		Type: "OrganizationSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			organizationsetting.FieldCreatedAt:      {Type: field.TypeTime, Column: organizationsetting.FieldCreatedAt},
			organizationsetting.FieldUpdatedAt:      {Type: field.TypeTime, Column: organizationsetting.FieldUpdatedAt},
			organizationsetting.FieldCreatedBy:      {Type: field.TypeString, Column: organizationsetting.FieldCreatedBy},
			organizationsetting.FieldUpdatedBy:      {Type: field.TypeString, Column: organizationsetting.FieldUpdatedBy},
			organizationsetting.FieldDeletedAt:      {Type: field.TypeTime, Column: organizationsetting.FieldDeletedAt},
			organizationsetting.FieldDeletedBy:      {Type: field.TypeString, Column: organizationsetting.FieldDeletedBy},
			organizationsetting.FieldDomains:        {Type: field.TypeJSON, Column: organizationsetting.FieldDomains},
			organizationsetting.FieldSSOCert:        {Type: field.TypeString, Column: organizationsetting.FieldSSOCert},
			organizationsetting.FieldSSOEntrypoint:  {Type: field.TypeString, Column: organizationsetting.FieldSSOEntrypoint},
			organizationsetting.FieldSSOIssuer:      {Type: field.TypeString, Column: organizationsetting.FieldSSOIssuer},
			organizationsetting.FieldBillingContact: {Type: field.TypeString, Column: organizationsetting.FieldBillingContact},
			organizationsetting.FieldBillingEmail:   {Type: field.TypeString, Column: organizationsetting.FieldBillingEmail},
			organizationsetting.FieldBillingPhone:   {Type: field.TypeString, Column: organizationsetting.FieldBillingPhone},
			organizationsetting.FieldBillingAddress: {Type: field.TypeString, Column: organizationsetting.FieldBillingAddress},
			organizationsetting.FieldTaxIdentifier:  {Type: field.TypeString, Column: organizationsetting.FieldTaxIdentifier},
			organizationsetting.FieldTags:           {Type: field.TypeJSON, Column: organizationsetting.FieldTags},
		},
	}
	graph.Nodes[12] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   passwordresettoken.Table,
			Columns: passwordresettoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: passwordresettoken.FieldID,
			},
		},
		Type: "PasswordResetToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			passwordresettoken.FieldCreatedAt: {Type: field.TypeTime, Column: passwordresettoken.FieldCreatedAt},
			passwordresettoken.FieldUpdatedAt: {Type: field.TypeTime, Column: passwordresettoken.FieldUpdatedAt},
			passwordresettoken.FieldCreatedBy: {Type: field.TypeString, Column: passwordresettoken.FieldCreatedBy},
			passwordresettoken.FieldUpdatedBy: {Type: field.TypeString, Column: passwordresettoken.FieldUpdatedBy},
			passwordresettoken.FieldDeletedAt: {Type: field.TypeTime, Column: passwordresettoken.FieldDeletedAt},
			passwordresettoken.FieldDeletedBy: {Type: field.TypeString, Column: passwordresettoken.FieldDeletedBy},
			passwordresettoken.FieldOwnerID:   {Type: field.TypeString, Column: passwordresettoken.FieldOwnerID},
			passwordresettoken.FieldToken:     {Type: field.TypeString, Column: passwordresettoken.FieldToken},
			passwordresettoken.FieldTTL:       {Type: field.TypeTime, Column: passwordresettoken.FieldTTL},
			passwordresettoken.FieldEmail:     {Type: field.TypeString, Column: passwordresettoken.FieldEmail},
			passwordresettoken.FieldSecret:    {Type: field.TypeBytes, Column: passwordresettoken.FieldSecret},
		},
	}
	graph.Nodes[13] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   personalaccesstoken.Table,
			Columns: personalaccesstoken.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: personalaccesstoken.FieldID,
			},
		},
		Type: "PersonalAccessToken",
		Fields: map[string]*sqlgraph.FieldSpec{
			personalaccesstoken.FieldCreatedAt:   {Type: field.TypeTime, Column: personalaccesstoken.FieldCreatedAt},
			personalaccesstoken.FieldUpdatedAt:   {Type: field.TypeTime, Column: personalaccesstoken.FieldUpdatedAt},
			personalaccesstoken.FieldCreatedBy:   {Type: field.TypeString, Column: personalaccesstoken.FieldCreatedBy},
			personalaccesstoken.FieldUpdatedBy:   {Type: field.TypeString, Column: personalaccesstoken.FieldUpdatedBy},
			personalaccesstoken.FieldDeletedAt:   {Type: field.TypeTime, Column: personalaccesstoken.FieldDeletedAt},
			personalaccesstoken.FieldDeletedBy:   {Type: field.TypeString, Column: personalaccesstoken.FieldDeletedBy},
			personalaccesstoken.FieldOwnerID:     {Type: field.TypeString, Column: personalaccesstoken.FieldOwnerID},
			personalaccesstoken.FieldName:        {Type: field.TypeString, Column: personalaccesstoken.FieldName},
			personalaccesstoken.FieldToken:       {Type: field.TypeString, Column: personalaccesstoken.FieldToken},
			personalaccesstoken.FieldExpiresAt:   {Type: field.TypeTime, Column: personalaccesstoken.FieldExpiresAt},
			personalaccesstoken.FieldDescription: {Type: field.TypeString, Column: personalaccesstoken.FieldDescription},
			personalaccesstoken.FieldScopes:      {Type: field.TypeJSON, Column: personalaccesstoken.FieldScopes},
			personalaccesstoken.FieldLastUsedAt:  {Type: field.TypeTime, Column: personalaccesstoken.FieldLastUsedAt},
		},
	}
	graph.Nodes[14] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   user.Table,
			Columns: user.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: user.FieldID,
			},
		},
		Type: "User",
		Fields: map[string]*sqlgraph.FieldSpec{
			user.FieldCreatedAt:       {Type: field.TypeTime, Column: user.FieldCreatedAt},
			user.FieldUpdatedAt:       {Type: field.TypeTime, Column: user.FieldUpdatedAt},
			user.FieldCreatedBy:       {Type: field.TypeString, Column: user.FieldCreatedBy},
			user.FieldUpdatedBy:       {Type: field.TypeString, Column: user.FieldUpdatedBy},
			user.FieldDeletedAt:       {Type: field.TypeTime, Column: user.FieldDeletedAt},
			user.FieldDeletedBy:       {Type: field.TypeString, Column: user.FieldDeletedBy},
			user.FieldEmail:           {Type: field.TypeString, Column: user.FieldEmail},
			user.FieldFirstName:       {Type: field.TypeString, Column: user.FieldFirstName},
			user.FieldLastName:        {Type: field.TypeString, Column: user.FieldLastName},
			user.FieldDisplayName:     {Type: field.TypeString, Column: user.FieldDisplayName},
			user.FieldAvatarRemoteURL: {Type: field.TypeString, Column: user.FieldAvatarRemoteURL},
			user.FieldAvatarLocalFile: {Type: field.TypeString, Column: user.FieldAvatarLocalFile},
			user.FieldAvatarUpdatedAt: {Type: field.TypeTime, Column: user.FieldAvatarUpdatedAt},
			user.FieldLastSeen:        {Type: field.TypeTime, Column: user.FieldLastSeen},
			user.FieldPassword:        {Type: field.TypeString, Column: user.FieldPassword},
			user.FieldSub:             {Type: field.TypeString, Column: user.FieldSub},
			user.FieldAuthProvider:    {Type: field.TypeEnum, Column: user.FieldAuthProvider},
		},
	}
	graph.Nodes[15] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   usersetting.Table,
			Columns: usersetting.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: usersetting.FieldID,
			},
		},
		Type: "UserSetting",
		Fields: map[string]*sqlgraph.FieldSpec{
			usersetting.FieldCreatedAt:         {Type: field.TypeTime, Column: usersetting.FieldCreatedAt},
			usersetting.FieldUpdatedAt:         {Type: field.TypeTime, Column: usersetting.FieldUpdatedAt},
			usersetting.FieldCreatedBy:         {Type: field.TypeString, Column: usersetting.FieldCreatedBy},
			usersetting.FieldUpdatedBy:         {Type: field.TypeString, Column: usersetting.FieldUpdatedBy},
			usersetting.FieldDeletedAt:         {Type: field.TypeTime, Column: usersetting.FieldDeletedAt},
			usersetting.FieldDeletedBy:         {Type: field.TypeString, Column: usersetting.FieldDeletedBy},
			usersetting.FieldUserID:            {Type: field.TypeString, Column: usersetting.FieldUserID},
			usersetting.FieldLocked:            {Type: field.TypeBool, Column: usersetting.FieldLocked},
			usersetting.FieldSilencedAt:        {Type: field.TypeTime, Column: usersetting.FieldSilencedAt},
			usersetting.FieldSuspendedAt:       {Type: field.TypeTime, Column: usersetting.FieldSuspendedAt},
			usersetting.FieldStatus:            {Type: field.TypeEnum, Column: usersetting.FieldStatus},
			usersetting.FieldEmailConfirmed:    {Type: field.TypeBool, Column: usersetting.FieldEmailConfirmed},
			usersetting.FieldTags:              {Type: field.TypeJSON, Column: usersetting.FieldTags},
			usersetting.FieldIsWebauthnAllowed: {Type: field.TypeBool, Column: usersetting.FieldIsWebauthnAllowed},
			usersetting.FieldIsTfaEnabled:      {Type: field.TypeBool, Column: usersetting.FieldIsTfaEnabled},
			usersetting.FieldPhoneNumber:       {Type: field.TypeString, Column: usersetting.FieldPhoneNumber},
		},
	}
	graph.Nodes[16] = &sqlgraph.Node{
		NodeSpec: sqlgraph.NodeSpec{
			Table:   webauthn.Table,
			Columns: webauthn.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeString,
				Column: webauthn.FieldID,
			},
		},
		Type: "Webauthn",
		Fields: map[string]*sqlgraph.FieldSpec{
			webauthn.FieldCreatedAt:       {Type: field.TypeTime, Column: webauthn.FieldCreatedAt},
			webauthn.FieldUpdatedAt:       {Type: field.TypeTime, Column: webauthn.FieldUpdatedAt},
			webauthn.FieldCreatedBy:       {Type: field.TypeString, Column: webauthn.FieldCreatedBy},
			webauthn.FieldUpdatedBy:       {Type: field.TypeString, Column: webauthn.FieldUpdatedBy},
			webauthn.FieldOwnerID:         {Type: field.TypeString, Column: webauthn.FieldOwnerID},
			webauthn.FieldCredentialID:    {Type: field.TypeBytes, Column: webauthn.FieldCredentialID},
			webauthn.FieldPublicKey:       {Type: field.TypeBytes, Column: webauthn.FieldPublicKey},
			webauthn.FieldAttestationType: {Type: field.TypeString, Column: webauthn.FieldAttestationType},
			webauthn.FieldAaguid:          {Type: field.TypeBytes, Column: webauthn.FieldAaguid},
			webauthn.FieldSignCount:       {Type: field.TypeInt32, Column: webauthn.FieldSignCount},
			webauthn.FieldTransports:      {Type: field.TypeJSON, Column: webauthn.FieldTransports},
			webauthn.FieldBackupEligible:  {Type: field.TypeBool, Column: webauthn.FieldBackupEligible},
			webauthn.FieldBackupState:     {Type: field.TypeBool, Column: webauthn.FieldBackupState},
			webauthn.FieldUserPresent:     {Type: field.TypeBool, Column: webauthn.FieldUserPresent},
			webauthn.FieldUserVerified:    {Type: field.TypeBool, Column: webauthn.FieldUserVerified},
		},
	}
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   emailverificationtoken.OwnerTable,
			Columns: []string{emailverificationtoken.OwnerColumn},
			Bidi:    false,
		},
		"EmailVerificationToken",
		"User",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   entitlement.OwnerTable,
			Columns: []string{entitlement.OwnerColumn},
			Bidi:    false,
		},
		"Entitlement",
		"Organization",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   group.OwnerTable,
			Columns: []string{group.OwnerColumn},
			Bidi:    false,
		},
		"Group",
		"Organization",
	)
	graph.MustAddE(
		"setting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   group.SettingTable,
			Columns: []string{group.SettingColumn},
			Bidi:    false,
		},
		"Group",
		"GroupSetting",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   group.UsersTable,
			Columns: group.UsersPrimaryKey,
			Bidi:    false,
		},
		"Group",
		"User",
	)
	graph.MustAddE(
		"members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   group.MembersTable,
			Columns: []string{group.MembersColumn},
			Bidi:    false,
		},
		"Group",
		"GroupMembership",
	)
	graph.MustAddE(
		"group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupmembership.GroupTable,
			Columns: []string{groupmembership.GroupColumn},
			Bidi:    false,
		},
		"GroupMembership",
		"Group",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   groupmembership.UserTable,
			Columns: []string{groupmembership.UserColumn},
			Bidi:    false,
		},
		"GroupMembership",
		"User",
	)
	graph.MustAddE(
		"group",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   groupsetting.GroupTable,
			Columns: []string{groupsetting.GroupColumn},
			Bidi:    false,
		},
		"GroupSetting",
		"Group",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   integration.OwnerTable,
			Columns: []string{integration.OwnerColumn},
			Bidi:    false,
		},
		"Integration",
		"Organization",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   invite.OwnerTable,
			Columns: []string{invite.OwnerColumn},
			Bidi:    false,
		},
		"Invite",
		"Organization",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   oauthprovider.OwnerTable,
			Columns: []string{oauthprovider.OwnerColumn},
			Bidi:    false,
		},
		"OauthProvider",
		"Organization",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgmembership.OrganizationTable,
			Columns: []string{orgmembership.OrganizationColumn},
			Bidi:    false,
		},
		"OrgMembership",
		"Organization",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   orgmembership.UserTable,
			Columns: []string{orgmembership.UserColumn},
			Bidi:    false,
		},
		"OrgMembership",
		"User",
	)
	graph.MustAddE(
		"parent",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   organization.ParentTable,
			Columns: []string{organization.ParentColumn},
			Bidi:    false,
		},
		"Organization",
		"Organization",
	)
	graph.MustAddE(
		"children",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.ChildrenTable,
			Columns: []string{organization.ChildrenColumn},
			Bidi:    false,
		},
		"Organization",
		"Organization",
	)
	graph.MustAddE(
		"groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.GroupsTable,
			Columns: []string{organization.GroupsColumn},
			Bidi:    false,
		},
		"Organization",
		"Group",
	)
	graph.MustAddE(
		"integrations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.IntegrationsTable,
			Columns: []string{organization.IntegrationsColumn},
			Bidi:    false,
		},
		"Organization",
		"Integration",
	)
	graph.MustAddE(
		"setting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   organization.SettingTable,
			Columns: []string{organization.SettingColumn},
			Bidi:    false,
		},
		"Organization",
		"OrganizationSetting",
	)
	graph.MustAddE(
		"entitlements",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.EntitlementsTable,
			Columns: []string{organization.EntitlementsColumn},
			Bidi:    false,
		},
		"Organization",
		"Entitlement",
	)
	graph.MustAddE(
		"personal_access_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   organization.PersonalAccessTokensTable,
			Columns: organization.PersonalAccessTokensPrimaryKey,
			Bidi:    false,
		},
		"Organization",
		"PersonalAccessToken",
	)
	graph.MustAddE(
		"oauthprovider",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.OauthproviderTable,
			Columns: []string{organization.OauthproviderColumn},
			Bidi:    false,
		},
		"Organization",
		"OauthProvider",
	)
	graph.MustAddE(
		"users",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   organization.UsersTable,
			Columns: organization.UsersPrimaryKey,
			Bidi:    false,
		},
		"Organization",
		"User",
	)
	graph.MustAddE(
		"invites",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   organization.InvitesTable,
			Columns: []string{organization.InvitesColumn},
			Bidi:    false,
		},
		"Organization",
		"Invite",
	)
	graph.MustAddE(
		"members",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   organization.MembersTable,
			Columns: []string{organization.MembersColumn},
			Bidi:    false,
		},
		"Organization",
		"OrgMembership",
	)
	graph.MustAddE(
		"organization",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organizationsetting.OrganizationTable,
			Columns: []string{organizationsetting.OrganizationColumn},
			Bidi:    false,
		},
		"OrganizationSetting",
		"Organization",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   passwordresettoken.OwnerTable,
			Columns: []string{passwordresettoken.OwnerColumn},
			Bidi:    false,
		},
		"PasswordResetToken",
		"User",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   personalaccesstoken.OwnerTable,
			Columns: []string{personalaccesstoken.OwnerColumn},
			Bidi:    false,
		},
		"PersonalAccessToken",
		"User",
	)
	graph.MustAddE(
		"organizations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   personalaccesstoken.OrganizationsTable,
			Columns: personalaccesstoken.OrganizationsPrimaryKey,
			Bidi:    false,
		},
		"PersonalAccessToken",
		"Organization",
	)
	graph.MustAddE(
		"personal_access_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PersonalAccessTokensTable,
			Columns: []string{user.PersonalAccessTokensColumn},
			Bidi:    false,
		},
		"User",
		"PersonalAccessToken",
	)
	graph.MustAddE(
		"setting",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SettingTable,
			Columns: []string{user.SettingColumn},
			Bidi:    false,
		},
		"User",
		"UserSetting",
	)
	graph.MustAddE(
		"email_verification_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailVerificationTokensTable,
			Columns: []string{user.EmailVerificationTokensColumn},
			Bidi:    false,
		},
		"User",
		"EmailVerificationToken",
	)
	graph.MustAddE(
		"password_reset_tokens",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordResetTokensTable,
			Columns: []string{user.PasswordResetTokensColumn},
			Bidi:    false,
		},
		"User",
		"PasswordResetToken",
	)
	graph.MustAddE(
		"groups",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Group",
	)
	graph.MustAddE(
		"organizations",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
		},
		"User",
		"Organization",
	)
	graph.MustAddE(
		"webauthn",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnTable,
			Columns: []string{user.WebauthnColumn},
			Bidi:    false,
		},
		"User",
		"Webauthn",
	)
	graph.MustAddE(
		"group_memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
		},
		"User",
		"GroupMembership",
	)
	graph.MustAddE(
		"org_memberships",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgMembershipsTable,
			Columns: []string{user.OrgMembershipsColumn},
			Bidi:    false,
		},
		"User",
		"OrgMembership",
	)
	graph.MustAddE(
		"user",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersetting.UserTable,
			Columns: []string{usersetting.UserColumn},
			Bidi:    false,
		},
		"UserSetting",
		"User",
	)
	graph.MustAddE(
		"default_org",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   usersetting.DefaultOrgTable,
			Columns: []string{usersetting.DefaultOrgColumn},
			Bidi:    false,
		},
		"UserSetting",
		"Organization",
	)
	graph.MustAddE(
		"owner",
		&sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   webauthn.OwnerTable,
			Columns: []string{webauthn.OwnerColumn},
			Bidi:    false,
		},
		"Webauthn",
		"User",
	)
	return graph
}()

// predicateAdder wraps the addPredicate method.
// All update, update-one and query builders implement this interface.
type predicateAdder interface {
	addPredicate(func(s *sql.Selector))
}

// addPredicate implements the predicateAdder interface.
func (evtq *EmailVerificationTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	evtq.predicates = append(evtq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EmailVerificationTokenQuery builder.
func (evtq *EmailVerificationTokenQuery) Filter() *EmailVerificationTokenFilter {
	return &EmailVerificationTokenFilter{config: evtq.config, predicateAdder: evtq}
}

// addPredicate implements the predicateAdder interface.
func (m *EmailVerificationTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EmailVerificationTokenMutation builder.
func (m *EmailVerificationTokenMutation) Filter() *EmailVerificationTokenFilter {
	return &EmailVerificationTokenFilter{config: m.config, predicateAdder: m}
}

// EmailVerificationTokenFilter provides a generic filtering capability at runtime for EmailVerificationTokenQuery.
type EmailVerificationTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EmailVerificationTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[0].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EmailVerificationTokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EmailVerificationTokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(emailverificationtoken.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EmailVerificationTokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(emailverificationtoken.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EmailVerificationTokenFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EmailVerificationTokenFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EmailVerificationTokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(emailverificationtoken.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EmailVerificationTokenFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EmailVerificationTokenFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldOwnerID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *EmailVerificationTokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldToken))
}

// WhereTTL applies the entql time.Time predicate on the ttl field.
func (f *EmailVerificationTokenFilter) WhereTTL(p entql.TimeP) {
	f.Where(p.Field(emailverificationtoken.FieldTTL))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *EmailVerificationTokenFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(emailverificationtoken.FieldEmail))
}

// WhereSecret applies the entql []byte predicate on the secret field.
func (f *EmailVerificationTokenFilter) WhereSecret(p entql.BytesP) {
	f.Where(p.Field(emailverificationtoken.FieldSecret))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *EmailVerificationTokenFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *EmailVerificationTokenFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (eq *EntitlementQuery) addPredicate(pred func(s *sql.Selector)) {
	eq.predicates = append(eq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the EntitlementQuery builder.
func (eq *EntitlementQuery) Filter() *EntitlementFilter {
	return &EntitlementFilter{config: eq.config, predicateAdder: eq}
}

// addPredicate implements the predicateAdder interface.
func (m *EntitlementMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the EntitlementMutation builder.
func (m *EntitlementMutation) Filter() *EntitlementFilter {
	return &EntitlementFilter{config: m.config, predicateAdder: m}
}

// EntitlementFilter provides a generic filtering capability at runtime for EntitlementQuery.
type EntitlementFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *EntitlementFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[1].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *EntitlementFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *EntitlementFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(entitlement.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *EntitlementFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(entitlement.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *EntitlementFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *EntitlementFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *EntitlementFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(entitlement.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *EntitlementFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *EntitlementFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldOwnerID))
}

// WhereTier applies the entql string predicate on the tier field.
func (f *EntitlementFilter) WhereTier(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldTier))
}

// WhereExternalCustomerID applies the entql string predicate on the external_customer_id field.
func (f *EntitlementFilter) WhereExternalCustomerID(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldExternalCustomerID))
}

// WhereExternalSubscriptionID applies the entql string predicate on the external_subscription_id field.
func (f *EntitlementFilter) WhereExternalSubscriptionID(p entql.StringP) {
	f.Where(p.Field(entitlement.FieldExternalSubscriptionID))
}

// WhereExpires applies the entql bool predicate on the expires field.
func (f *EntitlementFilter) WhereExpires(p entql.BoolP) {
	f.Where(p.Field(entitlement.FieldExpires))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *EntitlementFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(entitlement.FieldExpiresAt))
}

// WhereCancelled applies the entql bool predicate on the cancelled field.
func (f *EntitlementFilter) WhereCancelled(p entql.BoolP) {
	f.Where(p.Field(entitlement.FieldCancelled))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *EntitlementFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *EntitlementFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (gq *GroupQuery) addPredicate(pred func(s *sql.Selector)) {
	gq.predicates = append(gq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupQuery builder.
func (gq *GroupQuery) Filter() *GroupFilter {
	return &GroupFilter{config: gq.config, predicateAdder: gq}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupMutation builder.
func (m *GroupMutation) Filter() *GroupFilter {
	return &GroupFilter{config: m.config, predicateAdder: m}
}

// GroupFilter provides a generic filtering capability at runtime for GroupQuery.
type GroupFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[2].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(group.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(group.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(group.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(group.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(group.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *GroupFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(group.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *GroupFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(group.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *GroupFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(group.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *GroupFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(group.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *GroupFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(group.FieldDescription))
}

// WhereGravatarLogoURL applies the entql string predicate on the gravatar_logo_url field.
func (f *GroupFilter) WhereGravatarLogoURL(p entql.StringP) {
	f.Where(p.Field(group.FieldGravatarLogoURL))
}

// WhereLogoURL applies the entql string predicate on the logo_url field.
func (f *GroupFilter) WhereLogoURL(p entql.StringP) {
	f.Where(p.Field(group.FieldLogoURL))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *GroupFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(group.FieldDisplayName))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *GroupFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *GroupFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSetting applies a predicate to check if query has an edge setting.
func (f *GroupFilter) WhereHasSetting() {
	f.Where(entql.HasEdge("setting"))
}

// WhereHasSettingWith applies a predicate to check if query has an edge setting with a given conditions (other predicates).
func (f *GroupFilter) WhereHasSettingWith(preds ...predicate.GroupSetting) {
	f.Where(entql.HasEdgeWith("setting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *GroupFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *GroupFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMembers applies a predicate to check if query has an edge members.
func (f *GroupFilter) WhereHasMembers() {
	f.Where(entql.HasEdge("members"))
}

// WhereHasMembersWith applies a predicate to check if query has an edge members with a given conditions (other predicates).
func (f *GroupFilter) WhereHasMembersWith(preds ...predicate.GroupMembership) {
	f.Where(entql.HasEdgeWith("members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (gmq *GroupMembershipQuery) addPredicate(pred func(s *sql.Selector)) {
	gmq.predicates = append(gmq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupMembershipQuery builder.
func (gmq *GroupMembershipQuery) Filter() *GroupMembershipFilter {
	return &GroupMembershipFilter{config: gmq.config, predicateAdder: gmq}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupMembershipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupMembershipMutation builder.
func (m *GroupMembershipMutation) Filter() *GroupMembershipFilter {
	return &GroupMembershipFilter{config: m.config, predicateAdder: m}
}

// GroupMembershipFilter provides a generic filtering capability at runtime for GroupMembershipQuery.
type GroupMembershipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupMembershipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[3].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupMembershipFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupMembershipFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(groupmembership.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupMembershipFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(groupmembership.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupMembershipFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupMembershipFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *GroupMembershipFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(groupmembership.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *GroupMembershipFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldDeletedBy))
}

// WhereRole applies the entql string predicate on the role field.
func (f *GroupMembershipFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldRole))
}

// WhereGroupID applies the entql string predicate on the group_id field.
func (f *GroupMembershipFilter) WhereGroupID(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldGroupID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *GroupMembershipFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(groupmembership.FieldUserID))
}

// WhereHasGroup applies a predicate to check if query has an edge group.
func (f *GroupMembershipFilter) WhereHasGroup() {
	f.Where(entql.HasEdge("group"))
}

// WhereHasGroupWith applies a predicate to check if query has an edge group with a given conditions (other predicates).
func (f *GroupMembershipFilter) WhereHasGroupWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *GroupMembershipFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *GroupMembershipFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (gsq *GroupSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	gsq.predicates = append(gsq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the GroupSettingQuery builder.
func (gsq *GroupSettingQuery) Filter() *GroupSettingFilter {
	return &GroupSettingFilter{config: gsq.config, predicateAdder: gsq}
}

// addPredicate implements the predicateAdder interface.
func (m *GroupSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the GroupSettingMutation builder.
func (m *GroupSettingMutation) Filter() *GroupSettingFilter {
	return &GroupSettingFilter{config: m.config, predicateAdder: m}
}

// GroupSettingFilter provides a generic filtering capability at runtime for GroupSettingQuery.
type GroupSettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *GroupSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[4].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *GroupSettingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *GroupSettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(groupsetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *GroupSettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(groupsetting.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *GroupSettingFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *GroupSettingFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *GroupSettingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(groupsetting.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *GroupSettingFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldDeletedBy))
}

// WhereVisibility applies the entql string predicate on the visibility field.
func (f *GroupSettingFilter) WhereVisibility(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldVisibility))
}

// WhereJoinPolicy applies the entql string predicate on the join_policy field.
func (f *GroupSettingFilter) WhereJoinPolicy(p entql.StringP) {
	f.Where(p.Field(groupsetting.FieldJoinPolicy))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *GroupSettingFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(groupsetting.FieldTags))
}

// WhereSyncToSlack applies the entql bool predicate on the sync_to_slack field.
func (f *GroupSettingFilter) WhereSyncToSlack(p entql.BoolP) {
	f.Where(p.Field(groupsetting.FieldSyncToSlack))
}

// WhereSyncToGithub applies the entql bool predicate on the sync_to_github field.
func (f *GroupSettingFilter) WhereSyncToGithub(p entql.BoolP) {
	f.Where(p.Field(groupsetting.FieldSyncToGithub))
}

// WhereHasGroup applies a predicate to check if query has an edge group.
func (f *GroupSettingFilter) WhereHasGroup() {
	f.Where(entql.HasEdge("group"))
}

// WhereHasGroupWith applies a predicate to check if query has an edge group with a given conditions (other predicates).
func (f *GroupSettingFilter) WhereHasGroupWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("group", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iq *IntegrationQuery) addPredicate(pred func(s *sql.Selector)) {
	iq.predicates = append(iq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the IntegrationQuery builder.
func (iq *IntegrationQuery) Filter() *IntegrationFilter {
	return &IntegrationFilter{config: iq.config, predicateAdder: iq}
}

// addPredicate implements the predicateAdder interface.
func (m *IntegrationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the IntegrationMutation builder.
func (m *IntegrationMutation) Filter() *IntegrationFilter {
	return &IntegrationFilter{config: m.config, predicateAdder: m}
}

// IntegrationFilter provides a generic filtering capability at runtime for IntegrationQuery.
type IntegrationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *IntegrationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[5].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *IntegrationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(integration.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *IntegrationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(integration.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *IntegrationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(integration.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *IntegrationFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(integration.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *IntegrationFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(integration.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *IntegrationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(integration.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *IntegrationFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(integration.FieldDeletedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *IntegrationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(integration.FieldName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *IntegrationFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(integration.FieldDescription))
}

// WhereKind applies the entql string predicate on the kind field.
func (f *IntegrationFilter) WhereKind(p entql.StringP) {
	f.Where(p.Field(integration.FieldKind))
}

// WhereSecretName applies the entql string predicate on the secret_name field.
func (f *IntegrationFilter) WhereSecretName(p entql.StringP) {
	f.Where(p.Field(integration.FieldSecretName))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *IntegrationFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *IntegrationFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (iq *InviteQuery) addPredicate(pred func(s *sql.Selector)) {
	iq.predicates = append(iq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the InviteQuery builder.
func (iq *InviteQuery) Filter() *InviteFilter {
	return &InviteFilter{config: iq.config, predicateAdder: iq}
}

// addPredicate implements the predicateAdder interface.
func (m *InviteMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the InviteMutation builder.
func (m *InviteMutation) Filter() *InviteFilter {
	return &InviteFilter{config: m.config, predicateAdder: m}
}

// InviteFilter provides a generic filtering capability at runtime for InviteQuery.
type InviteFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *InviteFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[6].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *InviteFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(invite.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *InviteFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(invite.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *InviteFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(invite.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *InviteFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(invite.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *InviteFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(invite.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *InviteFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(invite.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *InviteFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(invite.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *InviteFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(invite.FieldOwnerID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *InviteFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(invite.FieldToken))
}

// WhereExpires applies the entql time.Time predicate on the expires field.
func (f *InviteFilter) WhereExpires(p entql.TimeP) {
	f.Where(p.Field(invite.FieldExpires))
}

// WhereRecipient applies the entql string predicate on the recipient field.
func (f *InviteFilter) WhereRecipient(p entql.StringP) {
	f.Where(p.Field(invite.FieldRecipient))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *InviteFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(invite.FieldStatus))
}

// WhereRole applies the entql string predicate on the role field.
func (f *InviteFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(invite.FieldRole))
}

// WhereSendAttempts applies the entql int predicate on the send_attempts field.
func (f *InviteFilter) WhereSendAttempts(p entql.IntP) {
	f.Where(p.Field(invite.FieldSendAttempts))
}

// WhereRequestorID applies the entql string predicate on the requestor_id field.
func (f *InviteFilter) WhereRequestorID(p entql.StringP) {
	f.Where(p.Field(invite.FieldRequestorID))
}

// WhereSecret applies the entql []byte predicate on the secret field.
func (f *InviteFilter) WhereSecret(p entql.BytesP) {
	f.Where(p.Field(invite.FieldSecret))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *InviteFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *InviteFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (opq *OauthProviderQuery) addPredicate(pred func(s *sql.Selector)) {
	opq.predicates = append(opq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OauthProviderQuery builder.
func (opq *OauthProviderQuery) Filter() *OauthProviderFilter {
	return &OauthProviderFilter{config: opq.config, predicateAdder: opq}
}

// addPredicate implements the predicateAdder interface.
func (m *OauthProviderMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OauthProviderMutation builder.
func (m *OauthProviderMutation) Filter() *OauthProviderFilter {
	return &OauthProviderFilter{config: m.config, predicateAdder: m}
}

// OauthProviderFilter provides a generic filtering capability at runtime for OauthProviderQuery.
type OauthProviderFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OauthProviderFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[7].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OauthProviderFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OauthProviderFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthprovider.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OauthProviderFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(oauthprovider.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OauthProviderFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OauthProviderFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OauthProviderFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(oauthprovider.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OauthProviderFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldDeletedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *OauthProviderFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldName))
}

// WhereClientID applies the entql string predicate on the client_id field.
func (f *OauthProviderFilter) WhereClientID(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldClientID))
}

// WhereClientSecret applies the entql string predicate on the client_secret field.
func (f *OauthProviderFilter) WhereClientSecret(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldClientSecret))
}

// WhereRedirectURL applies the entql string predicate on the redirect_url field.
func (f *OauthProviderFilter) WhereRedirectURL(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldRedirectURL))
}

// WhereScopes applies the entql string predicate on the scopes field.
func (f *OauthProviderFilter) WhereScopes(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldScopes))
}

// WhereAuthURL applies the entql string predicate on the auth_url field.
func (f *OauthProviderFilter) WhereAuthURL(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldAuthURL))
}

// WhereTokenURL applies the entql string predicate on the token_url field.
func (f *OauthProviderFilter) WhereTokenURL(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldTokenURL))
}

// WhereAuthStyle applies the entql uint8 predicate on the auth_style field.
func (f *OauthProviderFilter) WhereAuthStyle(p entql.Uint8P) {
	f.Where(p.Field(oauthprovider.FieldAuthStyle))
}

// WhereInfoURL applies the entql string predicate on the info_url field.
func (f *OauthProviderFilter) WhereInfoURL(p entql.StringP) {
	f.Where(p.Field(oauthprovider.FieldInfoURL))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *OauthProviderFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *OauthProviderFilter) WhereHasOwnerWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oattq *OhAuthTooTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	oattq.predicates = append(oattq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OhAuthTooTokenQuery builder.
func (oattq *OhAuthTooTokenQuery) Filter() *OhAuthTooTokenFilter {
	return &OhAuthTooTokenFilter{config: oattq.config, predicateAdder: oattq}
}

// addPredicate implements the predicateAdder interface.
func (m *OhAuthTooTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OhAuthTooTokenMutation builder.
func (m *OhAuthTooTokenMutation) Filter() *OhAuthTooTokenFilter {
	return &OhAuthTooTokenFilter{config: m.config, predicateAdder: m}
}

// OhAuthTooTokenFilter provides a generic filtering capability at runtime for OhAuthTooTokenQuery.
type OhAuthTooTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OhAuthTooTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[8].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OhAuthTooTokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldID))
}

// WhereClientID applies the entql string predicate on the client_id field.
func (f *OhAuthTooTokenFilter) WhereClientID(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldClientID))
}

// WhereScopes applies the entql json.RawMessage predicate on the scopes field.
func (f *OhAuthTooTokenFilter) WhereScopes(p entql.BytesP) {
	f.Where(p.Field(ohauthtootoken.FieldScopes))
}

// WhereNonce applies the entql string predicate on the nonce field.
func (f *OhAuthTooTokenFilter) WhereNonce(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldNonce))
}

// WhereClaimsUserID applies the entql string predicate on the claims_user_id field.
func (f *OhAuthTooTokenFilter) WhereClaimsUserID(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldClaimsUserID))
}

// WhereClaimsUsername applies the entql string predicate on the claims_username field.
func (f *OhAuthTooTokenFilter) WhereClaimsUsername(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldClaimsUsername))
}

// WhereClaimsEmail applies the entql string predicate on the claims_email field.
func (f *OhAuthTooTokenFilter) WhereClaimsEmail(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldClaimsEmail))
}

// WhereClaimsEmailVerified applies the entql bool predicate on the claims_email_verified field.
func (f *OhAuthTooTokenFilter) WhereClaimsEmailVerified(p entql.BoolP) {
	f.Where(p.Field(ohauthtootoken.FieldClaimsEmailVerified))
}

// WhereClaimsGroups applies the entql json.RawMessage predicate on the claims_groups field.
func (f *OhAuthTooTokenFilter) WhereClaimsGroups(p entql.BytesP) {
	f.Where(p.Field(ohauthtootoken.FieldClaimsGroups))
}

// WhereClaimsPreferredUsername applies the entql string predicate on the claims_preferred_username field.
func (f *OhAuthTooTokenFilter) WhereClaimsPreferredUsername(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldClaimsPreferredUsername))
}

// WhereConnectorID applies the entql string predicate on the connector_id field.
func (f *OhAuthTooTokenFilter) WhereConnectorID(p entql.StringP) {
	f.Where(p.Field(ohauthtootoken.FieldConnectorID))
}

// WhereConnectorData applies the entql json.RawMessage predicate on the connector_data field.
func (f *OhAuthTooTokenFilter) WhereConnectorData(p entql.BytesP) {
	f.Where(p.Field(ohauthtootoken.FieldConnectorData))
}

// WhereLastUsed applies the entql time.Time predicate on the last_used field.
func (f *OhAuthTooTokenFilter) WhereLastUsed(p entql.TimeP) {
	f.Where(p.Field(ohauthtootoken.FieldLastUsed))
}

// addPredicate implements the predicateAdder interface.
func (omq *OrgMembershipQuery) addPredicate(pred func(s *sql.Selector)) {
	omq.predicates = append(omq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrgMembershipQuery builder.
func (omq *OrgMembershipQuery) Filter() *OrgMembershipFilter {
	return &OrgMembershipFilter{config: omq.config, predicateAdder: omq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrgMembershipMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrgMembershipMutation builder.
func (m *OrgMembershipMutation) Filter() *OrgMembershipFilter {
	return &OrgMembershipFilter{config: m.config, predicateAdder: m}
}

// OrgMembershipFilter provides a generic filtering capability at runtime for OrgMembershipQuery.
type OrgMembershipFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrgMembershipFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[9].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrgMembershipFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrgMembershipFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(orgmembership.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrgMembershipFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(orgmembership.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrgMembershipFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrgMembershipFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrgMembershipFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(orgmembership.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrgMembershipFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldDeletedBy))
}

// WhereRole applies the entql string predicate on the role field.
func (f *OrgMembershipFilter) WhereRole(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldRole))
}

// WhereOrganizationID applies the entql string predicate on the organization_id field.
func (f *OrgMembershipFilter) WhereOrganizationID(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldOrganizationID))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *OrgMembershipFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(orgmembership.FieldUserID))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *OrgMembershipFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *OrgMembershipFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *OrgMembershipFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *OrgMembershipFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (oq *OrganizationQuery) addPredicate(pred func(s *sql.Selector)) {
	oq.predicates = append(oq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationQuery builder.
func (oq *OrganizationQuery) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: oq.config, predicateAdder: oq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationMutation builder.
func (m *OrganizationMutation) Filter() *OrganizationFilter {
	return &OrganizationFilter{config: m.config, predicateAdder: m}
}

// OrganizationFilter provides a generic filtering capability at runtime for OrganizationQuery.
type OrganizationFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[10].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrganizationFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(organization.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrganizationFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(organization.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrganizationFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(organization.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrganizationFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(organization.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrganizationFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(organization.FieldDeletedBy))
}

// WhereName applies the entql string predicate on the name field.
func (f *OrganizationFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(organization.FieldName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *OrganizationFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(organization.FieldDisplayName))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *OrganizationFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(organization.FieldDescription))
}

// WhereParentOrganizationID applies the entql string predicate on the parent_organization_id field.
func (f *OrganizationFilter) WhereParentOrganizationID(p entql.StringP) {
	f.Where(p.Field(organization.FieldParentOrganizationID))
}

// WherePersonalOrg applies the entql bool predicate on the personal_org field.
func (f *OrganizationFilter) WherePersonalOrg(p entql.BoolP) {
	f.Where(p.Field(organization.FieldPersonalOrg))
}

// WhereHasParent applies a predicate to check if query has an edge parent.
func (f *OrganizationFilter) WhereHasParent() {
	f.Where(entql.HasEdge("parent"))
}

// WhereHasParentWith applies a predicate to check if query has an edge parent with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasParentWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("parent", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasChildren applies a predicate to check if query has an edge children.
func (f *OrganizationFilter) WhereHasChildren() {
	f.Where(entql.HasEdge("children"))
}

// WhereHasChildrenWith applies a predicate to check if query has an edge children with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasChildrenWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("children", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroups applies a predicate to check if query has an edge groups.
func (f *OrganizationFilter) WhereHasGroups() {
	f.Where(entql.HasEdge("groups"))
}

// WhereHasGroupsWith applies a predicate to check if query has an edge groups with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasIntegrations applies a predicate to check if query has an edge integrations.
func (f *OrganizationFilter) WhereHasIntegrations() {
	f.Where(entql.HasEdge("integrations"))
}

// WhereHasIntegrationsWith applies a predicate to check if query has an edge integrations with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasIntegrationsWith(preds ...predicate.Integration) {
	f.Where(entql.HasEdgeWith("integrations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSetting applies a predicate to check if query has an edge setting.
func (f *OrganizationFilter) WhereHasSetting() {
	f.Where(entql.HasEdge("setting"))
}

// WhereHasSettingWith applies a predicate to check if query has an edge setting with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasSettingWith(preds ...predicate.OrganizationSetting) {
	f.Where(entql.HasEdgeWith("setting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEntitlements applies a predicate to check if query has an edge entitlements.
func (f *OrganizationFilter) WhereHasEntitlements() {
	f.Where(entql.HasEdge("entitlements"))
}

// WhereHasEntitlementsWith applies a predicate to check if query has an edge entitlements with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasEntitlementsWith(preds ...predicate.Entitlement) {
	f.Where(entql.HasEdgeWith("entitlements", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPersonalAccessTokens applies a predicate to check if query has an edge personal_access_tokens.
func (f *OrganizationFilter) WhereHasPersonalAccessTokens() {
	f.Where(entql.HasEdge("personal_access_tokens"))
}

// WhereHasPersonalAccessTokensWith applies a predicate to check if query has an edge personal_access_tokens with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasPersonalAccessTokensWith(preds ...predicate.PersonalAccessToken) {
	f.Where(entql.HasEdgeWith("personal_access_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOauthprovider applies a predicate to check if query has an edge oauthprovider.
func (f *OrganizationFilter) WhereHasOauthprovider() {
	f.Where(entql.HasEdge("oauthprovider"))
}

// WhereHasOauthproviderWith applies a predicate to check if query has an edge oauthprovider with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasOauthproviderWith(preds ...predicate.OauthProvider) {
	f.Where(entql.HasEdgeWith("oauthprovider", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasUsers applies a predicate to check if query has an edge users.
func (f *OrganizationFilter) WhereHasUsers() {
	f.Where(entql.HasEdge("users"))
}

// WhereHasUsersWith applies a predicate to check if query has an edge users with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasUsersWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("users", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasInvites applies a predicate to check if query has an edge invites.
func (f *OrganizationFilter) WhereHasInvites() {
	f.Where(entql.HasEdge("invites"))
}

// WhereHasInvitesWith applies a predicate to check if query has an edge invites with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasInvitesWith(preds ...predicate.Invite) {
	f.Where(entql.HasEdgeWith("invites", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasMembers applies a predicate to check if query has an edge members.
func (f *OrganizationFilter) WhereHasMembers() {
	f.Where(entql.HasEdge("members"))
}

// WhereHasMembersWith applies a predicate to check if query has an edge members with a given conditions (other predicates).
func (f *OrganizationFilter) WhereHasMembersWith(preds ...predicate.OrgMembership) {
	f.Where(entql.HasEdgeWith("members", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (osq *OrganizationSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	osq.predicates = append(osq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the OrganizationSettingQuery builder.
func (osq *OrganizationSettingQuery) Filter() *OrganizationSettingFilter {
	return &OrganizationSettingFilter{config: osq.config, predicateAdder: osq}
}

// addPredicate implements the predicateAdder interface.
func (m *OrganizationSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the OrganizationSettingMutation builder.
func (m *OrganizationSettingMutation) Filter() *OrganizationSettingFilter {
	return &OrganizationSettingFilter{config: m.config, predicateAdder: m}
}

// OrganizationSettingFilter provides a generic filtering capability at runtime for OrganizationSettingQuery.
type OrganizationSettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *OrganizationSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[11].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *OrganizationSettingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *OrganizationSettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *OrganizationSettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsetting.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *OrganizationSettingFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *OrganizationSettingFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *OrganizationSettingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(organizationsetting.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *OrganizationSettingFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldDeletedBy))
}

// WhereDomains applies the entql json.RawMessage predicate on the domains field.
func (f *OrganizationSettingFilter) WhereDomains(p entql.BytesP) {
	f.Where(p.Field(organizationsetting.FieldDomains))
}

// WhereSSOCert applies the entql string predicate on the sso_cert field.
func (f *OrganizationSettingFilter) WhereSSOCert(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldSSOCert))
}

// WhereSSOEntrypoint applies the entql string predicate on the sso_entrypoint field.
func (f *OrganizationSettingFilter) WhereSSOEntrypoint(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldSSOEntrypoint))
}

// WhereSSOIssuer applies the entql string predicate on the sso_issuer field.
func (f *OrganizationSettingFilter) WhereSSOIssuer(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldSSOIssuer))
}

// WhereBillingContact applies the entql string predicate on the billing_contact field.
func (f *OrganizationSettingFilter) WhereBillingContact(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldBillingContact))
}

// WhereBillingEmail applies the entql string predicate on the billing_email field.
func (f *OrganizationSettingFilter) WhereBillingEmail(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldBillingEmail))
}

// WhereBillingPhone applies the entql string predicate on the billing_phone field.
func (f *OrganizationSettingFilter) WhereBillingPhone(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldBillingPhone))
}

// WhereBillingAddress applies the entql string predicate on the billing_address field.
func (f *OrganizationSettingFilter) WhereBillingAddress(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldBillingAddress))
}

// WhereTaxIdentifier applies the entql string predicate on the tax_identifier field.
func (f *OrganizationSettingFilter) WhereTaxIdentifier(p entql.StringP) {
	f.Where(p.Field(organizationsetting.FieldTaxIdentifier))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *OrganizationSettingFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(organizationsetting.FieldTags))
}

// WhereHasOrganization applies a predicate to check if query has an edge organization.
func (f *OrganizationSettingFilter) WhereHasOrganization() {
	f.Where(entql.HasEdge("organization"))
}

// WhereHasOrganizationWith applies a predicate to check if query has an edge organization with a given conditions (other predicates).
func (f *OrganizationSettingFilter) WhereHasOrganizationWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organization", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (prtq *PasswordResetTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	prtq.predicates = append(prtq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PasswordResetTokenQuery builder.
func (prtq *PasswordResetTokenQuery) Filter() *PasswordResetTokenFilter {
	return &PasswordResetTokenFilter{config: prtq.config, predicateAdder: prtq}
}

// addPredicate implements the predicateAdder interface.
func (m *PasswordResetTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PasswordResetTokenMutation builder.
func (m *PasswordResetTokenMutation) Filter() *PasswordResetTokenFilter {
	return &PasswordResetTokenFilter{config: m.config, predicateAdder: m}
}

// PasswordResetTokenFilter provides a generic filtering capability at runtime for PasswordResetTokenQuery.
type PasswordResetTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PasswordResetTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[12].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PasswordResetTokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PasswordResetTokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(passwordresettoken.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PasswordResetTokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(passwordresettoken.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *PasswordResetTokenFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *PasswordResetTokenFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PasswordResetTokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(passwordresettoken.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *PasswordResetTokenFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *PasswordResetTokenFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldOwnerID))
}

// WhereToken applies the entql string predicate on the token field.
func (f *PasswordResetTokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldToken))
}

// WhereTTL applies the entql time.Time predicate on the ttl field.
func (f *PasswordResetTokenFilter) WhereTTL(p entql.TimeP) {
	f.Where(p.Field(passwordresettoken.FieldTTL))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *PasswordResetTokenFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(passwordresettoken.FieldEmail))
}

// WhereSecret applies the entql []byte predicate on the secret field.
func (f *PasswordResetTokenFilter) WhereSecret(p entql.BytesP) {
	f.Where(p.Field(passwordresettoken.FieldSecret))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *PasswordResetTokenFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *PasswordResetTokenFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (patq *PersonalAccessTokenQuery) addPredicate(pred func(s *sql.Selector)) {
	patq.predicates = append(patq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the PersonalAccessTokenQuery builder.
func (patq *PersonalAccessTokenQuery) Filter() *PersonalAccessTokenFilter {
	return &PersonalAccessTokenFilter{config: patq.config, predicateAdder: patq}
}

// addPredicate implements the predicateAdder interface.
func (m *PersonalAccessTokenMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the PersonalAccessTokenMutation builder.
func (m *PersonalAccessTokenMutation) Filter() *PersonalAccessTokenFilter {
	return &PersonalAccessTokenFilter{config: m.config, predicateAdder: m}
}

// PersonalAccessTokenFilter provides a generic filtering capability at runtime for PersonalAccessTokenQuery.
type PersonalAccessTokenFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *PersonalAccessTokenFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[13].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *PersonalAccessTokenFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *PersonalAccessTokenFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *PersonalAccessTokenFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *PersonalAccessTokenFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *PersonalAccessTokenFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *PersonalAccessTokenFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *PersonalAccessTokenFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldDeletedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *PersonalAccessTokenFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldOwnerID))
}

// WhereName applies the entql string predicate on the name field.
func (f *PersonalAccessTokenFilter) WhereName(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldName))
}

// WhereToken applies the entql string predicate on the token field.
func (f *PersonalAccessTokenFilter) WhereToken(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldToken))
}

// WhereExpiresAt applies the entql time.Time predicate on the expires_at field.
func (f *PersonalAccessTokenFilter) WhereExpiresAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldExpiresAt))
}

// WhereDescription applies the entql string predicate on the description field.
func (f *PersonalAccessTokenFilter) WhereDescription(p entql.StringP) {
	f.Where(p.Field(personalaccesstoken.FieldDescription))
}

// WhereScopes applies the entql json.RawMessage predicate on the scopes field.
func (f *PersonalAccessTokenFilter) WhereScopes(p entql.BytesP) {
	f.Where(p.Field(personalaccesstoken.FieldScopes))
}

// WhereLastUsedAt applies the entql time.Time predicate on the last_used_at field.
func (f *PersonalAccessTokenFilter) WhereLastUsedAt(p entql.TimeP) {
	f.Where(p.Field(personalaccesstoken.FieldLastUsedAt))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *PersonalAccessTokenFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *PersonalAccessTokenFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizations applies a predicate to check if query has an edge organizations.
func (f *PersonalAccessTokenFilter) WhereHasOrganizations() {
	f.Where(entql.HasEdge("organizations"))
}

// WhereHasOrganizationsWith applies a predicate to check if query has an edge organizations with a given conditions (other predicates).
func (f *PersonalAccessTokenFilter) WhereHasOrganizationsWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organizations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (uq *UserQuery) addPredicate(pred func(s *sql.Selector)) {
	uq.predicates = append(uq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserQuery builder.
func (uq *UserQuery) Filter() *UserFilter {
	return &UserFilter{config: uq.config, predicateAdder: uq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserMutation builder.
func (m *UserMutation) Filter() *UserFilter {
	return &UserFilter{config: m.config, predicateAdder: m}
}

// UserFilter provides a generic filtering capability at runtime for UserQuery.
type UserFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[14].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(user.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *UserFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(user.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *UserFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(user.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *UserFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(user.FieldDeletedBy))
}

// WhereEmail applies the entql string predicate on the email field.
func (f *UserFilter) WhereEmail(p entql.StringP) {
	f.Where(p.Field(user.FieldEmail))
}

// WhereFirstName applies the entql string predicate on the first_name field.
func (f *UserFilter) WhereFirstName(p entql.StringP) {
	f.Where(p.Field(user.FieldFirstName))
}

// WhereLastName applies the entql string predicate on the last_name field.
func (f *UserFilter) WhereLastName(p entql.StringP) {
	f.Where(p.Field(user.FieldLastName))
}

// WhereDisplayName applies the entql string predicate on the display_name field.
func (f *UserFilter) WhereDisplayName(p entql.StringP) {
	f.Where(p.Field(user.FieldDisplayName))
}

// WhereAvatarRemoteURL applies the entql string predicate on the avatar_remote_url field.
func (f *UserFilter) WhereAvatarRemoteURL(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatarRemoteURL))
}

// WhereAvatarLocalFile applies the entql string predicate on the avatar_local_file field.
func (f *UserFilter) WhereAvatarLocalFile(p entql.StringP) {
	f.Where(p.Field(user.FieldAvatarLocalFile))
}

// WhereAvatarUpdatedAt applies the entql time.Time predicate on the avatar_updated_at field.
func (f *UserFilter) WhereAvatarUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(user.FieldAvatarUpdatedAt))
}

// WhereLastSeen applies the entql time.Time predicate on the last_seen field.
func (f *UserFilter) WhereLastSeen(p entql.TimeP) {
	f.Where(p.Field(user.FieldLastSeen))
}

// WherePassword applies the entql string predicate on the password field.
func (f *UserFilter) WherePassword(p entql.StringP) {
	f.Where(p.Field(user.FieldPassword))
}

// WhereSub applies the entql string predicate on the sub field.
func (f *UserFilter) WhereSub(p entql.StringP) {
	f.Where(p.Field(user.FieldSub))
}

// WhereAuthProvider applies the entql string predicate on the auth_provider field.
func (f *UserFilter) WhereAuthProvider(p entql.StringP) {
	f.Where(p.Field(user.FieldAuthProvider))
}

// WhereHasPersonalAccessTokens applies a predicate to check if query has an edge personal_access_tokens.
func (f *UserFilter) WhereHasPersonalAccessTokens() {
	f.Where(entql.HasEdge("personal_access_tokens"))
}

// WhereHasPersonalAccessTokensWith applies a predicate to check if query has an edge personal_access_tokens with a given conditions (other predicates).
func (f *UserFilter) WhereHasPersonalAccessTokensWith(preds ...predicate.PersonalAccessToken) {
	f.Where(entql.HasEdgeWith("personal_access_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasSetting applies a predicate to check if query has an edge setting.
func (f *UserFilter) WhereHasSetting() {
	f.Where(entql.HasEdge("setting"))
}

// WhereHasSettingWith applies a predicate to check if query has an edge setting with a given conditions (other predicates).
func (f *UserFilter) WhereHasSettingWith(preds ...predicate.UserSetting) {
	f.Where(entql.HasEdgeWith("setting", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasEmailVerificationTokens applies a predicate to check if query has an edge email_verification_tokens.
func (f *UserFilter) WhereHasEmailVerificationTokens() {
	f.Where(entql.HasEdge("email_verification_tokens"))
}

// WhereHasEmailVerificationTokensWith applies a predicate to check if query has an edge email_verification_tokens with a given conditions (other predicates).
func (f *UserFilter) WhereHasEmailVerificationTokensWith(preds ...predicate.EmailVerificationToken) {
	f.Where(entql.HasEdgeWith("email_verification_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasPasswordResetTokens applies a predicate to check if query has an edge password_reset_tokens.
func (f *UserFilter) WhereHasPasswordResetTokens() {
	f.Where(entql.HasEdge("password_reset_tokens"))
}

// WhereHasPasswordResetTokensWith applies a predicate to check if query has an edge password_reset_tokens with a given conditions (other predicates).
func (f *UserFilter) WhereHasPasswordResetTokensWith(preds ...predicate.PasswordResetToken) {
	f.Where(entql.HasEdgeWith("password_reset_tokens", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroups applies a predicate to check if query has an edge groups.
func (f *UserFilter) WhereHasGroups() {
	f.Where(entql.HasEdge("groups"))
}

// WhereHasGroupsWith applies a predicate to check if query has an edge groups with a given conditions (other predicates).
func (f *UserFilter) WhereHasGroupsWith(preds ...predicate.Group) {
	f.Where(entql.HasEdgeWith("groups", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrganizations applies a predicate to check if query has an edge organizations.
func (f *UserFilter) WhereHasOrganizations() {
	f.Where(entql.HasEdge("organizations"))
}

// WhereHasOrganizationsWith applies a predicate to check if query has an edge organizations with a given conditions (other predicates).
func (f *UserFilter) WhereHasOrganizationsWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("organizations", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasWebauthn applies a predicate to check if query has an edge webauthn.
func (f *UserFilter) WhereHasWebauthn() {
	f.Where(entql.HasEdge("webauthn"))
}

// WhereHasWebauthnWith applies a predicate to check if query has an edge webauthn with a given conditions (other predicates).
func (f *UserFilter) WhereHasWebauthnWith(preds ...predicate.Webauthn) {
	f.Where(entql.HasEdgeWith("webauthn", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasGroupMemberships applies a predicate to check if query has an edge group_memberships.
func (f *UserFilter) WhereHasGroupMemberships() {
	f.Where(entql.HasEdge("group_memberships"))
}

// WhereHasGroupMembershipsWith applies a predicate to check if query has an edge group_memberships with a given conditions (other predicates).
func (f *UserFilter) WhereHasGroupMembershipsWith(preds ...predicate.GroupMembership) {
	f.Where(entql.HasEdgeWith("group_memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasOrgMemberships applies a predicate to check if query has an edge org_memberships.
func (f *UserFilter) WhereHasOrgMemberships() {
	f.Where(entql.HasEdge("org_memberships"))
}

// WhereHasOrgMembershipsWith applies a predicate to check if query has an edge org_memberships with a given conditions (other predicates).
func (f *UserFilter) WhereHasOrgMembershipsWith(preds ...predicate.OrgMembership) {
	f.Where(entql.HasEdgeWith("org_memberships", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (usq *UserSettingQuery) addPredicate(pred func(s *sql.Selector)) {
	usq.predicates = append(usq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the UserSettingQuery builder.
func (usq *UserSettingQuery) Filter() *UserSettingFilter {
	return &UserSettingFilter{config: usq.config, predicateAdder: usq}
}

// addPredicate implements the predicateAdder interface.
func (m *UserSettingMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the UserSettingMutation builder.
func (m *UserSettingMutation) Filter() *UserSettingFilter {
	return &UserSettingFilter{config: m.config, predicateAdder: m}
}

// UserSettingFilter provides a generic filtering capability at runtime for UserSettingQuery.
type UserSettingFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *UserSettingFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[15].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *UserSettingFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *UserSettingFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *UserSettingFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *UserSettingFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *UserSettingFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldUpdatedBy))
}

// WhereDeletedAt applies the entql time.Time predicate on the deleted_at field.
func (f *UserSettingFilter) WhereDeletedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldDeletedAt))
}

// WhereDeletedBy applies the entql string predicate on the deleted_by field.
func (f *UserSettingFilter) WhereDeletedBy(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldDeletedBy))
}

// WhereUserID applies the entql string predicate on the user_id field.
func (f *UserSettingFilter) WhereUserID(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldUserID))
}

// WhereLocked applies the entql bool predicate on the locked field.
func (f *UserSettingFilter) WhereLocked(p entql.BoolP) {
	f.Where(p.Field(usersetting.FieldLocked))
}

// WhereSilencedAt applies the entql time.Time predicate on the silenced_at field.
func (f *UserSettingFilter) WhereSilencedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldSilencedAt))
}

// WhereSuspendedAt applies the entql time.Time predicate on the suspended_at field.
func (f *UserSettingFilter) WhereSuspendedAt(p entql.TimeP) {
	f.Where(p.Field(usersetting.FieldSuspendedAt))
}

// WhereStatus applies the entql string predicate on the status field.
func (f *UserSettingFilter) WhereStatus(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldStatus))
}

// WhereEmailConfirmed applies the entql bool predicate on the email_confirmed field.
func (f *UserSettingFilter) WhereEmailConfirmed(p entql.BoolP) {
	f.Where(p.Field(usersetting.FieldEmailConfirmed))
}

// WhereTags applies the entql json.RawMessage predicate on the tags field.
func (f *UserSettingFilter) WhereTags(p entql.BytesP) {
	f.Where(p.Field(usersetting.FieldTags))
}

// WhereIsWebauthnAllowed applies the entql bool predicate on the is_webauthn_allowed field.
func (f *UserSettingFilter) WhereIsWebauthnAllowed(p entql.BoolP) {
	f.Where(p.Field(usersetting.FieldIsWebauthnAllowed))
}

// WhereIsTfaEnabled applies the entql bool predicate on the is_tfa_enabled field.
func (f *UserSettingFilter) WhereIsTfaEnabled(p entql.BoolP) {
	f.Where(p.Field(usersetting.FieldIsTfaEnabled))
}

// WherePhoneNumber applies the entql string predicate on the phone_number field.
func (f *UserSettingFilter) WherePhoneNumber(p entql.StringP) {
	f.Where(p.Field(usersetting.FieldPhoneNumber))
}

// WhereHasUser applies a predicate to check if query has an edge user.
func (f *UserSettingFilter) WhereHasUser() {
	f.Where(entql.HasEdge("user"))
}

// WhereHasUserWith applies a predicate to check if query has an edge user with a given conditions (other predicates).
func (f *UserSettingFilter) WhereHasUserWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("user", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// WhereHasDefaultOrg applies a predicate to check if query has an edge default_org.
func (f *UserSettingFilter) WhereHasDefaultOrg() {
	f.Where(entql.HasEdge("default_org"))
}

// WhereHasDefaultOrgWith applies a predicate to check if query has an edge default_org with a given conditions (other predicates).
func (f *UserSettingFilter) WhereHasDefaultOrgWith(preds ...predicate.Organization) {
	f.Where(entql.HasEdgeWith("default_org", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}

// addPredicate implements the predicateAdder interface.
func (wq *WebauthnQuery) addPredicate(pred func(s *sql.Selector)) {
	wq.predicates = append(wq.predicates, pred)
}

// Filter returns a Filter implementation to apply filters on the WebauthnQuery builder.
func (wq *WebauthnQuery) Filter() *WebauthnFilter {
	return &WebauthnFilter{config: wq.config, predicateAdder: wq}
}

// addPredicate implements the predicateAdder interface.
func (m *WebauthnMutation) addPredicate(pred func(s *sql.Selector)) {
	m.predicates = append(m.predicates, pred)
}

// Filter returns an entql.Where implementation to apply filters on the WebauthnMutation builder.
func (m *WebauthnMutation) Filter() *WebauthnFilter {
	return &WebauthnFilter{config: m.config, predicateAdder: m}
}

// WebauthnFilter provides a generic filtering capability at runtime for WebauthnQuery.
type WebauthnFilter struct {
	predicateAdder
	config
}

// Where applies the entql predicate on the query filter.
func (f *WebauthnFilter) Where(p entql.P) {
	f.addPredicate(func(s *sql.Selector) {
		if err := schemaGraph.EvalP(schemaGraph.Nodes[16].Type, p, s); err != nil {
			s.AddError(err)
		}
	})
}

// WhereID applies the entql string predicate on the id field.
func (f *WebauthnFilter) WhereID(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldID))
}

// WhereCreatedAt applies the entql time.Time predicate on the created_at field.
func (f *WebauthnFilter) WhereCreatedAt(p entql.TimeP) {
	f.Where(p.Field(webauthn.FieldCreatedAt))
}

// WhereUpdatedAt applies the entql time.Time predicate on the updated_at field.
func (f *WebauthnFilter) WhereUpdatedAt(p entql.TimeP) {
	f.Where(p.Field(webauthn.FieldUpdatedAt))
}

// WhereCreatedBy applies the entql string predicate on the created_by field.
func (f *WebauthnFilter) WhereCreatedBy(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldCreatedBy))
}

// WhereUpdatedBy applies the entql string predicate on the updated_by field.
func (f *WebauthnFilter) WhereUpdatedBy(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldUpdatedBy))
}

// WhereOwnerID applies the entql string predicate on the owner_id field.
func (f *WebauthnFilter) WhereOwnerID(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldOwnerID))
}

// WhereCredentialID applies the entql []byte predicate on the credential_id field.
func (f *WebauthnFilter) WhereCredentialID(p entql.BytesP) {
	f.Where(p.Field(webauthn.FieldCredentialID))
}

// WherePublicKey applies the entql []byte predicate on the public_key field.
func (f *WebauthnFilter) WherePublicKey(p entql.BytesP) {
	f.Where(p.Field(webauthn.FieldPublicKey))
}

// WhereAttestationType applies the entql string predicate on the attestation_type field.
func (f *WebauthnFilter) WhereAttestationType(p entql.StringP) {
	f.Where(p.Field(webauthn.FieldAttestationType))
}

// WhereAaguid applies the entql []byte predicate on the aaguid field.
func (f *WebauthnFilter) WhereAaguid(p entql.BytesP) {
	f.Where(p.Field(webauthn.FieldAaguid))
}

// WhereSignCount applies the entql int32 predicate on the sign_count field.
func (f *WebauthnFilter) WhereSignCount(p entql.Int32P) {
	f.Where(p.Field(webauthn.FieldSignCount))
}

// WhereTransports applies the entql json.RawMessage predicate on the transports field.
func (f *WebauthnFilter) WhereTransports(p entql.BytesP) {
	f.Where(p.Field(webauthn.FieldTransports))
}

// WhereBackupEligible applies the entql bool predicate on the backup_eligible field.
func (f *WebauthnFilter) WhereBackupEligible(p entql.BoolP) {
	f.Where(p.Field(webauthn.FieldBackupEligible))
}

// WhereBackupState applies the entql bool predicate on the backup_state field.
func (f *WebauthnFilter) WhereBackupState(p entql.BoolP) {
	f.Where(p.Field(webauthn.FieldBackupState))
}

// WhereUserPresent applies the entql bool predicate on the user_present field.
func (f *WebauthnFilter) WhereUserPresent(p entql.BoolP) {
	f.Where(p.Field(webauthn.FieldUserPresent))
}

// WhereUserVerified applies the entql bool predicate on the user_verified field.
func (f *WebauthnFilter) WhereUserVerified(p entql.BoolP) {
	f.Where(p.Field(webauthn.FieldUserVerified))
}

// WhereHasOwner applies a predicate to check if query has an edge owner.
func (f *WebauthnFilter) WhereHasOwner() {
	f.Where(entql.HasEdge("owner"))
}

// WhereHasOwnerWith applies a predicate to check if query has an edge owner with a given conditions (other predicates).
func (f *WebauthnFilter) WhereHasOwnerWith(preds ...predicate.User) {
	f.Where(entql.HasEdgeWith("owner", sqlgraph.WrapFunc(func(s *sql.Selector) {
		for _, p := range preds {
			p(s)
		}
	})))
}
