// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/entitlement"
	"github.com/datumforge/datum/internal/ent/generated/event"
	"github.com/datumforge/datum/internal/ent/generated/feature"
	"github.com/datumforge/datum/internal/ent/generated/group"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/datumforge/datum/internal/ent/generated/user"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// FeatureQuery is the builder for querying Feature entities.
type FeatureQuery struct {
	config
	ctx                    *QueryContext
	order                  []feature.OrderOption
	inters                 []Interceptor
	predicates             []predicate.Feature
	withUsers              *UserQuery
	withGroups             *GroupQuery
	withEntitlements       *EntitlementQuery
	withOrganizations      *OrganizationQuery
	withEvents             *EventQuery
	modifiers              []func(*sql.Selector)
	loadTotal              []func(context.Context, []*Feature) error
	withNamedUsers         map[string]*UserQuery
	withNamedGroups        map[string]*GroupQuery
	withNamedEntitlements  map[string]*EntitlementQuery
	withNamedOrganizations map[string]*OrganizationQuery
	withNamedEvents        map[string]*EventQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the FeatureQuery builder.
func (fq *FeatureQuery) Where(ps ...predicate.Feature) *FeatureQuery {
	fq.predicates = append(fq.predicates, ps...)
	return fq
}

// Limit the number of records to be returned by this query.
func (fq *FeatureQuery) Limit(limit int) *FeatureQuery {
	fq.ctx.Limit = &limit
	return fq
}

// Offset to start from.
func (fq *FeatureQuery) Offset(offset int) *FeatureQuery {
	fq.ctx.Offset = &offset
	return fq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (fq *FeatureQuery) Unique(unique bool) *FeatureQuery {
	fq.ctx.Unique = &unique
	return fq
}

// Order specifies how the records should be ordered.
func (fq *FeatureQuery) Order(o ...feature.OrderOption) *FeatureQuery {
	fq.order = append(fq.order, o...)
	return fq
}

// QueryUsers chains the current query on the "users" edge.
func (fq *FeatureQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, feature.UsersTable, feature.UsersPrimaryKey...),
		)
		schemaConfig := fq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserFeatures
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroups chains the current query on the "groups" edge.
func (fq *FeatureQuery) QueryGroups() *GroupQuery {
	query := (&GroupClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, feature.GroupsTable, feature.GroupsPrimaryKey...),
		)
		schemaConfig := fq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.GroupFeatures
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntitlements chains the current query on the "entitlements" edge.
func (fq *FeatureQuery) QueryEntitlements() *EntitlementQuery {
	query := (&EntitlementClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, selector),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, feature.EntitlementsTable, feature.EntitlementsPrimaryKey...),
		)
		schemaConfig := fq.schemaConfig
		step.To.Schema = schemaConfig.Entitlement
		step.Edge.Schema = schemaConfig.EntitlementFeatures
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOrganizations chains the current query on the "organizations" edge.
func (fq *FeatureQuery) QueryOrganizations() *OrganizationQuery {
	query := (&OrganizationClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, feature.OrganizationsTable, feature.OrganizationsPrimaryKey...),
		)
		schemaConfig := fq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.OrganizationFeatures
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (fq *FeatureQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: fq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := fq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := fq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(feature.Table, feature.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, feature.EventsTable, feature.EventsPrimaryKey...),
		)
		schemaConfig := fq.schemaConfig
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.FeatureEvents
		fromU = sqlgraph.SetNeighbors(fq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Feature entity from the query.
// Returns a *NotFoundError when no Feature was found.
func (fq *FeatureQuery) First(ctx context.Context) (*Feature, error) {
	nodes, err := fq.Limit(1).All(setContextOp(ctx, fq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{feature.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (fq *FeatureQuery) FirstX(ctx context.Context) *Feature {
	node, err := fq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Feature ID from the query.
// Returns a *NotFoundError when no Feature ID was found.
func (fq *FeatureQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = fq.Limit(1).IDs(setContextOp(ctx, fq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{feature.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (fq *FeatureQuery) FirstIDX(ctx context.Context) string {
	id, err := fq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Feature entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Feature entity is found.
// Returns a *NotFoundError when no Feature entities are found.
func (fq *FeatureQuery) Only(ctx context.Context) (*Feature, error) {
	nodes, err := fq.Limit(2).All(setContextOp(ctx, fq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{feature.Label}
	default:
		return nil, &NotSingularError{feature.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (fq *FeatureQuery) OnlyX(ctx context.Context) *Feature {
	node, err := fq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Feature ID in the query.
// Returns a *NotSingularError when more than one Feature ID is found.
// Returns a *NotFoundError when no entities are found.
func (fq *FeatureQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = fq.Limit(2).IDs(setContextOp(ctx, fq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{feature.Label}
	default:
		err = &NotSingularError{feature.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (fq *FeatureQuery) OnlyIDX(ctx context.Context) string {
	id, err := fq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Features.
func (fq *FeatureQuery) All(ctx context.Context) ([]*Feature, error) {
	ctx = setContextOp(ctx, fq.ctx, "All")
	if err := fq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Feature, *FeatureQuery]()
	return withInterceptors[[]*Feature](ctx, fq, qr, fq.inters)
}

// AllX is like All, but panics if an error occurs.
func (fq *FeatureQuery) AllX(ctx context.Context) []*Feature {
	nodes, err := fq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Feature IDs.
func (fq *FeatureQuery) IDs(ctx context.Context) (ids []string, err error) {
	if fq.ctx.Unique == nil && fq.path != nil {
		fq.Unique(true)
	}
	ctx = setContextOp(ctx, fq.ctx, "IDs")
	if err = fq.Select(feature.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (fq *FeatureQuery) IDsX(ctx context.Context) []string {
	ids, err := fq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (fq *FeatureQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, fq.ctx, "Count")
	if err := fq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, fq, querierCount[*FeatureQuery](), fq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (fq *FeatureQuery) CountX(ctx context.Context) int {
	count, err := fq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (fq *FeatureQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, fq.ctx, "Exist")
	switch _, err := fq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (fq *FeatureQuery) ExistX(ctx context.Context) bool {
	exist, err := fq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the FeatureQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (fq *FeatureQuery) Clone() *FeatureQuery {
	if fq == nil {
		return nil
	}
	return &FeatureQuery{
		config:            fq.config,
		ctx:               fq.ctx.Clone(),
		order:             append([]feature.OrderOption{}, fq.order...),
		inters:            append([]Interceptor{}, fq.inters...),
		predicates:        append([]predicate.Feature{}, fq.predicates...),
		withUsers:         fq.withUsers.Clone(),
		withGroups:        fq.withGroups.Clone(),
		withEntitlements:  fq.withEntitlements.Clone(),
		withOrganizations: fq.withOrganizations.Clone(),
		withEvents:        fq.withEvents.Clone(),
		// clone intermediate query.
		sql:  fq.sql.Clone(),
		path: fq.path,
	}
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithUsers(opts ...func(*UserQuery)) *FeatureQuery {
	query := (&UserClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withUsers = query
	return fq
}

// WithGroups tells the query-builder to eager-load the nodes that are connected to
// the "groups" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithGroups(opts ...func(*GroupQuery)) *FeatureQuery {
	query := (&GroupClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withGroups = query
	return fq
}

// WithEntitlements tells the query-builder to eager-load the nodes that are connected to
// the "entitlements" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithEntitlements(opts ...func(*EntitlementQuery)) *FeatureQuery {
	query := (&EntitlementClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withEntitlements = query
	return fq
}

// WithOrganizations tells the query-builder to eager-load the nodes that are connected to
// the "organizations" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithOrganizations(opts ...func(*OrganizationQuery)) *FeatureQuery {
	query := (&OrganizationClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withOrganizations = query
	return fq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithEvents(opts ...func(*EventQuery)) *FeatureQuery {
	query := (&EventClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	fq.withEvents = query
	return fq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Feature.Query().
//		GroupBy(feature.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (fq *FeatureQuery) GroupBy(field string, fields ...string) *FeatureGroupBy {
	fq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &FeatureGroupBy{build: fq}
	grbuild.flds = &fq.ctx.Fields
	grbuild.label = feature.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Feature.Query().
//		Select(feature.FieldCreatedAt).
//		Scan(ctx, &v)
func (fq *FeatureQuery) Select(fields ...string) *FeatureSelect {
	fq.ctx.Fields = append(fq.ctx.Fields, fields...)
	sbuild := &FeatureSelect{FeatureQuery: fq}
	sbuild.label = feature.Label
	sbuild.flds, sbuild.scan = &fq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a FeatureSelect configured with the given aggregations.
func (fq *FeatureQuery) Aggregate(fns ...AggregateFunc) *FeatureSelect {
	return fq.Select().Aggregate(fns...)
}

func (fq *FeatureQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range fq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, fq); err != nil {
				return err
			}
		}
	}
	for _, f := range fq.ctx.Fields {
		if !feature.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if fq.path != nil {
		prev, err := fq.path(ctx)
		if err != nil {
			return err
		}
		fq.sql = prev
	}
	return nil
}

func (fq *FeatureQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Feature, error) {
	var (
		nodes       = []*Feature{}
		_spec       = fq.querySpec()
		loadedTypes = [5]bool{
			fq.withUsers != nil,
			fq.withGroups != nil,
			fq.withEntitlements != nil,
			fq.withOrganizations != nil,
			fq.withEvents != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Feature).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Feature{config: fq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = fq.schemaConfig.Feature
	ctx = internal.NewSchemaConfigContext(ctx, fq.schemaConfig)
	if len(fq.modifiers) > 0 {
		_spec.Modifiers = fq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, fq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := fq.withUsers; query != nil {
		if err := fq.loadUsers(ctx, query, nodes,
			func(n *Feature) { n.Edges.Users = []*User{} },
			func(n *Feature, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	if query := fq.withGroups; query != nil {
		if err := fq.loadGroups(ctx, query, nodes,
			func(n *Feature) { n.Edges.Groups = []*Group{} },
			func(n *Feature, e *Group) { n.Edges.Groups = append(n.Edges.Groups, e) }); err != nil {
			return nil, err
		}
	}
	if query := fq.withEntitlements; query != nil {
		if err := fq.loadEntitlements(ctx, query, nodes,
			func(n *Feature) { n.Edges.Entitlements = []*Entitlement{} },
			func(n *Feature, e *Entitlement) { n.Edges.Entitlements = append(n.Edges.Entitlements, e) }); err != nil {
			return nil, err
		}
	}
	if query := fq.withOrganizations; query != nil {
		if err := fq.loadOrganizations(ctx, query, nodes,
			func(n *Feature) { n.Edges.Organizations = []*Organization{} },
			func(n *Feature, e *Organization) { n.Edges.Organizations = append(n.Edges.Organizations, e) }); err != nil {
			return nil, err
		}
	}
	if query := fq.withEvents; query != nil {
		if err := fq.loadEvents(ctx, query, nodes,
			func(n *Feature) { n.Edges.Events = []*Event{} },
			func(n *Feature, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fq.withNamedUsers {
		if err := fq.loadUsers(ctx, query, nodes,
			func(n *Feature) { n.appendNamedUsers(name) },
			func(n *Feature, e *User) { n.appendNamedUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fq.withNamedGroups {
		if err := fq.loadGroups(ctx, query, nodes,
			func(n *Feature) { n.appendNamedGroups(name) },
			func(n *Feature, e *Group) { n.appendNamedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fq.withNamedEntitlements {
		if err := fq.loadEntitlements(ctx, query, nodes,
			func(n *Feature) { n.appendNamedEntitlements(name) },
			func(n *Feature, e *Entitlement) { n.appendNamedEntitlements(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fq.withNamedOrganizations {
		if err := fq.loadOrganizations(ctx, query, nodes,
			func(n *Feature) { n.appendNamedOrganizations(name) },
			func(n *Feature, e *Organization) { n.appendNamedOrganizations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range fq.withNamedEvents {
		if err := fq.loadEvents(ctx, query, nodes,
			func(n *Feature) { n.appendNamedEvents(name) },
			func(n *Feature, e *Event) { n.appendNamedEvents(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range fq.loadTotal {
		if err := fq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (fq *FeatureQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*Feature, init func(*Feature), assign func(*Feature, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Feature)
	nids := make(map[string]map[*Feature]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(feature.UsersTable)
		joinT.Schema(fq.schemaConfig.UserFeatures)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(feature.UsersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(feature.UsersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(feature.UsersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Feature]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (fq *FeatureQuery) loadGroups(ctx context.Context, query *GroupQuery, nodes []*Feature, init func(*Feature), assign func(*Feature, *Group)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Feature)
	nids := make(map[string]map[*Feature]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(feature.GroupsTable)
		joinT.Schema(fq.schemaConfig.GroupFeatures)
		s.Join(joinT).On(s.C(group.FieldID), joinT.C(feature.GroupsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(feature.GroupsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(feature.GroupsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Feature]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Group](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "groups" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (fq *FeatureQuery) loadEntitlements(ctx context.Context, query *EntitlementQuery, nodes []*Feature, init func(*Feature), assign func(*Feature, *Entitlement)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Feature)
	nids := make(map[string]map[*Feature]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(feature.EntitlementsTable)
		joinT.Schema(fq.schemaConfig.EntitlementFeatures)
		s.Join(joinT).On(s.C(entitlement.FieldID), joinT.C(feature.EntitlementsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(feature.EntitlementsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(feature.EntitlementsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Feature]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Entitlement](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "entitlements" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (fq *FeatureQuery) loadOrganizations(ctx context.Context, query *OrganizationQuery, nodes []*Feature, init func(*Feature), assign func(*Feature, *Organization)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Feature)
	nids := make(map[string]map[*Feature]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(feature.OrganizationsTable)
		joinT.Schema(fq.schemaConfig.OrganizationFeatures)
		s.Join(joinT).On(s.C(organization.FieldID), joinT.C(feature.OrganizationsPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(feature.OrganizationsPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(feature.OrganizationsPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Feature]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Organization](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "organizations" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (fq *FeatureQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*Feature, init func(*Feature), assign func(*Feature, *Event)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Feature)
	nids := make(map[string]map[*Feature]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(feature.EventsTable)
		joinT.Schema(fq.schemaConfig.FeatureEvents)
		s.Join(joinT).On(s.C(event.FieldID), joinT.C(feature.EventsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(feature.EventsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(feature.EventsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Feature]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Event](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "events" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}

func (fq *FeatureQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := fq.querySpec()
	_spec.Node.Schema = fq.schemaConfig.Feature
	ctx = internal.NewSchemaConfigContext(ctx, fq.schemaConfig)
	if len(fq.modifiers) > 0 {
		_spec.Modifiers = fq.modifiers
	}
	_spec.Node.Columns = fq.ctx.Fields
	if len(fq.ctx.Fields) > 0 {
		_spec.Unique = fq.ctx.Unique != nil && *fq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, fq.driver, _spec)
}

func (fq *FeatureQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(feature.Table, feature.Columns, sqlgraph.NewFieldSpec(feature.FieldID, field.TypeString))
	_spec.From = fq.sql
	if unique := fq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if fq.path != nil {
		_spec.Unique = true
	}
	if fields := fq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, feature.FieldID)
		for i := range fields {
			if fields[i] != feature.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := fq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := fq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := fq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := fq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (fq *FeatureQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(fq.driver.Dialect())
	t1 := builder.Table(feature.Table)
	columns := fq.ctx.Fields
	if len(columns) == 0 {
		columns = feature.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if fq.sql != nil {
		selector = fq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if fq.ctx.Unique != nil && *fq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(fq.schemaConfig.Feature)
	ctx = internal.NewSchemaConfigContext(ctx, fq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range fq.predicates {
		p(selector)
	}
	for _, p := range fq.order {
		p(selector)
	}
	if offset := fq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := fq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedUsers tells the query-builder to eager-load the nodes that are connected to the "users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithNamedUsers(name string, opts ...func(*UserQuery)) *FeatureQuery {
	query := (&UserClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if fq.withNamedUsers == nil {
		fq.withNamedUsers = make(map[string]*UserQuery)
	}
	fq.withNamedUsers[name] = query
	return fq
}

// WithNamedGroups tells the query-builder to eager-load the nodes that are connected to the "groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithNamedGroups(name string, opts ...func(*GroupQuery)) *FeatureQuery {
	query := (&GroupClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if fq.withNamedGroups == nil {
		fq.withNamedGroups = make(map[string]*GroupQuery)
	}
	fq.withNamedGroups[name] = query
	return fq
}

// WithNamedEntitlements tells the query-builder to eager-load the nodes that are connected to the "entitlements"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithNamedEntitlements(name string, opts ...func(*EntitlementQuery)) *FeatureQuery {
	query := (&EntitlementClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if fq.withNamedEntitlements == nil {
		fq.withNamedEntitlements = make(map[string]*EntitlementQuery)
	}
	fq.withNamedEntitlements[name] = query
	return fq
}

// WithNamedOrganizations tells the query-builder to eager-load the nodes that are connected to the "organizations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithNamedOrganizations(name string, opts ...func(*OrganizationQuery)) *FeatureQuery {
	query := (&OrganizationClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if fq.withNamedOrganizations == nil {
		fq.withNamedOrganizations = make(map[string]*OrganizationQuery)
	}
	fq.withNamedOrganizations[name] = query
	return fq
}

// WithNamedEvents tells the query-builder to eager-load the nodes that are connected to the "events"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (fq *FeatureQuery) WithNamedEvents(name string, opts ...func(*EventQuery)) *FeatureQuery {
	query := (&EventClient{config: fq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if fq.withNamedEvents == nil {
		fq.withNamedEvents = make(map[string]*EventQuery)
	}
	fq.withNamedEvents[name] = query
	return fq
}

// FeatureGroupBy is the group-by builder for Feature entities.
type FeatureGroupBy struct {
	selector
	build *FeatureQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (fgb *FeatureGroupBy) Aggregate(fns ...AggregateFunc) *FeatureGroupBy {
	fgb.fns = append(fgb.fns, fns...)
	return fgb
}

// Scan applies the selector query and scans the result into the given value.
func (fgb *FeatureGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fgb.build.ctx, "GroupBy")
	if err := fgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeatureQuery, *FeatureGroupBy](ctx, fgb.build, fgb, fgb.build.inters, v)
}

func (fgb *FeatureGroupBy) sqlScan(ctx context.Context, root *FeatureQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(fgb.fns))
	for _, fn := range fgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*fgb.flds)+len(fgb.fns))
		for _, f := range *fgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*fgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// FeatureSelect is the builder for selecting fields of Feature entities.
type FeatureSelect struct {
	*FeatureQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (fs *FeatureSelect) Aggregate(fns ...AggregateFunc) *FeatureSelect {
	fs.fns = append(fs.fns, fns...)
	return fs
}

// Scan applies the selector query and scans the result into the given value.
func (fs *FeatureSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, fs.ctx, "Select")
	if err := fs.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*FeatureQuery, *FeatureSelect](ctx, fs.FeatureQuery, fs, fs.inters, v)
}

func (fs *FeatureSelect) sqlScan(ctx context.Context, root *FeatureQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(fs.fns))
	for _, fn := range fs.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*fs.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := fs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
