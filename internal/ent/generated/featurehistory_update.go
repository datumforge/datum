// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/featurehistory"
	"github.com/datumforge/datum/internal/ent/generated/predicate"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// FeatureHistoryUpdate is the builder for updating FeatureHistory entities.
type FeatureHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *FeatureHistoryMutation
}

// Where appends a list predicates to the FeatureHistoryUpdate builder.
func (fhu *FeatureHistoryUpdate) Where(ps ...predicate.FeatureHistory) *FeatureHistoryUpdate {
	fhu.mutation.Where(ps...)
	return fhu
}

// SetUpdatedAt sets the "updated_at" field.
func (fhu *FeatureHistoryUpdate) SetUpdatedAt(t time.Time) *FeatureHistoryUpdate {
	fhu.mutation.SetUpdatedAt(t)
	return fhu
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fhu *FeatureHistoryUpdate) SetNillableUpdatedAt(t *time.Time) *FeatureHistoryUpdate {
	if t != nil {
		fhu.SetUpdatedAt(*t)
	}
	return fhu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fhu *FeatureHistoryUpdate) ClearUpdatedAt() *FeatureHistoryUpdate {
	fhu.mutation.ClearUpdatedAt()
	return fhu
}

// SetUpdatedBy sets the "updated_by" field.
func (fhu *FeatureHistoryUpdate) SetUpdatedBy(s string) *FeatureHistoryUpdate {
	fhu.mutation.SetUpdatedBy(s)
	return fhu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fhu *FeatureHistoryUpdate) SetNillableUpdatedBy(s *string) *FeatureHistoryUpdate {
	if s != nil {
		fhu.SetUpdatedBy(*s)
	}
	return fhu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fhu *FeatureHistoryUpdate) ClearUpdatedBy() *FeatureHistoryUpdate {
	fhu.mutation.ClearUpdatedBy()
	return fhu
}

// SetDeletedAt sets the "deleted_at" field.
func (fhu *FeatureHistoryUpdate) SetDeletedAt(t time.Time) *FeatureHistoryUpdate {
	fhu.mutation.SetDeletedAt(t)
	return fhu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fhu *FeatureHistoryUpdate) SetNillableDeletedAt(t *time.Time) *FeatureHistoryUpdate {
	if t != nil {
		fhu.SetDeletedAt(*t)
	}
	return fhu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fhu *FeatureHistoryUpdate) ClearDeletedAt() *FeatureHistoryUpdate {
	fhu.mutation.ClearDeletedAt()
	return fhu
}

// SetDeletedBy sets the "deleted_by" field.
func (fhu *FeatureHistoryUpdate) SetDeletedBy(s string) *FeatureHistoryUpdate {
	fhu.mutation.SetDeletedBy(s)
	return fhu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fhu *FeatureHistoryUpdate) SetNillableDeletedBy(s *string) *FeatureHistoryUpdate {
	if s != nil {
		fhu.SetDeletedBy(*s)
	}
	return fhu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (fhu *FeatureHistoryUpdate) ClearDeletedBy() *FeatureHistoryUpdate {
	fhu.mutation.ClearDeletedBy()
	return fhu
}

// SetGlobal sets the "global" field.
func (fhu *FeatureHistoryUpdate) SetGlobal(b bool) *FeatureHistoryUpdate {
	fhu.mutation.SetGlobal(b)
	return fhu
}

// SetNillableGlobal sets the "global" field if the given value is not nil.
func (fhu *FeatureHistoryUpdate) SetNillableGlobal(b *bool) *FeatureHistoryUpdate {
	if b != nil {
		fhu.SetGlobal(*b)
	}
	return fhu
}

// SetEnabled sets the "enabled" field.
func (fhu *FeatureHistoryUpdate) SetEnabled(b bool) *FeatureHistoryUpdate {
	fhu.mutation.SetEnabled(b)
	return fhu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (fhu *FeatureHistoryUpdate) SetNillableEnabled(b *bool) *FeatureHistoryUpdate {
	if b != nil {
		fhu.SetEnabled(*b)
	}
	return fhu
}

// SetDescription sets the "description" field.
func (fhu *FeatureHistoryUpdate) SetDescription(s string) *FeatureHistoryUpdate {
	fhu.mutation.SetDescription(s)
	return fhu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fhu *FeatureHistoryUpdate) SetNillableDescription(s *string) *FeatureHistoryUpdate {
	if s != nil {
		fhu.SetDescription(*s)
	}
	return fhu
}

// ClearDescription clears the value of the "description" field.
func (fhu *FeatureHistoryUpdate) ClearDescription() *FeatureHistoryUpdate {
	fhu.mutation.ClearDescription()
	return fhu
}

// Mutation returns the FeatureHistoryMutation object of the builder.
func (fhu *FeatureHistoryUpdate) Mutation() *FeatureHistoryMutation {
	return fhu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (fhu *FeatureHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, fhu.sqlSave, fhu.mutation, fhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fhu *FeatureHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := fhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (fhu *FeatureHistoryUpdate) Exec(ctx context.Context) error {
	_, err := fhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fhu *FeatureHistoryUpdate) ExecX(ctx context.Context) {
	if err := fhu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fhu *FeatureHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(featurehistory.Table, featurehistory.Columns, sqlgraph.NewFieldSpec(featurehistory.FieldID, field.TypeString))
	if ps := fhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fhu.mutation.RefCleared() {
		_spec.ClearField(featurehistory.FieldRef, field.TypeString)
	}
	if fhu.mutation.CreatedAtCleared() {
		_spec.ClearField(featurehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fhu.mutation.UpdatedAt(); ok {
		_spec.SetField(featurehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if fhu.mutation.UpdatedAtCleared() {
		_spec.ClearField(featurehistory.FieldUpdatedAt, field.TypeTime)
	}
	if fhu.mutation.CreatedByCleared() {
		_spec.ClearField(featurehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fhu.mutation.UpdatedBy(); ok {
		_spec.SetField(featurehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if fhu.mutation.UpdatedByCleared() {
		_spec.ClearField(featurehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := fhu.mutation.DeletedAt(); ok {
		_spec.SetField(featurehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if fhu.mutation.DeletedAtCleared() {
		_spec.ClearField(featurehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fhu.mutation.DeletedBy(); ok {
		_spec.SetField(featurehistory.FieldDeletedBy, field.TypeString, value)
	}
	if fhu.mutation.DeletedByCleared() {
		_spec.ClearField(featurehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := fhu.mutation.Global(); ok {
		_spec.SetField(featurehistory.FieldGlobal, field.TypeBool, value)
	}
	if value, ok := fhu.mutation.Enabled(); ok {
		_spec.SetField(featurehistory.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := fhu.mutation.Description(); ok {
		_spec.SetField(featurehistory.FieldDescription, field.TypeString, value)
	}
	if fhu.mutation.DescriptionCleared() {
		_spec.ClearField(featurehistory.FieldDescription, field.TypeString)
	}
	_spec.Node.Schema = fhu.schemaConfig.FeatureHistory
	ctx = internal.NewSchemaConfigContext(ctx, fhu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, fhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featurehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	fhu.mutation.done = true
	return n, nil
}

// FeatureHistoryUpdateOne is the builder for updating a single FeatureHistory entity.
type FeatureHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *FeatureHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (fhuo *FeatureHistoryUpdateOne) SetUpdatedAt(t time.Time) *FeatureHistoryUpdateOne {
	fhuo.mutation.SetUpdatedAt(t)
	return fhuo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fhuo *FeatureHistoryUpdateOne) SetNillableUpdatedAt(t *time.Time) *FeatureHistoryUpdateOne {
	if t != nil {
		fhuo.SetUpdatedAt(*t)
	}
	return fhuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (fhuo *FeatureHistoryUpdateOne) ClearUpdatedAt() *FeatureHistoryUpdateOne {
	fhuo.mutation.ClearUpdatedAt()
	return fhuo
}

// SetUpdatedBy sets the "updated_by" field.
func (fhuo *FeatureHistoryUpdateOne) SetUpdatedBy(s string) *FeatureHistoryUpdateOne {
	fhuo.mutation.SetUpdatedBy(s)
	return fhuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fhuo *FeatureHistoryUpdateOne) SetNillableUpdatedBy(s *string) *FeatureHistoryUpdateOne {
	if s != nil {
		fhuo.SetUpdatedBy(*s)
	}
	return fhuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (fhuo *FeatureHistoryUpdateOne) ClearUpdatedBy() *FeatureHistoryUpdateOne {
	fhuo.mutation.ClearUpdatedBy()
	return fhuo
}

// SetDeletedAt sets the "deleted_at" field.
func (fhuo *FeatureHistoryUpdateOne) SetDeletedAt(t time.Time) *FeatureHistoryUpdateOne {
	fhuo.mutation.SetDeletedAt(t)
	return fhuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fhuo *FeatureHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *FeatureHistoryUpdateOne {
	if t != nil {
		fhuo.SetDeletedAt(*t)
	}
	return fhuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (fhuo *FeatureHistoryUpdateOne) ClearDeletedAt() *FeatureHistoryUpdateOne {
	fhuo.mutation.ClearDeletedAt()
	return fhuo
}

// SetDeletedBy sets the "deleted_by" field.
func (fhuo *FeatureHistoryUpdateOne) SetDeletedBy(s string) *FeatureHistoryUpdateOne {
	fhuo.mutation.SetDeletedBy(s)
	return fhuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fhuo *FeatureHistoryUpdateOne) SetNillableDeletedBy(s *string) *FeatureHistoryUpdateOne {
	if s != nil {
		fhuo.SetDeletedBy(*s)
	}
	return fhuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (fhuo *FeatureHistoryUpdateOne) ClearDeletedBy() *FeatureHistoryUpdateOne {
	fhuo.mutation.ClearDeletedBy()
	return fhuo
}

// SetGlobal sets the "global" field.
func (fhuo *FeatureHistoryUpdateOne) SetGlobal(b bool) *FeatureHistoryUpdateOne {
	fhuo.mutation.SetGlobal(b)
	return fhuo
}

// SetNillableGlobal sets the "global" field if the given value is not nil.
func (fhuo *FeatureHistoryUpdateOne) SetNillableGlobal(b *bool) *FeatureHistoryUpdateOne {
	if b != nil {
		fhuo.SetGlobal(*b)
	}
	return fhuo
}

// SetEnabled sets the "enabled" field.
func (fhuo *FeatureHistoryUpdateOne) SetEnabled(b bool) *FeatureHistoryUpdateOne {
	fhuo.mutation.SetEnabled(b)
	return fhuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (fhuo *FeatureHistoryUpdateOne) SetNillableEnabled(b *bool) *FeatureHistoryUpdateOne {
	if b != nil {
		fhuo.SetEnabled(*b)
	}
	return fhuo
}

// SetDescription sets the "description" field.
func (fhuo *FeatureHistoryUpdateOne) SetDescription(s string) *FeatureHistoryUpdateOne {
	fhuo.mutation.SetDescription(s)
	return fhuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (fhuo *FeatureHistoryUpdateOne) SetNillableDescription(s *string) *FeatureHistoryUpdateOne {
	if s != nil {
		fhuo.SetDescription(*s)
	}
	return fhuo
}

// ClearDescription clears the value of the "description" field.
func (fhuo *FeatureHistoryUpdateOne) ClearDescription() *FeatureHistoryUpdateOne {
	fhuo.mutation.ClearDescription()
	return fhuo
}

// Mutation returns the FeatureHistoryMutation object of the builder.
func (fhuo *FeatureHistoryUpdateOne) Mutation() *FeatureHistoryMutation {
	return fhuo.mutation
}

// Where appends a list predicates to the FeatureHistoryUpdate builder.
func (fhuo *FeatureHistoryUpdateOne) Where(ps ...predicate.FeatureHistory) *FeatureHistoryUpdateOne {
	fhuo.mutation.Where(ps...)
	return fhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (fhuo *FeatureHistoryUpdateOne) Select(field string, fields ...string) *FeatureHistoryUpdateOne {
	fhuo.fields = append([]string{field}, fields...)
	return fhuo
}

// Save executes the query and returns the updated FeatureHistory entity.
func (fhuo *FeatureHistoryUpdateOne) Save(ctx context.Context) (*FeatureHistory, error) {
	return withHooks(ctx, fhuo.sqlSave, fhuo.mutation, fhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (fhuo *FeatureHistoryUpdateOne) SaveX(ctx context.Context) *FeatureHistory {
	node, err := fhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (fhuo *FeatureHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := fhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fhuo *FeatureHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := fhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (fhuo *FeatureHistoryUpdateOne) sqlSave(ctx context.Context) (_node *FeatureHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(featurehistory.Table, featurehistory.Columns, sqlgraph.NewFieldSpec(featurehistory.FieldID, field.TypeString))
	id, ok := fhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "FeatureHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := fhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, featurehistory.FieldID)
		for _, f := range fields {
			if !featurehistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != featurehistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := fhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if fhuo.mutation.RefCleared() {
		_spec.ClearField(featurehistory.FieldRef, field.TypeString)
	}
	if fhuo.mutation.CreatedAtCleared() {
		_spec.ClearField(featurehistory.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := fhuo.mutation.UpdatedAt(); ok {
		_spec.SetField(featurehistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if fhuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(featurehistory.FieldUpdatedAt, field.TypeTime)
	}
	if fhuo.mutation.CreatedByCleared() {
		_spec.ClearField(featurehistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := fhuo.mutation.UpdatedBy(); ok {
		_spec.SetField(featurehistory.FieldUpdatedBy, field.TypeString, value)
	}
	if fhuo.mutation.UpdatedByCleared() {
		_spec.ClearField(featurehistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := fhuo.mutation.DeletedAt(); ok {
		_spec.SetField(featurehistory.FieldDeletedAt, field.TypeTime, value)
	}
	if fhuo.mutation.DeletedAtCleared() {
		_spec.ClearField(featurehistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := fhuo.mutation.DeletedBy(); ok {
		_spec.SetField(featurehistory.FieldDeletedBy, field.TypeString, value)
	}
	if fhuo.mutation.DeletedByCleared() {
		_spec.ClearField(featurehistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := fhuo.mutation.Global(); ok {
		_spec.SetField(featurehistory.FieldGlobal, field.TypeBool, value)
	}
	if value, ok := fhuo.mutation.Enabled(); ok {
		_spec.SetField(featurehistory.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := fhuo.mutation.Description(); ok {
		_spec.SetField(featurehistory.FieldDescription, field.TypeString, value)
	}
	if fhuo.mutation.DescriptionCleared() {
		_spec.ClearField(featurehistory.FieldDescription, field.TypeString)
	}
	_spec.Node.Schema = fhuo.schemaConfig.FeatureHistory
	ctx = internal.NewSchemaConfigContext(ctx, fhuo.schemaConfig)
	_node = &FeatureHistory{config: fhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, fhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{featurehistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	fhuo.mutation.done = true
	return _node, nil
}
