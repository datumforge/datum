// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/filehistory"
	"github.com/datumforge/enthistory"
)

// FileHistoryCreate is the builder for creating a FileHistory entity.
type FileHistoryCreate struct {
	config
	mutation *FileHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (fhc *FileHistoryCreate) SetHistoryTime(t time.Time) *FileHistoryCreate {
	fhc.mutation.SetHistoryTime(t)
	return fhc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableHistoryTime(t *time.Time) *FileHistoryCreate {
	if t != nil {
		fhc.SetHistoryTime(*t)
	}
	return fhc
}

// SetOperation sets the "operation" field.
func (fhc *FileHistoryCreate) SetOperation(et enthistory.OpType) *FileHistoryCreate {
	fhc.mutation.SetOperation(et)
	return fhc
}

// SetRef sets the "ref" field.
func (fhc *FileHistoryCreate) SetRef(s string) *FileHistoryCreate {
	fhc.mutation.SetRef(s)
	return fhc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableRef(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetRef(*s)
	}
	return fhc
}

// SetCreatedAt sets the "created_at" field.
func (fhc *FileHistoryCreate) SetCreatedAt(t time.Time) *FileHistoryCreate {
	fhc.mutation.SetCreatedAt(t)
	return fhc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableCreatedAt(t *time.Time) *FileHistoryCreate {
	if t != nil {
		fhc.SetCreatedAt(*t)
	}
	return fhc
}

// SetUpdatedAt sets the "updated_at" field.
func (fhc *FileHistoryCreate) SetUpdatedAt(t time.Time) *FileHistoryCreate {
	fhc.mutation.SetUpdatedAt(t)
	return fhc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableUpdatedAt(t *time.Time) *FileHistoryCreate {
	if t != nil {
		fhc.SetUpdatedAt(*t)
	}
	return fhc
}

// SetCreatedBy sets the "created_by" field.
func (fhc *FileHistoryCreate) SetCreatedBy(s string) *FileHistoryCreate {
	fhc.mutation.SetCreatedBy(s)
	return fhc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableCreatedBy(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetCreatedBy(*s)
	}
	return fhc
}

// SetUpdatedBy sets the "updated_by" field.
func (fhc *FileHistoryCreate) SetUpdatedBy(s string) *FileHistoryCreate {
	fhc.mutation.SetUpdatedBy(s)
	return fhc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableUpdatedBy(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetUpdatedBy(*s)
	}
	return fhc
}

// SetDeletedAt sets the "deleted_at" field.
func (fhc *FileHistoryCreate) SetDeletedAt(t time.Time) *FileHistoryCreate {
	fhc.mutation.SetDeletedAt(t)
	return fhc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableDeletedAt(t *time.Time) *FileHistoryCreate {
	if t != nil {
		fhc.SetDeletedAt(*t)
	}
	return fhc
}

// SetDeletedBy sets the "deleted_by" field.
func (fhc *FileHistoryCreate) SetDeletedBy(s string) *FileHistoryCreate {
	fhc.mutation.SetDeletedBy(s)
	return fhc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableDeletedBy(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetDeletedBy(*s)
	}
	return fhc
}

// SetFileName sets the "file_name" field.
func (fhc *FileHistoryCreate) SetFileName(s string) *FileHistoryCreate {
	fhc.mutation.SetFileName(s)
	return fhc
}

// SetFileExtension sets the "file_extension" field.
func (fhc *FileHistoryCreate) SetFileExtension(s string) *FileHistoryCreate {
	fhc.mutation.SetFileExtension(s)
	return fhc
}

// SetFileSize sets the "file_size" field.
func (fhc *FileHistoryCreate) SetFileSize(i int) *FileHistoryCreate {
	fhc.mutation.SetFileSize(i)
	return fhc
}

// SetNillableFileSize sets the "file_size" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableFileSize(i *int) *FileHistoryCreate {
	if i != nil {
		fhc.SetFileSize(*i)
	}
	return fhc
}

// SetContentType sets the "content_type" field.
func (fhc *FileHistoryCreate) SetContentType(s string) *FileHistoryCreate {
	fhc.mutation.SetContentType(s)
	return fhc
}

// SetStoreKey sets the "store_key" field.
func (fhc *FileHistoryCreate) SetStoreKey(s string) *FileHistoryCreate {
	fhc.mutation.SetStoreKey(s)
	return fhc
}

// SetCategory sets the "category" field.
func (fhc *FileHistoryCreate) SetCategory(s string) *FileHistoryCreate {
	fhc.mutation.SetCategory(s)
	return fhc
}

// SetNillableCategory sets the "category" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableCategory(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetCategory(*s)
	}
	return fhc
}

// SetAnnotation sets the "annotation" field.
func (fhc *FileHistoryCreate) SetAnnotation(s string) *FileHistoryCreate {
	fhc.mutation.SetAnnotation(s)
	return fhc
}

// SetNillableAnnotation sets the "annotation" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableAnnotation(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetAnnotation(*s)
	}
	return fhc
}

// SetID sets the "id" field.
func (fhc *FileHistoryCreate) SetID(s string) *FileHistoryCreate {
	fhc.mutation.SetID(s)
	return fhc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (fhc *FileHistoryCreate) SetNillableID(s *string) *FileHistoryCreate {
	if s != nil {
		fhc.SetID(*s)
	}
	return fhc
}

// Mutation returns the FileHistoryMutation object of the builder.
func (fhc *FileHistoryCreate) Mutation() *FileHistoryMutation {
	return fhc.mutation
}

// Save creates the FileHistory in the database.
func (fhc *FileHistoryCreate) Save(ctx context.Context) (*FileHistory, error) {
	fhc.defaults()
	return withHooks(ctx, fhc.sqlSave, fhc.mutation, fhc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (fhc *FileHistoryCreate) SaveX(ctx context.Context) *FileHistory {
	v, err := fhc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fhc *FileHistoryCreate) Exec(ctx context.Context) error {
	_, err := fhc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fhc *FileHistoryCreate) ExecX(ctx context.Context) {
	if err := fhc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (fhc *FileHistoryCreate) defaults() {
	if _, ok := fhc.mutation.HistoryTime(); !ok {
		v := filehistory.DefaultHistoryTime()
		fhc.mutation.SetHistoryTime(v)
	}
	if _, ok := fhc.mutation.CreatedAt(); !ok {
		v := filehistory.DefaultCreatedAt()
		fhc.mutation.SetCreatedAt(v)
	}
	if _, ok := fhc.mutation.UpdatedAt(); !ok {
		v := filehistory.DefaultUpdatedAt()
		fhc.mutation.SetUpdatedAt(v)
	}
	if _, ok := fhc.mutation.ID(); !ok {
		v := filehistory.DefaultID()
		fhc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (fhc *FileHistoryCreate) check() error {
	if _, ok := fhc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "FileHistory.history_time"`)}
	}
	if _, ok := fhc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "FileHistory.operation"`)}
	}
	if v, ok := fhc.mutation.Operation(); ok {
		if err := filehistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "FileHistory.operation": %w`, err)}
		}
	}
	if _, ok := fhc.mutation.FileName(); !ok {
		return &ValidationError{Name: "file_name", err: errors.New(`generated: missing required field "FileHistory.file_name"`)}
	}
	if _, ok := fhc.mutation.FileExtension(); !ok {
		return &ValidationError{Name: "file_extension", err: errors.New(`generated: missing required field "FileHistory.file_extension"`)}
	}
	if _, ok := fhc.mutation.ContentType(); !ok {
		return &ValidationError{Name: "content_type", err: errors.New(`generated: missing required field "FileHistory.content_type"`)}
	}
	if _, ok := fhc.mutation.StoreKey(); !ok {
		return &ValidationError{Name: "store_key", err: errors.New(`generated: missing required field "FileHistory.store_key"`)}
	}
	return nil
}

func (fhc *FileHistoryCreate) sqlSave(ctx context.Context) (*FileHistory, error) {
	if err := fhc.check(); err != nil {
		return nil, err
	}
	_node, _spec := fhc.createSpec()
	if err := sqlgraph.CreateNode(ctx, fhc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected FileHistory.ID type: %T", _spec.ID.Value)
		}
	}
	fhc.mutation.id = &_node.ID
	fhc.mutation.done = true
	return _node, nil
}

func (fhc *FileHistoryCreate) createSpec() (*FileHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &FileHistory{config: fhc.config}
		_spec = sqlgraph.NewCreateSpec(filehistory.Table, sqlgraph.NewFieldSpec(filehistory.FieldID, field.TypeString))
	)
	_spec.Schema = fhc.schemaConfig.FileHistory
	if id, ok := fhc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := fhc.mutation.HistoryTime(); ok {
		_spec.SetField(filehistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := fhc.mutation.Operation(); ok {
		_spec.SetField(filehistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := fhc.mutation.Ref(); ok {
		_spec.SetField(filehistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := fhc.mutation.CreatedAt(); ok {
		_spec.SetField(filehistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := fhc.mutation.UpdatedAt(); ok {
		_spec.SetField(filehistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := fhc.mutation.CreatedBy(); ok {
		_spec.SetField(filehistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := fhc.mutation.UpdatedBy(); ok {
		_spec.SetField(filehistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := fhc.mutation.DeletedAt(); ok {
		_spec.SetField(filehistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := fhc.mutation.DeletedBy(); ok {
		_spec.SetField(filehistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := fhc.mutation.FileName(); ok {
		_spec.SetField(filehistory.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := fhc.mutation.FileExtension(); ok {
		_spec.SetField(filehistory.FieldFileExtension, field.TypeString, value)
		_node.FileExtension = value
	}
	if value, ok := fhc.mutation.FileSize(); ok {
		_spec.SetField(filehistory.FieldFileSize, field.TypeInt, value)
		_node.FileSize = value
	}
	if value, ok := fhc.mutation.ContentType(); ok {
		_spec.SetField(filehistory.FieldContentType, field.TypeString, value)
		_node.ContentType = value
	}
	if value, ok := fhc.mutation.StoreKey(); ok {
		_spec.SetField(filehistory.FieldStoreKey, field.TypeString, value)
		_node.StoreKey = value
	}
	if value, ok := fhc.mutation.Category(); ok {
		_spec.SetField(filehistory.FieldCategory, field.TypeString, value)
		_node.Category = value
	}
	if value, ok := fhc.mutation.Annotation(); ok {
		_spec.SetField(filehistory.FieldAnnotation, field.TypeString, value)
		_node.Annotation = value
	}
	return _node, _spec
}

// FileHistoryCreateBulk is the builder for creating many FileHistory entities in bulk.
type FileHistoryCreateBulk struct {
	config
	err      error
	builders []*FileHistoryCreate
}

// Save creates the FileHistory entities in the database.
func (fhcb *FileHistoryCreateBulk) Save(ctx context.Context) ([]*FileHistory, error) {
	if fhcb.err != nil {
		return nil, fhcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(fhcb.builders))
	nodes := make([]*FileHistory, len(fhcb.builders))
	mutators := make([]Mutator, len(fhcb.builders))
	for i := range fhcb.builders {
		func(i int, root context.Context) {
			builder := fhcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*FileHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, fhcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, fhcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, fhcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (fhcb *FileHistoryCreateBulk) SaveX(ctx context.Context) []*FileHistory {
	v, err := fhcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (fhcb *FileHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := fhcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (fhcb *FileHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := fhcb.Exec(ctx); err != nil {
		panic(err)
	}
}
