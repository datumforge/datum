// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (gr *Group) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := gr.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = gr.QueryTenant().Only(ctx)
	}
	return result, err
}

func (gr *Group) Setting(ctx context.Context) (*GroupSettings, error) {
	result, err := gr.Edges.SettingOrErr()
	if IsNotLoaded(err) {
		result, err = gr.QuerySetting().Only(ctx)
	}
	return result, err
}

func (gr *Group) Memberships(ctx context.Context) (result []*Membership, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedMemberships(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.MembershipsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryMemberships().All(ctx)
	}
	return result, err
}

func (gr *Group) Users(ctx context.Context) (result []*User, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = gr.NamedUsers(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = gr.Edges.UsersOrErr()
	}
	if IsNotLoaded(err) {
		result, err = gr.QueryUsers().All(ctx)
	}
	return result, err
}

func (i *Integration) Organization(ctx context.Context) (*Organization, error) {
	result, err := i.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (m *Membership) Organization(ctx context.Context) (*Organization, error) {
	result, err := m.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (m *Membership) User(ctx context.Context) (*User, error) {
	result, err := m.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryUser().Only(ctx)
	}
	return result, err
}

func (m *Membership) Group(ctx context.Context) (*Group, error) {
	result, err := m.Edges.GroupOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryGroup().Only(ctx)
	}
	return result, err
}

func (o *Organization) Memberships(ctx context.Context) (result []*Membership, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedMemberships(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.MembershipsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryMemberships().All(ctx)
	}
	return result, err
}

func (o *Organization) Integrations(ctx context.Context) (result []*Integration, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedIntegrations(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.IntegrationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryIntegrations().All(ctx)
	}
	return result, err
}

func (s *Session) Users(ctx context.Context) (*User, error) {
	result, err := s.Edges.UsersOrErr()
	if IsNotLoaded(err) {
		result, err = s.QueryUsers().Only(ctx)
	}
	return result, MaskNotFound(err)
}

func (u *User) Tenant(ctx context.Context) (*Tenant, error) {
	result, err := u.Edges.TenantOrErr()
	if IsNotLoaded(err) {
		result, err = u.QueryTenant().Only(ctx)
	}
	return result, err
}

func (u *User) Memberships(ctx context.Context) (result []*Membership, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedMemberships(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.MembershipsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryMemberships().All(ctx)
	}
	return result, err
}

func (u *User) Sessions(ctx context.Context) (result []*Session, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedSessions(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.SessionsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QuerySessions().All(ctx)
	}
	return result, err
}

func (u *User) Groups(ctx context.Context) (result []*Group, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedGroups(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.GroupsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryGroups().All(ctx)
	}
	return result, err
}
