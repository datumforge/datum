// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
)

func (i *Integration) Organization(ctx context.Context) (*Organization, error) {
	result, err := i.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = i.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (m *Membership) Organization(ctx context.Context) (*Organization, error) {
	result, err := m.Edges.OrganizationOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryOrganization().Only(ctx)
	}
	return result, err
}

func (m *Membership) User(ctx context.Context) (*User, error) {
	result, err := m.Edges.UserOrErr()
	if IsNotLoaded(err) {
		result, err = m.QueryUser().Only(ctx)
	}
	return result, err
}

func (o *Organization) Memberships(ctx context.Context) (result []*Membership, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedMemberships(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.MembershipsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryMemberships().All(ctx)
	}
	return result, err
}

func (o *Organization) Integrations(ctx context.Context) (result []*Integration, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = o.NamedIntegrations(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = o.Edges.IntegrationsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = o.QueryIntegrations().All(ctx)
	}
	return result, err
}

func (u *User) Memberships(ctx context.Context) (result []*Membership, err error) {
	if fc := graphql.GetFieldContext(ctx); fc != nil && fc.Field.Alias != "" {
		result, err = u.NamedMemberships(graphql.GetFieldContext(ctx).Field.Alias)
	} else {
		result, err = u.Edges.MembershipsOrErr()
	}
	if IsNotLoaded(err) {
		result, err = u.QueryMemberships().All(ctx)
	}
	return result, err
}
