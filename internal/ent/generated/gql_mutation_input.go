// Code generated by ent, DO NOT EDIT.

package generated

import (
	"time"

	"github.com/google/uuid"
)

// CreateIntegrationInput represents a mutation input for creating integrations.
type CreateIntegrationInput struct {
	Kind           string
	Description    *string
	SecretName     string
	CreatedAt      *time.Time
	DeletedAt      *time.Time
	OrganizationID uuid.UUID
}

// Mutate applies the CreateIntegrationInput on the IntegrationMutation builder.
func (i *CreateIntegrationInput) Mutate(m *IntegrationMutation) {
	m.SetKind(i.Kind)
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	m.SetSecretName(i.SecretName)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	m.SetOrganizationID(i.OrganizationID)
}

// SetInput applies the change-set in the CreateIntegrationInput on the IntegrationCreate builder.
func (c *IntegrationCreate) SetInput(i CreateIntegrationInput) *IntegrationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateIntegrationInput represents a mutation input for updating integrations.
type UpdateIntegrationInput struct {
	ClearDescription  bool
	Description       *string
	ClearDeletedAt    bool
	DeletedAt         *time.Time
	ClearOrganization bool
	OrganizationID    *uuid.UUID
}

// Mutate applies the UpdateIntegrationInput on the IntegrationMutation builder.
func (i *UpdateIntegrationInput) Mutate(m *IntegrationMutation) {
	if i.ClearDescription {
		m.ClearDescription()
	}
	if v := i.Description; v != nil {
		m.SetDescription(*v)
	}
	if i.ClearDeletedAt {
		m.ClearDeletedAt()
	}
	if v := i.DeletedAt; v != nil {
		m.SetDeletedAt(*v)
	}
	if i.ClearOrganization {
		m.ClearOrganization()
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
}

// SetInput applies the change-set in the UpdateIntegrationInput on the IntegrationUpdate builder.
func (c *IntegrationUpdate) SetInput(i UpdateIntegrationInput) *IntegrationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateIntegrationInput on the IntegrationUpdateOne builder.
func (c *IntegrationUpdateOne) SetInput(i UpdateIntegrationInput) *IntegrationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateMembershipInput represents a mutation input for creating memberships.
type CreateMembershipInput struct {
	Current        *bool
	CreatedAt      *time.Time
	UpdatedAt      *time.Time
	OrganizationID uuid.UUID
	UserID         uuid.UUID
}

// Mutate applies the CreateMembershipInput on the MembershipMutation builder.
func (i *CreateMembershipInput) Mutate(m *MembershipMutation) {
	if v := i.Current; v != nil {
		m.SetCurrent(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetOrganizationID(i.OrganizationID)
	m.SetUserID(i.UserID)
}

// SetInput applies the change-set in the CreateMembershipInput on the MembershipCreate builder.
func (c *MembershipCreate) SetInput(i CreateMembershipInput) *MembershipCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateMembershipInput represents a mutation input for updating memberships.
type UpdateMembershipInput struct {
	Current           *bool
	UpdatedAt         *time.Time
	ClearOrganization bool
	OrganizationID    *uuid.UUID
	ClearUser         bool
	UserID            *uuid.UUID
}

// Mutate applies the UpdateMembershipInput on the MembershipMutation builder.
func (i *UpdateMembershipInput) Mutate(m *MembershipMutation) {
	if v := i.Current; v != nil {
		m.SetCurrent(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if i.ClearOrganization {
		m.ClearOrganization()
	}
	if v := i.OrganizationID; v != nil {
		m.SetOrganizationID(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateMembershipInput on the MembershipUpdate builder.
func (c *MembershipUpdate) SetInput(i UpdateMembershipInput) *MembershipUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateMembershipInput on the MembershipUpdateOne builder.
func (c *MembershipUpdateOne) SetInput(i UpdateMembershipInput) *MembershipUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateOrganizationInput represents a mutation input for creating organizations.
type CreateOrganizationInput struct {
	Name           *string
	CreatedAt      *time.Time
	MembershipIDs  []uuid.UUID
	IntegrationIDs []uuid.UUID
}

// Mutate applies the CreateOrganizationInput on the OrganizationMutation builder.
func (i *CreateOrganizationInput) Mutate(m *OrganizationMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.MembershipIDs; len(v) > 0 {
		m.AddMembershipIDs(v...)
	}
	if v := i.IntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
}

// SetInput applies the change-set in the CreateOrganizationInput on the OrganizationCreate builder.
func (c *OrganizationCreate) SetInput(i CreateOrganizationInput) *OrganizationCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateOrganizationInput represents a mutation input for updating organizations.
type UpdateOrganizationInput struct {
	Name                 *string
	ClearMemberships     bool
	AddMembershipIDs     []uuid.UUID
	RemoveMembershipIDs  []uuid.UUID
	ClearIntegrations    bool
	AddIntegrationIDs    []uuid.UUID
	RemoveIntegrationIDs []uuid.UUID
}

// Mutate applies the UpdateOrganizationInput on the OrganizationMutation builder.
func (i *UpdateOrganizationInput) Mutate(m *OrganizationMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearMemberships {
		m.ClearMemberships()
	}
	if v := i.AddMembershipIDs; len(v) > 0 {
		m.AddMembershipIDs(v...)
	}
	if v := i.RemoveMembershipIDs; len(v) > 0 {
		m.RemoveMembershipIDs(v...)
	}
	if i.ClearIntegrations {
		m.ClearIntegrations()
	}
	if v := i.AddIntegrationIDs; len(v) > 0 {
		m.AddIntegrationIDs(v...)
	}
	if v := i.RemoveIntegrationIDs; len(v) > 0 {
		m.RemoveIntegrationIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateOrganizationInput on the OrganizationUpdate builder.
func (c *OrganizationUpdate) SetInput(i UpdateOrganizationInput) *OrganizationUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateOrganizationInput on the OrganizationUpdateOne builder.
func (c *OrganizationUpdateOne) SetInput(i UpdateOrganizationInput) *OrganizationUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Email         string
	CreatedAt     *time.Time
	MembershipIDs []uuid.UUID
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetEmail(i.Email)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.MembershipIDs; len(v) > 0 {
		m.AddMembershipIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Email               *string
	ClearMemberships    bool
	AddMembershipIDs    []uuid.UUID
	RemoveMembershipIDs []uuid.UUID
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Email; v != nil {
		m.SetEmail(*v)
	}
	if i.ClearMemberships {
		m.ClearMemberships()
	}
	if v := i.AddMembershipIDs; len(v) > 0 {
		m.AddMembershipIDs(v...)
	}
	if v := i.RemoveMembershipIDs; len(v) > 0 {
		m.RemoveMembershipIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
