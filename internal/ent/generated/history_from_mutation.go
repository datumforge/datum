// Code generated by enthistory, DO NOT EDIT.

// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent"
	"github.com/flume/enthistory"
)

var (
	idNotFoundError = errors.New("could not get id from mutation")
)

func EntOpToHistoryOp(op ent.Op) enthistory.OpType {
	switch op {
	case ent.OpDelete, ent.OpDeleteOne:
		return enthistory.OpTypeDelete
	case ent.OpUpdate, ent.OpUpdateOne:
		return enthistory.OpTypeUpdate
	default:
		return enthistory.OpTypeInsert
	}
}

func rollback(tx *Tx, err error) error {
	if tx != nil {
		if rerr := tx.Rollback(); rerr != nil {
			err = fmt.Errorf("%w: %v", err, rerr)
		}
		return err
	}
	return err
}

func (m *UserMutation) CreateHistoryFromCreate(ctx context.Context) error {
	client := m.Client()
	tx, err := m.Tx()
	if err != nil {
		tx = nil
	}

	id, ok := m.ID()
	if !ok {
		return rollback(tx, idNotFoundError)
	}

	create := client.UserHistory.Create()
	if tx != nil {
		create = tx.UserHistory.Create()
	}
	create = create.
		SetOperation(EntOpToHistoryOp(m.Op())).
		SetHistoryTime(time.Now()).
		SetRef(id)

	if createdAt, exists := m.CreatedAt(); exists {
		create = create.SetCreatedAt(createdAt)
	}

	if updatedAt, exists := m.UpdatedAt(); exists {
		create = create.SetUpdatedAt(updatedAt)
	}

	if createdBy, exists := m.CreatedBy(); exists {
		create = create.SetCreatedBy(createdBy)
	}

	if updatedBy, exists := m.UpdatedBy(); exists {
		create = create.SetUpdatedBy(updatedBy)
	}

	if deletedAt, exists := m.DeletedAt(); exists {
		create = create.SetDeletedAt(deletedAt)
	}

	if deletedBy, exists := m.DeletedBy(); exists {
		create = create.SetDeletedBy(deletedBy)
	}

	if email, exists := m.Email(); exists {
		create = create.SetEmail(email)
	}

	if firstName, exists := m.FirstName(); exists {
		create = create.SetFirstName(firstName)
	}

	if lastName, exists := m.LastName(); exists {
		create = create.SetLastName(lastName)
	}

	if displayName, exists := m.DisplayName(); exists {
		create = create.SetDisplayName(displayName)
	}

	if avatarRemoteURL, exists := m.AvatarRemoteURL(); exists {
		create = create.SetNillableAvatarRemoteURL(&avatarRemoteURL)
	}

	if avatarLocalFile, exists := m.AvatarLocalFile(); exists {
		create = create.SetNillableAvatarLocalFile(&avatarLocalFile)
	}

	if avatarUpdatedAt, exists := m.AvatarUpdatedAt(); exists {
		create = create.SetNillableAvatarUpdatedAt(&avatarUpdatedAt)
	}

	if lastSeen, exists := m.LastSeen(); exists {
		create = create.SetNillableLastSeen(&lastSeen)
	}

	if password, exists := m.Password(); exists {
		create = create.SetNillablePassword(&password)
	}

	if sub, exists := m.Sub(); exists {
		create = create.SetSub(sub)
	}

	if oauth, exists := m.Oauth(); exists {
		create = create.SetOauth(oauth)
	}

	_, err = create.Save(ctx)
	if err != nil {
		rollback(tx, err)
	}
	return nil
}

func (m *UserMutation) CreateHistoryFromUpdate(ctx context.Context) error {
	client := m.Client()
	tx, err := m.Tx()
	if err != nil {
		tx = nil
	}

	ids, err := m.IDs(ctx)
	if err != nil {
		return rollback(tx, fmt.Errorf("getting ids: %w", err))
	}

	for _, id := range ids {
		user, err := client.User.Get(ctx, id)
		if err != nil {
			return rollback(tx, err)
		}

		create := client.UserHistory.Create()
		if tx != nil {
			create = tx.UserHistory.Create()
		}
		create = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id)

		if createdAt, exists := m.CreatedAt(); exists {
			create = create.SetCreatedAt(createdAt)
		} else {
			create = create.SetCreatedAt(user.CreatedAt)
		}

		if updatedAt, exists := m.UpdatedAt(); exists {
			create = create.SetUpdatedAt(updatedAt)
		} else {
			create = create.SetUpdatedAt(user.UpdatedAt)
		}

		if createdBy, exists := m.CreatedBy(); exists {
			create = create.SetCreatedBy(createdBy)
		} else {
			create = create.SetCreatedBy(user.CreatedBy)
		}

		if updatedBy, exists := m.UpdatedBy(); exists {
			create = create.SetUpdatedBy(updatedBy)
		} else {
			create = create.SetUpdatedBy(user.UpdatedBy)
		}

		if deletedAt, exists := m.DeletedAt(); exists {
			create = create.SetDeletedAt(deletedAt)
		} else {
			create = create.SetDeletedAt(user.DeletedAt)
		}

		if deletedBy, exists := m.DeletedBy(); exists {
			create = create.SetDeletedBy(deletedBy)
		} else {
			create = create.SetDeletedBy(user.DeletedBy)
		}

		if email, exists := m.Email(); exists {
			create = create.SetEmail(email)
		} else {
			create = create.SetEmail(user.Email)
		}

		if firstName, exists := m.FirstName(); exists {
			create = create.SetFirstName(firstName)
		} else {
			create = create.SetFirstName(user.FirstName)
		}

		if lastName, exists := m.LastName(); exists {
			create = create.SetLastName(lastName)
		} else {
			create = create.SetLastName(user.LastName)
		}

		if displayName, exists := m.DisplayName(); exists {
			create = create.SetDisplayName(displayName)
		} else {
			create = create.SetDisplayName(user.DisplayName)
		}

		if avatarRemoteURL, exists := m.AvatarRemoteURL(); exists {
			create = create.SetNillableAvatarRemoteURL(&avatarRemoteURL)
		} else {
			create = create.SetNillableAvatarRemoteURL(user.AvatarRemoteURL)
		}

		if avatarLocalFile, exists := m.AvatarLocalFile(); exists {
			create = create.SetNillableAvatarLocalFile(&avatarLocalFile)
		} else {
			create = create.SetNillableAvatarLocalFile(user.AvatarLocalFile)
		}

		if avatarUpdatedAt, exists := m.AvatarUpdatedAt(); exists {
			create = create.SetNillableAvatarUpdatedAt(&avatarUpdatedAt)
		} else {
			create = create.SetNillableAvatarUpdatedAt(user.AvatarUpdatedAt)
		}

		if lastSeen, exists := m.LastSeen(); exists {
			create = create.SetNillableLastSeen(&lastSeen)
		} else {
			create = create.SetNillableLastSeen(user.LastSeen)
		}

		if password, exists := m.Password(); exists {
			create = create.SetNillablePassword(&password)
		} else {
			create = create.SetNillablePassword(user.Password)
		}

		if sub, exists := m.Sub(); exists {
			create = create.SetSub(sub)
		} else {
			create = create.SetSub(user.Sub)
		}

		if oauth, exists := m.Oauth(); exists {
			create = create.SetOauth(oauth)
		} else {
			create = create.SetOauth(user.Oauth)
		}

		_, err = create.Save(ctx)
		if err != nil {
			rollback(tx, err)
		}
	}

	return nil
}

func (m *UserMutation) CreateHistoryFromDelete(ctx context.Context) error {
	client := m.Client()
	tx, err := m.Tx()
	if err != nil {
		tx = nil
	}

	ids, err := m.IDs(ctx)
	if err != nil {
		return rollback(tx, fmt.Errorf("getting ids: %w", err))
	}

	for _, id := range ids {
		user, err := client.User.Get(ctx, id)
		if err != nil {
			return rollback(tx, err)
		}

		create := client.UserHistory.Create()
		if tx != nil {
			create = tx.UserHistory.Create()
		}

		_, err = create.
			SetOperation(EntOpToHistoryOp(m.Op())).
			SetHistoryTime(time.Now()).
			SetRef(id).
			SetCreatedAt(user.CreatedAt).
			SetUpdatedAt(user.UpdatedAt).
			SetCreatedBy(user.CreatedBy).
			SetUpdatedBy(user.UpdatedBy).
			SetDeletedAt(user.DeletedAt).
			SetDeletedBy(user.DeletedBy).
			SetEmail(user.Email).
			SetFirstName(user.FirstName).
			SetLastName(user.LastName).
			SetDisplayName(user.DisplayName).
			SetNillableAvatarRemoteURL(user.AvatarRemoteURL).
			SetNillableAvatarLocalFile(user.AvatarLocalFile).
			SetNillableAvatarUpdatedAt(user.AvatarUpdatedAt).
			SetNillableLastSeen(user.LastSeen).
			SetNillablePassword(user.Password).
			SetSub(user.Sub).
			SetOauth(user.Oauth).
			Save(ctx)
		if err != nil {
			rollback(tx, err)
		}
	}

	return nil
}
