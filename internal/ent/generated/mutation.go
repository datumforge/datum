// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datumforge/datum/internal/ent/enums"
	"github.com/datumforge/datum/internal/ent/generated/emailverificationtoken"
	"github.com/datumforge/datum/internal/ent/generated/entitlement"
	"github.com/datumforge/datum/internal/ent/generated/group"
	"github.com/datumforge/datum/internal/ent/generated/groupmembership"
	"github.com/datumforge/datum/internal/ent/generated/groupsetting"
	"github.com/datumforge/datum/internal/ent/generated/integration"
	"github.com/datumforge/datum/internal/ent/generated/invite"
	"github.com/datumforge/datum/internal/ent/generated/oauthprovider"
	"github.com/datumforge/datum/internal/ent/generated/ohauthtootoken"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/organizationsetting"
	"github.com/datumforge/datum/internal/ent/generated/orgmembership"
	"github.com/datumforge/datum/internal/ent/generated/passwordresettoken"
	"github.com/datumforge/datum/internal/ent/generated/personalaccesstoken"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/datumforge/datum/internal/ent/generated/user"
	"github.com/datumforge/datum/internal/ent/generated/usersetting"
	"github.com/datumforge/datum/internal/ent/generated/webauthn"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeEmailVerificationToken = "EmailVerificationToken"
	TypeEntitlement            = "Entitlement"
	TypeGroup                  = "Group"
	TypeGroupMembership        = "GroupMembership"
	TypeGroupSetting           = "GroupSetting"
	TypeIntegration            = "Integration"
	TypeInvite                 = "Invite"
	TypeOauthProvider          = "OauthProvider"
	TypeOhAuthTooToken         = "OhAuthTooToken"
	TypeOrgMembership          = "OrgMembership"
	TypeOrganization           = "Organization"
	TypeOrganizationSetting    = "OrganizationSetting"
	TypePasswordResetToken     = "PasswordResetToken"
	TypePersonalAccessToken    = "PersonalAccessToken"
	TypeUser                   = "User"
	TypeUserSetting            = "UserSetting"
	TypeWebauthn               = "Webauthn"
)

// EmailVerificationTokenMutation represents an operation that mutates the EmailVerificationToken nodes in the graph.
type EmailVerificationTokenMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created_at    *time.Time
	updated_at    *time.Time
	created_by    *string
	updated_by    *string
	deleted_at    *time.Time
	deleted_by    *string
	token         *string
	ttl           *time.Time
	email         *string
	secret        *[]byte
	clearedFields map[string]struct{}
	owner         *string
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*EmailVerificationToken, error)
	predicates    []predicate.EmailVerificationToken
}

var _ ent.Mutation = (*EmailVerificationTokenMutation)(nil)

// emailverificationtokenOption allows management of the mutation configuration using functional options.
type emailverificationtokenOption func(*EmailVerificationTokenMutation)

// newEmailVerificationTokenMutation creates new mutation for the EmailVerificationToken entity.
func newEmailVerificationTokenMutation(c config, op Op, opts ...emailverificationtokenOption) *EmailVerificationTokenMutation {
	m := &EmailVerificationTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeEmailVerificationToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEmailVerificationTokenID sets the ID field of the mutation.
func withEmailVerificationTokenID(id string) emailverificationtokenOption {
	return func(m *EmailVerificationTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *EmailVerificationToken
		)
		m.oldValue = func(ctx context.Context) (*EmailVerificationToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().EmailVerificationToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEmailVerificationToken sets the old EmailVerificationToken of the mutation.
func withEmailVerificationToken(node *EmailVerificationToken) emailverificationtokenOption {
	return func(m *EmailVerificationTokenMutation) {
		m.oldValue = func(context.Context) (*EmailVerificationToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EmailVerificationTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EmailVerificationTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of EmailVerificationToken entities.
func (m *EmailVerificationTokenMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EmailVerificationTokenMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EmailVerificationTokenMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().EmailVerificationToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *EmailVerificationTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EmailVerificationTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the EmailVerificationToken entity.
// If the EmailVerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailVerificationTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EmailVerificationTokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EmailVerificationTokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EmailVerificationTokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the EmailVerificationToken entity.
// If the EmailVerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailVerificationTokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EmailVerificationTokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *EmailVerificationTokenMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *EmailVerificationTokenMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the EmailVerificationToken entity.
// If the EmailVerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailVerificationTokenMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *EmailVerificationTokenMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[emailverificationtoken.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *EmailVerificationTokenMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[emailverificationtoken.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *EmailVerificationTokenMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, emailverificationtoken.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *EmailVerificationTokenMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *EmailVerificationTokenMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the EmailVerificationToken entity.
// If the EmailVerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailVerificationTokenMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *EmailVerificationTokenMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[emailverificationtoken.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *EmailVerificationTokenMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[emailverificationtoken.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *EmailVerificationTokenMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, emailverificationtoken.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *EmailVerificationTokenMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *EmailVerificationTokenMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the EmailVerificationToken entity.
// If the EmailVerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailVerificationTokenMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *EmailVerificationTokenMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[emailverificationtoken.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *EmailVerificationTokenMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[emailverificationtoken.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *EmailVerificationTokenMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, emailverificationtoken.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *EmailVerificationTokenMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *EmailVerificationTokenMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the EmailVerificationToken entity.
// If the EmailVerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailVerificationTokenMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *EmailVerificationTokenMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[emailverificationtoken.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *EmailVerificationTokenMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[emailverificationtoken.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *EmailVerificationTokenMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, emailverificationtoken.FieldDeletedBy)
}

// SetOwnerID sets the "owner_id" field.
func (m *EmailVerificationTokenMutation) SetOwnerID(s string) {
	m.owner = &s
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *EmailVerificationTokenMutation) OwnerID() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the EmailVerificationToken entity.
// If the EmailVerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailVerificationTokenMutation) OldOwnerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *EmailVerificationTokenMutation) ResetOwnerID() {
	m.owner = nil
}

// SetToken sets the "token" field.
func (m *EmailVerificationTokenMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *EmailVerificationTokenMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the EmailVerificationToken entity.
// If the EmailVerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailVerificationTokenMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *EmailVerificationTokenMutation) ResetToken() {
	m.token = nil
}

// SetTTL sets the "ttl" field.
func (m *EmailVerificationTokenMutation) SetTTL(t time.Time) {
	m.ttl = &t
}

// TTL returns the value of the "ttl" field in the mutation.
func (m *EmailVerificationTokenMutation) TTL() (r time.Time, exists bool) {
	v := m.ttl
	if v == nil {
		return
	}
	return *v, true
}

// OldTTL returns the old "ttl" field's value of the EmailVerificationToken entity.
// If the EmailVerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailVerificationTokenMutation) OldTTL(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTTL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTTL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTTL: %w", err)
	}
	return oldValue.TTL, nil
}

// ResetTTL resets all changes to the "ttl" field.
func (m *EmailVerificationTokenMutation) ResetTTL() {
	m.ttl = nil
}

// SetEmail sets the "email" field.
func (m *EmailVerificationTokenMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *EmailVerificationTokenMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the EmailVerificationToken entity.
// If the EmailVerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailVerificationTokenMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *EmailVerificationTokenMutation) ResetEmail() {
	m.email = nil
}

// SetSecret sets the "secret" field.
func (m *EmailVerificationTokenMutation) SetSecret(b []byte) {
	m.secret = &b
}

// Secret returns the value of the "secret" field in the mutation.
func (m *EmailVerificationTokenMutation) Secret() (r []byte, exists bool) {
	v := m.secret
	if v == nil {
		return
	}
	return *v, true
}

// OldSecret returns the old "secret" field's value of the EmailVerificationToken entity.
// If the EmailVerificationToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EmailVerificationTokenMutation) OldSecret(ctx context.Context) (v *[]byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecret: %w", err)
	}
	return oldValue.Secret, nil
}

// ResetSecret resets all changes to the "secret" field.
func (m *EmailVerificationTokenMutation) ResetSecret() {
	m.secret = nil
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *EmailVerificationTokenMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[emailverificationtoken.FieldOwnerID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *EmailVerificationTokenMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *EmailVerificationTokenMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *EmailVerificationTokenMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the EmailVerificationTokenMutation builder.
func (m *EmailVerificationTokenMutation) Where(ps ...predicate.EmailVerificationToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EmailVerificationTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EmailVerificationTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.EmailVerificationToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EmailVerificationTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EmailVerificationTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (EmailVerificationToken).
func (m *EmailVerificationTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EmailVerificationTokenMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, emailverificationtoken.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, emailverificationtoken.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, emailverificationtoken.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, emailverificationtoken.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, emailverificationtoken.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, emailverificationtoken.FieldDeletedBy)
	}
	if m.owner != nil {
		fields = append(fields, emailverificationtoken.FieldOwnerID)
	}
	if m.token != nil {
		fields = append(fields, emailverificationtoken.FieldToken)
	}
	if m.ttl != nil {
		fields = append(fields, emailverificationtoken.FieldTTL)
	}
	if m.email != nil {
		fields = append(fields, emailverificationtoken.FieldEmail)
	}
	if m.secret != nil {
		fields = append(fields, emailverificationtoken.FieldSecret)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EmailVerificationTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case emailverificationtoken.FieldCreatedAt:
		return m.CreatedAt()
	case emailverificationtoken.FieldUpdatedAt:
		return m.UpdatedAt()
	case emailverificationtoken.FieldCreatedBy:
		return m.CreatedBy()
	case emailverificationtoken.FieldUpdatedBy:
		return m.UpdatedBy()
	case emailverificationtoken.FieldDeletedAt:
		return m.DeletedAt()
	case emailverificationtoken.FieldDeletedBy:
		return m.DeletedBy()
	case emailverificationtoken.FieldOwnerID:
		return m.OwnerID()
	case emailverificationtoken.FieldToken:
		return m.Token()
	case emailverificationtoken.FieldTTL:
		return m.TTL()
	case emailverificationtoken.FieldEmail:
		return m.Email()
	case emailverificationtoken.FieldSecret:
		return m.Secret()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EmailVerificationTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case emailverificationtoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case emailverificationtoken.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case emailverificationtoken.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case emailverificationtoken.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case emailverificationtoken.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case emailverificationtoken.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case emailverificationtoken.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case emailverificationtoken.FieldToken:
		return m.OldToken(ctx)
	case emailverificationtoken.FieldTTL:
		return m.OldTTL(ctx)
	case emailverificationtoken.FieldEmail:
		return m.OldEmail(ctx)
	case emailverificationtoken.FieldSecret:
		return m.OldSecret(ctx)
	}
	return nil, fmt.Errorf("unknown EmailVerificationToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailVerificationTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case emailverificationtoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case emailverificationtoken.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case emailverificationtoken.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case emailverificationtoken.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case emailverificationtoken.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case emailverificationtoken.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case emailverificationtoken.FieldOwnerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case emailverificationtoken.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case emailverificationtoken.FieldTTL:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTTL(v)
		return nil
	case emailverificationtoken.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case emailverificationtoken.FieldSecret:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecret(v)
		return nil
	}
	return fmt.Errorf("unknown EmailVerificationToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EmailVerificationTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EmailVerificationTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EmailVerificationTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown EmailVerificationToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EmailVerificationTokenMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(emailverificationtoken.FieldCreatedBy) {
		fields = append(fields, emailverificationtoken.FieldCreatedBy)
	}
	if m.FieldCleared(emailverificationtoken.FieldUpdatedBy) {
		fields = append(fields, emailverificationtoken.FieldUpdatedBy)
	}
	if m.FieldCleared(emailverificationtoken.FieldDeletedAt) {
		fields = append(fields, emailverificationtoken.FieldDeletedAt)
	}
	if m.FieldCleared(emailverificationtoken.FieldDeletedBy) {
		fields = append(fields, emailverificationtoken.FieldDeletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EmailVerificationTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EmailVerificationTokenMutation) ClearField(name string) error {
	switch name {
	case emailverificationtoken.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case emailverificationtoken.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case emailverificationtoken.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case emailverificationtoken.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	}
	return fmt.Errorf("unknown EmailVerificationToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EmailVerificationTokenMutation) ResetField(name string) error {
	switch name {
	case emailverificationtoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case emailverificationtoken.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case emailverificationtoken.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case emailverificationtoken.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case emailverificationtoken.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case emailverificationtoken.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case emailverificationtoken.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case emailverificationtoken.FieldToken:
		m.ResetToken()
		return nil
	case emailverificationtoken.FieldTTL:
		m.ResetTTL()
		return nil
	case emailverificationtoken.FieldEmail:
		m.ResetEmail()
		return nil
	case emailverificationtoken.FieldSecret:
		m.ResetSecret()
		return nil
	}
	return fmt.Errorf("unknown EmailVerificationToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EmailVerificationTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, emailverificationtoken.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EmailVerificationTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case emailverificationtoken.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EmailVerificationTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EmailVerificationTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EmailVerificationTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, emailverificationtoken.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EmailVerificationTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case emailverificationtoken.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EmailVerificationTokenMutation) ClearEdge(name string) error {
	switch name {
	case emailverificationtoken.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown EmailVerificationToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EmailVerificationTokenMutation) ResetEdge(name string) error {
	switch name {
	case emailverificationtoken.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown EmailVerificationToken edge %s", name)
}

// EntitlementMutation represents an operation that mutates the Entitlement nodes in the graph.
type EntitlementMutation struct {
	config
	op                       Op
	typ                      string
	id                       *string
	created_at               *time.Time
	updated_at               *time.Time
	created_by               *string
	updated_by               *string
	deleted_at               *time.Time
	deleted_by               *string
	tier                     *enums.Tier
	external_customer_id     *string
	external_subscription_id *string
	expires                  *bool
	expires_at               *time.Time
	cancelled                *bool
	clearedFields            map[string]struct{}
	owner                    *string
	clearedowner             bool
	done                     bool
	oldValue                 func(context.Context) (*Entitlement, error)
	predicates               []predicate.Entitlement
}

var _ ent.Mutation = (*EntitlementMutation)(nil)

// entitlementOption allows management of the mutation configuration using functional options.
type entitlementOption func(*EntitlementMutation)

// newEntitlementMutation creates new mutation for the Entitlement entity.
func newEntitlementMutation(c config, op Op, opts ...entitlementOption) *EntitlementMutation {
	m := &EntitlementMutation{
		config:        c,
		op:            op,
		typ:           TypeEntitlement,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withEntitlementID sets the ID field of the mutation.
func withEntitlementID(id string) entitlementOption {
	return func(m *EntitlementMutation) {
		var (
			err   error
			once  sync.Once
			value *Entitlement
		)
		m.oldValue = func(ctx context.Context) (*Entitlement, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Entitlement.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withEntitlement sets the old Entitlement of the mutation.
func withEntitlement(node *Entitlement) entitlementOption {
	return func(m *EntitlementMutation) {
		m.oldValue = func(context.Context) (*Entitlement, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m EntitlementMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m EntitlementMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Entitlement entities.
func (m *EntitlementMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *EntitlementMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *EntitlementMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Entitlement.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *EntitlementMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *EntitlementMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *EntitlementMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *EntitlementMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *EntitlementMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *EntitlementMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *EntitlementMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *EntitlementMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *EntitlementMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[entitlement.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *EntitlementMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[entitlement.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *EntitlementMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, entitlement.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *EntitlementMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *EntitlementMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *EntitlementMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[entitlement.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *EntitlementMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[entitlement.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *EntitlementMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, entitlement.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *EntitlementMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *EntitlementMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *EntitlementMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[entitlement.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *EntitlementMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[entitlement.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *EntitlementMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, entitlement.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *EntitlementMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *EntitlementMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *EntitlementMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[entitlement.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *EntitlementMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[entitlement.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *EntitlementMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, entitlement.FieldDeletedBy)
}

// SetOwnerID sets the "owner_id" field.
func (m *EntitlementMutation) SetOwnerID(s string) {
	m.owner = &s
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *EntitlementMutation) OwnerID() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldOwnerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *EntitlementMutation) ResetOwnerID() {
	m.owner = nil
}

// SetTier sets the "tier" field.
func (m *EntitlementMutation) SetTier(e enums.Tier) {
	m.tier = &e
}

// Tier returns the value of the "tier" field in the mutation.
func (m *EntitlementMutation) Tier() (r enums.Tier, exists bool) {
	v := m.tier
	if v == nil {
		return
	}
	return *v, true
}

// OldTier returns the old "tier" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldTier(ctx context.Context) (v enums.Tier, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTier: %w", err)
	}
	return oldValue.Tier, nil
}

// ResetTier resets all changes to the "tier" field.
func (m *EntitlementMutation) ResetTier() {
	m.tier = nil
}

// SetExternalCustomerID sets the "external_customer_id" field.
func (m *EntitlementMutation) SetExternalCustomerID(s string) {
	m.external_customer_id = &s
}

// ExternalCustomerID returns the value of the "external_customer_id" field in the mutation.
func (m *EntitlementMutation) ExternalCustomerID() (r string, exists bool) {
	v := m.external_customer_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalCustomerID returns the old "external_customer_id" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldExternalCustomerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalCustomerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalCustomerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalCustomerID: %w", err)
	}
	return oldValue.ExternalCustomerID, nil
}

// ClearExternalCustomerID clears the value of the "external_customer_id" field.
func (m *EntitlementMutation) ClearExternalCustomerID() {
	m.external_customer_id = nil
	m.clearedFields[entitlement.FieldExternalCustomerID] = struct{}{}
}

// ExternalCustomerIDCleared returns if the "external_customer_id" field was cleared in this mutation.
func (m *EntitlementMutation) ExternalCustomerIDCleared() bool {
	_, ok := m.clearedFields[entitlement.FieldExternalCustomerID]
	return ok
}

// ResetExternalCustomerID resets all changes to the "external_customer_id" field.
func (m *EntitlementMutation) ResetExternalCustomerID() {
	m.external_customer_id = nil
	delete(m.clearedFields, entitlement.FieldExternalCustomerID)
}

// SetExternalSubscriptionID sets the "external_subscription_id" field.
func (m *EntitlementMutation) SetExternalSubscriptionID(s string) {
	m.external_subscription_id = &s
}

// ExternalSubscriptionID returns the value of the "external_subscription_id" field in the mutation.
func (m *EntitlementMutation) ExternalSubscriptionID() (r string, exists bool) {
	v := m.external_subscription_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExternalSubscriptionID returns the old "external_subscription_id" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldExternalSubscriptionID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExternalSubscriptionID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExternalSubscriptionID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExternalSubscriptionID: %w", err)
	}
	return oldValue.ExternalSubscriptionID, nil
}

// ClearExternalSubscriptionID clears the value of the "external_subscription_id" field.
func (m *EntitlementMutation) ClearExternalSubscriptionID() {
	m.external_subscription_id = nil
	m.clearedFields[entitlement.FieldExternalSubscriptionID] = struct{}{}
}

// ExternalSubscriptionIDCleared returns if the "external_subscription_id" field was cleared in this mutation.
func (m *EntitlementMutation) ExternalSubscriptionIDCleared() bool {
	_, ok := m.clearedFields[entitlement.FieldExternalSubscriptionID]
	return ok
}

// ResetExternalSubscriptionID resets all changes to the "external_subscription_id" field.
func (m *EntitlementMutation) ResetExternalSubscriptionID() {
	m.external_subscription_id = nil
	delete(m.clearedFields, entitlement.FieldExternalSubscriptionID)
}

// SetExpires sets the "expires" field.
func (m *EntitlementMutation) SetExpires(b bool) {
	m.expires = &b
}

// Expires returns the value of the "expires" field in the mutation.
func (m *EntitlementMutation) Expires() (r bool, exists bool) {
	v := m.expires
	if v == nil {
		return
	}
	return *v, true
}

// OldExpires returns the old "expires" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldExpires(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpires is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpires requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpires: %w", err)
	}
	return oldValue.Expires, nil
}

// ResetExpires resets all changes to the "expires" field.
func (m *EntitlementMutation) ResetExpires() {
	m.expires = nil
}

// SetExpiresAt sets the "expires_at" field.
func (m *EntitlementMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *EntitlementMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldExpiresAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (m *EntitlementMutation) ClearExpiresAt() {
	m.expires_at = nil
	m.clearedFields[entitlement.FieldExpiresAt] = struct{}{}
}

// ExpiresAtCleared returns if the "expires_at" field was cleared in this mutation.
func (m *EntitlementMutation) ExpiresAtCleared() bool {
	_, ok := m.clearedFields[entitlement.FieldExpiresAt]
	return ok
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *EntitlementMutation) ResetExpiresAt() {
	m.expires_at = nil
	delete(m.clearedFields, entitlement.FieldExpiresAt)
}

// SetCancelled sets the "cancelled" field.
func (m *EntitlementMutation) SetCancelled(b bool) {
	m.cancelled = &b
}

// Cancelled returns the value of the "cancelled" field in the mutation.
func (m *EntitlementMutation) Cancelled() (r bool, exists bool) {
	v := m.cancelled
	if v == nil {
		return
	}
	return *v, true
}

// OldCancelled returns the old "cancelled" field's value of the Entitlement entity.
// If the Entitlement object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *EntitlementMutation) OldCancelled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCancelled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCancelled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCancelled: %w", err)
	}
	return oldValue.Cancelled, nil
}

// ResetCancelled resets all changes to the "cancelled" field.
func (m *EntitlementMutation) ResetCancelled() {
	m.cancelled = nil
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (m *EntitlementMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[entitlement.FieldOwnerID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the Organization entity was cleared.
func (m *EntitlementMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *EntitlementMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *EntitlementMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the EntitlementMutation builder.
func (m *EntitlementMutation) Where(ps ...predicate.Entitlement) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the EntitlementMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *EntitlementMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Entitlement, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *EntitlementMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *EntitlementMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Entitlement).
func (m *EntitlementMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *EntitlementMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, entitlement.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, entitlement.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, entitlement.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, entitlement.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, entitlement.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, entitlement.FieldDeletedBy)
	}
	if m.owner != nil {
		fields = append(fields, entitlement.FieldOwnerID)
	}
	if m.tier != nil {
		fields = append(fields, entitlement.FieldTier)
	}
	if m.external_customer_id != nil {
		fields = append(fields, entitlement.FieldExternalCustomerID)
	}
	if m.external_subscription_id != nil {
		fields = append(fields, entitlement.FieldExternalSubscriptionID)
	}
	if m.expires != nil {
		fields = append(fields, entitlement.FieldExpires)
	}
	if m.expires_at != nil {
		fields = append(fields, entitlement.FieldExpiresAt)
	}
	if m.cancelled != nil {
		fields = append(fields, entitlement.FieldCancelled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *EntitlementMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case entitlement.FieldCreatedAt:
		return m.CreatedAt()
	case entitlement.FieldUpdatedAt:
		return m.UpdatedAt()
	case entitlement.FieldCreatedBy:
		return m.CreatedBy()
	case entitlement.FieldUpdatedBy:
		return m.UpdatedBy()
	case entitlement.FieldDeletedAt:
		return m.DeletedAt()
	case entitlement.FieldDeletedBy:
		return m.DeletedBy()
	case entitlement.FieldOwnerID:
		return m.OwnerID()
	case entitlement.FieldTier:
		return m.Tier()
	case entitlement.FieldExternalCustomerID:
		return m.ExternalCustomerID()
	case entitlement.FieldExternalSubscriptionID:
		return m.ExternalSubscriptionID()
	case entitlement.FieldExpires:
		return m.Expires()
	case entitlement.FieldExpiresAt:
		return m.ExpiresAt()
	case entitlement.FieldCancelled:
		return m.Cancelled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *EntitlementMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case entitlement.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case entitlement.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case entitlement.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case entitlement.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case entitlement.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case entitlement.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case entitlement.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case entitlement.FieldTier:
		return m.OldTier(ctx)
	case entitlement.FieldExternalCustomerID:
		return m.OldExternalCustomerID(ctx)
	case entitlement.FieldExternalSubscriptionID:
		return m.OldExternalSubscriptionID(ctx)
	case entitlement.FieldExpires:
		return m.OldExpires(ctx)
	case entitlement.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case entitlement.FieldCancelled:
		return m.OldCancelled(ctx)
	}
	return nil, fmt.Errorf("unknown Entitlement field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntitlementMutation) SetField(name string, value ent.Value) error {
	switch name {
	case entitlement.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case entitlement.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case entitlement.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case entitlement.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case entitlement.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case entitlement.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case entitlement.FieldOwnerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case entitlement.FieldTier:
		v, ok := value.(enums.Tier)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTier(v)
		return nil
	case entitlement.FieldExternalCustomerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalCustomerID(v)
		return nil
	case entitlement.FieldExternalSubscriptionID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExternalSubscriptionID(v)
		return nil
	case entitlement.FieldExpires:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpires(v)
		return nil
	case entitlement.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case entitlement.FieldCancelled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCancelled(v)
		return nil
	}
	return fmt.Errorf("unknown Entitlement field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *EntitlementMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *EntitlementMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *EntitlementMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Entitlement numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *EntitlementMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(entitlement.FieldCreatedBy) {
		fields = append(fields, entitlement.FieldCreatedBy)
	}
	if m.FieldCleared(entitlement.FieldUpdatedBy) {
		fields = append(fields, entitlement.FieldUpdatedBy)
	}
	if m.FieldCleared(entitlement.FieldDeletedAt) {
		fields = append(fields, entitlement.FieldDeletedAt)
	}
	if m.FieldCleared(entitlement.FieldDeletedBy) {
		fields = append(fields, entitlement.FieldDeletedBy)
	}
	if m.FieldCleared(entitlement.FieldExternalCustomerID) {
		fields = append(fields, entitlement.FieldExternalCustomerID)
	}
	if m.FieldCleared(entitlement.FieldExternalSubscriptionID) {
		fields = append(fields, entitlement.FieldExternalSubscriptionID)
	}
	if m.FieldCleared(entitlement.FieldExpiresAt) {
		fields = append(fields, entitlement.FieldExpiresAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *EntitlementMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *EntitlementMutation) ClearField(name string) error {
	switch name {
	case entitlement.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case entitlement.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case entitlement.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case entitlement.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case entitlement.FieldExternalCustomerID:
		m.ClearExternalCustomerID()
		return nil
	case entitlement.FieldExternalSubscriptionID:
		m.ClearExternalSubscriptionID()
		return nil
	case entitlement.FieldExpiresAt:
		m.ClearExpiresAt()
		return nil
	}
	return fmt.Errorf("unknown Entitlement nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *EntitlementMutation) ResetField(name string) error {
	switch name {
	case entitlement.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case entitlement.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case entitlement.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case entitlement.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case entitlement.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case entitlement.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case entitlement.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case entitlement.FieldTier:
		m.ResetTier()
		return nil
	case entitlement.FieldExternalCustomerID:
		m.ResetExternalCustomerID()
		return nil
	case entitlement.FieldExternalSubscriptionID:
		m.ResetExternalSubscriptionID()
		return nil
	case entitlement.FieldExpires:
		m.ResetExpires()
		return nil
	case entitlement.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case entitlement.FieldCancelled:
		m.ResetCancelled()
		return nil
	}
	return fmt.Errorf("unknown Entitlement field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *EntitlementMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, entitlement.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *EntitlementMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case entitlement.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *EntitlementMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *EntitlementMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *EntitlementMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, entitlement.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *EntitlementMutation) EdgeCleared(name string) bool {
	switch name {
	case entitlement.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *EntitlementMutation) ClearEdge(name string) error {
	switch name {
	case entitlement.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Entitlement unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *EntitlementMutation) ResetEdge(name string) error {
	switch name {
	case entitlement.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Entitlement edge %s", name)
}

// GroupMutation represents an operation that mutates the Group nodes in the graph.
type GroupMutation struct {
	config
	op                Op
	typ               string
	id                *string
	created_at        *time.Time
	updated_at        *time.Time
	created_by        *string
	updated_by        *string
	deleted_at        *time.Time
	deleted_by        *string
	name              *string
	description       *string
	gravatar_logo_url *string
	logo_url          *string
	display_name      *string
	clearedFields     map[string]struct{}
	owner             *string
	clearedowner      bool
	setting           *string
	clearedsetting    bool
	users             map[string]struct{}
	removedusers      map[string]struct{}
	clearedusers      bool
	members           map[string]struct{}
	removedmembers    map[string]struct{}
	clearedmembers    bool
	done              bool
	oldValue          func(context.Context) (*Group, error)
	predicates        []predicate.Group
}

var _ ent.Mutation = (*GroupMutation)(nil)

// groupOption allows management of the mutation configuration using functional options.
type groupOption func(*GroupMutation)

// newGroupMutation creates new mutation for the Group entity.
func newGroupMutation(c config, op Op, opts ...groupOption) *GroupMutation {
	m := &GroupMutation{
		config:        c,
		op:            op,
		typ:           TypeGroup,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupID sets the ID field of the mutation.
func withGroupID(id string) groupOption {
	return func(m *GroupMutation) {
		var (
			err   error
			once  sync.Once
			value *Group
		)
		m.oldValue = func(ctx context.Context) (*Group, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Group.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroup sets the old Group of the mutation.
func withGroup(node *Group) groupOption {
	return func(m *GroupMutation) {
		m.oldValue = func(context.Context) (*Group, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Group entities.
func (m *GroupMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Group.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GroupMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GroupMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GroupMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *GroupMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *GroupMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *GroupMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[group.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *GroupMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[group.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *GroupMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, group.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *GroupMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *GroupMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *GroupMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[group.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *GroupMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[group.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *GroupMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, group.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *GroupMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *GroupMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *GroupMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[group.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *GroupMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[group.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *GroupMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, group.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *GroupMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *GroupMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *GroupMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[group.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *GroupMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[group.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *GroupMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, group.FieldDeletedBy)
}

// SetOwnerID sets the "owner_id" field.
func (m *GroupMutation) SetOwnerID(s string) {
	m.owner = &s
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *GroupMutation) OwnerID() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldOwnerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *GroupMutation) ResetOwnerID() {
	m.owner = nil
}

// SetName sets the "name" field.
func (m *GroupMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *GroupMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *GroupMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *GroupMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *GroupMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *GroupMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[group.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *GroupMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[group.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *GroupMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, group.FieldDescription)
}

// SetGravatarLogoURL sets the "gravatar_logo_url" field.
func (m *GroupMutation) SetGravatarLogoURL(s string) {
	m.gravatar_logo_url = &s
}

// GravatarLogoURL returns the value of the "gravatar_logo_url" field in the mutation.
func (m *GroupMutation) GravatarLogoURL() (r string, exists bool) {
	v := m.gravatar_logo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldGravatarLogoURL returns the old "gravatar_logo_url" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldGravatarLogoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGravatarLogoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGravatarLogoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGravatarLogoURL: %w", err)
	}
	return oldValue.GravatarLogoURL, nil
}

// ClearGravatarLogoURL clears the value of the "gravatar_logo_url" field.
func (m *GroupMutation) ClearGravatarLogoURL() {
	m.gravatar_logo_url = nil
	m.clearedFields[group.FieldGravatarLogoURL] = struct{}{}
}

// GravatarLogoURLCleared returns if the "gravatar_logo_url" field was cleared in this mutation.
func (m *GroupMutation) GravatarLogoURLCleared() bool {
	_, ok := m.clearedFields[group.FieldGravatarLogoURL]
	return ok
}

// ResetGravatarLogoURL resets all changes to the "gravatar_logo_url" field.
func (m *GroupMutation) ResetGravatarLogoURL() {
	m.gravatar_logo_url = nil
	delete(m.clearedFields, group.FieldGravatarLogoURL)
}

// SetLogoURL sets the "logo_url" field.
func (m *GroupMutation) SetLogoURL(s string) {
	m.logo_url = &s
}

// LogoURL returns the value of the "logo_url" field in the mutation.
func (m *GroupMutation) LogoURL() (r string, exists bool) {
	v := m.logo_url
	if v == nil {
		return
	}
	return *v, true
}

// OldLogoURL returns the old "logo_url" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldLogoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLogoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLogoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLogoURL: %w", err)
	}
	return oldValue.LogoURL, nil
}

// ClearLogoURL clears the value of the "logo_url" field.
func (m *GroupMutation) ClearLogoURL() {
	m.logo_url = nil
	m.clearedFields[group.FieldLogoURL] = struct{}{}
}

// LogoURLCleared returns if the "logo_url" field was cleared in this mutation.
func (m *GroupMutation) LogoURLCleared() bool {
	_, ok := m.clearedFields[group.FieldLogoURL]
	return ok
}

// ResetLogoURL resets all changes to the "logo_url" field.
func (m *GroupMutation) ResetLogoURL() {
	m.logo_url = nil
	delete(m.clearedFields, group.FieldLogoURL)
}

// SetDisplayName sets the "display_name" field.
func (m *GroupMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *GroupMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the Group entity.
// If the Group object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *GroupMutation) ResetDisplayName() {
	m.display_name = nil
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (m *GroupMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[group.FieldOwnerID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the Organization entity was cleared.
func (m *GroupMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *GroupMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *GroupMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// SetSettingID sets the "setting" edge to the GroupSetting entity by id.
func (m *GroupMutation) SetSettingID(id string) {
	m.setting = &id
}

// ClearSetting clears the "setting" edge to the GroupSetting entity.
func (m *GroupMutation) ClearSetting() {
	m.clearedsetting = true
}

// SettingCleared reports if the "setting" edge to the GroupSetting entity was cleared.
func (m *GroupMutation) SettingCleared() bool {
	return m.clearedsetting
}

// SettingID returns the "setting" edge ID in the mutation.
func (m *GroupMutation) SettingID() (id string, exists bool) {
	if m.setting != nil {
		return *m.setting, true
	}
	return
}

// SettingIDs returns the "setting" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SettingID instead. It exists only for internal usage by the builders.
func (m *GroupMutation) SettingIDs() (ids []string) {
	if id := m.setting; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSetting resets all changes to the "setting" edge.
func (m *GroupMutation) ResetSetting() {
	m.setting = nil
	m.clearedsetting = false
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *GroupMutation) AddUserIDs(ids ...string) {
	if m.users == nil {
		m.users = make(map[string]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *GroupMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *GroupMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *GroupMutation) RemoveUserIDs(ids ...string) {
	if m.removedusers == nil {
		m.removedusers = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *GroupMutation) RemovedUsersIDs() (ids []string) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *GroupMutation) UsersIDs() (ids []string) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *GroupMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddMemberIDs adds the "members" edge to the GroupMembership entity by ids.
func (m *GroupMutation) AddMemberIDs(ids ...string) {
	if m.members == nil {
		m.members = make(map[string]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the GroupMembership entity.
func (m *GroupMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared reports if the "members" edge to the GroupMembership entity was cleared.
func (m *GroupMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the GroupMembership entity by IDs.
func (m *GroupMutation) RemoveMemberIDs(ids ...string) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.members, ids[i])
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the GroupMembership entity.
func (m *GroupMutation) RemovedMembersIDs() (ids []string) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *GroupMutation) MembersIDs() (ids []string) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *GroupMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// Where appends a list predicates to the GroupMutation builder.
func (m *GroupMutation) Where(ps ...predicate.Group) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Group, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Group).
func (m *GroupMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.created_at != nil {
		fields = append(fields, group.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, group.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, group.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, group.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, group.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, group.FieldDeletedBy)
	}
	if m.owner != nil {
		fields = append(fields, group.FieldOwnerID)
	}
	if m.name != nil {
		fields = append(fields, group.FieldName)
	}
	if m.description != nil {
		fields = append(fields, group.FieldDescription)
	}
	if m.gravatar_logo_url != nil {
		fields = append(fields, group.FieldGravatarLogoURL)
	}
	if m.logo_url != nil {
		fields = append(fields, group.FieldLogoURL)
	}
	if m.display_name != nil {
		fields = append(fields, group.FieldDisplayName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case group.FieldCreatedAt:
		return m.CreatedAt()
	case group.FieldUpdatedAt:
		return m.UpdatedAt()
	case group.FieldCreatedBy:
		return m.CreatedBy()
	case group.FieldUpdatedBy:
		return m.UpdatedBy()
	case group.FieldDeletedAt:
		return m.DeletedAt()
	case group.FieldDeletedBy:
		return m.DeletedBy()
	case group.FieldOwnerID:
		return m.OwnerID()
	case group.FieldName:
		return m.Name()
	case group.FieldDescription:
		return m.Description()
	case group.FieldGravatarLogoURL:
		return m.GravatarLogoURL()
	case group.FieldLogoURL:
		return m.LogoURL()
	case group.FieldDisplayName:
		return m.DisplayName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case group.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case group.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case group.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case group.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case group.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case group.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case group.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case group.FieldName:
		return m.OldName(ctx)
	case group.FieldDescription:
		return m.OldDescription(ctx)
	case group.FieldGravatarLogoURL:
		return m.OldGravatarLogoURL(ctx)
	case group.FieldLogoURL:
		return m.OldLogoURL(ctx)
	case group.FieldDisplayName:
		return m.OldDisplayName(ctx)
	}
	return nil, fmt.Errorf("unknown Group field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) SetField(name string, value ent.Value) error {
	switch name {
	case group.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case group.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case group.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case group.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case group.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case group.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case group.FieldOwnerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case group.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case group.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case group.FieldGravatarLogoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGravatarLogoURL(v)
		return nil
	case group.FieldLogoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLogoURL(v)
		return nil
	case group.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Group numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(group.FieldCreatedBy) {
		fields = append(fields, group.FieldCreatedBy)
	}
	if m.FieldCleared(group.FieldUpdatedBy) {
		fields = append(fields, group.FieldUpdatedBy)
	}
	if m.FieldCleared(group.FieldDeletedAt) {
		fields = append(fields, group.FieldDeletedAt)
	}
	if m.FieldCleared(group.FieldDeletedBy) {
		fields = append(fields, group.FieldDeletedBy)
	}
	if m.FieldCleared(group.FieldDescription) {
		fields = append(fields, group.FieldDescription)
	}
	if m.FieldCleared(group.FieldGravatarLogoURL) {
		fields = append(fields, group.FieldGravatarLogoURL)
	}
	if m.FieldCleared(group.FieldLogoURL) {
		fields = append(fields, group.FieldLogoURL)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMutation) ClearField(name string) error {
	switch name {
	case group.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case group.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case group.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case group.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case group.FieldDescription:
		m.ClearDescription()
		return nil
	case group.FieldGravatarLogoURL:
		m.ClearGravatarLogoURL()
		return nil
	case group.FieldLogoURL:
		m.ClearLogoURL()
		return nil
	}
	return fmt.Errorf("unknown Group nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMutation) ResetField(name string) error {
	switch name {
	case group.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case group.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case group.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case group.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case group.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case group.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case group.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case group.FieldName:
		m.ResetName()
		return nil
	case group.FieldDescription:
		m.ResetDescription()
		return nil
	case group.FieldGravatarLogoURL:
		m.ResetGravatarLogoURL()
		return nil
	case group.FieldLogoURL:
		m.ResetLogoURL()
		return nil
	case group.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	}
	return fmt.Errorf("unknown Group field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMutation) AddedEdges() []string {
	edges := make([]string, 0, 4)
	if m.owner != nil {
		edges = append(edges, group.EdgeOwner)
	}
	if m.setting != nil {
		edges = append(edges, group.EdgeSetting)
	}
	if m.users != nil {
		edges = append(edges, group.EdgeUsers)
	}
	if m.members != nil {
		edges = append(edges, group.EdgeMembers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	case group.EdgeSetting:
		if id := m.setting; id != nil {
			return []ent.Value{*id}
		}
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMutation) RemovedEdges() []string {
	edges := make([]string, 0, 4)
	if m.removedusers != nil {
		edges = append(edges, group.EdgeUsers)
	}
	if m.removedmembers != nil {
		edges = append(edges, group.EdgeMembers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case group.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case group.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMutation) ClearedEdges() []string {
	edges := make([]string, 0, 4)
	if m.clearedowner {
		edges = append(edges, group.EdgeOwner)
	}
	if m.clearedsetting {
		edges = append(edges, group.EdgeSetting)
	}
	if m.clearedusers {
		edges = append(edges, group.EdgeUsers)
	}
	if m.clearedmembers {
		edges = append(edges, group.EdgeMembers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMutation) EdgeCleared(name string) bool {
	switch name {
	case group.EdgeOwner:
		return m.clearedowner
	case group.EdgeSetting:
		return m.clearedsetting
	case group.EdgeUsers:
		return m.clearedusers
	case group.EdgeMembers:
		return m.clearedmembers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMutation) ClearEdge(name string) error {
	switch name {
	case group.EdgeOwner:
		m.ClearOwner()
		return nil
	case group.EdgeSetting:
		m.ClearSetting()
		return nil
	}
	return fmt.Errorf("unknown Group unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMutation) ResetEdge(name string) error {
	switch name {
	case group.EdgeOwner:
		m.ResetOwner()
		return nil
	case group.EdgeSetting:
		m.ResetSetting()
		return nil
	case group.EdgeUsers:
		m.ResetUsers()
		return nil
	case group.EdgeMembers:
		m.ResetMembers()
		return nil
	}
	return fmt.Errorf("unknown Group edge %s", name)
}

// GroupMembershipMutation represents an operation that mutates the GroupMembership nodes in the graph.
type GroupMembershipMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created_at    *time.Time
	updated_at    *time.Time
	created_by    *string
	updated_by    *string
	deleted_at    *time.Time
	deleted_by    *string
	role          *enums.Role
	clearedFields map[string]struct{}
	group         *string
	clearedgroup  bool
	user          *string
	cleareduser   bool
	done          bool
	oldValue      func(context.Context) (*GroupMembership, error)
	predicates    []predicate.GroupMembership
}

var _ ent.Mutation = (*GroupMembershipMutation)(nil)

// groupmembershipOption allows management of the mutation configuration using functional options.
type groupmembershipOption func(*GroupMembershipMutation)

// newGroupMembershipMutation creates new mutation for the GroupMembership entity.
func newGroupMembershipMutation(c config, op Op, opts ...groupmembershipOption) *GroupMembershipMutation {
	m := &GroupMembershipMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupMembership,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupMembershipID sets the ID field of the mutation.
func withGroupMembershipID(id string) groupmembershipOption {
	return func(m *GroupMembershipMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupMembership
		)
		m.oldValue = func(ctx context.Context) (*GroupMembership, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupMembership.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupMembership sets the old GroupMembership of the mutation.
func withGroupMembership(node *GroupMembership) groupmembershipOption {
	return func(m *GroupMembershipMutation) {
		m.oldValue = func(context.Context) (*GroupMembership, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupMembershipMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupMembershipMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GroupMembership entities.
func (m *GroupMembershipMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupMembershipMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupMembershipMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupMembership.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupMembershipMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupMembershipMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GroupMembership entity.
// If the GroupMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMembershipMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupMembershipMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GroupMembershipMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GroupMembershipMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GroupMembership entity.
// If the GroupMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMembershipMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GroupMembershipMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *GroupMembershipMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *GroupMembershipMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the GroupMembership entity.
// If the GroupMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMembershipMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *GroupMembershipMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[groupmembership.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *GroupMembershipMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[groupmembership.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *GroupMembershipMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, groupmembership.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *GroupMembershipMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *GroupMembershipMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the GroupMembership entity.
// If the GroupMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMembershipMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *GroupMembershipMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[groupmembership.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *GroupMembershipMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[groupmembership.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *GroupMembershipMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, groupmembership.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *GroupMembershipMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *GroupMembershipMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the GroupMembership entity.
// If the GroupMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMembershipMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *GroupMembershipMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[groupmembership.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *GroupMembershipMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[groupmembership.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *GroupMembershipMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, groupmembership.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *GroupMembershipMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *GroupMembershipMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the GroupMembership entity.
// If the GroupMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMembershipMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *GroupMembershipMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[groupmembership.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *GroupMembershipMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[groupmembership.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *GroupMembershipMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, groupmembership.FieldDeletedBy)
}

// SetRole sets the "role" field.
func (m *GroupMembershipMutation) SetRole(e enums.Role) {
	m.role = &e
}

// Role returns the value of the "role" field in the mutation.
func (m *GroupMembershipMutation) Role() (r enums.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the GroupMembership entity.
// If the GroupMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMembershipMutation) OldRole(ctx context.Context) (v enums.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *GroupMembershipMutation) ResetRole() {
	m.role = nil
}

// SetGroupID sets the "group_id" field.
func (m *GroupMembershipMutation) SetGroupID(s string) {
	m.group = &s
}

// GroupID returns the value of the "group_id" field in the mutation.
func (m *GroupMembershipMutation) GroupID() (r string, exists bool) {
	v := m.group
	if v == nil {
		return
	}
	return *v, true
}

// OldGroupID returns the old "group_id" field's value of the GroupMembership entity.
// If the GroupMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMembershipMutation) OldGroupID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldGroupID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldGroupID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldGroupID: %w", err)
	}
	return oldValue.GroupID, nil
}

// ResetGroupID resets all changes to the "group_id" field.
func (m *GroupMembershipMutation) ResetGroupID() {
	m.group = nil
}

// SetUserID sets the "user_id" field.
func (m *GroupMembershipMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *GroupMembershipMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the GroupMembership entity.
// If the GroupMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupMembershipMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *GroupMembershipMutation) ResetUserID() {
	m.user = nil
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *GroupMembershipMutation) ClearGroup() {
	m.clearedgroup = true
	m.clearedFields[groupmembership.FieldGroupID] = struct{}{}
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *GroupMembershipMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *GroupMembershipMutation) GroupIDs() (ids []string) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *GroupMembershipMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *GroupMembershipMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[groupmembership.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *GroupMembershipMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *GroupMembershipMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *GroupMembershipMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the GroupMembershipMutation builder.
func (m *GroupMembershipMutation) Where(ps ...predicate.GroupMembership) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupMembershipMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupMembershipMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GroupMembership, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupMembershipMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupMembershipMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GroupMembership).
func (m *GroupMembershipMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupMembershipMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, groupmembership.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, groupmembership.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, groupmembership.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, groupmembership.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, groupmembership.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, groupmembership.FieldDeletedBy)
	}
	if m.role != nil {
		fields = append(fields, groupmembership.FieldRole)
	}
	if m.group != nil {
		fields = append(fields, groupmembership.FieldGroupID)
	}
	if m.user != nil {
		fields = append(fields, groupmembership.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupMembershipMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case groupmembership.FieldCreatedAt:
		return m.CreatedAt()
	case groupmembership.FieldUpdatedAt:
		return m.UpdatedAt()
	case groupmembership.FieldCreatedBy:
		return m.CreatedBy()
	case groupmembership.FieldUpdatedBy:
		return m.UpdatedBy()
	case groupmembership.FieldDeletedAt:
		return m.DeletedAt()
	case groupmembership.FieldDeletedBy:
		return m.DeletedBy()
	case groupmembership.FieldRole:
		return m.Role()
	case groupmembership.FieldGroupID:
		return m.GroupID()
	case groupmembership.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupMembershipMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case groupmembership.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case groupmembership.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case groupmembership.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case groupmembership.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case groupmembership.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case groupmembership.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case groupmembership.FieldRole:
		return m.OldRole(ctx)
	case groupmembership.FieldGroupID:
		return m.OldGroupID(ctx)
	case groupmembership.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown GroupMembership field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMembershipMutation) SetField(name string, value ent.Value) error {
	switch name {
	case groupmembership.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case groupmembership.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case groupmembership.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case groupmembership.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case groupmembership.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case groupmembership.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case groupmembership.FieldRole:
		v, ok := value.(enums.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case groupmembership.FieldGroupID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetGroupID(v)
		return nil
	case groupmembership.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown GroupMembership field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupMembershipMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupMembershipMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupMembershipMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GroupMembership numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupMembershipMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(groupmembership.FieldCreatedBy) {
		fields = append(fields, groupmembership.FieldCreatedBy)
	}
	if m.FieldCleared(groupmembership.FieldUpdatedBy) {
		fields = append(fields, groupmembership.FieldUpdatedBy)
	}
	if m.FieldCleared(groupmembership.FieldDeletedAt) {
		fields = append(fields, groupmembership.FieldDeletedAt)
	}
	if m.FieldCleared(groupmembership.FieldDeletedBy) {
		fields = append(fields, groupmembership.FieldDeletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupMembershipMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupMembershipMutation) ClearField(name string) error {
	switch name {
	case groupmembership.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case groupmembership.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case groupmembership.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case groupmembership.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	}
	return fmt.Errorf("unknown GroupMembership nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupMembershipMutation) ResetField(name string) error {
	switch name {
	case groupmembership.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case groupmembership.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case groupmembership.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case groupmembership.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case groupmembership.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case groupmembership.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case groupmembership.FieldRole:
		m.ResetRole()
		return nil
	case groupmembership.FieldGroupID:
		m.ResetGroupID()
		return nil
	case groupmembership.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown GroupMembership field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupMembershipMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.group != nil {
		edges = append(edges, groupmembership.EdgeGroup)
	}
	if m.user != nil {
		edges = append(edges, groupmembership.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupMembershipMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case groupmembership.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	case groupmembership.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupMembershipMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupMembershipMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupMembershipMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedgroup {
		edges = append(edges, groupmembership.EdgeGroup)
	}
	if m.cleareduser {
		edges = append(edges, groupmembership.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupMembershipMutation) EdgeCleared(name string) bool {
	switch name {
	case groupmembership.EdgeGroup:
		return m.clearedgroup
	case groupmembership.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupMembershipMutation) ClearEdge(name string) error {
	switch name {
	case groupmembership.EdgeGroup:
		m.ClearGroup()
		return nil
	case groupmembership.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown GroupMembership unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupMembershipMutation) ResetEdge(name string) error {
	switch name {
	case groupmembership.EdgeGroup:
		m.ResetGroup()
		return nil
	case groupmembership.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown GroupMembership edge %s", name)
}

// GroupSettingMutation represents an operation that mutates the GroupSetting nodes in the graph.
type GroupSettingMutation struct {
	config
	op             Op
	typ            string
	id             *string
	created_at     *time.Time
	updated_at     *time.Time
	created_by     *string
	updated_by     *string
	deleted_at     *time.Time
	deleted_by     *string
	visibility     *enums.Visibility
	join_policy    *enums.JoinPolicy
	tags           *[]string
	appendtags     []string
	sync_to_slack  *bool
	sync_to_github *bool
	clearedFields  map[string]struct{}
	group          *string
	clearedgroup   bool
	done           bool
	oldValue       func(context.Context) (*GroupSetting, error)
	predicates     []predicate.GroupSetting
}

var _ ent.Mutation = (*GroupSettingMutation)(nil)

// groupsettingOption allows management of the mutation configuration using functional options.
type groupsettingOption func(*GroupSettingMutation)

// newGroupSettingMutation creates new mutation for the GroupSetting entity.
func newGroupSettingMutation(c config, op Op, opts ...groupsettingOption) *GroupSettingMutation {
	m := &GroupSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeGroupSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withGroupSettingID sets the ID field of the mutation.
func withGroupSettingID(id string) groupsettingOption {
	return func(m *GroupSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *GroupSetting
		)
		m.oldValue = func(ctx context.Context) (*GroupSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().GroupSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withGroupSetting sets the old GroupSetting of the mutation.
func withGroupSetting(node *GroupSetting) groupsettingOption {
	return func(m *GroupSettingMutation) {
		m.oldValue = func(context.Context) (*GroupSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m GroupSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m GroupSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of GroupSetting entities.
func (m *GroupSettingMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *GroupSettingMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *GroupSettingMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().GroupSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *GroupSettingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *GroupSettingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the GroupSetting entity.
// If the GroupSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *GroupSettingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *GroupSettingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *GroupSettingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the GroupSetting entity.
// If the GroupSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *GroupSettingMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *GroupSettingMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *GroupSettingMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the GroupSetting entity.
// If the GroupSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *GroupSettingMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[groupsetting.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *GroupSettingMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[groupsetting.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *GroupSettingMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, groupsetting.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *GroupSettingMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *GroupSettingMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the GroupSetting entity.
// If the GroupSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *GroupSettingMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[groupsetting.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *GroupSettingMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[groupsetting.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *GroupSettingMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, groupsetting.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *GroupSettingMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *GroupSettingMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the GroupSetting entity.
// If the GroupSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *GroupSettingMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[groupsetting.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *GroupSettingMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[groupsetting.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *GroupSettingMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, groupsetting.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *GroupSettingMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *GroupSettingMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the GroupSetting entity.
// If the GroupSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *GroupSettingMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[groupsetting.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *GroupSettingMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[groupsetting.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *GroupSettingMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, groupsetting.FieldDeletedBy)
}

// SetVisibility sets the "visibility" field.
func (m *GroupSettingMutation) SetVisibility(e enums.Visibility) {
	m.visibility = &e
}

// Visibility returns the value of the "visibility" field in the mutation.
func (m *GroupSettingMutation) Visibility() (r enums.Visibility, exists bool) {
	v := m.visibility
	if v == nil {
		return
	}
	return *v, true
}

// OldVisibility returns the old "visibility" field's value of the GroupSetting entity.
// If the GroupSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingMutation) OldVisibility(ctx context.Context) (v enums.Visibility, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVisibility is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVisibility requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisibility: %w", err)
	}
	return oldValue.Visibility, nil
}

// ResetVisibility resets all changes to the "visibility" field.
func (m *GroupSettingMutation) ResetVisibility() {
	m.visibility = nil
}

// SetJoinPolicy sets the "join_policy" field.
func (m *GroupSettingMutation) SetJoinPolicy(ep enums.JoinPolicy) {
	m.join_policy = &ep
}

// JoinPolicy returns the value of the "join_policy" field in the mutation.
func (m *GroupSettingMutation) JoinPolicy() (r enums.JoinPolicy, exists bool) {
	v := m.join_policy
	if v == nil {
		return
	}
	return *v, true
}

// OldJoinPolicy returns the old "join_policy" field's value of the GroupSetting entity.
// If the GroupSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingMutation) OldJoinPolicy(ctx context.Context) (v enums.JoinPolicy, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldJoinPolicy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldJoinPolicy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldJoinPolicy: %w", err)
	}
	return oldValue.JoinPolicy, nil
}

// ResetJoinPolicy resets all changes to the "join_policy" field.
func (m *GroupSettingMutation) ResetJoinPolicy() {
	m.join_policy = nil
}

// SetTags sets the "tags" field.
func (m *GroupSettingMutation) SetTags(s []string) {
	m.tags = &s
	m.appendtags = nil
}

// Tags returns the value of the "tags" field in the mutation.
func (m *GroupSettingMutation) Tags() (r []string, exists bool) {
	v := m.tags
	if v == nil {
		return
	}
	return *v, true
}

// OldTags returns the old "tags" field's value of the GroupSetting entity.
// If the GroupSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingMutation) OldTags(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTags: %w", err)
	}
	return oldValue.Tags, nil
}

// AppendTags adds s to the "tags" field.
func (m *GroupSettingMutation) AppendTags(s []string) {
	m.appendtags = append(m.appendtags, s...)
}

// AppendedTags returns the list of values that were appended to the "tags" field in this mutation.
func (m *GroupSettingMutation) AppendedTags() ([]string, bool) {
	if len(m.appendtags) == 0 {
		return nil, false
	}
	return m.appendtags, true
}

// ResetTags resets all changes to the "tags" field.
func (m *GroupSettingMutation) ResetTags() {
	m.tags = nil
	m.appendtags = nil
}

// SetSyncToSlack sets the "sync_to_slack" field.
func (m *GroupSettingMutation) SetSyncToSlack(b bool) {
	m.sync_to_slack = &b
}

// SyncToSlack returns the value of the "sync_to_slack" field in the mutation.
func (m *GroupSettingMutation) SyncToSlack() (r bool, exists bool) {
	v := m.sync_to_slack
	if v == nil {
		return
	}
	return *v, true
}

// OldSyncToSlack returns the old "sync_to_slack" field's value of the GroupSetting entity.
// If the GroupSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingMutation) OldSyncToSlack(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSyncToSlack is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSyncToSlack requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSyncToSlack: %w", err)
	}
	return oldValue.SyncToSlack, nil
}

// ResetSyncToSlack resets all changes to the "sync_to_slack" field.
func (m *GroupSettingMutation) ResetSyncToSlack() {
	m.sync_to_slack = nil
}

// SetSyncToGithub sets the "sync_to_github" field.
func (m *GroupSettingMutation) SetSyncToGithub(b bool) {
	m.sync_to_github = &b
}

// SyncToGithub returns the value of the "sync_to_github" field in the mutation.
func (m *GroupSettingMutation) SyncToGithub() (r bool, exists bool) {
	v := m.sync_to_github
	if v == nil {
		return
	}
	return *v, true
}

// OldSyncToGithub returns the old "sync_to_github" field's value of the GroupSetting entity.
// If the GroupSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *GroupSettingMutation) OldSyncToGithub(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSyncToGithub is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSyncToGithub requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSyncToGithub: %w", err)
	}
	return oldValue.SyncToGithub, nil
}

// ResetSyncToGithub resets all changes to the "sync_to_github" field.
func (m *GroupSettingMutation) ResetSyncToGithub() {
	m.sync_to_github = nil
}

// SetGroupID sets the "group" edge to the Group entity by id.
func (m *GroupSettingMutation) SetGroupID(id string) {
	m.group = &id
}

// ClearGroup clears the "group" edge to the Group entity.
func (m *GroupSettingMutation) ClearGroup() {
	m.clearedgroup = true
}

// GroupCleared reports if the "group" edge to the Group entity was cleared.
func (m *GroupSettingMutation) GroupCleared() bool {
	return m.clearedgroup
}

// GroupID returns the "group" edge ID in the mutation.
func (m *GroupSettingMutation) GroupID() (id string, exists bool) {
	if m.group != nil {
		return *m.group, true
	}
	return
}

// GroupIDs returns the "group" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// GroupID instead. It exists only for internal usage by the builders.
func (m *GroupSettingMutation) GroupIDs() (ids []string) {
	if id := m.group; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetGroup resets all changes to the "group" edge.
func (m *GroupSettingMutation) ResetGroup() {
	m.group = nil
	m.clearedgroup = false
}

// Where appends a list predicates to the GroupSettingMutation builder.
func (m *GroupSettingMutation) Where(ps ...predicate.GroupSetting) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the GroupSettingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *GroupSettingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.GroupSetting, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *GroupSettingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *GroupSettingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (GroupSetting).
func (m *GroupSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *GroupSettingMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, groupsetting.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, groupsetting.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, groupsetting.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, groupsetting.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, groupsetting.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, groupsetting.FieldDeletedBy)
	}
	if m.visibility != nil {
		fields = append(fields, groupsetting.FieldVisibility)
	}
	if m.join_policy != nil {
		fields = append(fields, groupsetting.FieldJoinPolicy)
	}
	if m.tags != nil {
		fields = append(fields, groupsetting.FieldTags)
	}
	if m.sync_to_slack != nil {
		fields = append(fields, groupsetting.FieldSyncToSlack)
	}
	if m.sync_to_github != nil {
		fields = append(fields, groupsetting.FieldSyncToGithub)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *GroupSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case groupsetting.FieldCreatedAt:
		return m.CreatedAt()
	case groupsetting.FieldUpdatedAt:
		return m.UpdatedAt()
	case groupsetting.FieldCreatedBy:
		return m.CreatedBy()
	case groupsetting.FieldUpdatedBy:
		return m.UpdatedBy()
	case groupsetting.FieldDeletedAt:
		return m.DeletedAt()
	case groupsetting.FieldDeletedBy:
		return m.DeletedBy()
	case groupsetting.FieldVisibility:
		return m.Visibility()
	case groupsetting.FieldJoinPolicy:
		return m.JoinPolicy()
	case groupsetting.FieldTags:
		return m.Tags()
	case groupsetting.FieldSyncToSlack:
		return m.SyncToSlack()
	case groupsetting.FieldSyncToGithub:
		return m.SyncToGithub()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *GroupSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case groupsetting.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case groupsetting.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case groupsetting.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case groupsetting.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case groupsetting.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case groupsetting.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case groupsetting.FieldVisibility:
		return m.OldVisibility(ctx)
	case groupsetting.FieldJoinPolicy:
		return m.OldJoinPolicy(ctx)
	case groupsetting.FieldTags:
		return m.OldTags(ctx)
	case groupsetting.FieldSyncToSlack:
		return m.OldSyncToSlack(ctx)
	case groupsetting.FieldSyncToGithub:
		return m.OldSyncToGithub(ctx)
	}
	return nil, fmt.Errorf("unknown GroupSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case groupsetting.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case groupsetting.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case groupsetting.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case groupsetting.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case groupsetting.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case groupsetting.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case groupsetting.FieldVisibility:
		v, ok := value.(enums.Visibility)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisibility(v)
		return nil
	case groupsetting.FieldJoinPolicy:
		v, ok := value.(enums.JoinPolicy)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetJoinPolicy(v)
		return nil
	case groupsetting.FieldTags:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTags(v)
		return nil
	case groupsetting.FieldSyncToSlack:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSyncToSlack(v)
		return nil
	case groupsetting.FieldSyncToGithub:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSyncToGithub(v)
		return nil
	}
	return fmt.Errorf("unknown GroupSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *GroupSettingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *GroupSettingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *GroupSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown GroupSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *GroupSettingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(groupsetting.FieldCreatedBy) {
		fields = append(fields, groupsetting.FieldCreatedBy)
	}
	if m.FieldCleared(groupsetting.FieldUpdatedBy) {
		fields = append(fields, groupsetting.FieldUpdatedBy)
	}
	if m.FieldCleared(groupsetting.FieldDeletedAt) {
		fields = append(fields, groupsetting.FieldDeletedAt)
	}
	if m.FieldCleared(groupsetting.FieldDeletedBy) {
		fields = append(fields, groupsetting.FieldDeletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *GroupSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *GroupSettingMutation) ClearField(name string) error {
	switch name {
	case groupsetting.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case groupsetting.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case groupsetting.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case groupsetting.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	}
	return fmt.Errorf("unknown GroupSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *GroupSettingMutation) ResetField(name string) error {
	switch name {
	case groupsetting.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case groupsetting.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case groupsetting.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case groupsetting.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case groupsetting.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case groupsetting.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case groupsetting.FieldVisibility:
		m.ResetVisibility()
		return nil
	case groupsetting.FieldJoinPolicy:
		m.ResetJoinPolicy()
		return nil
	case groupsetting.FieldTags:
		m.ResetTags()
		return nil
	case groupsetting.FieldSyncToSlack:
		m.ResetSyncToSlack()
		return nil
	case groupsetting.FieldSyncToGithub:
		m.ResetSyncToGithub()
		return nil
	}
	return fmt.Errorf("unknown GroupSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *GroupSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.group != nil {
		edges = append(edges, groupsetting.EdgeGroup)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *GroupSettingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case groupsetting.EdgeGroup:
		if id := m.group; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *GroupSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *GroupSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *GroupSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedgroup {
		edges = append(edges, groupsetting.EdgeGroup)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *GroupSettingMutation) EdgeCleared(name string) bool {
	switch name {
	case groupsetting.EdgeGroup:
		return m.clearedgroup
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *GroupSettingMutation) ClearEdge(name string) error {
	switch name {
	case groupsetting.EdgeGroup:
		m.ClearGroup()
		return nil
	}
	return fmt.Errorf("unknown GroupSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *GroupSettingMutation) ResetEdge(name string) error {
	switch name {
	case groupsetting.EdgeGroup:
		m.ResetGroup()
		return nil
	}
	return fmt.Errorf("unknown GroupSetting edge %s", name)
}

// IntegrationMutation represents an operation that mutates the Integration nodes in the graph.
type IntegrationMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created_at    *time.Time
	updated_at    *time.Time
	created_by    *string
	updated_by    *string
	deleted_at    *time.Time
	deleted_by    *string
	name          *string
	description   *string
	kind          *string
	secret_name   *string
	clearedFields map[string]struct{}
	owner         *string
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*Integration, error)
	predicates    []predicate.Integration
}

var _ ent.Mutation = (*IntegrationMutation)(nil)

// integrationOption allows management of the mutation configuration using functional options.
type integrationOption func(*IntegrationMutation)

// newIntegrationMutation creates new mutation for the Integration entity.
func newIntegrationMutation(c config, op Op, opts ...integrationOption) *IntegrationMutation {
	m := &IntegrationMutation{
		config:        c,
		op:            op,
		typ:           TypeIntegration,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIntegrationID sets the ID field of the mutation.
func withIntegrationID(id string) integrationOption {
	return func(m *IntegrationMutation) {
		var (
			err   error
			once  sync.Once
			value *Integration
		)
		m.oldValue = func(ctx context.Context) (*Integration, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Integration.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIntegration sets the old Integration of the mutation.
func withIntegration(node *Integration) integrationOption {
	return func(m *IntegrationMutation) {
		m.oldValue = func(context.Context) (*Integration, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IntegrationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IntegrationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Integration entities.
func (m *IntegrationMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IntegrationMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IntegrationMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Integration.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *IntegrationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *IntegrationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Integration entity.
// If the Integration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IntegrationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *IntegrationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *IntegrationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *IntegrationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Integration entity.
// If the Integration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IntegrationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *IntegrationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *IntegrationMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *IntegrationMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Integration entity.
// If the Integration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IntegrationMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *IntegrationMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[integration.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *IntegrationMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[integration.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *IntegrationMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, integration.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *IntegrationMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *IntegrationMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Integration entity.
// If the Integration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IntegrationMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *IntegrationMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[integration.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *IntegrationMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[integration.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *IntegrationMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, integration.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *IntegrationMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *IntegrationMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Integration entity.
// If the Integration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IntegrationMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *IntegrationMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[integration.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *IntegrationMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[integration.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *IntegrationMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, integration.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *IntegrationMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *IntegrationMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Integration entity.
// If the Integration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IntegrationMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *IntegrationMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[integration.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *IntegrationMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[integration.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *IntegrationMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, integration.FieldDeletedBy)
}

// SetName sets the "name" field.
func (m *IntegrationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *IntegrationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Integration entity.
// If the Integration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IntegrationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *IntegrationMutation) ResetName() {
	m.name = nil
}

// SetDescription sets the "description" field.
func (m *IntegrationMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *IntegrationMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Integration entity.
// If the Integration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IntegrationMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *IntegrationMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[integration.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *IntegrationMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[integration.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *IntegrationMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, integration.FieldDescription)
}

// SetKind sets the "kind" field.
func (m *IntegrationMutation) SetKind(s string) {
	m.kind = &s
}

// Kind returns the value of the "kind" field in the mutation.
func (m *IntegrationMutation) Kind() (r string, exists bool) {
	v := m.kind
	if v == nil {
		return
	}
	return *v, true
}

// OldKind returns the old "kind" field's value of the Integration entity.
// If the Integration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IntegrationMutation) OldKind(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldKind is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldKind requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldKind: %w", err)
	}
	return oldValue.Kind, nil
}

// ClearKind clears the value of the "kind" field.
func (m *IntegrationMutation) ClearKind() {
	m.kind = nil
	m.clearedFields[integration.FieldKind] = struct{}{}
}

// KindCleared returns if the "kind" field was cleared in this mutation.
func (m *IntegrationMutation) KindCleared() bool {
	_, ok := m.clearedFields[integration.FieldKind]
	return ok
}

// ResetKind resets all changes to the "kind" field.
func (m *IntegrationMutation) ResetKind() {
	m.kind = nil
	delete(m.clearedFields, integration.FieldKind)
}

// SetSecretName sets the "secret_name" field.
func (m *IntegrationMutation) SetSecretName(s string) {
	m.secret_name = &s
}

// SecretName returns the value of the "secret_name" field in the mutation.
func (m *IntegrationMutation) SecretName() (r string, exists bool) {
	v := m.secret_name
	if v == nil {
		return
	}
	return *v, true
}

// OldSecretName returns the old "secret_name" field's value of the Integration entity.
// If the Integration object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IntegrationMutation) OldSecretName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecretName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecretName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecretName: %w", err)
	}
	return oldValue.SecretName, nil
}

// ResetSecretName resets all changes to the "secret_name" field.
func (m *IntegrationMutation) ResetSecretName() {
	m.secret_name = nil
}

// SetOwnerID sets the "owner" edge to the Organization entity by id.
func (m *IntegrationMutation) SetOwnerID(id string) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (m *IntegrationMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the Organization entity was cleared.
func (m *IntegrationMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *IntegrationMutation) OwnerID() (id string, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *IntegrationMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *IntegrationMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the IntegrationMutation builder.
func (m *IntegrationMutation) Where(ps ...predicate.Integration) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the IntegrationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *IntegrationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Integration, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *IntegrationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *IntegrationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Integration).
func (m *IntegrationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IntegrationMutation) Fields() []string {
	fields := make([]string, 0, 10)
	if m.created_at != nil {
		fields = append(fields, integration.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, integration.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, integration.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, integration.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, integration.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, integration.FieldDeletedBy)
	}
	if m.name != nil {
		fields = append(fields, integration.FieldName)
	}
	if m.description != nil {
		fields = append(fields, integration.FieldDescription)
	}
	if m.kind != nil {
		fields = append(fields, integration.FieldKind)
	}
	if m.secret_name != nil {
		fields = append(fields, integration.FieldSecretName)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IntegrationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case integration.FieldCreatedAt:
		return m.CreatedAt()
	case integration.FieldUpdatedAt:
		return m.UpdatedAt()
	case integration.FieldCreatedBy:
		return m.CreatedBy()
	case integration.FieldUpdatedBy:
		return m.UpdatedBy()
	case integration.FieldDeletedAt:
		return m.DeletedAt()
	case integration.FieldDeletedBy:
		return m.DeletedBy()
	case integration.FieldName:
		return m.Name()
	case integration.FieldDescription:
		return m.Description()
	case integration.FieldKind:
		return m.Kind()
	case integration.FieldSecretName:
		return m.SecretName()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IntegrationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case integration.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case integration.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case integration.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case integration.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case integration.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case integration.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case integration.FieldName:
		return m.OldName(ctx)
	case integration.FieldDescription:
		return m.OldDescription(ctx)
	case integration.FieldKind:
		return m.OldKind(ctx)
	case integration.FieldSecretName:
		return m.OldSecretName(ctx)
	}
	return nil, fmt.Errorf("unknown Integration field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IntegrationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case integration.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case integration.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case integration.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case integration.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case integration.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case integration.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case integration.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case integration.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case integration.FieldKind:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetKind(v)
		return nil
	case integration.FieldSecretName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecretName(v)
		return nil
	}
	return fmt.Errorf("unknown Integration field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IntegrationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IntegrationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IntegrationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Integration numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IntegrationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(integration.FieldCreatedBy) {
		fields = append(fields, integration.FieldCreatedBy)
	}
	if m.FieldCleared(integration.FieldUpdatedBy) {
		fields = append(fields, integration.FieldUpdatedBy)
	}
	if m.FieldCleared(integration.FieldDeletedAt) {
		fields = append(fields, integration.FieldDeletedAt)
	}
	if m.FieldCleared(integration.FieldDeletedBy) {
		fields = append(fields, integration.FieldDeletedBy)
	}
	if m.FieldCleared(integration.FieldDescription) {
		fields = append(fields, integration.FieldDescription)
	}
	if m.FieldCleared(integration.FieldKind) {
		fields = append(fields, integration.FieldKind)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IntegrationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IntegrationMutation) ClearField(name string) error {
	switch name {
	case integration.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case integration.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case integration.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case integration.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case integration.FieldDescription:
		m.ClearDescription()
		return nil
	case integration.FieldKind:
		m.ClearKind()
		return nil
	}
	return fmt.Errorf("unknown Integration nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IntegrationMutation) ResetField(name string) error {
	switch name {
	case integration.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case integration.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case integration.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case integration.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case integration.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case integration.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case integration.FieldName:
		m.ResetName()
		return nil
	case integration.FieldDescription:
		m.ResetDescription()
		return nil
	case integration.FieldKind:
		m.ResetKind()
		return nil
	case integration.FieldSecretName:
		m.ResetSecretName()
		return nil
	}
	return fmt.Errorf("unknown Integration field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IntegrationMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, integration.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IntegrationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case integration.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IntegrationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IntegrationMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IntegrationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, integration.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IntegrationMutation) EdgeCleared(name string) bool {
	switch name {
	case integration.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IntegrationMutation) ClearEdge(name string) error {
	switch name {
	case integration.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Integration unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IntegrationMutation) ResetEdge(name string) error {
	switch name {
	case integration.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Integration edge %s", name)
}

// InviteMutation represents an operation that mutates the Invite nodes in the graph.
type InviteMutation struct {
	config
	op               Op
	typ              string
	id               *string
	created_at       *time.Time
	updated_at       *time.Time
	created_by       *string
	updated_by       *string
	deleted_at       *time.Time
	deleted_by       *string
	token            *string
	expires          *time.Time
	recipient        *string
	status           *enums.InviteStatus
	role             *enums.Role
	send_attempts    *int
	addsend_attempts *int
	requestor_id     *string
	secret           *[]byte
	clearedFields    map[string]struct{}
	owner            *string
	clearedowner     bool
	done             bool
	oldValue         func(context.Context) (*Invite, error)
	predicates       []predicate.Invite
}

var _ ent.Mutation = (*InviteMutation)(nil)

// inviteOption allows management of the mutation configuration using functional options.
type inviteOption func(*InviteMutation)

// newInviteMutation creates new mutation for the Invite entity.
func newInviteMutation(c config, op Op, opts ...inviteOption) *InviteMutation {
	m := &InviteMutation{
		config:        c,
		op:            op,
		typ:           TypeInvite,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withInviteID sets the ID field of the mutation.
func withInviteID(id string) inviteOption {
	return func(m *InviteMutation) {
		var (
			err   error
			once  sync.Once
			value *Invite
		)
		m.oldValue = func(ctx context.Context) (*Invite, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Invite.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withInvite sets the old Invite of the mutation.
func withInvite(node *Invite) inviteOption {
	return func(m *InviteMutation) {
		m.oldValue = func(context.Context) (*Invite, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m InviteMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m InviteMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Invite entities.
func (m *InviteMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *InviteMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *InviteMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Invite.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *InviteMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *InviteMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *InviteMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *InviteMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *InviteMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *InviteMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *InviteMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *InviteMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *InviteMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[invite.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *InviteMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[invite.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *InviteMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, invite.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *InviteMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *InviteMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *InviteMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[invite.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *InviteMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[invite.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *InviteMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, invite.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *InviteMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *InviteMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *InviteMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[invite.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *InviteMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[invite.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *InviteMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, invite.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *InviteMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *InviteMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *InviteMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[invite.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *InviteMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[invite.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *InviteMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, invite.FieldDeletedBy)
}

// SetOwnerID sets the "owner_id" field.
func (m *InviteMutation) SetOwnerID(s string) {
	m.owner = &s
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *InviteMutation) OwnerID() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldOwnerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *InviteMutation) ResetOwnerID() {
	m.owner = nil
}

// SetToken sets the "token" field.
func (m *InviteMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *InviteMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *InviteMutation) ResetToken() {
	m.token = nil
}

// SetExpires sets the "expires" field.
func (m *InviteMutation) SetExpires(t time.Time) {
	m.expires = &t
}

// Expires returns the value of the "expires" field in the mutation.
func (m *InviteMutation) Expires() (r time.Time, exists bool) {
	v := m.expires
	if v == nil {
		return
	}
	return *v, true
}

// OldExpires returns the old "expires" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldExpires(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpires is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpires requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpires: %w", err)
	}
	return oldValue.Expires, nil
}

// ResetExpires resets all changes to the "expires" field.
func (m *InviteMutation) ResetExpires() {
	m.expires = nil
}

// SetRecipient sets the "recipient" field.
func (m *InviteMutation) SetRecipient(s string) {
	m.recipient = &s
}

// Recipient returns the value of the "recipient" field in the mutation.
func (m *InviteMutation) Recipient() (r string, exists bool) {
	v := m.recipient
	if v == nil {
		return
	}
	return *v, true
}

// OldRecipient returns the old "recipient" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldRecipient(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecipient is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecipient requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecipient: %w", err)
	}
	return oldValue.Recipient, nil
}

// ResetRecipient resets all changes to the "recipient" field.
func (m *InviteMutation) ResetRecipient() {
	m.recipient = nil
}

// SetStatus sets the "status" field.
func (m *InviteMutation) SetStatus(es enums.InviteStatus) {
	m.status = &es
}

// Status returns the value of the "status" field in the mutation.
func (m *InviteMutation) Status() (r enums.InviteStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldStatus(ctx context.Context) (v enums.InviteStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *InviteMutation) ResetStatus() {
	m.status = nil
}

// SetRole sets the "role" field.
func (m *InviteMutation) SetRole(e enums.Role) {
	m.role = &e
}

// Role returns the value of the "role" field in the mutation.
func (m *InviteMutation) Role() (r enums.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldRole(ctx context.Context) (v enums.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *InviteMutation) ResetRole() {
	m.role = nil
}

// SetSendAttempts sets the "send_attempts" field.
func (m *InviteMutation) SetSendAttempts(i int) {
	m.send_attempts = &i
	m.addsend_attempts = nil
}

// SendAttempts returns the value of the "send_attempts" field in the mutation.
func (m *InviteMutation) SendAttempts() (r int, exists bool) {
	v := m.send_attempts
	if v == nil {
		return
	}
	return *v, true
}

// OldSendAttempts returns the old "send_attempts" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldSendAttempts(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSendAttempts is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSendAttempts requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSendAttempts: %w", err)
	}
	return oldValue.SendAttempts, nil
}

// AddSendAttempts adds i to the "send_attempts" field.
func (m *InviteMutation) AddSendAttempts(i int) {
	if m.addsend_attempts != nil {
		*m.addsend_attempts += i
	} else {
		m.addsend_attempts = &i
	}
}

// AddedSendAttempts returns the value that was added to the "send_attempts" field in this mutation.
func (m *InviteMutation) AddedSendAttempts() (r int, exists bool) {
	v := m.addsend_attempts
	if v == nil {
		return
	}
	return *v, true
}

// ResetSendAttempts resets all changes to the "send_attempts" field.
func (m *InviteMutation) ResetSendAttempts() {
	m.send_attempts = nil
	m.addsend_attempts = nil
}

// SetRequestorID sets the "requestor_id" field.
func (m *InviteMutation) SetRequestorID(s string) {
	m.requestor_id = &s
}

// RequestorID returns the value of the "requestor_id" field in the mutation.
func (m *InviteMutation) RequestorID() (r string, exists bool) {
	v := m.requestor_id
	if v == nil {
		return
	}
	return *v, true
}

// OldRequestorID returns the old "requestor_id" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldRequestorID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRequestorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRequestorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRequestorID: %w", err)
	}
	return oldValue.RequestorID, nil
}

// ResetRequestorID resets all changes to the "requestor_id" field.
func (m *InviteMutation) ResetRequestorID() {
	m.requestor_id = nil
}

// SetSecret sets the "secret" field.
func (m *InviteMutation) SetSecret(b []byte) {
	m.secret = &b
}

// Secret returns the value of the "secret" field in the mutation.
func (m *InviteMutation) Secret() (r []byte, exists bool) {
	v := m.secret
	if v == nil {
		return
	}
	return *v, true
}

// OldSecret returns the old "secret" field's value of the Invite entity.
// If the Invite object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *InviteMutation) OldSecret(ctx context.Context) (v *[]byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecret: %w", err)
	}
	return oldValue.Secret, nil
}

// ResetSecret resets all changes to the "secret" field.
func (m *InviteMutation) ResetSecret() {
	m.secret = nil
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (m *InviteMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[invite.FieldOwnerID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the Organization entity was cleared.
func (m *InviteMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *InviteMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *InviteMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the InviteMutation builder.
func (m *InviteMutation) Where(ps ...predicate.Invite) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the InviteMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *InviteMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Invite, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *InviteMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *InviteMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Invite).
func (m *InviteMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *InviteMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, invite.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, invite.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, invite.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, invite.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, invite.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, invite.FieldDeletedBy)
	}
	if m.owner != nil {
		fields = append(fields, invite.FieldOwnerID)
	}
	if m.token != nil {
		fields = append(fields, invite.FieldToken)
	}
	if m.expires != nil {
		fields = append(fields, invite.FieldExpires)
	}
	if m.recipient != nil {
		fields = append(fields, invite.FieldRecipient)
	}
	if m.status != nil {
		fields = append(fields, invite.FieldStatus)
	}
	if m.role != nil {
		fields = append(fields, invite.FieldRole)
	}
	if m.send_attempts != nil {
		fields = append(fields, invite.FieldSendAttempts)
	}
	if m.requestor_id != nil {
		fields = append(fields, invite.FieldRequestorID)
	}
	if m.secret != nil {
		fields = append(fields, invite.FieldSecret)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *InviteMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case invite.FieldCreatedAt:
		return m.CreatedAt()
	case invite.FieldUpdatedAt:
		return m.UpdatedAt()
	case invite.FieldCreatedBy:
		return m.CreatedBy()
	case invite.FieldUpdatedBy:
		return m.UpdatedBy()
	case invite.FieldDeletedAt:
		return m.DeletedAt()
	case invite.FieldDeletedBy:
		return m.DeletedBy()
	case invite.FieldOwnerID:
		return m.OwnerID()
	case invite.FieldToken:
		return m.Token()
	case invite.FieldExpires:
		return m.Expires()
	case invite.FieldRecipient:
		return m.Recipient()
	case invite.FieldStatus:
		return m.Status()
	case invite.FieldRole:
		return m.Role()
	case invite.FieldSendAttempts:
		return m.SendAttempts()
	case invite.FieldRequestorID:
		return m.RequestorID()
	case invite.FieldSecret:
		return m.Secret()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *InviteMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case invite.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case invite.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case invite.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case invite.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case invite.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case invite.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case invite.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case invite.FieldToken:
		return m.OldToken(ctx)
	case invite.FieldExpires:
		return m.OldExpires(ctx)
	case invite.FieldRecipient:
		return m.OldRecipient(ctx)
	case invite.FieldStatus:
		return m.OldStatus(ctx)
	case invite.FieldRole:
		return m.OldRole(ctx)
	case invite.FieldSendAttempts:
		return m.OldSendAttempts(ctx)
	case invite.FieldRequestorID:
		return m.OldRequestorID(ctx)
	case invite.FieldSecret:
		return m.OldSecret(ctx)
	}
	return nil, fmt.Errorf("unknown Invite field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InviteMutation) SetField(name string, value ent.Value) error {
	switch name {
	case invite.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case invite.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case invite.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case invite.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case invite.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case invite.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case invite.FieldOwnerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case invite.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case invite.FieldExpires:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpires(v)
		return nil
	case invite.FieldRecipient:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecipient(v)
		return nil
	case invite.FieldStatus:
		v, ok := value.(enums.InviteStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case invite.FieldRole:
		v, ok := value.(enums.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case invite.FieldSendAttempts:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSendAttempts(v)
		return nil
	case invite.FieldRequestorID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRequestorID(v)
		return nil
	case invite.FieldSecret:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecret(v)
		return nil
	}
	return fmt.Errorf("unknown Invite field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *InviteMutation) AddedFields() []string {
	var fields []string
	if m.addsend_attempts != nil {
		fields = append(fields, invite.FieldSendAttempts)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *InviteMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case invite.FieldSendAttempts:
		return m.AddedSendAttempts()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *InviteMutation) AddField(name string, value ent.Value) error {
	switch name {
	case invite.FieldSendAttempts:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSendAttempts(v)
		return nil
	}
	return fmt.Errorf("unknown Invite numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *InviteMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(invite.FieldCreatedBy) {
		fields = append(fields, invite.FieldCreatedBy)
	}
	if m.FieldCleared(invite.FieldUpdatedBy) {
		fields = append(fields, invite.FieldUpdatedBy)
	}
	if m.FieldCleared(invite.FieldDeletedAt) {
		fields = append(fields, invite.FieldDeletedAt)
	}
	if m.FieldCleared(invite.FieldDeletedBy) {
		fields = append(fields, invite.FieldDeletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *InviteMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *InviteMutation) ClearField(name string) error {
	switch name {
	case invite.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case invite.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case invite.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case invite.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	}
	return fmt.Errorf("unknown Invite nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *InviteMutation) ResetField(name string) error {
	switch name {
	case invite.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case invite.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case invite.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case invite.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case invite.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case invite.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case invite.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case invite.FieldToken:
		m.ResetToken()
		return nil
	case invite.FieldExpires:
		m.ResetExpires()
		return nil
	case invite.FieldRecipient:
		m.ResetRecipient()
		return nil
	case invite.FieldStatus:
		m.ResetStatus()
		return nil
	case invite.FieldRole:
		m.ResetRole()
		return nil
	case invite.FieldSendAttempts:
		m.ResetSendAttempts()
		return nil
	case invite.FieldRequestorID:
		m.ResetRequestorID()
		return nil
	case invite.FieldSecret:
		m.ResetSecret()
		return nil
	}
	return fmt.Errorf("unknown Invite field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *InviteMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, invite.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *InviteMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case invite.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *InviteMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *InviteMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *InviteMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, invite.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *InviteMutation) EdgeCleared(name string) bool {
	switch name {
	case invite.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *InviteMutation) ClearEdge(name string) error {
	switch name {
	case invite.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Invite unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *InviteMutation) ResetEdge(name string) error {
	switch name {
	case invite.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Invite edge %s", name)
}

// OauthProviderMutation represents an operation that mutates the OauthProvider nodes in the graph.
type OauthProviderMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created_at    *time.Time
	updated_at    *time.Time
	created_by    *string
	updated_by    *string
	deleted_at    *time.Time
	deleted_by    *string
	name          *string
	client_id     *string
	client_secret *string
	redirect_url  *string
	scopes        *string
	auth_url      *string
	token_url     *string
	auth_style    *uint8
	addauth_style *int8
	info_url      *string
	clearedFields map[string]struct{}
	owner         *string
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*OauthProvider, error)
	predicates    []predicate.OauthProvider
}

var _ ent.Mutation = (*OauthProviderMutation)(nil)

// oauthproviderOption allows management of the mutation configuration using functional options.
type oauthproviderOption func(*OauthProviderMutation)

// newOauthProviderMutation creates new mutation for the OauthProvider entity.
func newOauthProviderMutation(c config, op Op, opts ...oauthproviderOption) *OauthProviderMutation {
	m := &OauthProviderMutation{
		config:        c,
		op:            op,
		typ:           TypeOauthProvider,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOauthProviderID sets the ID field of the mutation.
func withOauthProviderID(id string) oauthproviderOption {
	return func(m *OauthProviderMutation) {
		var (
			err   error
			once  sync.Once
			value *OauthProvider
		)
		m.oldValue = func(ctx context.Context) (*OauthProvider, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OauthProvider.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOauthProvider sets the old OauthProvider of the mutation.
func withOauthProvider(node *OauthProvider) oauthproviderOption {
	return func(m *OauthProviderMutation) {
		m.oldValue = func(context.Context) (*OauthProvider, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OauthProviderMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OauthProviderMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OauthProvider entities.
func (m *OauthProviderMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OauthProviderMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OauthProviderMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OauthProvider.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OauthProviderMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OauthProviderMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OauthProviderMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OauthProviderMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OauthProviderMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OauthProviderMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *OauthProviderMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *OauthProviderMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *OauthProviderMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[oauthprovider.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *OauthProviderMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[oauthprovider.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *OauthProviderMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, oauthprovider.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *OauthProviderMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *OauthProviderMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *OauthProviderMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[oauthprovider.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *OauthProviderMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[oauthprovider.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *OauthProviderMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, oauthprovider.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OauthProviderMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OauthProviderMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *OauthProviderMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[oauthprovider.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *OauthProviderMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[oauthprovider.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OauthProviderMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, oauthprovider.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *OauthProviderMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *OauthProviderMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *OauthProviderMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[oauthprovider.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *OauthProviderMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[oauthprovider.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *OauthProviderMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, oauthprovider.FieldDeletedBy)
}

// SetName sets the "name" field.
func (m *OauthProviderMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OauthProviderMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OauthProviderMutation) ResetName() {
	m.name = nil
}

// SetClientID sets the "client_id" field.
func (m *OauthProviderMutation) SetClientID(s string) {
	m.client_id = &s
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *OauthProviderMutation) ClientID() (r string, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldClientID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// ResetClientID resets all changes to the "client_id" field.
func (m *OauthProviderMutation) ResetClientID() {
	m.client_id = nil
}

// SetClientSecret sets the "client_secret" field.
func (m *OauthProviderMutation) SetClientSecret(s string) {
	m.client_secret = &s
}

// ClientSecret returns the value of the "client_secret" field in the mutation.
func (m *OauthProviderMutation) ClientSecret() (r string, exists bool) {
	v := m.client_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldClientSecret returns the old "client_secret" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldClientSecret(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientSecret: %w", err)
	}
	return oldValue.ClientSecret, nil
}

// ResetClientSecret resets all changes to the "client_secret" field.
func (m *OauthProviderMutation) ResetClientSecret() {
	m.client_secret = nil
}

// SetRedirectURL sets the "redirect_url" field.
func (m *OauthProviderMutation) SetRedirectURL(s string) {
	m.redirect_url = &s
}

// RedirectURL returns the value of the "redirect_url" field in the mutation.
func (m *OauthProviderMutation) RedirectURL() (r string, exists bool) {
	v := m.redirect_url
	if v == nil {
		return
	}
	return *v, true
}

// OldRedirectURL returns the old "redirect_url" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldRedirectURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRedirectURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRedirectURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRedirectURL: %w", err)
	}
	return oldValue.RedirectURL, nil
}

// ResetRedirectURL resets all changes to the "redirect_url" field.
func (m *OauthProviderMutation) ResetRedirectURL() {
	m.redirect_url = nil
}

// SetScopes sets the "scopes" field.
func (m *OauthProviderMutation) SetScopes(s string) {
	m.scopes = &s
}

// Scopes returns the value of the "scopes" field in the mutation.
func (m *OauthProviderMutation) Scopes() (r string, exists bool) {
	v := m.scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldScopes returns the old "scopes" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldScopes(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScopes: %w", err)
	}
	return oldValue.Scopes, nil
}

// ResetScopes resets all changes to the "scopes" field.
func (m *OauthProviderMutation) ResetScopes() {
	m.scopes = nil
}

// SetAuthURL sets the "auth_url" field.
func (m *OauthProviderMutation) SetAuthURL(s string) {
	m.auth_url = &s
}

// AuthURL returns the value of the "auth_url" field in the mutation.
func (m *OauthProviderMutation) AuthURL() (r string, exists bool) {
	v := m.auth_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthURL returns the old "auth_url" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldAuthURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthURL: %w", err)
	}
	return oldValue.AuthURL, nil
}

// ResetAuthURL resets all changes to the "auth_url" field.
func (m *OauthProviderMutation) ResetAuthURL() {
	m.auth_url = nil
}

// SetTokenURL sets the "token_url" field.
func (m *OauthProviderMutation) SetTokenURL(s string) {
	m.token_url = &s
}

// TokenURL returns the value of the "token_url" field in the mutation.
func (m *OauthProviderMutation) TokenURL() (r string, exists bool) {
	v := m.token_url
	if v == nil {
		return
	}
	return *v, true
}

// OldTokenURL returns the old "token_url" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldTokenURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTokenURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTokenURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTokenURL: %w", err)
	}
	return oldValue.TokenURL, nil
}

// ResetTokenURL resets all changes to the "token_url" field.
func (m *OauthProviderMutation) ResetTokenURL() {
	m.token_url = nil
}

// SetAuthStyle sets the "auth_style" field.
func (m *OauthProviderMutation) SetAuthStyle(u uint8) {
	m.auth_style = &u
	m.addauth_style = nil
}

// AuthStyle returns the value of the "auth_style" field in the mutation.
func (m *OauthProviderMutation) AuthStyle() (r uint8, exists bool) {
	v := m.auth_style
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthStyle returns the old "auth_style" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldAuthStyle(ctx context.Context) (v uint8, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthStyle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthStyle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthStyle: %w", err)
	}
	return oldValue.AuthStyle, nil
}

// AddAuthStyle adds u to the "auth_style" field.
func (m *OauthProviderMutation) AddAuthStyle(u int8) {
	if m.addauth_style != nil {
		*m.addauth_style += u
	} else {
		m.addauth_style = &u
	}
}

// AddedAuthStyle returns the value that was added to the "auth_style" field in this mutation.
func (m *OauthProviderMutation) AddedAuthStyle() (r int8, exists bool) {
	v := m.addauth_style
	if v == nil {
		return
	}
	return *v, true
}

// ResetAuthStyle resets all changes to the "auth_style" field.
func (m *OauthProviderMutation) ResetAuthStyle() {
	m.auth_style = nil
	m.addauth_style = nil
}

// SetInfoURL sets the "info_url" field.
func (m *OauthProviderMutation) SetInfoURL(s string) {
	m.info_url = &s
}

// InfoURL returns the value of the "info_url" field in the mutation.
func (m *OauthProviderMutation) InfoURL() (r string, exists bool) {
	v := m.info_url
	if v == nil {
		return
	}
	return *v, true
}

// OldInfoURL returns the old "info_url" field's value of the OauthProvider entity.
// If the OauthProvider object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OauthProviderMutation) OldInfoURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInfoURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInfoURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInfoURL: %w", err)
	}
	return oldValue.InfoURL, nil
}

// ResetInfoURL resets all changes to the "info_url" field.
func (m *OauthProviderMutation) ResetInfoURL() {
	m.info_url = nil
}

// SetOwnerID sets the "owner" edge to the Organization entity by id.
func (m *OauthProviderMutation) SetOwnerID(id string) {
	m.owner = &id
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (m *OauthProviderMutation) ClearOwner() {
	m.clearedowner = true
}

// OwnerCleared reports if the "owner" edge to the Organization entity was cleared.
func (m *OauthProviderMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerID returns the "owner" edge ID in the mutation.
func (m *OauthProviderMutation) OwnerID() (id string, exists bool) {
	if m.owner != nil {
		return *m.owner, true
	}
	return
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *OauthProviderMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *OauthProviderMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the OauthProviderMutation builder.
func (m *OauthProviderMutation) Where(ps ...predicate.OauthProvider) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OauthProviderMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OauthProviderMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OauthProvider, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OauthProviderMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OauthProviderMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OauthProvider).
func (m *OauthProviderMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OauthProviderMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.created_at != nil {
		fields = append(fields, oauthprovider.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, oauthprovider.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, oauthprovider.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, oauthprovider.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, oauthprovider.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, oauthprovider.FieldDeletedBy)
	}
	if m.name != nil {
		fields = append(fields, oauthprovider.FieldName)
	}
	if m.client_id != nil {
		fields = append(fields, oauthprovider.FieldClientID)
	}
	if m.client_secret != nil {
		fields = append(fields, oauthprovider.FieldClientSecret)
	}
	if m.redirect_url != nil {
		fields = append(fields, oauthprovider.FieldRedirectURL)
	}
	if m.scopes != nil {
		fields = append(fields, oauthprovider.FieldScopes)
	}
	if m.auth_url != nil {
		fields = append(fields, oauthprovider.FieldAuthURL)
	}
	if m.token_url != nil {
		fields = append(fields, oauthprovider.FieldTokenURL)
	}
	if m.auth_style != nil {
		fields = append(fields, oauthprovider.FieldAuthStyle)
	}
	if m.info_url != nil {
		fields = append(fields, oauthprovider.FieldInfoURL)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OauthProviderMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case oauthprovider.FieldCreatedAt:
		return m.CreatedAt()
	case oauthprovider.FieldUpdatedAt:
		return m.UpdatedAt()
	case oauthprovider.FieldCreatedBy:
		return m.CreatedBy()
	case oauthprovider.FieldUpdatedBy:
		return m.UpdatedBy()
	case oauthprovider.FieldDeletedAt:
		return m.DeletedAt()
	case oauthprovider.FieldDeletedBy:
		return m.DeletedBy()
	case oauthprovider.FieldName:
		return m.Name()
	case oauthprovider.FieldClientID:
		return m.ClientID()
	case oauthprovider.FieldClientSecret:
		return m.ClientSecret()
	case oauthprovider.FieldRedirectURL:
		return m.RedirectURL()
	case oauthprovider.FieldScopes:
		return m.Scopes()
	case oauthprovider.FieldAuthURL:
		return m.AuthURL()
	case oauthprovider.FieldTokenURL:
		return m.TokenURL()
	case oauthprovider.FieldAuthStyle:
		return m.AuthStyle()
	case oauthprovider.FieldInfoURL:
		return m.InfoURL()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OauthProviderMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case oauthprovider.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case oauthprovider.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case oauthprovider.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case oauthprovider.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case oauthprovider.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case oauthprovider.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case oauthprovider.FieldName:
		return m.OldName(ctx)
	case oauthprovider.FieldClientID:
		return m.OldClientID(ctx)
	case oauthprovider.FieldClientSecret:
		return m.OldClientSecret(ctx)
	case oauthprovider.FieldRedirectURL:
		return m.OldRedirectURL(ctx)
	case oauthprovider.FieldScopes:
		return m.OldScopes(ctx)
	case oauthprovider.FieldAuthURL:
		return m.OldAuthURL(ctx)
	case oauthprovider.FieldTokenURL:
		return m.OldTokenURL(ctx)
	case oauthprovider.FieldAuthStyle:
		return m.OldAuthStyle(ctx)
	case oauthprovider.FieldInfoURL:
		return m.OldInfoURL(ctx)
	}
	return nil, fmt.Errorf("unknown OauthProvider field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OauthProviderMutation) SetField(name string, value ent.Value) error {
	switch name {
	case oauthprovider.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case oauthprovider.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case oauthprovider.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case oauthprovider.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case oauthprovider.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case oauthprovider.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case oauthprovider.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case oauthprovider.FieldClientID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case oauthprovider.FieldClientSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientSecret(v)
		return nil
	case oauthprovider.FieldRedirectURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRedirectURL(v)
		return nil
	case oauthprovider.FieldScopes:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScopes(v)
		return nil
	case oauthprovider.FieldAuthURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthURL(v)
		return nil
	case oauthprovider.FieldTokenURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTokenURL(v)
		return nil
	case oauthprovider.FieldAuthStyle:
		v, ok := value.(uint8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthStyle(v)
		return nil
	case oauthprovider.FieldInfoURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInfoURL(v)
		return nil
	}
	return fmt.Errorf("unknown OauthProvider field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OauthProviderMutation) AddedFields() []string {
	var fields []string
	if m.addauth_style != nil {
		fields = append(fields, oauthprovider.FieldAuthStyle)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OauthProviderMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case oauthprovider.FieldAuthStyle:
		return m.AddedAuthStyle()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OauthProviderMutation) AddField(name string, value ent.Value) error {
	switch name {
	case oauthprovider.FieldAuthStyle:
		v, ok := value.(int8)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddAuthStyle(v)
		return nil
	}
	return fmt.Errorf("unknown OauthProvider numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OauthProviderMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(oauthprovider.FieldCreatedBy) {
		fields = append(fields, oauthprovider.FieldCreatedBy)
	}
	if m.FieldCleared(oauthprovider.FieldUpdatedBy) {
		fields = append(fields, oauthprovider.FieldUpdatedBy)
	}
	if m.FieldCleared(oauthprovider.FieldDeletedAt) {
		fields = append(fields, oauthprovider.FieldDeletedAt)
	}
	if m.FieldCleared(oauthprovider.FieldDeletedBy) {
		fields = append(fields, oauthprovider.FieldDeletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OauthProviderMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OauthProviderMutation) ClearField(name string) error {
	switch name {
	case oauthprovider.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case oauthprovider.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case oauthprovider.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case oauthprovider.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	}
	return fmt.Errorf("unknown OauthProvider nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OauthProviderMutation) ResetField(name string) error {
	switch name {
	case oauthprovider.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case oauthprovider.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case oauthprovider.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case oauthprovider.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case oauthprovider.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case oauthprovider.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case oauthprovider.FieldName:
		m.ResetName()
		return nil
	case oauthprovider.FieldClientID:
		m.ResetClientID()
		return nil
	case oauthprovider.FieldClientSecret:
		m.ResetClientSecret()
		return nil
	case oauthprovider.FieldRedirectURL:
		m.ResetRedirectURL()
		return nil
	case oauthprovider.FieldScopes:
		m.ResetScopes()
		return nil
	case oauthprovider.FieldAuthURL:
		m.ResetAuthURL()
		return nil
	case oauthprovider.FieldTokenURL:
		m.ResetTokenURL()
		return nil
	case oauthprovider.FieldAuthStyle:
		m.ResetAuthStyle()
		return nil
	case oauthprovider.FieldInfoURL:
		m.ResetInfoURL()
		return nil
	}
	return fmt.Errorf("unknown OauthProvider field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OauthProviderMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, oauthprovider.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OauthProviderMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case oauthprovider.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OauthProviderMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OauthProviderMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OauthProviderMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, oauthprovider.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OauthProviderMutation) EdgeCleared(name string) bool {
	switch name {
	case oauthprovider.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OauthProviderMutation) ClearEdge(name string) error {
	switch name {
	case oauthprovider.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown OauthProvider unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OauthProviderMutation) ResetEdge(name string) error {
	switch name {
	case oauthprovider.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown OauthProvider edge %s", name)
}

// OhAuthTooTokenMutation represents an operation that mutates the OhAuthTooToken nodes in the graph.
type OhAuthTooTokenMutation struct {
	config
	op                        Op
	typ                       string
	id                        *string
	client_id                 *string
	scopes                    *[]string
	appendscopes              []string
	nonce                     *string
	claims_user_id            *string
	claims_username           *string
	claims_email              *string
	claims_email_verified     *bool
	claims_groups             *[]string
	appendclaims_groups       []string
	claims_preferred_username *string
	connector_id              *string
	connector_data            *[]string
	appendconnector_data      []string
	last_used                 *time.Time
	clearedFields             map[string]struct{}
	done                      bool
	oldValue                  func(context.Context) (*OhAuthTooToken, error)
	predicates                []predicate.OhAuthTooToken
}

var _ ent.Mutation = (*OhAuthTooTokenMutation)(nil)

// ohauthtootokenOption allows management of the mutation configuration using functional options.
type ohauthtootokenOption func(*OhAuthTooTokenMutation)

// newOhAuthTooTokenMutation creates new mutation for the OhAuthTooToken entity.
func newOhAuthTooTokenMutation(c config, op Op, opts ...ohauthtootokenOption) *OhAuthTooTokenMutation {
	m := &OhAuthTooTokenMutation{
		config:        c,
		op:            op,
		typ:           TypeOhAuthTooToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOhAuthTooTokenID sets the ID field of the mutation.
func withOhAuthTooTokenID(id string) ohauthtootokenOption {
	return func(m *OhAuthTooTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *OhAuthTooToken
		)
		m.oldValue = func(ctx context.Context) (*OhAuthTooToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OhAuthTooToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOhAuthTooToken sets the old OhAuthTooToken of the mutation.
func withOhAuthTooToken(node *OhAuthTooToken) ohauthtootokenOption {
	return func(m *OhAuthTooTokenMutation) {
		m.oldValue = func(context.Context) (*OhAuthTooToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OhAuthTooTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OhAuthTooTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OhAuthTooToken entities.
func (m *OhAuthTooTokenMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OhAuthTooTokenMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OhAuthTooTokenMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OhAuthTooToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetClientID sets the "client_id" field.
func (m *OhAuthTooTokenMutation) SetClientID(s string) {
	m.client_id = &s
}

// ClientID returns the value of the "client_id" field in the mutation.
func (m *OhAuthTooTokenMutation) ClientID() (r string, exists bool) {
	v := m.client_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClientID returns the old "client_id" field's value of the OhAuthTooToken entity.
// If the OhAuthTooToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OhAuthTooTokenMutation) OldClientID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClientID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClientID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClientID: %w", err)
	}
	return oldValue.ClientID, nil
}

// ResetClientID resets all changes to the "client_id" field.
func (m *OhAuthTooTokenMutation) ResetClientID() {
	m.client_id = nil
}

// SetScopes sets the "scopes" field.
func (m *OhAuthTooTokenMutation) SetScopes(s []string) {
	m.scopes = &s
	m.appendscopes = nil
}

// Scopes returns the value of the "scopes" field in the mutation.
func (m *OhAuthTooTokenMutation) Scopes() (r []string, exists bool) {
	v := m.scopes
	if v == nil {
		return
	}
	return *v, true
}

// OldScopes returns the old "scopes" field's value of the OhAuthTooToken entity.
// If the OhAuthTooToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OhAuthTooTokenMutation) OldScopes(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldScopes is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldScopes requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldScopes: %w", err)
	}
	return oldValue.Scopes, nil
}

// AppendScopes adds s to the "scopes" field.
func (m *OhAuthTooTokenMutation) AppendScopes(s []string) {
	m.appendscopes = append(m.appendscopes, s...)
}

// AppendedScopes returns the list of values that were appended to the "scopes" field in this mutation.
func (m *OhAuthTooTokenMutation) AppendedScopes() ([]string, bool) {
	if len(m.appendscopes) == 0 {
		return nil, false
	}
	return m.appendscopes, true
}

// ClearScopes clears the value of the "scopes" field.
func (m *OhAuthTooTokenMutation) ClearScopes() {
	m.scopes = nil
	m.appendscopes = nil
	m.clearedFields[ohauthtootoken.FieldScopes] = struct{}{}
}

// ScopesCleared returns if the "scopes" field was cleared in this mutation.
func (m *OhAuthTooTokenMutation) ScopesCleared() bool {
	_, ok := m.clearedFields[ohauthtootoken.FieldScopes]
	return ok
}

// ResetScopes resets all changes to the "scopes" field.
func (m *OhAuthTooTokenMutation) ResetScopes() {
	m.scopes = nil
	m.appendscopes = nil
	delete(m.clearedFields, ohauthtootoken.FieldScopes)
}

// SetNonce sets the "nonce" field.
func (m *OhAuthTooTokenMutation) SetNonce(s string) {
	m.nonce = &s
}

// Nonce returns the value of the "nonce" field in the mutation.
func (m *OhAuthTooTokenMutation) Nonce() (r string, exists bool) {
	v := m.nonce
	if v == nil {
		return
	}
	return *v, true
}

// OldNonce returns the old "nonce" field's value of the OhAuthTooToken entity.
// If the OhAuthTooToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OhAuthTooTokenMutation) OldNonce(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNonce is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNonce requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNonce: %w", err)
	}
	return oldValue.Nonce, nil
}

// ResetNonce resets all changes to the "nonce" field.
func (m *OhAuthTooTokenMutation) ResetNonce() {
	m.nonce = nil
}

// SetClaimsUserID sets the "claims_user_id" field.
func (m *OhAuthTooTokenMutation) SetClaimsUserID(s string) {
	m.claims_user_id = &s
}

// ClaimsUserID returns the value of the "claims_user_id" field in the mutation.
func (m *OhAuthTooTokenMutation) ClaimsUserID() (r string, exists bool) {
	v := m.claims_user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldClaimsUserID returns the old "claims_user_id" field's value of the OhAuthTooToken entity.
// If the OhAuthTooToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OhAuthTooTokenMutation) OldClaimsUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClaimsUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClaimsUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClaimsUserID: %w", err)
	}
	return oldValue.ClaimsUserID, nil
}

// ResetClaimsUserID resets all changes to the "claims_user_id" field.
func (m *OhAuthTooTokenMutation) ResetClaimsUserID() {
	m.claims_user_id = nil
}

// SetClaimsUsername sets the "claims_username" field.
func (m *OhAuthTooTokenMutation) SetClaimsUsername(s string) {
	m.claims_username = &s
}

// ClaimsUsername returns the value of the "claims_username" field in the mutation.
func (m *OhAuthTooTokenMutation) ClaimsUsername() (r string, exists bool) {
	v := m.claims_username
	if v == nil {
		return
	}
	return *v, true
}

// OldClaimsUsername returns the old "claims_username" field's value of the OhAuthTooToken entity.
// If the OhAuthTooToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OhAuthTooTokenMutation) OldClaimsUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClaimsUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClaimsUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClaimsUsername: %w", err)
	}
	return oldValue.ClaimsUsername, nil
}

// ResetClaimsUsername resets all changes to the "claims_username" field.
func (m *OhAuthTooTokenMutation) ResetClaimsUsername() {
	m.claims_username = nil
}

// SetClaimsEmail sets the "claims_email" field.
func (m *OhAuthTooTokenMutation) SetClaimsEmail(s string) {
	m.claims_email = &s
}

// ClaimsEmail returns the value of the "claims_email" field in the mutation.
func (m *OhAuthTooTokenMutation) ClaimsEmail() (r string, exists bool) {
	v := m.claims_email
	if v == nil {
		return
	}
	return *v, true
}

// OldClaimsEmail returns the old "claims_email" field's value of the OhAuthTooToken entity.
// If the OhAuthTooToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OhAuthTooTokenMutation) OldClaimsEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClaimsEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClaimsEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClaimsEmail: %w", err)
	}
	return oldValue.ClaimsEmail, nil
}

// ResetClaimsEmail resets all changes to the "claims_email" field.
func (m *OhAuthTooTokenMutation) ResetClaimsEmail() {
	m.claims_email = nil
}

// SetClaimsEmailVerified sets the "claims_email_verified" field.
func (m *OhAuthTooTokenMutation) SetClaimsEmailVerified(b bool) {
	m.claims_email_verified = &b
}

// ClaimsEmailVerified returns the value of the "claims_email_verified" field in the mutation.
func (m *OhAuthTooTokenMutation) ClaimsEmailVerified() (r bool, exists bool) {
	v := m.claims_email_verified
	if v == nil {
		return
	}
	return *v, true
}

// OldClaimsEmailVerified returns the old "claims_email_verified" field's value of the OhAuthTooToken entity.
// If the OhAuthTooToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OhAuthTooTokenMutation) OldClaimsEmailVerified(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClaimsEmailVerified is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClaimsEmailVerified requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClaimsEmailVerified: %w", err)
	}
	return oldValue.ClaimsEmailVerified, nil
}

// ResetClaimsEmailVerified resets all changes to the "claims_email_verified" field.
func (m *OhAuthTooTokenMutation) ResetClaimsEmailVerified() {
	m.claims_email_verified = nil
}

// SetClaimsGroups sets the "claims_groups" field.
func (m *OhAuthTooTokenMutation) SetClaimsGroups(s []string) {
	m.claims_groups = &s
	m.appendclaims_groups = nil
}

// ClaimsGroups returns the value of the "claims_groups" field in the mutation.
func (m *OhAuthTooTokenMutation) ClaimsGroups() (r []string, exists bool) {
	v := m.claims_groups
	if v == nil {
		return
	}
	return *v, true
}

// OldClaimsGroups returns the old "claims_groups" field's value of the OhAuthTooToken entity.
// If the OhAuthTooToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OhAuthTooTokenMutation) OldClaimsGroups(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClaimsGroups is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClaimsGroups requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClaimsGroups: %w", err)
	}
	return oldValue.ClaimsGroups, nil
}

// AppendClaimsGroups adds s to the "claims_groups" field.
func (m *OhAuthTooTokenMutation) AppendClaimsGroups(s []string) {
	m.appendclaims_groups = append(m.appendclaims_groups, s...)
}

// AppendedClaimsGroups returns the list of values that were appended to the "claims_groups" field in this mutation.
func (m *OhAuthTooTokenMutation) AppendedClaimsGroups() ([]string, bool) {
	if len(m.appendclaims_groups) == 0 {
		return nil, false
	}
	return m.appendclaims_groups, true
}

// ClearClaimsGroups clears the value of the "claims_groups" field.
func (m *OhAuthTooTokenMutation) ClearClaimsGroups() {
	m.claims_groups = nil
	m.appendclaims_groups = nil
	m.clearedFields[ohauthtootoken.FieldClaimsGroups] = struct{}{}
}

// ClaimsGroupsCleared returns if the "claims_groups" field was cleared in this mutation.
func (m *OhAuthTooTokenMutation) ClaimsGroupsCleared() bool {
	_, ok := m.clearedFields[ohauthtootoken.FieldClaimsGroups]
	return ok
}

// ResetClaimsGroups resets all changes to the "claims_groups" field.
func (m *OhAuthTooTokenMutation) ResetClaimsGroups() {
	m.claims_groups = nil
	m.appendclaims_groups = nil
	delete(m.clearedFields, ohauthtootoken.FieldClaimsGroups)
}

// SetClaimsPreferredUsername sets the "claims_preferred_username" field.
func (m *OhAuthTooTokenMutation) SetClaimsPreferredUsername(s string) {
	m.claims_preferred_username = &s
}

// ClaimsPreferredUsername returns the value of the "claims_preferred_username" field in the mutation.
func (m *OhAuthTooTokenMutation) ClaimsPreferredUsername() (r string, exists bool) {
	v := m.claims_preferred_username
	if v == nil {
		return
	}
	return *v, true
}

// OldClaimsPreferredUsername returns the old "claims_preferred_username" field's value of the OhAuthTooToken entity.
// If the OhAuthTooToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OhAuthTooTokenMutation) OldClaimsPreferredUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClaimsPreferredUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClaimsPreferredUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldClaimsPreferredUsername: %w", err)
	}
	return oldValue.ClaimsPreferredUsername, nil
}

// ResetClaimsPreferredUsername resets all changes to the "claims_preferred_username" field.
func (m *OhAuthTooTokenMutation) ResetClaimsPreferredUsername() {
	m.claims_preferred_username = nil
}

// SetConnectorID sets the "connector_id" field.
func (m *OhAuthTooTokenMutation) SetConnectorID(s string) {
	m.connector_id = &s
}

// ConnectorID returns the value of the "connector_id" field in the mutation.
func (m *OhAuthTooTokenMutation) ConnectorID() (r string, exists bool) {
	v := m.connector_id
	if v == nil {
		return
	}
	return *v, true
}

// OldConnectorID returns the old "connector_id" field's value of the OhAuthTooToken entity.
// If the OhAuthTooToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OhAuthTooTokenMutation) OldConnectorID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConnectorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConnectorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConnectorID: %w", err)
	}
	return oldValue.ConnectorID, nil
}

// ResetConnectorID resets all changes to the "connector_id" field.
func (m *OhAuthTooTokenMutation) ResetConnectorID() {
	m.connector_id = nil
}

// SetConnectorData sets the "connector_data" field.
func (m *OhAuthTooTokenMutation) SetConnectorData(s []string) {
	m.connector_data = &s
	m.appendconnector_data = nil
}

// ConnectorData returns the value of the "connector_data" field in the mutation.
func (m *OhAuthTooTokenMutation) ConnectorData() (r []string, exists bool) {
	v := m.connector_data
	if v == nil {
		return
	}
	return *v, true
}

// OldConnectorData returns the old "connector_data" field's value of the OhAuthTooToken entity.
// If the OhAuthTooToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OhAuthTooTokenMutation) OldConnectorData(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConnectorData is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConnectorData requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldConnectorData: %w", err)
	}
	return oldValue.ConnectorData, nil
}

// AppendConnectorData adds s to the "connector_data" field.
func (m *OhAuthTooTokenMutation) AppendConnectorData(s []string) {
	m.appendconnector_data = append(m.appendconnector_data, s...)
}

// AppendedConnectorData returns the list of values that were appended to the "connector_data" field in this mutation.
func (m *OhAuthTooTokenMutation) AppendedConnectorData() ([]string, bool) {
	if len(m.appendconnector_data) == 0 {
		return nil, false
	}
	return m.appendconnector_data, true
}

// ClearConnectorData clears the value of the "connector_data" field.
func (m *OhAuthTooTokenMutation) ClearConnectorData() {
	m.connector_data = nil
	m.appendconnector_data = nil
	m.clearedFields[ohauthtootoken.FieldConnectorData] = struct{}{}
}

// ConnectorDataCleared returns if the "connector_data" field was cleared in this mutation.
func (m *OhAuthTooTokenMutation) ConnectorDataCleared() bool {
	_, ok := m.clearedFields[ohauthtootoken.FieldConnectorData]
	return ok
}

// ResetConnectorData resets all changes to the "connector_data" field.
func (m *OhAuthTooTokenMutation) ResetConnectorData() {
	m.connector_data = nil
	m.appendconnector_data = nil
	delete(m.clearedFields, ohauthtootoken.FieldConnectorData)
}

// SetLastUsed sets the "last_used" field.
func (m *OhAuthTooTokenMutation) SetLastUsed(t time.Time) {
	m.last_used = &t
}

// LastUsed returns the value of the "last_used" field in the mutation.
func (m *OhAuthTooTokenMutation) LastUsed() (r time.Time, exists bool) {
	v := m.last_used
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUsed returns the old "last_used" field's value of the OhAuthTooToken entity.
// If the OhAuthTooToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OhAuthTooTokenMutation) OldLastUsed(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUsed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUsed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUsed: %w", err)
	}
	return oldValue.LastUsed, nil
}

// ResetLastUsed resets all changes to the "last_used" field.
func (m *OhAuthTooTokenMutation) ResetLastUsed() {
	m.last_used = nil
}

// Where appends a list predicates to the OhAuthTooTokenMutation builder.
func (m *OhAuthTooTokenMutation) Where(ps ...predicate.OhAuthTooToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OhAuthTooTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OhAuthTooTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OhAuthTooToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OhAuthTooTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OhAuthTooTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OhAuthTooToken).
func (m *OhAuthTooTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OhAuthTooTokenMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.client_id != nil {
		fields = append(fields, ohauthtootoken.FieldClientID)
	}
	if m.scopes != nil {
		fields = append(fields, ohauthtootoken.FieldScopes)
	}
	if m.nonce != nil {
		fields = append(fields, ohauthtootoken.FieldNonce)
	}
	if m.claims_user_id != nil {
		fields = append(fields, ohauthtootoken.FieldClaimsUserID)
	}
	if m.claims_username != nil {
		fields = append(fields, ohauthtootoken.FieldClaimsUsername)
	}
	if m.claims_email != nil {
		fields = append(fields, ohauthtootoken.FieldClaimsEmail)
	}
	if m.claims_email_verified != nil {
		fields = append(fields, ohauthtootoken.FieldClaimsEmailVerified)
	}
	if m.claims_groups != nil {
		fields = append(fields, ohauthtootoken.FieldClaimsGroups)
	}
	if m.claims_preferred_username != nil {
		fields = append(fields, ohauthtootoken.FieldClaimsPreferredUsername)
	}
	if m.connector_id != nil {
		fields = append(fields, ohauthtootoken.FieldConnectorID)
	}
	if m.connector_data != nil {
		fields = append(fields, ohauthtootoken.FieldConnectorData)
	}
	if m.last_used != nil {
		fields = append(fields, ohauthtootoken.FieldLastUsed)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OhAuthTooTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case ohauthtootoken.FieldClientID:
		return m.ClientID()
	case ohauthtootoken.FieldScopes:
		return m.Scopes()
	case ohauthtootoken.FieldNonce:
		return m.Nonce()
	case ohauthtootoken.FieldClaimsUserID:
		return m.ClaimsUserID()
	case ohauthtootoken.FieldClaimsUsername:
		return m.ClaimsUsername()
	case ohauthtootoken.FieldClaimsEmail:
		return m.ClaimsEmail()
	case ohauthtootoken.FieldClaimsEmailVerified:
		return m.ClaimsEmailVerified()
	case ohauthtootoken.FieldClaimsGroups:
		return m.ClaimsGroups()
	case ohauthtootoken.FieldClaimsPreferredUsername:
		return m.ClaimsPreferredUsername()
	case ohauthtootoken.FieldConnectorID:
		return m.ConnectorID()
	case ohauthtootoken.FieldConnectorData:
		return m.ConnectorData()
	case ohauthtootoken.FieldLastUsed:
		return m.LastUsed()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OhAuthTooTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case ohauthtootoken.FieldClientID:
		return m.OldClientID(ctx)
	case ohauthtootoken.FieldScopes:
		return m.OldScopes(ctx)
	case ohauthtootoken.FieldNonce:
		return m.OldNonce(ctx)
	case ohauthtootoken.FieldClaimsUserID:
		return m.OldClaimsUserID(ctx)
	case ohauthtootoken.FieldClaimsUsername:
		return m.OldClaimsUsername(ctx)
	case ohauthtootoken.FieldClaimsEmail:
		return m.OldClaimsEmail(ctx)
	case ohauthtootoken.FieldClaimsEmailVerified:
		return m.OldClaimsEmailVerified(ctx)
	case ohauthtootoken.FieldClaimsGroups:
		return m.OldClaimsGroups(ctx)
	case ohauthtootoken.FieldClaimsPreferredUsername:
		return m.OldClaimsPreferredUsername(ctx)
	case ohauthtootoken.FieldConnectorID:
		return m.OldConnectorID(ctx)
	case ohauthtootoken.FieldConnectorData:
		return m.OldConnectorData(ctx)
	case ohauthtootoken.FieldLastUsed:
		return m.OldLastUsed(ctx)
	}
	return nil, fmt.Errorf("unknown OhAuthTooToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OhAuthTooTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case ohauthtootoken.FieldClientID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClientID(v)
		return nil
	case ohauthtootoken.FieldScopes:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetScopes(v)
		return nil
	case ohauthtootoken.FieldNonce:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNonce(v)
		return nil
	case ohauthtootoken.FieldClaimsUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClaimsUserID(v)
		return nil
	case ohauthtootoken.FieldClaimsUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClaimsUsername(v)
		return nil
	case ohauthtootoken.FieldClaimsEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClaimsEmail(v)
		return nil
	case ohauthtootoken.FieldClaimsEmailVerified:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClaimsEmailVerified(v)
		return nil
	case ohauthtootoken.FieldClaimsGroups:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClaimsGroups(v)
		return nil
	case ohauthtootoken.FieldClaimsPreferredUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetClaimsPreferredUsername(v)
		return nil
	case ohauthtootoken.FieldConnectorID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConnectorID(v)
		return nil
	case ohauthtootoken.FieldConnectorData:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetConnectorData(v)
		return nil
	case ohauthtootoken.FieldLastUsed:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUsed(v)
		return nil
	}
	return fmt.Errorf("unknown OhAuthTooToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OhAuthTooTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OhAuthTooTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OhAuthTooTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OhAuthTooToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OhAuthTooTokenMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(ohauthtootoken.FieldScopes) {
		fields = append(fields, ohauthtootoken.FieldScopes)
	}
	if m.FieldCleared(ohauthtootoken.FieldClaimsGroups) {
		fields = append(fields, ohauthtootoken.FieldClaimsGroups)
	}
	if m.FieldCleared(ohauthtootoken.FieldConnectorData) {
		fields = append(fields, ohauthtootoken.FieldConnectorData)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OhAuthTooTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OhAuthTooTokenMutation) ClearField(name string) error {
	switch name {
	case ohauthtootoken.FieldScopes:
		m.ClearScopes()
		return nil
	case ohauthtootoken.FieldClaimsGroups:
		m.ClearClaimsGroups()
		return nil
	case ohauthtootoken.FieldConnectorData:
		m.ClearConnectorData()
		return nil
	}
	return fmt.Errorf("unknown OhAuthTooToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OhAuthTooTokenMutation) ResetField(name string) error {
	switch name {
	case ohauthtootoken.FieldClientID:
		m.ResetClientID()
		return nil
	case ohauthtootoken.FieldScopes:
		m.ResetScopes()
		return nil
	case ohauthtootoken.FieldNonce:
		m.ResetNonce()
		return nil
	case ohauthtootoken.FieldClaimsUserID:
		m.ResetClaimsUserID()
		return nil
	case ohauthtootoken.FieldClaimsUsername:
		m.ResetClaimsUsername()
		return nil
	case ohauthtootoken.FieldClaimsEmail:
		m.ResetClaimsEmail()
		return nil
	case ohauthtootoken.FieldClaimsEmailVerified:
		m.ResetClaimsEmailVerified()
		return nil
	case ohauthtootoken.FieldClaimsGroups:
		m.ResetClaimsGroups()
		return nil
	case ohauthtootoken.FieldClaimsPreferredUsername:
		m.ResetClaimsPreferredUsername()
		return nil
	case ohauthtootoken.FieldConnectorID:
		m.ResetConnectorID()
		return nil
	case ohauthtootoken.FieldConnectorData:
		m.ResetConnectorData()
		return nil
	case ohauthtootoken.FieldLastUsed:
		m.ResetLastUsed()
		return nil
	}
	return fmt.Errorf("unknown OhAuthTooToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OhAuthTooTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OhAuthTooTokenMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OhAuthTooTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OhAuthTooTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OhAuthTooTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OhAuthTooTokenMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OhAuthTooTokenMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown OhAuthTooToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OhAuthTooTokenMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown OhAuthTooToken edge %s", name)
}

// OrgMembershipMutation represents an operation that mutates the OrgMembership nodes in the graph.
type OrgMembershipMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	created_at          *time.Time
	updated_at          *time.Time
	created_by          *string
	updated_by          *string
	deleted_at          *time.Time
	deleted_by          *string
	role                *enums.Role
	clearedFields       map[string]struct{}
	organization        *string
	clearedorganization bool
	user                *string
	cleareduser         bool
	done                bool
	oldValue            func(context.Context) (*OrgMembership, error)
	predicates          []predicate.OrgMembership
}

var _ ent.Mutation = (*OrgMembershipMutation)(nil)

// orgmembershipOption allows management of the mutation configuration using functional options.
type orgmembershipOption func(*OrgMembershipMutation)

// newOrgMembershipMutation creates new mutation for the OrgMembership entity.
func newOrgMembershipMutation(c config, op Op, opts ...orgmembershipOption) *OrgMembershipMutation {
	m := &OrgMembershipMutation{
		config:        c,
		op:            op,
		typ:           TypeOrgMembership,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrgMembershipID sets the ID field of the mutation.
func withOrgMembershipID(id string) orgmembershipOption {
	return func(m *OrgMembershipMutation) {
		var (
			err   error
			once  sync.Once
			value *OrgMembership
		)
		m.oldValue = func(ctx context.Context) (*OrgMembership, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrgMembership.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrgMembership sets the old OrgMembership of the mutation.
func withOrgMembership(node *OrgMembership) orgmembershipOption {
	return func(m *OrgMembershipMutation) {
		m.oldValue = func(context.Context) (*OrgMembership, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrgMembershipMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrgMembershipMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrgMembership entities.
func (m *OrgMembershipMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrgMembershipMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrgMembershipMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrgMembership.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrgMembershipMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrgMembershipMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrgMembership entity.
// If the OrgMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgMembershipMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrgMembershipMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrgMembershipMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrgMembershipMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrgMembership entity.
// If the OrgMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgMembershipMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrgMembershipMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *OrgMembershipMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *OrgMembershipMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the OrgMembership entity.
// If the OrgMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgMembershipMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *OrgMembershipMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[orgmembership.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *OrgMembershipMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[orgmembership.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *OrgMembershipMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, orgmembership.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *OrgMembershipMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *OrgMembershipMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the OrgMembership entity.
// If the OrgMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgMembershipMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *OrgMembershipMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[orgmembership.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *OrgMembershipMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[orgmembership.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *OrgMembershipMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, orgmembership.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrgMembershipMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrgMembershipMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrgMembership entity.
// If the OrgMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgMembershipMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *OrgMembershipMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[orgmembership.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *OrgMembershipMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[orgmembership.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrgMembershipMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, orgmembership.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *OrgMembershipMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *OrgMembershipMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the OrgMembership entity.
// If the OrgMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgMembershipMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *OrgMembershipMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[orgmembership.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *OrgMembershipMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[orgmembership.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *OrgMembershipMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, orgmembership.FieldDeletedBy)
}

// SetRole sets the "role" field.
func (m *OrgMembershipMutation) SetRole(e enums.Role) {
	m.role = &e
}

// Role returns the value of the "role" field in the mutation.
func (m *OrgMembershipMutation) Role() (r enums.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the OrgMembership entity.
// If the OrgMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgMembershipMutation) OldRole(ctx context.Context) (v enums.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *OrgMembershipMutation) ResetRole() {
	m.role = nil
}

// SetOrganizationID sets the "organization_id" field.
func (m *OrgMembershipMutation) SetOrganizationID(s string) {
	m.organization = &s
}

// OrganizationID returns the value of the "organization_id" field in the mutation.
func (m *OrgMembershipMutation) OrganizationID() (r string, exists bool) {
	v := m.organization
	if v == nil {
		return
	}
	return *v, true
}

// OldOrganizationID returns the old "organization_id" field's value of the OrgMembership entity.
// If the OrgMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgMembershipMutation) OldOrganizationID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOrganizationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOrganizationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOrganizationID: %w", err)
	}
	return oldValue.OrganizationID, nil
}

// ResetOrganizationID resets all changes to the "organization_id" field.
func (m *OrgMembershipMutation) ResetOrganizationID() {
	m.organization = nil
}

// SetUserID sets the "user_id" field.
func (m *OrgMembershipMutation) SetUserID(s string) {
	m.user = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *OrgMembershipMutation) UserID() (r string, exists bool) {
	v := m.user
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the OrgMembership entity.
// If the OrgMembership object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrgMembershipMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *OrgMembershipMutation) ResetUserID() {
	m.user = nil
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (m *OrgMembershipMutation) ClearOrganization() {
	m.clearedorganization = true
	m.clearedFields[orgmembership.FieldOrganizationID] = struct{}{}
}

// OrganizationCleared reports if the "organization" edge to the Organization entity was cleared.
func (m *OrgMembershipMutation) OrganizationCleared() bool {
	return m.clearedorganization
}

// OrganizationIDs returns the "organization" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganizationID instead. It exists only for internal usage by the builders.
func (m *OrgMembershipMutation) OrganizationIDs() (ids []string) {
	if id := m.organization; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrganization resets all changes to the "organization" edge.
func (m *OrgMembershipMutation) ResetOrganization() {
	m.organization = nil
	m.clearedorganization = false
}

// ClearUser clears the "user" edge to the User entity.
func (m *OrgMembershipMutation) ClearUser() {
	m.cleareduser = true
	m.clearedFields[orgmembership.FieldUserID] = struct{}{}
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *OrgMembershipMutation) UserCleared() bool {
	return m.cleareduser
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *OrgMembershipMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *OrgMembershipMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the OrgMembershipMutation builder.
func (m *OrgMembershipMutation) Where(ps ...predicate.OrgMembership) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrgMembershipMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrgMembershipMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OrgMembership, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrgMembershipMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrgMembershipMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OrgMembership).
func (m *OrgMembershipMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrgMembershipMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.created_at != nil {
		fields = append(fields, orgmembership.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, orgmembership.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, orgmembership.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, orgmembership.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, orgmembership.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, orgmembership.FieldDeletedBy)
	}
	if m.role != nil {
		fields = append(fields, orgmembership.FieldRole)
	}
	if m.organization != nil {
		fields = append(fields, orgmembership.FieldOrganizationID)
	}
	if m.user != nil {
		fields = append(fields, orgmembership.FieldUserID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrgMembershipMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case orgmembership.FieldCreatedAt:
		return m.CreatedAt()
	case orgmembership.FieldUpdatedAt:
		return m.UpdatedAt()
	case orgmembership.FieldCreatedBy:
		return m.CreatedBy()
	case orgmembership.FieldUpdatedBy:
		return m.UpdatedBy()
	case orgmembership.FieldDeletedAt:
		return m.DeletedAt()
	case orgmembership.FieldDeletedBy:
		return m.DeletedBy()
	case orgmembership.FieldRole:
		return m.Role()
	case orgmembership.FieldOrganizationID:
		return m.OrganizationID()
	case orgmembership.FieldUserID:
		return m.UserID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrgMembershipMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case orgmembership.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case orgmembership.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case orgmembership.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case orgmembership.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case orgmembership.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case orgmembership.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case orgmembership.FieldRole:
		return m.OldRole(ctx)
	case orgmembership.FieldOrganizationID:
		return m.OldOrganizationID(ctx)
	case orgmembership.FieldUserID:
		return m.OldUserID(ctx)
	}
	return nil, fmt.Errorf("unknown OrgMembership field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrgMembershipMutation) SetField(name string, value ent.Value) error {
	switch name {
	case orgmembership.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case orgmembership.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case orgmembership.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case orgmembership.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case orgmembership.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case orgmembership.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case orgmembership.FieldRole:
		v, ok := value.(enums.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case orgmembership.FieldOrganizationID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOrganizationID(v)
		return nil
	case orgmembership.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	}
	return fmt.Errorf("unknown OrgMembership field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrgMembershipMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrgMembershipMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrgMembershipMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OrgMembership numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrgMembershipMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(orgmembership.FieldCreatedBy) {
		fields = append(fields, orgmembership.FieldCreatedBy)
	}
	if m.FieldCleared(orgmembership.FieldUpdatedBy) {
		fields = append(fields, orgmembership.FieldUpdatedBy)
	}
	if m.FieldCleared(orgmembership.FieldDeletedAt) {
		fields = append(fields, orgmembership.FieldDeletedAt)
	}
	if m.FieldCleared(orgmembership.FieldDeletedBy) {
		fields = append(fields, orgmembership.FieldDeletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrgMembershipMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrgMembershipMutation) ClearField(name string) error {
	switch name {
	case orgmembership.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case orgmembership.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case orgmembership.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case orgmembership.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	}
	return fmt.Errorf("unknown OrgMembership nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrgMembershipMutation) ResetField(name string) error {
	switch name {
	case orgmembership.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case orgmembership.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case orgmembership.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case orgmembership.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case orgmembership.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case orgmembership.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case orgmembership.FieldRole:
		m.ResetRole()
		return nil
	case orgmembership.FieldOrganizationID:
		m.ResetOrganizationID()
		return nil
	case orgmembership.FieldUserID:
		m.ResetUserID()
		return nil
	}
	return fmt.Errorf("unknown OrgMembership field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrgMembershipMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.organization != nil {
		edges = append(edges, orgmembership.EdgeOrganization)
	}
	if m.user != nil {
		edges = append(edges, orgmembership.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrgMembershipMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case orgmembership.EdgeOrganization:
		if id := m.organization; id != nil {
			return []ent.Value{*id}
		}
	case orgmembership.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrgMembershipMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrgMembershipMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrgMembershipMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedorganization {
		edges = append(edges, orgmembership.EdgeOrganization)
	}
	if m.cleareduser {
		edges = append(edges, orgmembership.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrgMembershipMutation) EdgeCleared(name string) bool {
	switch name {
	case orgmembership.EdgeOrganization:
		return m.clearedorganization
	case orgmembership.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrgMembershipMutation) ClearEdge(name string) error {
	switch name {
	case orgmembership.EdgeOrganization:
		m.ClearOrganization()
		return nil
	case orgmembership.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown OrgMembership unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrgMembershipMutation) ResetEdge(name string) error {
	switch name {
	case orgmembership.EdgeOrganization:
		m.ResetOrganization()
		return nil
	case orgmembership.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown OrgMembership edge %s", name)
}

// OrganizationMutation represents an operation that mutates the Organization nodes in the graph.
type OrganizationMutation struct {
	config
	op                   Op
	typ                  string
	id                   *string
	created_at           *time.Time
	updated_at           *time.Time
	created_by           *string
	updated_by           *string
	deleted_at           *time.Time
	deleted_by           *string
	name                 *string
	display_name         *string
	description          *string
	personal_org         *bool
	clearedFields        map[string]struct{}
	parent               *string
	clearedparent        bool
	children             map[string]struct{}
	removedchildren      map[string]struct{}
	clearedchildren      bool
	groups               map[string]struct{}
	removedgroups        map[string]struct{}
	clearedgroups        bool
	integrations         map[string]struct{}
	removedintegrations  map[string]struct{}
	clearedintegrations  bool
	setting              *string
	clearedsetting       bool
	entitlements         map[string]struct{}
	removedentitlements  map[string]struct{}
	clearedentitlements  bool
	oauthprovider        map[string]struct{}
	removedoauthprovider map[string]struct{}
	clearedoauthprovider bool
	users                map[string]struct{}
	removedusers         map[string]struct{}
	clearedusers         bool
	invites              map[string]struct{}
	removedinvites       map[string]struct{}
	clearedinvites       bool
	members              map[string]struct{}
	removedmembers       map[string]struct{}
	clearedmembers       bool
	done                 bool
	oldValue             func(context.Context) (*Organization, error)
	predicates           []predicate.Organization
}

var _ ent.Mutation = (*OrganizationMutation)(nil)

// organizationOption allows management of the mutation configuration using functional options.
type organizationOption func(*OrganizationMutation)

// newOrganizationMutation creates new mutation for the Organization entity.
func newOrganizationMutation(c config, op Op, opts ...organizationOption) *OrganizationMutation {
	m := &OrganizationMutation{
		config:        c,
		op:            op,
		typ:           TypeOrganization,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrganizationID sets the ID field of the mutation.
func withOrganizationID(id string) organizationOption {
	return func(m *OrganizationMutation) {
		var (
			err   error
			once  sync.Once
			value *Organization
		)
		m.oldValue = func(ctx context.Context) (*Organization, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Organization.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrganization sets the old Organization of the mutation.
func withOrganization(node *Organization) organizationOption {
	return func(m *OrganizationMutation) {
		m.oldValue = func(context.Context) (*Organization, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrganizationMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrganizationMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Organization entities.
func (m *OrganizationMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrganizationMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrganizationMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Organization.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrganizationMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrganizationMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrganizationMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrganizationMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrganizationMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrganizationMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *OrganizationMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *OrganizationMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *OrganizationMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[organization.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *OrganizationMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[organization.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *OrganizationMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, organization.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *OrganizationMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *OrganizationMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *OrganizationMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[organization.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *OrganizationMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[organization.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *OrganizationMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, organization.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrganizationMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrganizationMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *OrganizationMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[organization.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *OrganizationMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[organization.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrganizationMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, organization.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *OrganizationMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *OrganizationMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *OrganizationMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[organization.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *OrganizationMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[organization.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *OrganizationMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, organization.FieldDeletedBy)
}

// SetName sets the "name" field.
func (m *OrganizationMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *OrganizationMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *OrganizationMutation) ResetName() {
	m.name = nil
}

// SetDisplayName sets the "display_name" field.
func (m *OrganizationMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *OrganizationMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *OrganizationMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetDescription sets the "description" field.
func (m *OrganizationMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *OrganizationMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *OrganizationMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[organization.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *OrganizationMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[organization.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *OrganizationMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, organization.FieldDescription)
}

// SetParentOrganizationID sets the "parent_organization_id" field.
func (m *OrganizationMutation) SetParentOrganizationID(s string) {
	m.parent = &s
}

// ParentOrganizationID returns the value of the "parent_organization_id" field in the mutation.
func (m *OrganizationMutation) ParentOrganizationID() (r string, exists bool) {
	v := m.parent
	if v == nil {
		return
	}
	return *v, true
}

// OldParentOrganizationID returns the old "parent_organization_id" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldParentOrganizationID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldParentOrganizationID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldParentOrganizationID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldParentOrganizationID: %w", err)
	}
	return oldValue.ParentOrganizationID, nil
}

// ClearParentOrganizationID clears the value of the "parent_organization_id" field.
func (m *OrganizationMutation) ClearParentOrganizationID() {
	m.parent = nil
	m.clearedFields[organization.FieldParentOrganizationID] = struct{}{}
}

// ParentOrganizationIDCleared returns if the "parent_organization_id" field was cleared in this mutation.
func (m *OrganizationMutation) ParentOrganizationIDCleared() bool {
	_, ok := m.clearedFields[organization.FieldParentOrganizationID]
	return ok
}

// ResetParentOrganizationID resets all changes to the "parent_organization_id" field.
func (m *OrganizationMutation) ResetParentOrganizationID() {
	m.parent = nil
	delete(m.clearedFields, organization.FieldParentOrganizationID)
}

// SetPersonalOrg sets the "personal_org" field.
func (m *OrganizationMutation) SetPersonalOrg(b bool) {
	m.personal_org = &b
}

// PersonalOrg returns the value of the "personal_org" field in the mutation.
func (m *OrganizationMutation) PersonalOrg() (r bool, exists bool) {
	v := m.personal_org
	if v == nil {
		return
	}
	return *v, true
}

// OldPersonalOrg returns the old "personal_org" field's value of the Organization entity.
// If the Organization object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationMutation) OldPersonalOrg(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPersonalOrg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPersonalOrg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPersonalOrg: %w", err)
	}
	return oldValue.PersonalOrg, nil
}

// ResetPersonalOrg resets all changes to the "personal_org" field.
func (m *OrganizationMutation) ResetPersonalOrg() {
	m.personal_org = nil
}

// SetParentID sets the "parent" edge to the Organization entity by id.
func (m *OrganizationMutation) SetParentID(id string) {
	m.parent = &id
}

// ClearParent clears the "parent" edge to the Organization entity.
func (m *OrganizationMutation) ClearParent() {
	m.clearedparent = true
	m.clearedFields[organization.FieldParentOrganizationID] = struct{}{}
}

// ParentCleared reports if the "parent" edge to the Organization entity was cleared.
func (m *OrganizationMutation) ParentCleared() bool {
	return m.ParentOrganizationIDCleared() || m.clearedparent
}

// ParentID returns the "parent" edge ID in the mutation.
func (m *OrganizationMutation) ParentID() (id string, exists bool) {
	if m.parent != nil {
		return *m.parent, true
	}
	return
}

// ParentIDs returns the "parent" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ParentID instead. It exists only for internal usage by the builders.
func (m *OrganizationMutation) ParentIDs() (ids []string) {
	if id := m.parent; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetParent resets all changes to the "parent" edge.
func (m *OrganizationMutation) ResetParent() {
	m.parent = nil
	m.clearedparent = false
}

// AddChildIDs adds the "children" edge to the Organization entity by ids.
func (m *OrganizationMutation) AddChildIDs(ids ...string) {
	if m.children == nil {
		m.children = make(map[string]struct{})
	}
	for i := range ids {
		m.children[ids[i]] = struct{}{}
	}
}

// ClearChildren clears the "children" edge to the Organization entity.
func (m *OrganizationMutation) ClearChildren() {
	m.clearedchildren = true
}

// ChildrenCleared reports if the "children" edge to the Organization entity was cleared.
func (m *OrganizationMutation) ChildrenCleared() bool {
	return m.clearedchildren
}

// RemoveChildIDs removes the "children" edge to the Organization entity by IDs.
func (m *OrganizationMutation) RemoveChildIDs(ids ...string) {
	if m.removedchildren == nil {
		m.removedchildren = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.children, ids[i])
		m.removedchildren[ids[i]] = struct{}{}
	}
}

// RemovedChildren returns the removed IDs of the "children" edge to the Organization entity.
func (m *OrganizationMutation) RemovedChildrenIDs() (ids []string) {
	for id := range m.removedchildren {
		ids = append(ids, id)
	}
	return
}

// ChildrenIDs returns the "children" edge IDs in the mutation.
func (m *OrganizationMutation) ChildrenIDs() (ids []string) {
	for id := range m.children {
		ids = append(ids, id)
	}
	return
}

// ResetChildren resets all changes to the "children" edge.
func (m *OrganizationMutation) ResetChildren() {
	m.children = nil
	m.clearedchildren = false
	m.removedchildren = nil
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *OrganizationMutation) AddGroupIDs(ids ...string) {
	if m.groups == nil {
		m.groups = make(map[string]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *OrganizationMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *OrganizationMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *OrganizationMutation) RemoveGroupIDs(ids ...string) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *OrganizationMutation) RemovedGroupsIDs() (ids []string) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *OrganizationMutation) GroupsIDs() (ids []string) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *OrganizationMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// AddIntegrationIDs adds the "integrations" edge to the Integration entity by ids.
func (m *OrganizationMutation) AddIntegrationIDs(ids ...string) {
	if m.integrations == nil {
		m.integrations = make(map[string]struct{})
	}
	for i := range ids {
		m.integrations[ids[i]] = struct{}{}
	}
}

// ClearIntegrations clears the "integrations" edge to the Integration entity.
func (m *OrganizationMutation) ClearIntegrations() {
	m.clearedintegrations = true
}

// IntegrationsCleared reports if the "integrations" edge to the Integration entity was cleared.
func (m *OrganizationMutation) IntegrationsCleared() bool {
	return m.clearedintegrations
}

// RemoveIntegrationIDs removes the "integrations" edge to the Integration entity by IDs.
func (m *OrganizationMutation) RemoveIntegrationIDs(ids ...string) {
	if m.removedintegrations == nil {
		m.removedintegrations = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.integrations, ids[i])
		m.removedintegrations[ids[i]] = struct{}{}
	}
}

// RemovedIntegrations returns the removed IDs of the "integrations" edge to the Integration entity.
func (m *OrganizationMutation) RemovedIntegrationsIDs() (ids []string) {
	for id := range m.removedintegrations {
		ids = append(ids, id)
	}
	return
}

// IntegrationsIDs returns the "integrations" edge IDs in the mutation.
func (m *OrganizationMutation) IntegrationsIDs() (ids []string) {
	for id := range m.integrations {
		ids = append(ids, id)
	}
	return
}

// ResetIntegrations resets all changes to the "integrations" edge.
func (m *OrganizationMutation) ResetIntegrations() {
	m.integrations = nil
	m.clearedintegrations = false
	m.removedintegrations = nil
}

// SetSettingID sets the "setting" edge to the OrganizationSetting entity by id.
func (m *OrganizationMutation) SetSettingID(id string) {
	m.setting = &id
}

// ClearSetting clears the "setting" edge to the OrganizationSetting entity.
func (m *OrganizationMutation) ClearSetting() {
	m.clearedsetting = true
}

// SettingCleared reports if the "setting" edge to the OrganizationSetting entity was cleared.
func (m *OrganizationMutation) SettingCleared() bool {
	return m.clearedsetting
}

// SettingID returns the "setting" edge ID in the mutation.
func (m *OrganizationMutation) SettingID() (id string, exists bool) {
	if m.setting != nil {
		return *m.setting, true
	}
	return
}

// SettingIDs returns the "setting" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SettingID instead. It exists only for internal usage by the builders.
func (m *OrganizationMutation) SettingIDs() (ids []string) {
	if id := m.setting; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSetting resets all changes to the "setting" edge.
func (m *OrganizationMutation) ResetSetting() {
	m.setting = nil
	m.clearedsetting = false
}

// AddEntitlementIDs adds the "entitlements" edge to the Entitlement entity by ids.
func (m *OrganizationMutation) AddEntitlementIDs(ids ...string) {
	if m.entitlements == nil {
		m.entitlements = make(map[string]struct{})
	}
	for i := range ids {
		m.entitlements[ids[i]] = struct{}{}
	}
}

// ClearEntitlements clears the "entitlements" edge to the Entitlement entity.
func (m *OrganizationMutation) ClearEntitlements() {
	m.clearedentitlements = true
}

// EntitlementsCleared reports if the "entitlements" edge to the Entitlement entity was cleared.
func (m *OrganizationMutation) EntitlementsCleared() bool {
	return m.clearedentitlements
}

// RemoveEntitlementIDs removes the "entitlements" edge to the Entitlement entity by IDs.
func (m *OrganizationMutation) RemoveEntitlementIDs(ids ...string) {
	if m.removedentitlements == nil {
		m.removedentitlements = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.entitlements, ids[i])
		m.removedentitlements[ids[i]] = struct{}{}
	}
}

// RemovedEntitlements returns the removed IDs of the "entitlements" edge to the Entitlement entity.
func (m *OrganizationMutation) RemovedEntitlementsIDs() (ids []string) {
	for id := range m.removedentitlements {
		ids = append(ids, id)
	}
	return
}

// EntitlementsIDs returns the "entitlements" edge IDs in the mutation.
func (m *OrganizationMutation) EntitlementsIDs() (ids []string) {
	for id := range m.entitlements {
		ids = append(ids, id)
	}
	return
}

// ResetEntitlements resets all changes to the "entitlements" edge.
func (m *OrganizationMutation) ResetEntitlements() {
	m.entitlements = nil
	m.clearedentitlements = false
	m.removedentitlements = nil
}

// AddOauthproviderIDs adds the "oauthprovider" edge to the OauthProvider entity by ids.
func (m *OrganizationMutation) AddOauthproviderIDs(ids ...string) {
	if m.oauthprovider == nil {
		m.oauthprovider = make(map[string]struct{})
	}
	for i := range ids {
		m.oauthprovider[ids[i]] = struct{}{}
	}
}

// ClearOauthprovider clears the "oauthprovider" edge to the OauthProvider entity.
func (m *OrganizationMutation) ClearOauthprovider() {
	m.clearedoauthprovider = true
}

// OauthproviderCleared reports if the "oauthprovider" edge to the OauthProvider entity was cleared.
func (m *OrganizationMutation) OauthproviderCleared() bool {
	return m.clearedoauthprovider
}

// RemoveOauthproviderIDs removes the "oauthprovider" edge to the OauthProvider entity by IDs.
func (m *OrganizationMutation) RemoveOauthproviderIDs(ids ...string) {
	if m.removedoauthprovider == nil {
		m.removedoauthprovider = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.oauthprovider, ids[i])
		m.removedoauthprovider[ids[i]] = struct{}{}
	}
}

// RemovedOauthprovider returns the removed IDs of the "oauthprovider" edge to the OauthProvider entity.
func (m *OrganizationMutation) RemovedOauthproviderIDs() (ids []string) {
	for id := range m.removedoauthprovider {
		ids = append(ids, id)
	}
	return
}

// OauthproviderIDs returns the "oauthprovider" edge IDs in the mutation.
func (m *OrganizationMutation) OauthproviderIDs() (ids []string) {
	for id := range m.oauthprovider {
		ids = append(ids, id)
	}
	return
}

// ResetOauthprovider resets all changes to the "oauthprovider" edge.
func (m *OrganizationMutation) ResetOauthprovider() {
	m.oauthprovider = nil
	m.clearedoauthprovider = false
	m.removedoauthprovider = nil
}

// AddUserIDs adds the "users" edge to the User entity by ids.
func (m *OrganizationMutation) AddUserIDs(ids ...string) {
	if m.users == nil {
		m.users = make(map[string]struct{})
	}
	for i := range ids {
		m.users[ids[i]] = struct{}{}
	}
}

// ClearUsers clears the "users" edge to the User entity.
func (m *OrganizationMutation) ClearUsers() {
	m.clearedusers = true
}

// UsersCleared reports if the "users" edge to the User entity was cleared.
func (m *OrganizationMutation) UsersCleared() bool {
	return m.clearedusers
}

// RemoveUserIDs removes the "users" edge to the User entity by IDs.
func (m *OrganizationMutation) RemoveUserIDs(ids ...string) {
	if m.removedusers == nil {
		m.removedusers = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.users, ids[i])
		m.removedusers[ids[i]] = struct{}{}
	}
}

// RemovedUsers returns the removed IDs of the "users" edge to the User entity.
func (m *OrganizationMutation) RemovedUsersIDs() (ids []string) {
	for id := range m.removedusers {
		ids = append(ids, id)
	}
	return
}

// UsersIDs returns the "users" edge IDs in the mutation.
func (m *OrganizationMutation) UsersIDs() (ids []string) {
	for id := range m.users {
		ids = append(ids, id)
	}
	return
}

// ResetUsers resets all changes to the "users" edge.
func (m *OrganizationMutation) ResetUsers() {
	m.users = nil
	m.clearedusers = false
	m.removedusers = nil
}

// AddInviteIDs adds the "invites" edge to the Invite entity by ids.
func (m *OrganizationMutation) AddInviteIDs(ids ...string) {
	if m.invites == nil {
		m.invites = make(map[string]struct{})
	}
	for i := range ids {
		m.invites[ids[i]] = struct{}{}
	}
}

// ClearInvites clears the "invites" edge to the Invite entity.
func (m *OrganizationMutation) ClearInvites() {
	m.clearedinvites = true
}

// InvitesCleared reports if the "invites" edge to the Invite entity was cleared.
func (m *OrganizationMutation) InvitesCleared() bool {
	return m.clearedinvites
}

// RemoveInviteIDs removes the "invites" edge to the Invite entity by IDs.
func (m *OrganizationMutation) RemoveInviteIDs(ids ...string) {
	if m.removedinvites == nil {
		m.removedinvites = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.invites, ids[i])
		m.removedinvites[ids[i]] = struct{}{}
	}
}

// RemovedInvites returns the removed IDs of the "invites" edge to the Invite entity.
func (m *OrganizationMutation) RemovedInvitesIDs() (ids []string) {
	for id := range m.removedinvites {
		ids = append(ids, id)
	}
	return
}

// InvitesIDs returns the "invites" edge IDs in the mutation.
func (m *OrganizationMutation) InvitesIDs() (ids []string) {
	for id := range m.invites {
		ids = append(ids, id)
	}
	return
}

// ResetInvites resets all changes to the "invites" edge.
func (m *OrganizationMutation) ResetInvites() {
	m.invites = nil
	m.clearedinvites = false
	m.removedinvites = nil
}

// AddMemberIDs adds the "members" edge to the OrgMembership entity by ids.
func (m *OrganizationMutation) AddMemberIDs(ids ...string) {
	if m.members == nil {
		m.members = make(map[string]struct{})
	}
	for i := range ids {
		m.members[ids[i]] = struct{}{}
	}
}

// ClearMembers clears the "members" edge to the OrgMembership entity.
func (m *OrganizationMutation) ClearMembers() {
	m.clearedmembers = true
}

// MembersCleared reports if the "members" edge to the OrgMembership entity was cleared.
func (m *OrganizationMutation) MembersCleared() bool {
	return m.clearedmembers
}

// RemoveMemberIDs removes the "members" edge to the OrgMembership entity by IDs.
func (m *OrganizationMutation) RemoveMemberIDs(ids ...string) {
	if m.removedmembers == nil {
		m.removedmembers = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.members, ids[i])
		m.removedmembers[ids[i]] = struct{}{}
	}
}

// RemovedMembers returns the removed IDs of the "members" edge to the OrgMembership entity.
func (m *OrganizationMutation) RemovedMembersIDs() (ids []string) {
	for id := range m.removedmembers {
		ids = append(ids, id)
	}
	return
}

// MembersIDs returns the "members" edge IDs in the mutation.
func (m *OrganizationMutation) MembersIDs() (ids []string) {
	for id := range m.members {
		ids = append(ids, id)
	}
	return
}

// ResetMembers resets all changes to the "members" edge.
func (m *OrganizationMutation) ResetMembers() {
	m.members = nil
	m.clearedmembers = false
	m.removedmembers = nil
}

// Where appends a list predicates to the OrganizationMutation builder.
func (m *OrganizationMutation) Where(ps ...predicate.Organization) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrganizationMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrganizationMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Organization, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrganizationMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrganizationMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Organization).
func (m *OrganizationMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrganizationMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, organization.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, organization.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, organization.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, organization.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, organization.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, organization.FieldDeletedBy)
	}
	if m.name != nil {
		fields = append(fields, organization.FieldName)
	}
	if m.display_name != nil {
		fields = append(fields, organization.FieldDisplayName)
	}
	if m.description != nil {
		fields = append(fields, organization.FieldDescription)
	}
	if m.parent != nil {
		fields = append(fields, organization.FieldParentOrganizationID)
	}
	if m.personal_org != nil {
		fields = append(fields, organization.FieldPersonalOrg)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrganizationMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case organization.FieldCreatedAt:
		return m.CreatedAt()
	case organization.FieldUpdatedAt:
		return m.UpdatedAt()
	case organization.FieldCreatedBy:
		return m.CreatedBy()
	case organization.FieldUpdatedBy:
		return m.UpdatedBy()
	case organization.FieldDeletedAt:
		return m.DeletedAt()
	case organization.FieldDeletedBy:
		return m.DeletedBy()
	case organization.FieldName:
		return m.Name()
	case organization.FieldDisplayName:
		return m.DisplayName()
	case organization.FieldDescription:
		return m.Description()
	case organization.FieldParentOrganizationID:
		return m.ParentOrganizationID()
	case organization.FieldPersonalOrg:
		return m.PersonalOrg()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrganizationMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case organization.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case organization.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case organization.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case organization.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case organization.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case organization.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case organization.FieldName:
		return m.OldName(ctx)
	case organization.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case organization.FieldDescription:
		return m.OldDescription(ctx)
	case organization.FieldParentOrganizationID:
		return m.OldParentOrganizationID(ctx)
	case organization.FieldPersonalOrg:
		return m.OldPersonalOrg(ctx)
	}
	return nil, fmt.Errorf("unknown Organization field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationMutation) SetField(name string, value ent.Value) error {
	switch name {
	case organization.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case organization.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case organization.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case organization.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case organization.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case organization.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case organization.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case organization.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case organization.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case organization.FieldParentOrganizationID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetParentOrganizationID(v)
		return nil
	case organization.FieldPersonalOrg:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPersonalOrg(v)
		return nil
	}
	return fmt.Errorf("unknown Organization field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrganizationMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrganizationMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Organization numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrganizationMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(organization.FieldCreatedBy) {
		fields = append(fields, organization.FieldCreatedBy)
	}
	if m.FieldCleared(organization.FieldUpdatedBy) {
		fields = append(fields, organization.FieldUpdatedBy)
	}
	if m.FieldCleared(organization.FieldDeletedAt) {
		fields = append(fields, organization.FieldDeletedAt)
	}
	if m.FieldCleared(organization.FieldDeletedBy) {
		fields = append(fields, organization.FieldDeletedBy)
	}
	if m.FieldCleared(organization.FieldDescription) {
		fields = append(fields, organization.FieldDescription)
	}
	if m.FieldCleared(organization.FieldParentOrganizationID) {
		fields = append(fields, organization.FieldParentOrganizationID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrganizationMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrganizationMutation) ClearField(name string) error {
	switch name {
	case organization.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case organization.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case organization.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case organization.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case organization.FieldDescription:
		m.ClearDescription()
		return nil
	case organization.FieldParentOrganizationID:
		m.ClearParentOrganizationID()
		return nil
	}
	return fmt.Errorf("unknown Organization nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrganizationMutation) ResetField(name string) error {
	switch name {
	case organization.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case organization.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case organization.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case organization.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case organization.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case organization.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case organization.FieldName:
		m.ResetName()
		return nil
	case organization.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case organization.FieldDescription:
		m.ResetDescription()
		return nil
	case organization.FieldParentOrganizationID:
		m.ResetParentOrganizationID()
		return nil
	case organization.FieldPersonalOrg:
		m.ResetPersonalOrg()
		return nil
	}
	return fmt.Errorf("unknown Organization field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrganizationMutation) AddedEdges() []string {
	edges := make([]string, 0, 10)
	if m.parent != nil {
		edges = append(edges, organization.EdgeParent)
	}
	if m.children != nil {
		edges = append(edges, organization.EdgeChildren)
	}
	if m.groups != nil {
		edges = append(edges, organization.EdgeGroups)
	}
	if m.integrations != nil {
		edges = append(edges, organization.EdgeIntegrations)
	}
	if m.setting != nil {
		edges = append(edges, organization.EdgeSetting)
	}
	if m.entitlements != nil {
		edges = append(edges, organization.EdgeEntitlements)
	}
	if m.oauthprovider != nil {
		edges = append(edges, organization.EdgeOauthprovider)
	}
	if m.users != nil {
		edges = append(edges, organization.EdgeUsers)
	}
	if m.invites != nil {
		edges = append(edges, organization.EdgeInvites)
	}
	if m.members != nil {
		edges = append(edges, organization.EdgeMembers)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrganizationMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case organization.EdgeParent:
		if id := m.parent; id != nil {
			return []ent.Value{*id}
		}
	case organization.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.children))
		for id := range m.children {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeIntegrations:
		ids := make([]ent.Value, 0, len(m.integrations))
		for id := range m.integrations {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeSetting:
		if id := m.setting; id != nil {
			return []ent.Value{*id}
		}
	case organization.EdgeEntitlements:
		ids := make([]ent.Value, 0, len(m.entitlements))
		for id := range m.entitlements {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeOauthprovider:
		ids := make([]ent.Value, 0, len(m.oauthprovider))
		for id := range m.oauthprovider {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.users))
		for id := range m.users {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeInvites:
		ids := make([]ent.Value, 0, len(m.invites))
		for id := range m.invites {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.members))
		for id := range m.members {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrganizationMutation) RemovedEdges() []string {
	edges := make([]string, 0, 10)
	if m.removedchildren != nil {
		edges = append(edges, organization.EdgeChildren)
	}
	if m.removedgroups != nil {
		edges = append(edges, organization.EdgeGroups)
	}
	if m.removedintegrations != nil {
		edges = append(edges, organization.EdgeIntegrations)
	}
	if m.removedentitlements != nil {
		edges = append(edges, organization.EdgeEntitlements)
	}
	if m.removedoauthprovider != nil {
		edges = append(edges, organization.EdgeOauthprovider)
	}
	if m.removedusers != nil {
		edges = append(edges, organization.EdgeUsers)
	}
	if m.removedinvites != nil {
		edges = append(edges, organization.EdgeInvites)
	}
	if m.removedmembers != nil {
		edges = append(edges, organization.EdgeMembers)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrganizationMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case organization.EdgeChildren:
		ids := make([]ent.Value, 0, len(m.removedchildren))
		for id := range m.removedchildren {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeIntegrations:
		ids := make([]ent.Value, 0, len(m.removedintegrations))
		for id := range m.removedintegrations {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeEntitlements:
		ids := make([]ent.Value, 0, len(m.removedentitlements))
		for id := range m.removedentitlements {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeOauthprovider:
		ids := make([]ent.Value, 0, len(m.removedoauthprovider))
		for id := range m.removedoauthprovider {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeUsers:
		ids := make([]ent.Value, 0, len(m.removedusers))
		for id := range m.removedusers {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeInvites:
		ids := make([]ent.Value, 0, len(m.removedinvites))
		for id := range m.removedinvites {
			ids = append(ids, id)
		}
		return ids
	case organization.EdgeMembers:
		ids := make([]ent.Value, 0, len(m.removedmembers))
		for id := range m.removedmembers {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrganizationMutation) ClearedEdges() []string {
	edges := make([]string, 0, 10)
	if m.clearedparent {
		edges = append(edges, organization.EdgeParent)
	}
	if m.clearedchildren {
		edges = append(edges, organization.EdgeChildren)
	}
	if m.clearedgroups {
		edges = append(edges, organization.EdgeGroups)
	}
	if m.clearedintegrations {
		edges = append(edges, organization.EdgeIntegrations)
	}
	if m.clearedsetting {
		edges = append(edges, organization.EdgeSetting)
	}
	if m.clearedentitlements {
		edges = append(edges, organization.EdgeEntitlements)
	}
	if m.clearedoauthprovider {
		edges = append(edges, organization.EdgeOauthprovider)
	}
	if m.clearedusers {
		edges = append(edges, organization.EdgeUsers)
	}
	if m.clearedinvites {
		edges = append(edges, organization.EdgeInvites)
	}
	if m.clearedmembers {
		edges = append(edges, organization.EdgeMembers)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrganizationMutation) EdgeCleared(name string) bool {
	switch name {
	case organization.EdgeParent:
		return m.clearedparent
	case organization.EdgeChildren:
		return m.clearedchildren
	case organization.EdgeGroups:
		return m.clearedgroups
	case organization.EdgeIntegrations:
		return m.clearedintegrations
	case organization.EdgeSetting:
		return m.clearedsetting
	case organization.EdgeEntitlements:
		return m.clearedentitlements
	case organization.EdgeOauthprovider:
		return m.clearedoauthprovider
	case organization.EdgeUsers:
		return m.clearedusers
	case organization.EdgeInvites:
		return m.clearedinvites
	case organization.EdgeMembers:
		return m.clearedmembers
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrganizationMutation) ClearEdge(name string) error {
	switch name {
	case organization.EdgeParent:
		m.ClearParent()
		return nil
	case organization.EdgeSetting:
		m.ClearSetting()
		return nil
	}
	return fmt.Errorf("unknown Organization unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrganizationMutation) ResetEdge(name string) error {
	switch name {
	case organization.EdgeParent:
		m.ResetParent()
		return nil
	case organization.EdgeChildren:
		m.ResetChildren()
		return nil
	case organization.EdgeGroups:
		m.ResetGroups()
		return nil
	case organization.EdgeIntegrations:
		m.ResetIntegrations()
		return nil
	case organization.EdgeSetting:
		m.ResetSetting()
		return nil
	case organization.EdgeEntitlements:
		m.ResetEntitlements()
		return nil
	case organization.EdgeOauthprovider:
		m.ResetOauthprovider()
		return nil
	case organization.EdgeUsers:
		m.ResetUsers()
		return nil
	case organization.EdgeInvites:
		m.ResetInvites()
		return nil
	case organization.EdgeMembers:
		m.ResetMembers()
		return nil
	}
	return fmt.Errorf("unknown Organization edge %s", name)
}

// OrganizationSettingMutation represents an operation that mutates the OrganizationSetting nodes in the graph.
type OrganizationSettingMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	created_at          *time.Time
	updated_at          *time.Time
	created_by          *string
	updated_by          *string
	deleted_at          *time.Time
	deleted_by          *string
	domains             *[]string
	appenddomains       []string
	sso_cert            *string
	sso_entrypoint      *string
	sso_issuer          *string
	billing_contact     *string
	billing_email       *string
	billing_phone       *string
	billing_address     *string
	tax_identifier      *string
	tags                *[]string
	appendtags          []string
	clearedFields       map[string]struct{}
	organization        *string
	clearedorganization bool
	done                bool
	oldValue            func(context.Context) (*OrganizationSetting, error)
	predicates          []predicate.OrganizationSetting
}

var _ ent.Mutation = (*OrganizationSettingMutation)(nil)

// organizationsettingOption allows management of the mutation configuration using functional options.
type organizationsettingOption func(*OrganizationSettingMutation)

// newOrganizationSettingMutation creates new mutation for the OrganizationSetting entity.
func newOrganizationSettingMutation(c config, op Op, opts ...organizationsettingOption) *OrganizationSettingMutation {
	m := &OrganizationSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeOrganizationSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withOrganizationSettingID sets the ID field of the mutation.
func withOrganizationSettingID(id string) organizationsettingOption {
	return func(m *OrganizationSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *OrganizationSetting
		)
		m.oldValue = func(ctx context.Context) (*OrganizationSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().OrganizationSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withOrganizationSetting sets the old OrganizationSetting of the mutation.
func withOrganizationSetting(node *OrganizationSetting) organizationsettingOption {
	return func(m *OrganizationSettingMutation) {
		m.oldValue = func(context.Context) (*OrganizationSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m OrganizationSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m OrganizationSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of OrganizationSetting entities.
func (m *OrganizationSettingMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *OrganizationSettingMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *OrganizationSettingMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().OrganizationSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *OrganizationSettingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *OrganizationSettingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *OrganizationSettingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *OrganizationSettingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *OrganizationSettingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *OrganizationSettingMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *OrganizationSettingMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *OrganizationSettingMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *OrganizationSettingMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[organizationsetting.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *OrganizationSettingMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[organizationsetting.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *OrganizationSettingMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, organizationsetting.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *OrganizationSettingMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *OrganizationSettingMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *OrganizationSettingMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[organizationsetting.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *OrganizationSettingMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[organizationsetting.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *OrganizationSettingMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, organizationsetting.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *OrganizationSettingMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *OrganizationSettingMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *OrganizationSettingMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[organizationsetting.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *OrganizationSettingMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[organizationsetting.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *OrganizationSettingMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, organizationsetting.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *OrganizationSettingMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *OrganizationSettingMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *OrganizationSettingMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[organizationsetting.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *OrganizationSettingMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[organizationsetting.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *OrganizationSettingMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, organizationsetting.FieldDeletedBy)
}

// SetDomains sets the "domains" field.
func (m *OrganizationSettingMutation) SetDomains(s []string) {
	m.domains = &s
	m.appenddomains = nil
}

// Domains returns the value of the "domains" field in the mutation.
func (m *OrganizationSettingMutation) Domains() (r []string, exists bool) {
	v := m.domains
	if v == nil {
		return
	}
	return *v, true
}

// OldDomains returns the old "domains" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldDomains(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomains is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomains requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomains: %w", err)
	}
	return oldValue.Domains, nil
}

// AppendDomains adds s to the "domains" field.
func (m *OrganizationSettingMutation) AppendDomains(s []string) {
	m.appenddomains = append(m.appenddomains, s...)
}

// AppendedDomains returns the list of values that were appended to the "domains" field in this mutation.
func (m *OrganizationSettingMutation) AppendedDomains() ([]string, bool) {
	if len(m.appenddomains) == 0 {
		return nil, false
	}
	return m.appenddomains, true
}

// ClearDomains clears the value of the "domains" field.
func (m *OrganizationSettingMutation) ClearDomains() {
	m.domains = nil
	m.appenddomains = nil
	m.clearedFields[organizationsetting.FieldDomains] = struct{}{}
}

// DomainsCleared returns if the "domains" field was cleared in this mutation.
func (m *OrganizationSettingMutation) DomainsCleared() bool {
	_, ok := m.clearedFields[organizationsetting.FieldDomains]
	return ok
}

// ResetDomains resets all changes to the "domains" field.
func (m *OrganizationSettingMutation) ResetDomains() {
	m.domains = nil
	m.appenddomains = nil
	delete(m.clearedFields, organizationsetting.FieldDomains)
}

// SetSSOCert sets the "sso_cert" field.
func (m *OrganizationSettingMutation) SetSSOCert(s string) {
	m.sso_cert = &s
}

// SSOCert returns the value of the "sso_cert" field in the mutation.
func (m *OrganizationSettingMutation) SSOCert() (r string, exists bool) {
	v := m.sso_cert
	if v == nil {
		return
	}
	return *v, true
}

// OldSSOCert returns the old "sso_cert" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldSSOCert(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSSOCert is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSSOCert requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSSOCert: %w", err)
	}
	return oldValue.SSOCert, nil
}

// ClearSSOCert clears the value of the "sso_cert" field.
func (m *OrganizationSettingMutation) ClearSSOCert() {
	m.sso_cert = nil
	m.clearedFields[organizationsetting.FieldSSOCert] = struct{}{}
}

// SSOCertCleared returns if the "sso_cert" field was cleared in this mutation.
func (m *OrganizationSettingMutation) SSOCertCleared() bool {
	_, ok := m.clearedFields[organizationsetting.FieldSSOCert]
	return ok
}

// ResetSSOCert resets all changes to the "sso_cert" field.
func (m *OrganizationSettingMutation) ResetSSOCert() {
	m.sso_cert = nil
	delete(m.clearedFields, organizationsetting.FieldSSOCert)
}

// SetSSOEntrypoint sets the "sso_entrypoint" field.
func (m *OrganizationSettingMutation) SetSSOEntrypoint(s string) {
	m.sso_entrypoint = &s
}

// SSOEntrypoint returns the value of the "sso_entrypoint" field in the mutation.
func (m *OrganizationSettingMutation) SSOEntrypoint() (r string, exists bool) {
	v := m.sso_entrypoint
	if v == nil {
		return
	}
	return *v, true
}

// OldSSOEntrypoint returns the old "sso_entrypoint" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldSSOEntrypoint(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSSOEntrypoint is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSSOEntrypoint requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSSOEntrypoint: %w", err)
	}
	return oldValue.SSOEntrypoint, nil
}

// ClearSSOEntrypoint clears the value of the "sso_entrypoint" field.
func (m *OrganizationSettingMutation) ClearSSOEntrypoint() {
	m.sso_entrypoint = nil
	m.clearedFields[organizationsetting.FieldSSOEntrypoint] = struct{}{}
}

// SSOEntrypointCleared returns if the "sso_entrypoint" field was cleared in this mutation.
func (m *OrganizationSettingMutation) SSOEntrypointCleared() bool {
	_, ok := m.clearedFields[organizationsetting.FieldSSOEntrypoint]
	return ok
}

// ResetSSOEntrypoint resets all changes to the "sso_entrypoint" field.
func (m *OrganizationSettingMutation) ResetSSOEntrypoint() {
	m.sso_entrypoint = nil
	delete(m.clearedFields, organizationsetting.FieldSSOEntrypoint)
}

// SetSSOIssuer sets the "sso_issuer" field.
func (m *OrganizationSettingMutation) SetSSOIssuer(s string) {
	m.sso_issuer = &s
}

// SSOIssuer returns the value of the "sso_issuer" field in the mutation.
func (m *OrganizationSettingMutation) SSOIssuer() (r string, exists bool) {
	v := m.sso_issuer
	if v == nil {
		return
	}
	return *v, true
}

// OldSSOIssuer returns the old "sso_issuer" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldSSOIssuer(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSSOIssuer is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSSOIssuer requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSSOIssuer: %w", err)
	}
	return oldValue.SSOIssuer, nil
}

// ClearSSOIssuer clears the value of the "sso_issuer" field.
func (m *OrganizationSettingMutation) ClearSSOIssuer() {
	m.sso_issuer = nil
	m.clearedFields[organizationsetting.FieldSSOIssuer] = struct{}{}
}

// SSOIssuerCleared returns if the "sso_issuer" field was cleared in this mutation.
func (m *OrganizationSettingMutation) SSOIssuerCleared() bool {
	_, ok := m.clearedFields[organizationsetting.FieldSSOIssuer]
	return ok
}

// ResetSSOIssuer resets all changes to the "sso_issuer" field.
func (m *OrganizationSettingMutation) ResetSSOIssuer() {
	m.sso_issuer = nil
	delete(m.clearedFields, organizationsetting.FieldSSOIssuer)
}

// SetBillingContact sets the "billing_contact" field.
func (m *OrganizationSettingMutation) SetBillingContact(s string) {
	m.billing_contact = &s
}

// BillingContact returns the value of the "billing_contact" field in the mutation.
func (m *OrganizationSettingMutation) BillingContact() (r string, exists bool) {
	v := m.billing_contact
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingContact returns the old "billing_contact" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldBillingContact(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingContact is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingContact requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingContact: %w", err)
	}
	return oldValue.BillingContact, nil
}

// ClearBillingContact clears the value of the "billing_contact" field.
func (m *OrganizationSettingMutation) ClearBillingContact() {
	m.billing_contact = nil
	m.clearedFields[organizationsetting.FieldBillingContact] = struct{}{}
}

// BillingContactCleared returns if the "billing_contact" field was cleared in this mutation.
func (m *OrganizationSettingMutation) BillingContactCleared() bool {
	_, ok := m.clearedFields[organizationsetting.FieldBillingContact]
	return ok
}

// ResetBillingContact resets all changes to the "billing_contact" field.
func (m *OrganizationSettingMutation) ResetBillingContact() {
	m.billing_contact = nil
	delete(m.clearedFields, organizationsetting.FieldBillingContact)
}

// SetBillingEmail sets the "billing_email" field.
func (m *OrganizationSettingMutation) SetBillingEmail(s string) {
	m.billing_email = &s
}

// BillingEmail returns the value of the "billing_email" field in the mutation.
func (m *OrganizationSettingMutation) BillingEmail() (r string, exists bool) {
	v := m.billing_email
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingEmail returns the old "billing_email" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldBillingEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingEmail: %w", err)
	}
	return oldValue.BillingEmail, nil
}

// ClearBillingEmail clears the value of the "billing_email" field.
func (m *OrganizationSettingMutation) ClearBillingEmail() {
	m.billing_email = nil
	m.clearedFields[organizationsetting.FieldBillingEmail] = struct{}{}
}

// BillingEmailCleared returns if the "billing_email" field was cleared in this mutation.
func (m *OrganizationSettingMutation) BillingEmailCleared() bool {
	_, ok := m.clearedFields[organizationsetting.FieldBillingEmail]
	return ok
}

// ResetBillingEmail resets all changes to the "billing_email" field.
func (m *OrganizationSettingMutation) ResetBillingEmail() {
	m.billing_email = nil
	delete(m.clearedFields, organizationsetting.FieldBillingEmail)
}

// SetBillingPhone sets the "billing_phone" field.
func (m *OrganizationSettingMutation) SetBillingPhone(s string) {
	m.billing_phone = &s
}

// BillingPhone returns the value of the "billing_phone" field in the mutation.
func (m *OrganizationSettingMutation) BillingPhone() (r string, exists bool) {
	v := m.billing_phone
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingPhone returns the old "billing_phone" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldBillingPhone(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingPhone is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingPhone requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingPhone: %w", err)
	}
	return oldValue.BillingPhone, nil
}

// ClearBillingPhone clears the value of the "billing_phone" field.
func (m *OrganizationSettingMutation) ClearBillingPhone() {
	m.billing_phone = nil
	m.clearedFields[organizationsetting.FieldBillingPhone] = struct{}{}
}

// BillingPhoneCleared returns if the "billing_phone" field was cleared in this mutation.
func (m *OrganizationSettingMutation) BillingPhoneCleared() bool {
	_, ok := m.clearedFields[organizationsetting.FieldBillingPhone]
	return ok
}

// ResetBillingPhone resets all changes to the "billing_phone" field.
func (m *OrganizationSettingMutation) ResetBillingPhone() {
	m.billing_phone = nil
	delete(m.clearedFields, organizationsetting.FieldBillingPhone)
}

// SetBillingAddress sets the "billing_address" field.
func (m *OrganizationSettingMutation) SetBillingAddress(s string) {
	m.billing_address = &s
}

// BillingAddress returns the value of the "billing_address" field in the mutation.
func (m *OrganizationSettingMutation) BillingAddress() (r string, exists bool) {
	v := m.billing_address
	if v == nil {
		return
	}
	return *v, true
}

// OldBillingAddress returns the old "billing_address" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldBillingAddress(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBillingAddress is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBillingAddress requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBillingAddress: %w", err)
	}
	return oldValue.BillingAddress, nil
}

// ClearBillingAddress clears the value of the "billing_address" field.
func (m *OrganizationSettingMutation) ClearBillingAddress() {
	m.billing_address = nil
	m.clearedFields[organizationsetting.FieldBillingAddress] = struct{}{}
}

// BillingAddressCleared returns if the "billing_address" field was cleared in this mutation.
func (m *OrganizationSettingMutation) BillingAddressCleared() bool {
	_, ok := m.clearedFields[organizationsetting.FieldBillingAddress]
	return ok
}

// ResetBillingAddress resets all changes to the "billing_address" field.
func (m *OrganizationSettingMutation) ResetBillingAddress() {
	m.billing_address = nil
	delete(m.clearedFields, organizationsetting.FieldBillingAddress)
}

// SetTaxIdentifier sets the "tax_identifier" field.
func (m *OrganizationSettingMutation) SetTaxIdentifier(s string) {
	m.tax_identifier = &s
}

// TaxIdentifier returns the value of the "tax_identifier" field in the mutation.
func (m *OrganizationSettingMutation) TaxIdentifier() (r string, exists bool) {
	v := m.tax_identifier
	if v == nil {
		return
	}
	return *v, true
}

// OldTaxIdentifier returns the old "tax_identifier" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldTaxIdentifier(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaxIdentifier is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaxIdentifier requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaxIdentifier: %w", err)
	}
	return oldValue.TaxIdentifier, nil
}

// ClearTaxIdentifier clears the value of the "tax_identifier" field.
func (m *OrganizationSettingMutation) ClearTaxIdentifier() {
	m.tax_identifier = nil
	m.clearedFields[organizationsetting.FieldTaxIdentifier] = struct{}{}
}

// TaxIdentifierCleared returns if the "tax_identifier" field was cleared in this mutation.
func (m *OrganizationSettingMutation) TaxIdentifierCleared() bool {
	_, ok := m.clearedFields[organizationsetting.FieldTaxIdentifier]
	return ok
}

// ResetTaxIdentifier resets all changes to the "tax_identifier" field.
func (m *OrganizationSettingMutation) ResetTaxIdentifier() {
	m.tax_identifier = nil
	delete(m.clearedFields, organizationsetting.FieldTaxIdentifier)
}

// SetTags sets the "tags" field.
func (m *OrganizationSettingMutation) SetTags(s []string) {
	m.tags = &s
	m.appendtags = nil
}

// Tags returns the value of the "tags" field in the mutation.
func (m *OrganizationSettingMutation) Tags() (r []string, exists bool) {
	v := m.tags
	if v == nil {
		return
	}
	return *v, true
}

// OldTags returns the old "tags" field's value of the OrganizationSetting entity.
// If the OrganizationSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *OrganizationSettingMutation) OldTags(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTags: %w", err)
	}
	return oldValue.Tags, nil
}

// AppendTags adds s to the "tags" field.
func (m *OrganizationSettingMutation) AppendTags(s []string) {
	m.appendtags = append(m.appendtags, s...)
}

// AppendedTags returns the list of values that were appended to the "tags" field in this mutation.
func (m *OrganizationSettingMutation) AppendedTags() ([]string, bool) {
	if len(m.appendtags) == 0 {
		return nil, false
	}
	return m.appendtags, true
}

// ClearTags clears the value of the "tags" field.
func (m *OrganizationSettingMutation) ClearTags() {
	m.tags = nil
	m.appendtags = nil
	m.clearedFields[organizationsetting.FieldTags] = struct{}{}
}

// TagsCleared returns if the "tags" field was cleared in this mutation.
func (m *OrganizationSettingMutation) TagsCleared() bool {
	_, ok := m.clearedFields[organizationsetting.FieldTags]
	return ok
}

// ResetTags resets all changes to the "tags" field.
func (m *OrganizationSettingMutation) ResetTags() {
	m.tags = nil
	m.appendtags = nil
	delete(m.clearedFields, organizationsetting.FieldTags)
}

// SetOrganizationID sets the "organization" edge to the Organization entity by id.
func (m *OrganizationSettingMutation) SetOrganizationID(id string) {
	m.organization = &id
}

// ClearOrganization clears the "organization" edge to the Organization entity.
func (m *OrganizationSettingMutation) ClearOrganization() {
	m.clearedorganization = true
}

// OrganizationCleared reports if the "organization" edge to the Organization entity was cleared.
func (m *OrganizationSettingMutation) OrganizationCleared() bool {
	return m.clearedorganization
}

// OrganizationID returns the "organization" edge ID in the mutation.
func (m *OrganizationSettingMutation) OrganizationID() (id string, exists bool) {
	if m.organization != nil {
		return *m.organization, true
	}
	return
}

// OrganizationIDs returns the "organization" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OrganizationID instead. It exists only for internal usage by the builders.
func (m *OrganizationSettingMutation) OrganizationIDs() (ids []string) {
	if id := m.organization; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOrganization resets all changes to the "organization" edge.
func (m *OrganizationSettingMutation) ResetOrganization() {
	m.organization = nil
	m.clearedorganization = false
}

// Where appends a list predicates to the OrganizationSettingMutation builder.
func (m *OrganizationSettingMutation) Where(ps ...predicate.OrganizationSetting) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the OrganizationSettingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *OrganizationSettingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.OrganizationSetting, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *OrganizationSettingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *OrganizationSettingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (OrganizationSetting).
func (m *OrganizationSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *OrganizationSettingMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.created_at != nil {
		fields = append(fields, organizationsetting.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, organizationsetting.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, organizationsetting.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, organizationsetting.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, organizationsetting.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, organizationsetting.FieldDeletedBy)
	}
	if m.domains != nil {
		fields = append(fields, organizationsetting.FieldDomains)
	}
	if m.sso_cert != nil {
		fields = append(fields, organizationsetting.FieldSSOCert)
	}
	if m.sso_entrypoint != nil {
		fields = append(fields, organizationsetting.FieldSSOEntrypoint)
	}
	if m.sso_issuer != nil {
		fields = append(fields, organizationsetting.FieldSSOIssuer)
	}
	if m.billing_contact != nil {
		fields = append(fields, organizationsetting.FieldBillingContact)
	}
	if m.billing_email != nil {
		fields = append(fields, organizationsetting.FieldBillingEmail)
	}
	if m.billing_phone != nil {
		fields = append(fields, organizationsetting.FieldBillingPhone)
	}
	if m.billing_address != nil {
		fields = append(fields, organizationsetting.FieldBillingAddress)
	}
	if m.tax_identifier != nil {
		fields = append(fields, organizationsetting.FieldTaxIdentifier)
	}
	if m.tags != nil {
		fields = append(fields, organizationsetting.FieldTags)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *OrganizationSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case organizationsetting.FieldCreatedAt:
		return m.CreatedAt()
	case organizationsetting.FieldUpdatedAt:
		return m.UpdatedAt()
	case organizationsetting.FieldCreatedBy:
		return m.CreatedBy()
	case organizationsetting.FieldUpdatedBy:
		return m.UpdatedBy()
	case organizationsetting.FieldDeletedAt:
		return m.DeletedAt()
	case organizationsetting.FieldDeletedBy:
		return m.DeletedBy()
	case organizationsetting.FieldDomains:
		return m.Domains()
	case organizationsetting.FieldSSOCert:
		return m.SSOCert()
	case organizationsetting.FieldSSOEntrypoint:
		return m.SSOEntrypoint()
	case organizationsetting.FieldSSOIssuer:
		return m.SSOIssuer()
	case organizationsetting.FieldBillingContact:
		return m.BillingContact()
	case organizationsetting.FieldBillingEmail:
		return m.BillingEmail()
	case organizationsetting.FieldBillingPhone:
		return m.BillingPhone()
	case organizationsetting.FieldBillingAddress:
		return m.BillingAddress()
	case organizationsetting.FieldTaxIdentifier:
		return m.TaxIdentifier()
	case organizationsetting.FieldTags:
		return m.Tags()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *OrganizationSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case organizationsetting.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case organizationsetting.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case organizationsetting.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case organizationsetting.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case organizationsetting.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case organizationsetting.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case organizationsetting.FieldDomains:
		return m.OldDomains(ctx)
	case organizationsetting.FieldSSOCert:
		return m.OldSSOCert(ctx)
	case organizationsetting.FieldSSOEntrypoint:
		return m.OldSSOEntrypoint(ctx)
	case organizationsetting.FieldSSOIssuer:
		return m.OldSSOIssuer(ctx)
	case organizationsetting.FieldBillingContact:
		return m.OldBillingContact(ctx)
	case organizationsetting.FieldBillingEmail:
		return m.OldBillingEmail(ctx)
	case organizationsetting.FieldBillingPhone:
		return m.OldBillingPhone(ctx)
	case organizationsetting.FieldBillingAddress:
		return m.OldBillingAddress(ctx)
	case organizationsetting.FieldTaxIdentifier:
		return m.OldTaxIdentifier(ctx)
	case organizationsetting.FieldTags:
		return m.OldTags(ctx)
	}
	return nil, fmt.Errorf("unknown OrganizationSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case organizationsetting.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case organizationsetting.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case organizationsetting.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case organizationsetting.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case organizationsetting.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case organizationsetting.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case organizationsetting.FieldDomains:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomains(v)
		return nil
	case organizationsetting.FieldSSOCert:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSSOCert(v)
		return nil
	case organizationsetting.FieldSSOEntrypoint:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSSOEntrypoint(v)
		return nil
	case organizationsetting.FieldSSOIssuer:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSSOIssuer(v)
		return nil
	case organizationsetting.FieldBillingContact:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingContact(v)
		return nil
	case organizationsetting.FieldBillingEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingEmail(v)
		return nil
	case organizationsetting.FieldBillingPhone:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingPhone(v)
		return nil
	case organizationsetting.FieldBillingAddress:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBillingAddress(v)
		return nil
	case organizationsetting.FieldTaxIdentifier:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaxIdentifier(v)
		return nil
	case organizationsetting.FieldTags:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTags(v)
		return nil
	}
	return fmt.Errorf("unknown OrganizationSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *OrganizationSettingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *OrganizationSettingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *OrganizationSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown OrganizationSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *OrganizationSettingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(organizationsetting.FieldCreatedBy) {
		fields = append(fields, organizationsetting.FieldCreatedBy)
	}
	if m.FieldCleared(organizationsetting.FieldUpdatedBy) {
		fields = append(fields, organizationsetting.FieldUpdatedBy)
	}
	if m.FieldCleared(organizationsetting.FieldDeletedAt) {
		fields = append(fields, organizationsetting.FieldDeletedAt)
	}
	if m.FieldCleared(organizationsetting.FieldDeletedBy) {
		fields = append(fields, organizationsetting.FieldDeletedBy)
	}
	if m.FieldCleared(organizationsetting.FieldDomains) {
		fields = append(fields, organizationsetting.FieldDomains)
	}
	if m.FieldCleared(organizationsetting.FieldSSOCert) {
		fields = append(fields, organizationsetting.FieldSSOCert)
	}
	if m.FieldCleared(organizationsetting.FieldSSOEntrypoint) {
		fields = append(fields, organizationsetting.FieldSSOEntrypoint)
	}
	if m.FieldCleared(organizationsetting.FieldSSOIssuer) {
		fields = append(fields, organizationsetting.FieldSSOIssuer)
	}
	if m.FieldCleared(organizationsetting.FieldBillingContact) {
		fields = append(fields, organizationsetting.FieldBillingContact)
	}
	if m.FieldCleared(organizationsetting.FieldBillingEmail) {
		fields = append(fields, organizationsetting.FieldBillingEmail)
	}
	if m.FieldCleared(organizationsetting.FieldBillingPhone) {
		fields = append(fields, organizationsetting.FieldBillingPhone)
	}
	if m.FieldCleared(organizationsetting.FieldBillingAddress) {
		fields = append(fields, organizationsetting.FieldBillingAddress)
	}
	if m.FieldCleared(organizationsetting.FieldTaxIdentifier) {
		fields = append(fields, organizationsetting.FieldTaxIdentifier)
	}
	if m.FieldCleared(organizationsetting.FieldTags) {
		fields = append(fields, organizationsetting.FieldTags)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *OrganizationSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *OrganizationSettingMutation) ClearField(name string) error {
	switch name {
	case organizationsetting.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case organizationsetting.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case organizationsetting.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case organizationsetting.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case organizationsetting.FieldDomains:
		m.ClearDomains()
		return nil
	case organizationsetting.FieldSSOCert:
		m.ClearSSOCert()
		return nil
	case organizationsetting.FieldSSOEntrypoint:
		m.ClearSSOEntrypoint()
		return nil
	case organizationsetting.FieldSSOIssuer:
		m.ClearSSOIssuer()
		return nil
	case organizationsetting.FieldBillingContact:
		m.ClearBillingContact()
		return nil
	case organizationsetting.FieldBillingEmail:
		m.ClearBillingEmail()
		return nil
	case organizationsetting.FieldBillingPhone:
		m.ClearBillingPhone()
		return nil
	case organizationsetting.FieldBillingAddress:
		m.ClearBillingAddress()
		return nil
	case organizationsetting.FieldTaxIdentifier:
		m.ClearTaxIdentifier()
		return nil
	case organizationsetting.FieldTags:
		m.ClearTags()
		return nil
	}
	return fmt.Errorf("unknown OrganizationSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *OrganizationSettingMutation) ResetField(name string) error {
	switch name {
	case organizationsetting.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case organizationsetting.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case organizationsetting.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case organizationsetting.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case organizationsetting.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case organizationsetting.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case organizationsetting.FieldDomains:
		m.ResetDomains()
		return nil
	case organizationsetting.FieldSSOCert:
		m.ResetSSOCert()
		return nil
	case organizationsetting.FieldSSOEntrypoint:
		m.ResetSSOEntrypoint()
		return nil
	case organizationsetting.FieldSSOIssuer:
		m.ResetSSOIssuer()
		return nil
	case organizationsetting.FieldBillingContact:
		m.ResetBillingContact()
		return nil
	case organizationsetting.FieldBillingEmail:
		m.ResetBillingEmail()
		return nil
	case organizationsetting.FieldBillingPhone:
		m.ResetBillingPhone()
		return nil
	case organizationsetting.FieldBillingAddress:
		m.ResetBillingAddress()
		return nil
	case organizationsetting.FieldTaxIdentifier:
		m.ResetTaxIdentifier()
		return nil
	case organizationsetting.FieldTags:
		m.ResetTags()
		return nil
	}
	return fmt.Errorf("unknown OrganizationSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *OrganizationSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.organization != nil {
		edges = append(edges, organizationsetting.EdgeOrganization)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *OrganizationSettingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case organizationsetting.EdgeOrganization:
		if id := m.organization; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *OrganizationSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *OrganizationSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *OrganizationSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedorganization {
		edges = append(edges, organizationsetting.EdgeOrganization)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *OrganizationSettingMutation) EdgeCleared(name string) bool {
	switch name {
	case organizationsetting.EdgeOrganization:
		return m.clearedorganization
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *OrganizationSettingMutation) ClearEdge(name string) error {
	switch name {
	case organizationsetting.EdgeOrganization:
		m.ClearOrganization()
		return nil
	}
	return fmt.Errorf("unknown OrganizationSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *OrganizationSettingMutation) ResetEdge(name string) error {
	switch name {
	case organizationsetting.EdgeOrganization:
		m.ResetOrganization()
		return nil
	}
	return fmt.Errorf("unknown OrganizationSetting edge %s", name)
}

// PasswordResetTokenMutation represents an operation that mutates the PasswordResetToken nodes in the graph.
type PasswordResetTokenMutation struct {
	config
	op            Op
	typ           string
	id            *string
	created_at    *time.Time
	updated_at    *time.Time
	created_by    *string
	updated_by    *string
	deleted_at    *time.Time
	deleted_by    *string
	token         *string
	ttl           *time.Time
	email         *string
	secret        *[]byte
	clearedFields map[string]struct{}
	owner         *string
	clearedowner  bool
	done          bool
	oldValue      func(context.Context) (*PasswordResetToken, error)
	predicates    []predicate.PasswordResetToken
}

var _ ent.Mutation = (*PasswordResetTokenMutation)(nil)

// passwordresettokenOption allows management of the mutation configuration using functional options.
type passwordresettokenOption func(*PasswordResetTokenMutation)

// newPasswordResetTokenMutation creates new mutation for the PasswordResetToken entity.
func newPasswordResetTokenMutation(c config, op Op, opts ...passwordresettokenOption) *PasswordResetTokenMutation {
	m := &PasswordResetTokenMutation{
		config:        c,
		op:            op,
		typ:           TypePasswordResetToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPasswordResetTokenID sets the ID field of the mutation.
func withPasswordResetTokenID(id string) passwordresettokenOption {
	return func(m *PasswordResetTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *PasswordResetToken
		)
		m.oldValue = func(ctx context.Context) (*PasswordResetToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PasswordResetToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPasswordResetToken sets the old PasswordResetToken of the mutation.
func withPasswordResetToken(node *PasswordResetToken) passwordresettokenOption {
	return func(m *PasswordResetTokenMutation) {
		m.oldValue = func(context.Context) (*PasswordResetToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PasswordResetTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PasswordResetTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PasswordResetToken entities.
func (m *PasswordResetTokenMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PasswordResetTokenMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PasswordResetTokenMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PasswordResetToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PasswordResetTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PasswordResetTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PasswordResetToken entity.
// If the PasswordResetToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasswordResetTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PasswordResetTokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PasswordResetTokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PasswordResetTokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PasswordResetToken entity.
// If the PasswordResetToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasswordResetTokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PasswordResetTokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *PasswordResetTokenMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *PasswordResetTokenMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the PasswordResetToken entity.
// If the PasswordResetToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasswordResetTokenMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *PasswordResetTokenMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[passwordresettoken.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *PasswordResetTokenMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[passwordresettoken.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *PasswordResetTokenMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, passwordresettoken.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *PasswordResetTokenMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *PasswordResetTokenMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the PasswordResetToken entity.
// If the PasswordResetToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasswordResetTokenMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *PasswordResetTokenMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[passwordresettoken.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *PasswordResetTokenMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[passwordresettoken.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *PasswordResetTokenMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, passwordresettoken.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PasswordResetTokenMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PasswordResetTokenMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the PasswordResetToken entity.
// If the PasswordResetToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasswordResetTokenMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *PasswordResetTokenMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[passwordresettoken.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *PasswordResetTokenMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[passwordresettoken.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PasswordResetTokenMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, passwordresettoken.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *PasswordResetTokenMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *PasswordResetTokenMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the PasswordResetToken entity.
// If the PasswordResetToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasswordResetTokenMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *PasswordResetTokenMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[passwordresettoken.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *PasswordResetTokenMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[passwordresettoken.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *PasswordResetTokenMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, passwordresettoken.FieldDeletedBy)
}

// SetOwnerID sets the "owner_id" field.
func (m *PasswordResetTokenMutation) SetOwnerID(s string) {
	m.owner = &s
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *PasswordResetTokenMutation) OwnerID() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the PasswordResetToken entity.
// If the PasswordResetToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasswordResetTokenMutation) OldOwnerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *PasswordResetTokenMutation) ResetOwnerID() {
	m.owner = nil
}

// SetToken sets the "token" field.
func (m *PasswordResetTokenMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *PasswordResetTokenMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the PasswordResetToken entity.
// If the PasswordResetToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasswordResetTokenMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *PasswordResetTokenMutation) ResetToken() {
	m.token = nil
}

// SetTTL sets the "ttl" field.
func (m *PasswordResetTokenMutation) SetTTL(t time.Time) {
	m.ttl = &t
}

// TTL returns the value of the "ttl" field in the mutation.
func (m *PasswordResetTokenMutation) TTL() (r time.Time, exists bool) {
	v := m.ttl
	if v == nil {
		return
	}
	return *v, true
}

// OldTTL returns the old "ttl" field's value of the PasswordResetToken entity.
// If the PasswordResetToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasswordResetTokenMutation) OldTTL(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTTL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTTL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTTL: %w", err)
	}
	return oldValue.TTL, nil
}

// ResetTTL resets all changes to the "ttl" field.
func (m *PasswordResetTokenMutation) ResetTTL() {
	m.ttl = nil
}

// SetEmail sets the "email" field.
func (m *PasswordResetTokenMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *PasswordResetTokenMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the PasswordResetToken entity.
// If the PasswordResetToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasswordResetTokenMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *PasswordResetTokenMutation) ResetEmail() {
	m.email = nil
}

// SetSecret sets the "secret" field.
func (m *PasswordResetTokenMutation) SetSecret(b []byte) {
	m.secret = &b
}

// Secret returns the value of the "secret" field in the mutation.
func (m *PasswordResetTokenMutation) Secret() (r []byte, exists bool) {
	v := m.secret
	if v == nil {
		return
	}
	return *v, true
}

// OldSecret returns the old "secret" field's value of the PasswordResetToken entity.
// If the PasswordResetToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PasswordResetTokenMutation) OldSecret(ctx context.Context) (v *[]byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSecret: %w", err)
	}
	return oldValue.Secret, nil
}

// ResetSecret resets all changes to the "secret" field.
func (m *PasswordResetTokenMutation) ResetSecret() {
	m.secret = nil
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *PasswordResetTokenMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[passwordresettoken.FieldOwnerID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *PasswordResetTokenMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *PasswordResetTokenMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *PasswordResetTokenMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the PasswordResetTokenMutation builder.
func (m *PasswordResetTokenMutation) Where(ps ...predicate.PasswordResetToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PasswordResetTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PasswordResetTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PasswordResetToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PasswordResetTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PasswordResetTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PasswordResetToken).
func (m *PasswordResetTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PasswordResetTokenMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.created_at != nil {
		fields = append(fields, passwordresettoken.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, passwordresettoken.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, passwordresettoken.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, passwordresettoken.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, passwordresettoken.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, passwordresettoken.FieldDeletedBy)
	}
	if m.owner != nil {
		fields = append(fields, passwordresettoken.FieldOwnerID)
	}
	if m.token != nil {
		fields = append(fields, passwordresettoken.FieldToken)
	}
	if m.ttl != nil {
		fields = append(fields, passwordresettoken.FieldTTL)
	}
	if m.email != nil {
		fields = append(fields, passwordresettoken.FieldEmail)
	}
	if m.secret != nil {
		fields = append(fields, passwordresettoken.FieldSecret)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PasswordResetTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case passwordresettoken.FieldCreatedAt:
		return m.CreatedAt()
	case passwordresettoken.FieldUpdatedAt:
		return m.UpdatedAt()
	case passwordresettoken.FieldCreatedBy:
		return m.CreatedBy()
	case passwordresettoken.FieldUpdatedBy:
		return m.UpdatedBy()
	case passwordresettoken.FieldDeletedAt:
		return m.DeletedAt()
	case passwordresettoken.FieldDeletedBy:
		return m.DeletedBy()
	case passwordresettoken.FieldOwnerID:
		return m.OwnerID()
	case passwordresettoken.FieldToken:
		return m.Token()
	case passwordresettoken.FieldTTL:
		return m.TTL()
	case passwordresettoken.FieldEmail:
		return m.Email()
	case passwordresettoken.FieldSecret:
		return m.Secret()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PasswordResetTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case passwordresettoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case passwordresettoken.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case passwordresettoken.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case passwordresettoken.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case passwordresettoken.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case passwordresettoken.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case passwordresettoken.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case passwordresettoken.FieldToken:
		return m.OldToken(ctx)
	case passwordresettoken.FieldTTL:
		return m.OldTTL(ctx)
	case passwordresettoken.FieldEmail:
		return m.OldEmail(ctx)
	case passwordresettoken.FieldSecret:
		return m.OldSecret(ctx)
	}
	return nil, fmt.Errorf("unknown PasswordResetToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PasswordResetTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case passwordresettoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case passwordresettoken.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case passwordresettoken.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case passwordresettoken.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case passwordresettoken.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case passwordresettoken.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case passwordresettoken.FieldOwnerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case passwordresettoken.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case passwordresettoken.FieldTTL:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTTL(v)
		return nil
	case passwordresettoken.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case passwordresettoken.FieldSecret:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSecret(v)
		return nil
	}
	return fmt.Errorf("unknown PasswordResetToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PasswordResetTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PasswordResetTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PasswordResetTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PasswordResetToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PasswordResetTokenMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(passwordresettoken.FieldCreatedBy) {
		fields = append(fields, passwordresettoken.FieldCreatedBy)
	}
	if m.FieldCleared(passwordresettoken.FieldUpdatedBy) {
		fields = append(fields, passwordresettoken.FieldUpdatedBy)
	}
	if m.FieldCleared(passwordresettoken.FieldDeletedAt) {
		fields = append(fields, passwordresettoken.FieldDeletedAt)
	}
	if m.FieldCleared(passwordresettoken.FieldDeletedBy) {
		fields = append(fields, passwordresettoken.FieldDeletedBy)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PasswordResetTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PasswordResetTokenMutation) ClearField(name string) error {
	switch name {
	case passwordresettoken.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case passwordresettoken.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case passwordresettoken.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case passwordresettoken.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	}
	return fmt.Errorf("unknown PasswordResetToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PasswordResetTokenMutation) ResetField(name string) error {
	switch name {
	case passwordresettoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case passwordresettoken.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case passwordresettoken.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case passwordresettoken.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case passwordresettoken.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case passwordresettoken.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case passwordresettoken.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case passwordresettoken.FieldToken:
		m.ResetToken()
		return nil
	case passwordresettoken.FieldTTL:
		m.ResetTTL()
		return nil
	case passwordresettoken.FieldEmail:
		m.ResetEmail()
		return nil
	case passwordresettoken.FieldSecret:
		m.ResetSecret()
		return nil
	}
	return fmt.Errorf("unknown PasswordResetToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PasswordResetTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, passwordresettoken.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PasswordResetTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case passwordresettoken.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PasswordResetTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PasswordResetTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PasswordResetTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, passwordresettoken.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PasswordResetTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case passwordresettoken.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PasswordResetTokenMutation) ClearEdge(name string) error {
	switch name {
	case passwordresettoken.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown PasswordResetToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PasswordResetTokenMutation) ResetEdge(name string) error {
	switch name {
	case passwordresettoken.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown PasswordResetToken edge %s", name)
}

// PersonalAccessTokenMutation represents an operation that mutates the PersonalAccessToken nodes in the graph.
type PersonalAccessTokenMutation struct {
	config
	op              Op
	typ             string
	id              *string
	created_at      *time.Time
	updated_at      *time.Time
	created_by      *string
	updated_by      *string
	deleted_at      *time.Time
	deleted_by      *string
	name            *string
	token           *string
	abilities       *[]string
	appendabilities []string
	expires_at      *time.Time
	description     *string
	last_used_at    *time.Time
	clearedFields   map[string]struct{}
	owner           *string
	clearedowner    bool
	done            bool
	oldValue        func(context.Context) (*PersonalAccessToken, error)
	predicates      []predicate.PersonalAccessToken
}

var _ ent.Mutation = (*PersonalAccessTokenMutation)(nil)

// personalaccesstokenOption allows management of the mutation configuration using functional options.
type personalaccesstokenOption func(*PersonalAccessTokenMutation)

// newPersonalAccessTokenMutation creates new mutation for the PersonalAccessToken entity.
func newPersonalAccessTokenMutation(c config, op Op, opts ...personalaccesstokenOption) *PersonalAccessTokenMutation {
	m := &PersonalAccessTokenMutation{
		config:        c,
		op:            op,
		typ:           TypePersonalAccessToken,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPersonalAccessTokenID sets the ID field of the mutation.
func withPersonalAccessTokenID(id string) personalaccesstokenOption {
	return func(m *PersonalAccessTokenMutation) {
		var (
			err   error
			once  sync.Once
			value *PersonalAccessToken
		)
		m.oldValue = func(ctx context.Context) (*PersonalAccessToken, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PersonalAccessToken.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPersonalAccessToken sets the old PersonalAccessToken of the mutation.
func withPersonalAccessToken(node *PersonalAccessToken) personalaccesstokenOption {
	return func(m *PersonalAccessTokenMutation) {
		m.oldValue = func(context.Context) (*PersonalAccessToken, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PersonalAccessTokenMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PersonalAccessTokenMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of PersonalAccessToken entities.
func (m *PersonalAccessTokenMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PersonalAccessTokenMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PersonalAccessTokenMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PersonalAccessToken.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *PersonalAccessTokenMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *PersonalAccessTokenMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the PersonalAccessToken entity.
// If the PersonalAccessToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonalAccessTokenMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *PersonalAccessTokenMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *PersonalAccessTokenMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *PersonalAccessTokenMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the PersonalAccessToken entity.
// If the PersonalAccessToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonalAccessTokenMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *PersonalAccessTokenMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *PersonalAccessTokenMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *PersonalAccessTokenMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the PersonalAccessToken entity.
// If the PersonalAccessToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonalAccessTokenMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *PersonalAccessTokenMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[personalaccesstoken.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *PersonalAccessTokenMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[personalaccesstoken.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *PersonalAccessTokenMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, personalaccesstoken.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *PersonalAccessTokenMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *PersonalAccessTokenMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the PersonalAccessToken entity.
// If the PersonalAccessToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonalAccessTokenMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *PersonalAccessTokenMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[personalaccesstoken.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *PersonalAccessTokenMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[personalaccesstoken.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *PersonalAccessTokenMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, personalaccesstoken.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *PersonalAccessTokenMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *PersonalAccessTokenMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the PersonalAccessToken entity.
// If the PersonalAccessToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonalAccessTokenMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *PersonalAccessTokenMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[personalaccesstoken.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *PersonalAccessTokenMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[personalaccesstoken.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *PersonalAccessTokenMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, personalaccesstoken.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *PersonalAccessTokenMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *PersonalAccessTokenMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the PersonalAccessToken entity.
// If the PersonalAccessToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonalAccessTokenMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *PersonalAccessTokenMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[personalaccesstoken.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *PersonalAccessTokenMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[personalaccesstoken.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *PersonalAccessTokenMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, personalaccesstoken.FieldDeletedBy)
}

// SetOwnerID sets the "owner_id" field.
func (m *PersonalAccessTokenMutation) SetOwnerID(s string) {
	m.owner = &s
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *PersonalAccessTokenMutation) OwnerID() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the PersonalAccessToken entity.
// If the PersonalAccessToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonalAccessTokenMutation) OldOwnerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *PersonalAccessTokenMutation) ResetOwnerID() {
	m.owner = nil
}

// SetName sets the "name" field.
func (m *PersonalAccessTokenMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *PersonalAccessTokenMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the PersonalAccessToken entity.
// If the PersonalAccessToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonalAccessTokenMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *PersonalAccessTokenMutation) ResetName() {
	m.name = nil
}

// SetToken sets the "token" field.
func (m *PersonalAccessTokenMutation) SetToken(s string) {
	m.token = &s
}

// Token returns the value of the "token" field in the mutation.
func (m *PersonalAccessTokenMutation) Token() (r string, exists bool) {
	v := m.token
	if v == nil {
		return
	}
	return *v, true
}

// OldToken returns the old "token" field's value of the PersonalAccessToken entity.
// If the PersonalAccessToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonalAccessTokenMutation) OldToken(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldToken is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldToken requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldToken: %w", err)
	}
	return oldValue.Token, nil
}

// ResetToken resets all changes to the "token" field.
func (m *PersonalAccessTokenMutation) ResetToken() {
	m.token = nil
}

// SetAbilities sets the "abilities" field.
func (m *PersonalAccessTokenMutation) SetAbilities(s []string) {
	m.abilities = &s
	m.appendabilities = nil
}

// Abilities returns the value of the "abilities" field in the mutation.
func (m *PersonalAccessTokenMutation) Abilities() (r []string, exists bool) {
	v := m.abilities
	if v == nil {
		return
	}
	return *v, true
}

// OldAbilities returns the old "abilities" field's value of the PersonalAccessToken entity.
// If the PersonalAccessToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonalAccessTokenMutation) OldAbilities(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAbilities is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAbilities requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAbilities: %w", err)
	}
	return oldValue.Abilities, nil
}

// AppendAbilities adds s to the "abilities" field.
func (m *PersonalAccessTokenMutation) AppendAbilities(s []string) {
	m.appendabilities = append(m.appendabilities, s...)
}

// AppendedAbilities returns the list of values that were appended to the "abilities" field in this mutation.
func (m *PersonalAccessTokenMutation) AppendedAbilities() ([]string, bool) {
	if len(m.appendabilities) == 0 {
		return nil, false
	}
	return m.appendabilities, true
}

// ClearAbilities clears the value of the "abilities" field.
func (m *PersonalAccessTokenMutation) ClearAbilities() {
	m.abilities = nil
	m.appendabilities = nil
	m.clearedFields[personalaccesstoken.FieldAbilities] = struct{}{}
}

// AbilitiesCleared returns if the "abilities" field was cleared in this mutation.
func (m *PersonalAccessTokenMutation) AbilitiesCleared() bool {
	_, ok := m.clearedFields[personalaccesstoken.FieldAbilities]
	return ok
}

// ResetAbilities resets all changes to the "abilities" field.
func (m *PersonalAccessTokenMutation) ResetAbilities() {
	m.abilities = nil
	m.appendabilities = nil
	delete(m.clearedFields, personalaccesstoken.FieldAbilities)
}

// SetExpiresAt sets the "expires_at" field.
func (m *PersonalAccessTokenMutation) SetExpiresAt(t time.Time) {
	m.expires_at = &t
}

// ExpiresAt returns the value of the "expires_at" field in the mutation.
func (m *PersonalAccessTokenMutation) ExpiresAt() (r time.Time, exists bool) {
	v := m.expires_at
	if v == nil {
		return
	}
	return *v, true
}

// OldExpiresAt returns the old "expires_at" field's value of the PersonalAccessToken entity.
// If the PersonalAccessToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonalAccessTokenMutation) OldExpiresAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExpiresAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExpiresAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExpiresAt: %w", err)
	}
	return oldValue.ExpiresAt, nil
}

// ResetExpiresAt resets all changes to the "expires_at" field.
func (m *PersonalAccessTokenMutation) ResetExpiresAt() {
	m.expires_at = nil
}

// SetDescription sets the "description" field.
func (m *PersonalAccessTokenMutation) SetDescription(s string) {
	m.description = &s
}

// Description returns the value of the "description" field in the mutation.
func (m *PersonalAccessTokenMutation) Description() (r string, exists bool) {
	v := m.description
	if v == nil {
		return
	}
	return *v, true
}

// OldDescription returns the old "description" field's value of the PersonalAccessToken entity.
// If the PersonalAccessToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonalAccessTokenMutation) OldDescription(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDescription is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDescription requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDescription: %w", err)
	}
	return oldValue.Description, nil
}

// ClearDescription clears the value of the "description" field.
func (m *PersonalAccessTokenMutation) ClearDescription() {
	m.description = nil
	m.clearedFields[personalaccesstoken.FieldDescription] = struct{}{}
}

// DescriptionCleared returns if the "description" field was cleared in this mutation.
func (m *PersonalAccessTokenMutation) DescriptionCleared() bool {
	_, ok := m.clearedFields[personalaccesstoken.FieldDescription]
	return ok
}

// ResetDescription resets all changes to the "description" field.
func (m *PersonalAccessTokenMutation) ResetDescription() {
	m.description = nil
	delete(m.clearedFields, personalaccesstoken.FieldDescription)
}

// SetLastUsedAt sets the "last_used_at" field.
func (m *PersonalAccessTokenMutation) SetLastUsedAt(t time.Time) {
	m.last_used_at = &t
}

// LastUsedAt returns the value of the "last_used_at" field in the mutation.
func (m *PersonalAccessTokenMutation) LastUsedAt() (r time.Time, exists bool) {
	v := m.last_used_at
	if v == nil {
		return
	}
	return *v, true
}

// OldLastUsedAt returns the old "last_used_at" field's value of the PersonalAccessToken entity.
// If the PersonalAccessToken object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PersonalAccessTokenMutation) OldLastUsedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastUsedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastUsedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastUsedAt: %w", err)
	}
	return oldValue.LastUsedAt, nil
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (m *PersonalAccessTokenMutation) ClearLastUsedAt() {
	m.last_used_at = nil
	m.clearedFields[personalaccesstoken.FieldLastUsedAt] = struct{}{}
}

// LastUsedAtCleared returns if the "last_used_at" field was cleared in this mutation.
func (m *PersonalAccessTokenMutation) LastUsedAtCleared() bool {
	_, ok := m.clearedFields[personalaccesstoken.FieldLastUsedAt]
	return ok
}

// ResetLastUsedAt resets all changes to the "last_used_at" field.
func (m *PersonalAccessTokenMutation) ResetLastUsedAt() {
	m.last_used_at = nil
	delete(m.clearedFields, personalaccesstoken.FieldLastUsedAt)
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *PersonalAccessTokenMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[personalaccesstoken.FieldOwnerID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *PersonalAccessTokenMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *PersonalAccessTokenMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *PersonalAccessTokenMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the PersonalAccessTokenMutation builder.
func (m *PersonalAccessTokenMutation) Where(ps ...predicate.PersonalAccessToken) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the PersonalAccessTokenMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *PersonalAccessTokenMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.PersonalAccessToken, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *PersonalAccessTokenMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *PersonalAccessTokenMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (PersonalAccessToken).
func (m *PersonalAccessTokenMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PersonalAccessTokenMutation) Fields() []string {
	fields := make([]string, 0, 13)
	if m.created_at != nil {
		fields = append(fields, personalaccesstoken.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, personalaccesstoken.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, personalaccesstoken.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, personalaccesstoken.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, personalaccesstoken.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, personalaccesstoken.FieldDeletedBy)
	}
	if m.owner != nil {
		fields = append(fields, personalaccesstoken.FieldOwnerID)
	}
	if m.name != nil {
		fields = append(fields, personalaccesstoken.FieldName)
	}
	if m.token != nil {
		fields = append(fields, personalaccesstoken.FieldToken)
	}
	if m.abilities != nil {
		fields = append(fields, personalaccesstoken.FieldAbilities)
	}
	if m.expires_at != nil {
		fields = append(fields, personalaccesstoken.FieldExpiresAt)
	}
	if m.description != nil {
		fields = append(fields, personalaccesstoken.FieldDescription)
	}
	if m.last_used_at != nil {
		fields = append(fields, personalaccesstoken.FieldLastUsedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PersonalAccessTokenMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case personalaccesstoken.FieldCreatedAt:
		return m.CreatedAt()
	case personalaccesstoken.FieldUpdatedAt:
		return m.UpdatedAt()
	case personalaccesstoken.FieldCreatedBy:
		return m.CreatedBy()
	case personalaccesstoken.FieldUpdatedBy:
		return m.UpdatedBy()
	case personalaccesstoken.FieldDeletedAt:
		return m.DeletedAt()
	case personalaccesstoken.FieldDeletedBy:
		return m.DeletedBy()
	case personalaccesstoken.FieldOwnerID:
		return m.OwnerID()
	case personalaccesstoken.FieldName:
		return m.Name()
	case personalaccesstoken.FieldToken:
		return m.Token()
	case personalaccesstoken.FieldAbilities:
		return m.Abilities()
	case personalaccesstoken.FieldExpiresAt:
		return m.ExpiresAt()
	case personalaccesstoken.FieldDescription:
		return m.Description()
	case personalaccesstoken.FieldLastUsedAt:
		return m.LastUsedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PersonalAccessTokenMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case personalaccesstoken.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case personalaccesstoken.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case personalaccesstoken.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case personalaccesstoken.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case personalaccesstoken.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case personalaccesstoken.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case personalaccesstoken.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case personalaccesstoken.FieldName:
		return m.OldName(ctx)
	case personalaccesstoken.FieldToken:
		return m.OldToken(ctx)
	case personalaccesstoken.FieldAbilities:
		return m.OldAbilities(ctx)
	case personalaccesstoken.FieldExpiresAt:
		return m.OldExpiresAt(ctx)
	case personalaccesstoken.FieldDescription:
		return m.OldDescription(ctx)
	case personalaccesstoken.FieldLastUsedAt:
		return m.OldLastUsedAt(ctx)
	}
	return nil, fmt.Errorf("unknown PersonalAccessToken field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonalAccessTokenMutation) SetField(name string, value ent.Value) error {
	switch name {
	case personalaccesstoken.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case personalaccesstoken.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case personalaccesstoken.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case personalaccesstoken.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case personalaccesstoken.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case personalaccesstoken.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case personalaccesstoken.FieldOwnerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case personalaccesstoken.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case personalaccesstoken.FieldToken:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetToken(v)
		return nil
	case personalaccesstoken.FieldAbilities:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAbilities(v)
		return nil
	case personalaccesstoken.FieldExpiresAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExpiresAt(v)
		return nil
	case personalaccesstoken.FieldDescription:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDescription(v)
		return nil
	case personalaccesstoken.FieldLastUsedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastUsedAt(v)
		return nil
	}
	return fmt.Errorf("unknown PersonalAccessToken field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PersonalAccessTokenMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PersonalAccessTokenMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PersonalAccessTokenMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown PersonalAccessToken numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PersonalAccessTokenMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(personalaccesstoken.FieldCreatedBy) {
		fields = append(fields, personalaccesstoken.FieldCreatedBy)
	}
	if m.FieldCleared(personalaccesstoken.FieldUpdatedBy) {
		fields = append(fields, personalaccesstoken.FieldUpdatedBy)
	}
	if m.FieldCleared(personalaccesstoken.FieldDeletedAt) {
		fields = append(fields, personalaccesstoken.FieldDeletedAt)
	}
	if m.FieldCleared(personalaccesstoken.FieldDeletedBy) {
		fields = append(fields, personalaccesstoken.FieldDeletedBy)
	}
	if m.FieldCleared(personalaccesstoken.FieldAbilities) {
		fields = append(fields, personalaccesstoken.FieldAbilities)
	}
	if m.FieldCleared(personalaccesstoken.FieldDescription) {
		fields = append(fields, personalaccesstoken.FieldDescription)
	}
	if m.FieldCleared(personalaccesstoken.FieldLastUsedAt) {
		fields = append(fields, personalaccesstoken.FieldLastUsedAt)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PersonalAccessTokenMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PersonalAccessTokenMutation) ClearField(name string) error {
	switch name {
	case personalaccesstoken.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case personalaccesstoken.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case personalaccesstoken.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case personalaccesstoken.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case personalaccesstoken.FieldAbilities:
		m.ClearAbilities()
		return nil
	case personalaccesstoken.FieldDescription:
		m.ClearDescription()
		return nil
	case personalaccesstoken.FieldLastUsedAt:
		m.ClearLastUsedAt()
		return nil
	}
	return fmt.Errorf("unknown PersonalAccessToken nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PersonalAccessTokenMutation) ResetField(name string) error {
	switch name {
	case personalaccesstoken.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case personalaccesstoken.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case personalaccesstoken.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case personalaccesstoken.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case personalaccesstoken.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case personalaccesstoken.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case personalaccesstoken.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case personalaccesstoken.FieldName:
		m.ResetName()
		return nil
	case personalaccesstoken.FieldToken:
		m.ResetToken()
		return nil
	case personalaccesstoken.FieldAbilities:
		m.ResetAbilities()
		return nil
	case personalaccesstoken.FieldExpiresAt:
		m.ResetExpiresAt()
		return nil
	case personalaccesstoken.FieldDescription:
		m.ResetDescription()
		return nil
	case personalaccesstoken.FieldLastUsedAt:
		m.ResetLastUsedAt()
		return nil
	}
	return fmt.Errorf("unknown PersonalAccessToken field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PersonalAccessTokenMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, personalaccesstoken.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PersonalAccessTokenMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case personalaccesstoken.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PersonalAccessTokenMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PersonalAccessTokenMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PersonalAccessTokenMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, personalaccesstoken.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PersonalAccessTokenMutation) EdgeCleared(name string) bool {
	switch name {
	case personalaccesstoken.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PersonalAccessTokenMutation) ClearEdge(name string) error {
	switch name {
	case personalaccesstoken.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown PersonalAccessToken unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PersonalAccessTokenMutation) ResetEdge(name string) error {
	switch name {
	case personalaccesstoken.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown PersonalAccessToken edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op                               Op
	typ                              string
	id                               *string
	created_at                       *time.Time
	updated_at                       *time.Time
	created_by                       *string
	updated_by                       *string
	deleted_at                       *time.Time
	deleted_by                       *string
	email                            *string
	first_name                       *string
	last_name                        *string
	display_name                     *string
	avatar_remote_url                *string
	avatar_local_file                *string
	avatar_updated_at                *time.Time
	last_seen                        *time.Time
	password                         *string
	sub                              *string
	oauth                            *bool
	auth_provider                    *enums.AuthProvider
	tfa_secret                       *string
	is_phone_otp_allowed             *bool
	is_email_otp_allowed             *bool
	is_totp_allowed                  *bool
	is_webauthn_allowed              *bool
	is_tfa_enabled                   *bool
	clearedFields                    map[string]struct{}
	personal_access_tokens           map[string]struct{}
	removedpersonal_access_tokens    map[string]struct{}
	clearedpersonal_access_tokens    bool
	setting                          *string
	clearedsetting                   bool
	email_verification_tokens        map[string]struct{}
	removedemail_verification_tokens map[string]struct{}
	clearedemail_verification_tokens bool
	password_reset_tokens            map[string]struct{}
	removedpassword_reset_tokens     map[string]struct{}
	clearedpassword_reset_tokens     bool
	groups                           map[string]struct{}
	removedgroups                    map[string]struct{}
	clearedgroups                    bool
	organizations                    map[string]struct{}
	removedorganizations             map[string]struct{}
	clearedorganizations             bool
	webauthn                         map[string]struct{}
	removedwebauthn                  map[string]struct{}
	clearedwebauthn                  bool
	group_memberships                map[string]struct{}
	removedgroup_memberships         map[string]struct{}
	clearedgroup_memberships         bool
	org_memberships                  map[string]struct{}
	removedorg_memberships           map[string]struct{}
	clearedorg_memberships           bool
	done                             bool
	oldValue                         func(context.Context) (*User, error)
	predicates                       []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id string) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *UserMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *UserMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *UserMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[user.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *UserMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[user.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *UserMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, user.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *UserMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *UserMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *UserMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[user.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *UserMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[user.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *UserMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, user.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[user.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, user.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *UserMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *UserMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *UserMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[user.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *UserMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[user.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *UserMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, user.FieldDeletedBy)
}

// SetEmail sets the "email" field.
func (m *UserMutation) SetEmail(s string) {
	m.email = &s
}

// Email returns the value of the "email" field in the mutation.
func (m *UserMutation) Email() (r string, exists bool) {
	v := m.email
	if v == nil {
		return
	}
	return *v, true
}

// OldEmail returns the old "email" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldEmail(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmail: %w", err)
	}
	return oldValue.Email, nil
}

// ResetEmail resets all changes to the "email" field.
func (m *UserMutation) ResetEmail() {
	m.email = nil
}

// SetFirstName sets the "first_name" field.
func (m *UserMutation) SetFirstName(s string) {
	m.first_name = &s
}

// FirstName returns the value of the "first_name" field in the mutation.
func (m *UserMutation) FirstName() (r string, exists bool) {
	v := m.first_name
	if v == nil {
		return
	}
	return *v, true
}

// OldFirstName returns the old "first_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldFirstName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFirstName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFirstName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFirstName: %w", err)
	}
	return oldValue.FirstName, nil
}

// ResetFirstName resets all changes to the "first_name" field.
func (m *UserMutation) ResetFirstName() {
	m.first_name = nil
}

// SetLastName sets the "last_name" field.
func (m *UserMutation) SetLastName(s string) {
	m.last_name = &s
}

// LastName returns the value of the "last_name" field in the mutation.
func (m *UserMutation) LastName() (r string, exists bool) {
	v := m.last_name
	if v == nil {
		return
	}
	return *v, true
}

// OldLastName returns the old "last_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastName: %w", err)
	}
	return oldValue.LastName, nil
}

// ResetLastName resets all changes to the "last_name" field.
func (m *UserMutation) ResetLastName() {
	m.last_name = nil
}

// SetDisplayName sets the "display_name" field.
func (m *UserMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *UserMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *UserMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetAvatarRemoteURL sets the "avatar_remote_url" field.
func (m *UserMutation) SetAvatarRemoteURL(s string) {
	m.avatar_remote_url = &s
}

// AvatarRemoteURL returns the value of the "avatar_remote_url" field in the mutation.
func (m *UserMutation) AvatarRemoteURL() (r string, exists bool) {
	v := m.avatar_remote_url
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarRemoteURL returns the old "avatar_remote_url" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatarRemoteURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarRemoteURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarRemoteURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarRemoteURL: %w", err)
	}
	return oldValue.AvatarRemoteURL, nil
}

// ClearAvatarRemoteURL clears the value of the "avatar_remote_url" field.
func (m *UserMutation) ClearAvatarRemoteURL() {
	m.avatar_remote_url = nil
	m.clearedFields[user.FieldAvatarRemoteURL] = struct{}{}
}

// AvatarRemoteURLCleared returns if the "avatar_remote_url" field was cleared in this mutation.
func (m *UserMutation) AvatarRemoteURLCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatarRemoteURL]
	return ok
}

// ResetAvatarRemoteURL resets all changes to the "avatar_remote_url" field.
func (m *UserMutation) ResetAvatarRemoteURL() {
	m.avatar_remote_url = nil
	delete(m.clearedFields, user.FieldAvatarRemoteURL)
}

// SetAvatarLocalFile sets the "avatar_local_file" field.
func (m *UserMutation) SetAvatarLocalFile(s string) {
	m.avatar_local_file = &s
}

// AvatarLocalFile returns the value of the "avatar_local_file" field in the mutation.
func (m *UserMutation) AvatarLocalFile() (r string, exists bool) {
	v := m.avatar_local_file
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarLocalFile returns the old "avatar_local_file" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatarLocalFile(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarLocalFile is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarLocalFile requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarLocalFile: %w", err)
	}
	return oldValue.AvatarLocalFile, nil
}

// ClearAvatarLocalFile clears the value of the "avatar_local_file" field.
func (m *UserMutation) ClearAvatarLocalFile() {
	m.avatar_local_file = nil
	m.clearedFields[user.FieldAvatarLocalFile] = struct{}{}
}

// AvatarLocalFileCleared returns if the "avatar_local_file" field was cleared in this mutation.
func (m *UserMutation) AvatarLocalFileCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatarLocalFile]
	return ok
}

// ResetAvatarLocalFile resets all changes to the "avatar_local_file" field.
func (m *UserMutation) ResetAvatarLocalFile() {
	m.avatar_local_file = nil
	delete(m.clearedFields, user.FieldAvatarLocalFile)
}

// SetAvatarUpdatedAt sets the "avatar_updated_at" field.
func (m *UserMutation) SetAvatarUpdatedAt(t time.Time) {
	m.avatar_updated_at = &t
}

// AvatarUpdatedAt returns the value of the "avatar_updated_at" field in the mutation.
func (m *UserMutation) AvatarUpdatedAt() (r time.Time, exists bool) {
	v := m.avatar_updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldAvatarUpdatedAt returns the old "avatar_updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAvatarUpdatedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAvatarUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAvatarUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAvatarUpdatedAt: %w", err)
	}
	return oldValue.AvatarUpdatedAt, nil
}

// ClearAvatarUpdatedAt clears the value of the "avatar_updated_at" field.
func (m *UserMutation) ClearAvatarUpdatedAt() {
	m.avatar_updated_at = nil
	m.clearedFields[user.FieldAvatarUpdatedAt] = struct{}{}
}

// AvatarUpdatedAtCleared returns if the "avatar_updated_at" field was cleared in this mutation.
func (m *UserMutation) AvatarUpdatedAtCleared() bool {
	_, ok := m.clearedFields[user.FieldAvatarUpdatedAt]
	return ok
}

// ResetAvatarUpdatedAt resets all changes to the "avatar_updated_at" field.
func (m *UserMutation) ResetAvatarUpdatedAt() {
	m.avatar_updated_at = nil
	delete(m.clearedFields, user.FieldAvatarUpdatedAt)
}

// SetLastSeen sets the "last_seen" field.
func (m *UserMutation) SetLastSeen(t time.Time) {
	m.last_seen = &t
}

// LastSeen returns the value of the "last_seen" field in the mutation.
func (m *UserMutation) LastSeen() (r time.Time, exists bool) {
	v := m.last_seen
	if v == nil {
		return
	}
	return *v, true
}

// OldLastSeen returns the old "last_seen" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldLastSeen(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLastSeen is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLastSeen requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLastSeen: %w", err)
	}
	return oldValue.LastSeen, nil
}

// ClearLastSeen clears the value of the "last_seen" field.
func (m *UserMutation) ClearLastSeen() {
	m.last_seen = nil
	m.clearedFields[user.FieldLastSeen] = struct{}{}
}

// LastSeenCleared returns if the "last_seen" field was cleared in this mutation.
func (m *UserMutation) LastSeenCleared() bool {
	_, ok := m.clearedFields[user.FieldLastSeen]
	return ok
}

// ResetLastSeen resets all changes to the "last_seen" field.
func (m *UserMutation) ResetLastSeen() {
	m.last_seen = nil
	delete(m.clearedFields, user.FieldLastSeen)
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ClearPassword clears the value of the "password" field.
func (m *UserMutation) ClearPassword() {
	m.password = nil
	m.clearedFields[user.FieldPassword] = struct{}{}
}

// PasswordCleared returns if the "password" field was cleared in this mutation.
func (m *UserMutation) PasswordCleared() bool {
	_, ok := m.clearedFields[user.FieldPassword]
	return ok
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
	delete(m.clearedFields, user.FieldPassword)
}

// SetSub sets the "sub" field.
func (m *UserMutation) SetSub(s string) {
	m.sub = &s
}

// Sub returns the value of the "sub" field in the mutation.
func (m *UserMutation) Sub() (r string, exists bool) {
	v := m.sub
	if v == nil {
		return
	}
	return *v, true
}

// OldSub returns the old "sub" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldSub(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSub is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSub requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSub: %w", err)
	}
	return oldValue.Sub, nil
}

// ClearSub clears the value of the "sub" field.
func (m *UserMutation) ClearSub() {
	m.sub = nil
	m.clearedFields[user.FieldSub] = struct{}{}
}

// SubCleared returns if the "sub" field was cleared in this mutation.
func (m *UserMutation) SubCleared() bool {
	_, ok := m.clearedFields[user.FieldSub]
	return ok
}

// ResetSub resets all changes to the "sub" field.
func (m *UserMutation) ResetSub() {
	m.sub = nil
	delete(m.clearedFields, user.FieldSub)
}

// SetOauth sets the "oauth" field.
func (m *UserMutation) SetOauth(b bool) {
	m.oauth = &b
}

// Oauth returns the value of the "oauth" field in the mutation.
func (m *UserMutation) Oauth() (r bool, exists bool) {
	v := m.oauth
	if v == nil {
		return
	}
	return *v, true
}

// OldOauth returns the old "oauth" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldOauth(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOauth is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOauth requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOauth: %w", err)
	}
	return oldValue.Oauth, nil
}

// ResetOauth resets all changes to the "oauth" field.
func (m *UserMutation) ResetOauth() {
	m.oauth = nil
}

// SetAuthProvider sets the "auth_provider" field.
func (m *UserMutation) SetAuthProvider(ep enums.AuthProvider) {
	m.auth_provider = &ep
}

// AuthProvider returns the value of the "auth_provider" field in the mutation.
func (m *UserMutation) AuthProvider() (r enums.AuthProvider, exists bool) {
	v := m.auth_provider
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthProvider returns the old "auth_provider" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldAuthProvider(ctx context.Context) (v enums.AuthProvider, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthProvider is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthProvider requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthProvider: %w", err)
	}
	return oldValue.AuthProvider, nil
}

// ResetAuthProvider resets all changes to the "auth_provider" field.
func (m *UserMutation) ResetAuthProvider() {
	m.auth_provider = nil
}

// SetTfaSecret sets the "tfa_secret" field.
func (m *UserMutation) SetTfaSecret(s string) {
	m.tfa_secret = &s
}

// TfaSecret returns the value of the "tfa_secret" field in the mutation.
func (m *UserMutation) TfaSecret() (r string, exists bool) {
	v := m.tfa_secret
	if v == nil {
		return
	}
	return *v, true
}

// OldTfaSecret returns the old "tfa_secret" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldTfaSecret(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTfaSecret is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTfaSecret requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTfaSecret: %w", err)
	}
	return oldValue.TfaSecret, nil
}

// ClearTfaSecret clears the value of the "tfa_secret" field.
func (m *UserMutation) ClearTfaSecret() {
	m.tfa_secret = nil
	m.clearedFields[user.FieldTfaSecret] = struct{}{}
}

// TfaSecretCleared returns if the "tfa_secret" field was cleared in this mutation.
func (m *UserMutation) TfaSecretCleared() bool {
	_, ok := m.clearedFields[user.FieldTfaSecret]
	return ok
}

// ResetTfaSecret resets all changes to the "tfa_secret" field.
func (m *UserMutation) ResetTfaSecret() {
	m.tfa_secret = nil
	delete(m.clearedFields, user.FieldTfaSecret)
}

// SetIsPhoneOtpAllowed sets the "is_phone_otp_allowed" field.
func (m *UserMutation) SetIsPhoneOtpAllowed(b bool) {
	m.is_phone_otp_allowed = &b
}

// IsPhoneOtpAllowed returns the value of the "is_phone_otp_allowed" field in the mutation.
func (m *UserMutation) IsPhoneOtpAllowed() (r bool, exists bool) {
	v := m.is_phone_otp_allowed
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPhoneOtpAllowed returns the old "is_phone_otp_allowed" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsPhoneOtpAllowed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPhoneOtpAllowed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPhoneOtpAllowed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsPhoneOtpAllowed: %w", err)
	}
	return oldValue.IsPhoneOtpAllowed, nil
}

// ClearIsPhoneOtpAllowed clears the value of the "is_phone_otp_allowed" field.
func (m *UserMutation) ClearIsPhoneOtpAllowed() {
	m.is_phone_otp_allowed = nil
	m.clearedFields[user.FieldIsPhoneOtpAllowed] = struct{}{}
}

// IsPhoneOtpAllowedCleared returns if the "is_phone_otp_allowed" field was cleared in this mutation.
func (m *UserMutation) IsPhoneOtpAllowedCleared() bool {
	_, ok := m.clearedFields[user.FieldIsPhoneOtpAllowed]
	return ok
}

// ResetIsPhoneOtpAllowed resets all changes to the "is_phone_otp_allowed" field.
func (m *UserMutation) ResetIsPhoneOtpAllowed() {
	m.is_phone_otp_allowed = nil
	delete(m.clearedFields, user.FieldIsPhoneOtpAllowed)
}

// SetIsEmailOtpAllowed sets the "is_email_otp_allowed" field.
func (m *UserMutation) SetIsEmailOtpAllowed(b bool) {
	m.is_email_otp_allowed = &b
}

// IsEmailOtpAllowed returns the value of the "is_email_otp_allowed" field in the mutation.
func (m *UserMutation) IsEmailOtpAllowed() (r bool, exists bool) {
	v := m.is_email_otp_allowed
	if v == nil {
		return
	}
	return *v, true
}

// OldIsEmailOtpAllowed returns the old "is_email_otp_allowed" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsEmailOtpAllowed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsEmailOtpAllowed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsEmailOtpAllowed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsEmailOtpAllowed: %w", err)
	}
	return oldValue.IsEmailOtpAllowed, nil
}

// ClearIsEmailOtpAllowed clears the value of the "is_email_otp_allowed" field.
func (m *UserMutation) ClearIsEmailOtpAllowed() {
	m.is_email_otp_allowed = nil
	m.clearedFields[user.FieldIsEmailOtpAllowed] = struct{}{}
}

// IsEmailOtpAllowedCleared returns if the "is_email_otp_allowed" field was cleared in this mutation.
func (m *UserMutation) IsEmailOtpAllowedCleared() bool {
	_, ok := m.clearedFields[user.FieldIsEmailOtpAllowed]
	return ok
}

// ResetIsEmailOtpAllowed resets all changes to the "is_email_otp_allowed" field.
func (m *UserMutation) ResetIsEmailOtpAllowed() {
	m.is_email_otp_allowed = nil
	delete(m.clearedFields, user.FieldIsEmailOtpAllowed)
}

// SetIsTotpAllowed sets the "is_totp_allowed" field.
func (m *UserMutation) SetIsTotpAllowed(b bool) {
	m.is_totp_allowed = &b
}

// IsTotpAllowed returns the value of the "is_totp_allowed" field in the mutation.
func (m *UserMutation) IsTotpAllowed() (r bool, exists bool) {
	v := m.is_totp_allowed
	if v == nil {
		return
	}
	return *v, true
}

// OldIsTotpAllowed returns the old "is_totp_allowed" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsTotpAllowed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsTotpAllowed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsTotpAllowed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsTotpAllowed: %w", err)
	}
	return oldValue.IsTotpAllowed, nil
}

// ClearIsTotpAllowed clears the value of the "is_totp_allowed" field.
func (m *UserMutation) ClearIsTotpAllowed() {
	m.is_totp_allowed = nil
	m.clearedFields[user.FieldIsTotpAllowed] = struct{}{}
}

// IsTotpAllowedCleared returns if the "is_totp_allowed" field was cleared in this mutation.
func (m *UserMutation) IsTotpAllowedCleared() bool {
	_, ok := m.clearedFields[user.FieldIsTotpAllowed]
	return ok
}

// ResetIsTotpAllowed resets all changes to the "is_totp_allowed" field.
func (m *UserMutation) ResetIsTotpAllowed() {
	m.is_totp_allowed = nil
	delete(m.clearedFields, user.FieldIsTotpAllowed)
}

// SetIsWebauthnAllowed sets the "is_webauthn_allowed" field.
func (m *UserMutation) SetIsWebauthnAllowed(b bool) {
	m.is_webauthn_allowed = &b
}

// IsWebauthnAllowed returns the value of the "is_webauthn_allowed" field in the mutation.
func (m *UserMutation) IsWebauthnAllowed() (r bool, exists bool) {
	v := m.is_webauthn_allowed
	if v == nil {
		return
	}
	return *v, true
}

// OldIsWebauthnAllowed returns the old "is_webauthn_allowed" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsWebauthnAllowed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsWebauthnAllowed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsWebauthnAllowed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsWebauthnAllowed: %w", err)
	}
	return oldValue.IsWebauthnAllowed, nil
}

// ClearIsWebauthnAllowed clears the value of the "is_webauthn_allowed" field.
func (m *UserMutation) ClearIsWebauthnAllowed() {
	m.is_webauthn_allowed = nil
	m.clearedFields[user.FieldIsWebauthnAllowed] = struct{}{}
}

// IsWebauthnAllowedCleared returns if the "is_webauthn_allowed" field was cleared in this mutation.
func (m *UserMutation) IsWebauthnAllowedCleared() bool {
	_, ok := m.clearedFields[user.FieldIsWebauthnAllowed]
	return ok
}

// ResetIsWebauthnAllowed resets all changes to the "is_webauthn_allowed" field.
func (m *UserMutation) ResetIsWebauthnAllowed() {
	m.is_webauthn_allowed = nil
	delete(m.clearedFields, user.FieldIsWebauthnAllowed)
}

// SetIsTfaEnabled sets the "is_tfa_enabled" field.
func (m *UserMutation) SetIsTfaEnabled(b bool) {
	m.is_tfa_enabled = &b
}

// IsTfaEnabled returns the value of the "is_tfa_enabled" field in the mutation.
func (m *UserMutation) IsTfaEnabled() (r bool, exists bool) {
	v := m.is_tfa_enabled
	if v == nil {
		return
	}
	return *v, true
}

// OldIsTfaEnabled returns the old "is_tfa_enabled" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldIsTfaEnabled(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsTfaEnabled is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsTfaEnabled requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIsTfaEnabled: %w", err)
	}
	return oldValue.IsTfaEnabled, nil
}

// ClearIsTfaEnabled clears the value of the "is_tfa_enabled" field.
func (m *UserMutation) ClearIsTfaEnabled() {
	m.is_tfa_enabled = nil
	m.clearedFields[user.FieldIsTfaEnabled] = struct{}{}
}

// IsTfaEnabledCleared returns if the "is_tfa_enabled" field was cleared in this mutation.
func (m *UserMutation) IsTfaEnabledCleared() bool {
	_, ok := m.clearedFields[user.FieldIsTfaEnabled]
	return ok
}

// ResetIsTfaEnabled resets all changes to the "is_tfa_enabled" field.
func (m *UserMutation) ResetIsTfaEnabled() {
	m.is_tfa_enabled = nil
	delete(m.clearedFields, user.FieldIsTfaEnabled)
}

// AddPersonalAccessTokenIDs adds the "personal_access_tokens" edge to the PersonalAccessToken entity by ids.
func (m *UserMutation) AddPersonalAccessTokenIDs(ids ...string) {
	if m.personal_access_tokens == nil {
		m.personal_access_tokens = make(map[string]struct{})
	}
	for i := range ids {
		m.personal_access_tokens[ids[i]] = struct{}{}
	}
}

// ClearPersonalAccessTokens clears the "personal_access_tokens" edge to the PersonalAccessToken entity.
func (m *UserMutation) ClearPersonalAccessTokens() {
	m.clearedpersonal_access_tokens = true
}

// PersonalAccessTokensCleared reports if the "personal_access_tokens" edge to the PersonalAccessToken entity was cleared.
func (m *UserMutation) PersonalAccessTokensCleared() bool {
	return m.clearedpersonal_access_tokens
}

// RemovePersonalAccessTokenIDs removes the "personal_access_tokens" edge to the PersonalAccessToken entity by IDs.
func (m *UserMutation) RemovePersonalAccessTokenIDs(ids ...string) {
	if m.removedpersonal_access_tokens == nil {
		m.removedpersonal_access_tokens = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.personal_access_tokens, ids[i])
		m.removedpersonal_access_tokens[ids[i]] = struct{}{}
	}
}

// RemovedPersonalAccessTokens returns the removed IDs of the "personal_access_tokens" edge to the PersonalAccessToken entity.
func (m *UserMutation) RemovedPersonalAccessTokensIDs() (ids []string) {
	for id := range m.removedpersonal_access_tokens {
		ids = append(ids, id)
	}
	return
}

// PersonalAccessTokensIDs returns the "personal_access_tokens" edge IDs in the mutation.
func (m *UserMutation) PersonalAccessTokensIDs() (ids []string) {
	for id := range m.personal_access_tokens {
		ids = append(ids, id)
	}
	return
}

// ResetPersonalAccessTokens resets all changes to the "personal_access_tokens" edge.
func (m *UserMutation) ResetPersonalAccessTokens() {
	m.personal_access_tokens = nil
	m.clearedpersonal_access_tokens = false
	m.removedpersonal_access_tokens = nil
}

// SetSettingID sets the "setting" edge to the UserSetting entity by id.
func (m *UserMutation) SetSettingID(id string) {
	m.setting = &id
}

// ClearSetting clears the "setting" edge to the UserSetting entity.
func (m *UserMutation) ClearSetting() {
	m.clearedsetting = true
}

// SettingCleared reports if the "setting" edge to the UserSetting entity was cleared.
func (m *UserMutation) SettingCleared() bool {
	return m.clearedsetting
}

// SettingID returns the "setting" edge ID in the mutation.
func (m *UserMutation) SettingID() (id string, exists bool) {
	if m.setting != nil {
		return *m.setting, true
	}
	return
}

// SettingIDs returns the "setting" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// SettingID instead. It exists only for internal usage by the builders.
func (m *UserMutation) SettingIDs() (ids []string) {
	if id := m.setting; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetSetting resets all changes to the "setting" edge.
func (m *UserMutation) ResetSetting() {
	m.setting = nil
	m.clearedsetting = false
}

// AddEmailVerificationTokenIDs adds the "email_verification_tokens" edge to the EmailVerificationToken entity by ids.
func (m *UserMutation) AddEmailVerificationTokenIDs(ids ...string) {
	if m.email_verification_tokens == nil {
		m.email_verification_tokens = make(map[string]struct{})
	}
	for i := range ids {
		m.email_verification_tokens[ids[i]] = struct{}{}
	}
}

// ClearEmailVerificationTokens clears the "email_verification_tokens" edge to the EmailVerificationToken entity.
func (m *UserMutation) ClearEmailVerificationTokens() {
	m.clearedemail_verification_tokens = true
}

// EmailVerificationTokensCleared reports if the "email_verification_tokens" edge to the EmailVerificationToken entity was cleared.
func (m *UserMutation) EmailVerificationTokensCleared() bool {
	return m.clearedemail_verification_tokens
}

// RemoveEmailVerificationTokenIDs removes the "email_verification_tokens" edge to the EmailVerificationToken entity by IDs.
func (m *UserMutation) RemoveEmailVerificationTokenIDs(ids ...string) {
	if m.removedemail_verification_tokens == nil {
		m.removedemail_verification_tokens = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.email_verification_tokens, ids[i])
		m.removedemail_verification_tokens[ids[i]] = struct{}{}
	}
}

// RemovedEmailVerificationTokens returns the removed IDs of the "email_verification_tokens" edge to the EmailVerificationToken entity.
func (m *UserMutation) RemovedEmailVerificationTokensIDs() (ids []string) {
	for id := range m.removedemail_verification_tokens {
		ids = append(ids, id)
	}
	return
}

// EmailVerificationTokensIDs returns the "email_verification_tokens" edge IDs in the mutation.
func (m *UserMutation) EmailVerificationTokensIDs() (ids []string) {
	for id := range m.email_verification_tokens {
		ids = append(ids, id)
	}
	return
}

// ResetEmailVerificationTokens resets all changes to the "email_verification_tokens" edge.
func (m *UserMutation) ResetEmailVerificationTokens() {
	m.email_verification_tokens = nil
	m.clearedemail_verification_tokens = false
	m.removedemail_verification_tokens = nil
}

// AddPasswordResetTokenIDs adds the "password_reset_tokens" edge to the PasswordResetToken entity by ids.
func (m *UserMutation) AddPasswordResetTokenIDs(ids ...string) {
	if m.password_reset_tokens == nil {
		m.password_reset_tokens = make(map[string]struct{})
	}
	for i := range ids {
		m.password_reset_tokens[ids[i]] = struct{}{}
	}
}

// ClearPasswordResetTokens clears the "password_reset_tokens" edge to the PasswordResetToken entity.
func (m *UserMutation) ClearPasswordResetTokens() {
	m.clearedpassword_reset_tokens = true
}

// PasswordResetTokensCleared reports if the "password_reset_tokens" edge to the PasswordResetToken entity was cleared.
func (m *UserMutation) PasswordResetTokensCleared() bool {
	return m.clearedpassword_reset_tokens
}

// RemovePasswordResetTokenIDs removes the "password_reset_tokens" edge to the PasswordResetToken entity by IDs.
func (m *UserMutation) RemovePasswordResetTokenIDs(ids ...string) {
	if m.removedpassword_reset_tokens == nil {
		m.removedpassword_reset_tokens = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.password_reset_tokens, ids[i])
		m.removedpassword_reset_tokens[ids[i]] = struct{}{}
	}
}

// RemovedPasswordResetTokens returns the removed IDs of the "password_reset_tokens" edge to the PasswordResetToken entity.
func (m *UserMutation) RemovedPasswordResetTokensIDs() (ids []string) {
	for id := range m.removedpassword_reset_tokens {
		ids = append(ids, id)
	}
	return
}

// PasswordResetTokensIDs returns the "password_reset_tokens" edge IDs in the mutation.
func (m *UserMutation) PasswordResetTokensIDs() (ids []string) {
	for id := range m.password_reset_tokens {
		ids = append(ids, id)
	}
	return
}

// ResetPasswordResetTokens resets all changes to the "password_reset_tokens" edge.
func (m *UserMutation) ResetPasswordResetTokens() {
	m.password_reset_tokens = nil
	m.clearedpassword_reset_tokens = false
	m.removedpassword_reset_tokens = nil
}

// AddGroupIDs adds the "groups" edge to the Group entity by ids.
func (m *UserMutation) AddGroupIDs(ids ...string) {
	if m.groups == nil {
		m.groups = make(map[string]struct{})
	}
	for i := range ids {
		m.groups[ids[i]] = struct{}{}
	}
}

// ClearGroups clears the "groups" edge to the Group entity.
func (m *UserMutation) ClearGroups() {
	m.clearedgroups = true
}

// GroupsCleared reports if the "groups" edge to the Group entity was cleared.
func (m *UserMutation) GroupsCleared() bool {
	return m.clearedgroups
}

// RemoveGroupIDs removes the "groups" edge to the Group entity by IDs.
func (m *UserMutation) RemoveGroupIDs(ids ...string) {
	if m.removedgroups == nil {
		m.removedgroups = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.groups, ids[i])
		m.removedgroups[ids[i]] = struct{}{}
	}
}

// RemovedGroups returns the removed IDs of the "groups" edge to the Group entity.
func (m *UserMutation) RemovedGroupsIDs() (ids []string) {
	for id := range m.removedgroups {
		ids = append(ids, id)
	}
	return
}

// GroupsIDs returns the "groups" edge IDs in the mutation.
func (m *UserMutation) GroupsIDs() (ids []string) {
	for id := range m.groups {
		ids = append(ids, id)
	}
	return
}

// ResetGroups resets all changes to the "groups" edge.
func (m *UserMutation) ResetGroups() {
	m.groups = nil
	m.clearedgroups = false
	m.removedgroups = nil
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by ids.
func (m *UserMutation) AddOrganizationIDs(ids ...string) {
	if m.organizations == nil {
		m.organizations = make(map[string]struct{})
	}
	for i := range ids {
		m.organizations[ids[i]] = struct{}{}
	}
}

// ClearOrganizations clears the "organizations" edge to the Organization entity.
func (m *UserMutation) ClearOrganizations() {
	m.clearedorganizations = true
}

// OrganizationsCleared reports if the "organizations" edge to the Organization entity was cleared.
func (m *UserMutation) OrganizationsCleared() bool {
	return m.clearedorganizations
}

// RemoveOrganizationIDs removes the "organizations" edge to the Organization entity by IDs.
func (m *UserMutation) RemoveOrganizationIDs(ids ...string) {
	if m.removedorganizations == nil {
		m.removedorganizations = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.organizations, ids[i])
		m.removedorganizations[ids[i]] = struct{}{}
	}
}

// RemovedOrganizations returns the removed IDs of the "organizations" edge to the Organization entity.
func (m *UserMutation) RemovedOrganizationsIDs() (ids []string) {
	for id := range m.removedorganizations {
		ids = append(ids, id)
	}
	return
}

// OrganizationsIDs returns the "organizations" edge IDs in the mutation.
func (m *UserMutation) OrganizationsIDs() (ids []string) {
	for id := range m.organizations {
		ids = append(ids, id)
	}
	return
}

// ResetOrganizations resets all changes to the "organizations" edge.
func (m *UserMutation) ResetOrganizations() {
	m.organizations = nil
	m.clearedorganizations = false
	m.removedorganizations = nil
}

// AddWebauthnIDs adds the "webauthn" edge to the Webauthn entity by ids.
func (m *UserMutation) AddWebauthnIDs(ids ...string) {
	if m.webauthn == nil {
		m.webauthn = make(map[string]struct{})
	}
	for i := range ids {
		m.webauthn[ids[i]] = struct{}{}
	}
}

// ClearWebauthn clears the "webauthn" edge to the Webauthn entity.
func (m *UserMutation) ClearWebauthn() {
	m.clearedwebauthn = true
}

// WebauthnCleared reports if the "webauthn" edge to the Webauthn entity was cleared.
func (m *UserMutation) WebauthnCleared() bool {
	return m.clearedwebauthn
}

// RemoveWebauthnIDs removes the "webauthn" edge to the Webauthn entity by IDs.
func (m *UserMutation) RemoveWebauthnIDs(ids ...string) {
	if m.removedwebauthn == nil {
		m.removedwebauthn = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.webauthn, ids[i])
		m.removedwebauthn[ids[i]] = struct{}{}
	}
}

// RemovedWebauthn returns the removed IDs of the "webauthn" edge to the Webauthn entity.
func (m *UserMutation) RemovedWebauthnIDs() (ids []string) {
	for id := range m.removedwebauthn {
		ids = append(ids, id)
	}
	return
}

// WebauthnIDs returns the "webauthn" edge IDs in the mutation.
func (m *UserMutation) WebauthnIDs() (ids []string) {
	for id := range m.webauthn {
		ids = append(ids, id)
	}
	return
}

// ResetWebauthn resets all changes to the "webauthn" edge.
func (m *UserMutation) ResetWebauthn() {
	m.webauthn = nil
	m.clearedwebauthn = false
	m.removedwebauthn = nil
}

// AddGroupMembershipIDs adds the "group_memberships" edge to the GroupMembership entity by ids.
func (m *UserMutation) AddGroupMembershipIDs(ids ...string) {
	if m.group_memberships == nil {
		m.group_memberships = make(map[string]struct{})
	}
	for i := range ids {
		m.group_memberships[ids[i]] = struct{}{}
	}
}

// ClearGroupMemberships clears the "group_memberships" edge to the GroupMembership entity.
func (m *UserMutation) ClearGroupMemberships() {
	m.clearedgroup_memberships = true
}

// GroupMembershipsCleared reports if the "group_memberships" edge to the GroupMembership entity was cleared.
func (m *UserMutation) GroupMembershipsCleared() bool {
	return m.clearedgroup_memberships
}

// RemoveGroupMembershipIDs removes the "group_memberships" edge to the GroupMembership entity by IDs.
func (m *UserMutation) RemoveGroupMembershipIDs(ids ...string) {
	if m.removedgroup_memberships == nil {
		m.removedgroup_memberships = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.group_memberships, ids[i])
		m.removedgroup_memberships[ids[i]] = struct{}{}
	}
}

// RemovedGroupMemberships returns the removed IDs of the "group_memberships" edge to the GroupMembership entity.
func (m *UserMutation) RemovedGroupMembershipsIDs() (ids []string) {
	for id := range m.removedgroup_memberships {
		ids = append(ids, id)
	}
	return
}

// GroupMembershipsIDs returns the "group_memberships" edge IDs in the mutation.
func (m *UserMutation) GroupMembershipsIDs() (ids []string) {
	for id := range m.group_memberships {
		ids = append(ids, id)
	}
	return
}

// ResetGroupMemberships resets all changes to the "group_memberships" edge.
func (m *UserMutation) ResetGroupMemberships() {
	m.group_memberships = nil
	m.clearedgroup_memberships = false
	m.removedgroup_memberships = nil
}

// AddOrgMembershipIDs adds the "org_memberships" edge to the OrgMembership entity by ids.
func (m *UserMutation) AddOrgMembershipIDs(ids ...string) {
	if m.org_memberships == nil {
		m.org_memberships = make(map[string]struct{})
	}
	for i := range ids {
		m.org_memberships[ids[i]] = struct{}{}
	}
}

// ClearOrgMemberships clears the "org_memberships" edge to the OrgMembership entity.
func (m *UserMutation) ClearOrgMemberships() {
	m.clearedorg_memberships = true
}

// OrgMembershipsCleared reports if the "org_memberships" edge to the OrgMembership entity was cleared.
func (m *UserMutation) OrgMembershipsCleared() bool {
	return m.clearedorg_memberships
}

// RemoveOrgMembershipIDs removes the "org_memberships" edge to the OrgMembership entity by IDs.
func (m *UserMutation) RemoveOrgMembershipIDs(ids ...string) {
	if m.removedorg_memberships == nil {
		m.removedorg_memberships = make(map[string]struct{})
	}
	for i := range ids {
		delete(m.org_memberships, ids[i])
		m.removedorg_memberships[ids[i]] = struct{}{}
	}
}

// RemovedOrgMemberships returns the removed IDs of the "org_memberships" edge to the OrgMembership entity.
func (m *UserMutation) RemovedOrgMembershipsIDs() (ids []string) {
	for id := range m.removedorg_memberships {
		ids = append(ids, id)
	}
	return
}

// OrgMembershipsIDs returns the "org_memberships" edge IDs in the mutation.
func (m *UserMutation) OrgMembershipsIDs() (ids []string) {
	for id := range m.org_memberships {
		ids = append(ids, id)
	}
	return
}

// ResetOrgMemberships resets all changes to the "org_memberships" edge.
func (m *UserMutation) ResetOrgMemberships() {
	m.org_memberships = nil
	m.clearedorg_memberships = false
	m.removedorg_memberships = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.User, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 24)
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, user.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, user.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, user.FieldDeletedBy)
	}
	if m.email != nil {
		fields = append(fields, user.FieldEmail)
	}
	if m.first_name != nil {
		fields = append(fields, user.FieldFirstName)
	}
	if m.last_name != nil {
		fields = append(fields, user.FieldLastName)
	}
	if m.display_name != nil {
		fields = append(fields, user.FieldDisplayName)
	}
	if m.avatar_remote_url != nil {
		fields = append(fields, user.FieldAvatarRemoteURL)
	}
	if m.avatar_local_file != nil {
		fields = append(fields, user.FieldAvatarLocalFile)
	}
	if m.avatar_updated_at != nil {
		fields = append(fields, user.FieldAvatarUpdatedAt)
	}
	if m.last_seen != nil {
		fields = append(fields, user.FieldLastSeen)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.sub != nil {
		fields = append(fields, user.FieldSub)
	}
	if m.oauth != nil {
		fields = append(fields, user.FieldOauth)
	}
	if m.auth_provider != nil {
		fields = append(fields, user.FieldAuthProvider)
	}
	if m.tfa_secret != nil {
		fields = append(fields, user.FieldTfaSecret)
	}
	if m.is_phone_otp_allowed != nil {
		fields = append(fields, user.FieldIsPhoneOtpAllowed)
	}
	if m.is_email_otp_allowed != nil {
		fields = append(fields, user.FieldIsEmailOtpAllowed)
	}
	if m.is_totp_allowed != nil {
		fields = append(fields, user.FieldIsTotpAllowed)
	}
	if m.is_webauthn_allowed != nil {
		fields = append(fields, user.FieldIsWebauthnAllowed)
	}
	if m.is_tfa_enabled != nil {
		fields = append(fields, user.FieldIsTfaEnabled)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldCreatedAt:
		return m.CreatedAt()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldCreatedBy:
		return m.CreatedBy()
	case user.FieldUpdatedBy:
		return m.UpdatedBy()
	case user.FieldDeletedAt:
		return m.DeletedAt()
	case user.FieldDeletedBy:
		return m.DeletedBy()
	case user.FieldEmail:
		return m.Email()
	case user.FieldFirstName:
		return m.FirstName()
	case user.FieldLastName:
		return m.LastName()
	case user.FieldDisplayName:
		return m.DisplayName()
	case user.FieldAvatarRemoteURL:
		return m.AvatarRemoteURL()
	case user.FieldAvatarLocalFile:
		return m.AvatarLocalFile()
	case user.FieldAvatarUpdatedAt:
		return m.AvatarUpdatedAt()
	case user.FieldLastSeen:
		return m.LastSeen()
	case user.FieldPassword:
		return m.Password()
	case user.FieldSub:
		return m.Sub()
	case user.FieldOauth:
		return m.Oauth()
	case user.FieldAuthProvider:
		return m.AuthProvider()
	case user.FieldTfaSecret:
		return m.TfaSecret()
	case user.FieldIsPhoneOtpAllowed:
		return m.IsPhoneOtpAllowed()
	case user.FieldIsEmailOtpAllowed:
		return m.IsEmailOtpAllowed()
	case user.FieldIsTotpAllowed:
		return m.IsTotpAllowed()
	case user.FieldIsWebauthnAllowed:
		return m.IsWebauthnAllowed()
	case user.FieldIsTfaEnabled:
		return m.IsTfaEnabled()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case user.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case user.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case user.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case user.FieldEmail:
		return m.OldEmail(ctx)
	case user.FieldFirstName:
		return m.OldFirstName(ctx)
	case user.FieldLastName:
		return m.OldLastName(ctx)
	case user.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case user.FieldAvatarRemoteURL:
		return m.OldAvatarRemoteURL(ctx)
	case user.FieldAvatarLocalFile:
		return m.OldAvatarLocalFile(ctx)
	case user.FieldAvatarUpdatedAt:
		return m.OldAvatarUpdatedAt(ctx)
	case user.FieldLastSeen:
		return m.OldLastSeen(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldSub:
		return m.OldSub(ctx)
	case user.FieldOauth:
		return m.OldOauth(ctx)
	case user.FieldAuthProvider:
		return m.OldAuthProvider(ctx)
	case user.FieldTfaSecret:
		return m.OldTfaSecret(ctx)
	case user.FieldIsPhoneOtpAllowed:
		return m.OldIsPhoneOtpAllowed(ctx)
	case user.FieldIsEmailOtpAllowed:
		return m.OldIsEmailOtpAllowed(ctx)
	case user.FieldIsTotpAllowed:
		return m.OldIsTotpAllowed(ctx)
	case user.FieldIsWebauthnAllowed:
		return m.OldIsWebauthnAllowed(ctx)
	case user.FieldIsTfaEnabled:
		return m.OldIsTfaEnabled(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case user.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case user.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case user.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case user.FieldEmail:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmail(v)
		return nil
	case user.FieldFirstName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFirstName(v)
		return nil
	case user.FieldLastName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastName(v)
		return nil
	case user.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case user.FieldAvatarRemoteURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarRemoteURL(v)
		return nil
	case user.FieldAvatarLocalFile:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarLocalFile(v)
		return nil
	case user.FieldAvatarUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAvatarUpdatedAt(v)
		return nil
	case user.FieldLastSeen:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLastSeen(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldSub:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSub(v)
		return nil
	case user.FieldOauth:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOauth(v)
		return nil
	case user.FieldAuthProvider:
		v, ok := value.(enums.AuthProvider)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthProvider(v)
		return nil
	case user.FieldTfaSecret:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTfaSecret(v)
		return nil
	case user.FieldIsPhoneOtpAllowed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsPhoneOtpAllowed(v)
		return nil
	case user.FieldIsEmailOtpAllowed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsEmailOtpAllowed(v)
		return nil
	case user.FieldIsTotpAllowed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsTotpAllowed(v)
		return nil
	case user.FieldIsWebauthnAllowed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsWebauthnAllowed(v)
		return nil
	case user.FieldIsTfaEnabled:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIsTfaEnabled(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldCreatedBy) {
		fields = append(fields, user.FieldCreatedBy)
	}
	if m.FieldCleared(user.FieldUpdatedBy) {
		fields = append(fields, user.FieldUpdatedBy)
	}
	if m.FieldCleared(user.FieldDeletedAt) {
		fields = append(fields, user.FieldDeletedAt)
	}
	if m.FieldCleared(user.FieldDeletedBy) {
		fields = append(fields, user.FieldDeletedBy)
	}
	if m.FieldCleared(user.FieldAvatarRemoteURL) {
		fields = append(fields, user.FieldAvatarRemoteURL)
	}
	if m.FieldCleared(user.FieldAvatarLocalFile) {
		fields = append(fields, user.FieldAvatarLocalFile)
	}
	if m.FieldCleared(user.FieldAvatarUpdatedAt) {
		fields = append(fields, user.FieldAvatarUpdatedAt)
	}
	if m.FieldCleared(user.FieldLastSeen) {
		fields = append(fields, user.FieldLastSeen)
	}
	if m.FieldCleared(user.FieldPassword) {
		fields = append(fields, user.FieldPassword)
	}
	if m.FieldCleared(user.FieldSub) {
		fields = append(fields, user.FieldSub)
	}
	if m.FieldCleared(user.FieldTfaSecret) {
		fields = append(fields, user.FieldTfaSecret)
	}
	if m.FieldCleared(user.FieldIsPhoneOtpAllowed) {
		fields = append(fields, user.FieldIsPhoneOtpAllowed)
	}
	if m.FieldCleared(user.FieldIsEmailOtpAllowed) {
		fields = append(fields, user.FieldIsEmailOtpAllowed)
	}
	if m.FieldCleared(user.FieldIsTotpAllowed) {
		fields = append(fields, user.FieldIsTotpAllowed)
	}
	if m.FieldCleared(user.FieldIsWebauthnAllowed) {
		fields = append(fields, user.FieldIsWebauthnAllowed)
	}
	if m.FieldCleared(user.FieldIsTfaEnabled) {
		fields = append(fields, user.FieldIsTfaEnabled)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case user.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case user.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case user.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case user.FieldAvatarRemoteURL:
		m.ClearAvatarRemoteURL()
		return nil
	case user.FieldAvatarLocalFile:
		m.ClearAvatarLocalFile()
		return nil
	case user.FieldAvatarUpdatedAt:
		m.ClearAvatarUpdatedAt()
		return nil
	case user.FieldLastSeen:
		m.ClearLastSeen()
		return nil
	case user.FieldPassword:
		m.ClearPassword()
		return nil
	case user.FieldSub:
		m.ClearSub()
		return nil
	case user.FieldTfaSecret:
		m.ClearTfaSecret()
		return nil
	case user.FieldIsPhoneOtpAllowed:
		m.ClearIsPhoneOtpAllowed()
		return nil
	case user.FieldIsEmailOtpAllowed:
		m.ClearIsEmailOtpAllowed()
		return nil
	case user.FieldIsTotpAllowed:
		m.ClearIsTotpAllowed()
		return nil
	case user.FieldIsWebauthnAllowed:
		m.ClearIsWebauthnAllowed()
		return nil
	case user.FieldIsTfaEnabled:
		m.ClearIsTfaEnabled()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case user.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case user.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case user.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case user.FieldEmail:
		m.ResetEmail()
		return nil
	case user.FieldFirstName:
		m.ResetFirstName()
		return nil
	case user.FieldLastName:
		m.ResetLastName()
		return nil
	case user.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case user.FieldAvatarRemoteURL:
		m.ResetAvatarRemoteURL()
		return nil
	case user.FieldAvatarLocalFile:
		m.ResetAvatarLocalFile()
		return nil
	case user.FieldAvatarUpdatedAt:
		m.ResetAvatarUpdatedAt()
		return nil
	case user.FieldLastSeen:
		m.ResetLastSeen()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldSub:
		m.ResetSub()
		return nil
	case user.FieldOauth:
		m.ResetOauth()
		return nil
	case user.FieldAuthProvider:
		m.ResetAuthProvider()
		return nil
	case user.FieldTfaSecret:
		m.ResetTfaSecret()
		return nil
	case user.FieldIsPhoneOtpAllowed:
		m.ResetIsPhoneOtpAllowed()
		return nil
	case user.FieldIsEmailOtpAllowed:
		m.ResetIsEmailOtpAllowed()
		return nil
	case user.FieldIsTotpAllowed:
		m.ResetIsTotpAllowed()
		return nil
	case user.FieldIsWebauthnAllowed:
		m.ResetIsWebauthnAllowed()
		return nil
	case user.FieldIsTfaEnabled:
		m.ResetIsTfaEnabled()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 9)
	if m.personal_access_tokens != nil {
		edges = append(edges, user.EdgePersonalAccessTokens)
	}
	if m.setting != nil {
		edges = append(edges, user.EdgeSetting)
	}
	if m.email_verification_tokens != nil {
		edges = append(edges, user.EdgeEmailVerificationTokens)
	}
	if m.password_reset_tokens != nil {
		edges = append(edges, user.EdgePasswordResetTokens)
	}
	if m.groups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.organizations != nil {
		edges = append(edges, user.EdgeOrganizations)
	}
	if m.webauthn != nil {
		edges = append(edges, user.EdgeWebauthn)
	}
	if m.group_memberships != nil {
		edges = append(edges, user.EdgeGroupMemberships)
	}
	if m.org_memberships != nil {
		edges = append(edges, user.EdgeOrgMemberships)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePersonalAccessTokens:
		ids := make([]ent.Value, 0, len(m.personal_access_tokens))
		for id := range m.personal_access_tokens {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeSetting:
		if id := m.setting; id != nil {
			return []ent.Value{*id}
		}
	case user.EdgeEmailVerificationTokens:
		ids := make([]ent.Value, 0, len(m.email_verification_tokens))
		for id := range m.email_verification_tokens {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePasswordResetTokens:
		ids := make([]ent.Value, 0, len(m.password_reset_tokens))
		for id := range m.password_reset_tokens {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.groups))
		for id := range m.groups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeOrganizations:
		ids := make([]ent.Value, 0, len(m.organizations))
		for id := range m.organizations {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWebauthn:
		ids := make([]ent.Value, 0, len(m.webauthn))
		for id := range m.webauthn {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupMemberships:
		ids := make([]ent.Value, 0, len(m.group_memberships))
		for id := range m.group_memberships {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeOrgMemberships:
		ids := make([]ent.Value, 0, len(m.org_memberships))
		for id := range m.org_memberships {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 9)
	if m.removedpersonal_access_tokens != nil {
		edges = append(edges, user.EdgePersonalAccessTokens)
	}
	if m.removedemail_verification_tokens != nil {
		edges = append(edges, user.EdgeEmailVerificationTokens)
	}
	if m.removedpassword_reset_tokens != nil {
		edges = append(edges, user.EdgePasswordResetTokens)
	}
	if m.removedgroups != nil {
		edges = append(edges, user.EdgeGroups)
	}
	if m.removedorganizations != nil {
		edges = append(edges, user.EdgeOrganizations)
	}
	if m.removedwebauthn != nil {
		edges = append(edges, user.EdgeWebauthn)
	}
	if m.removedgroup_memberships != nil {
		edges = append(edges, user.EdgeGroupMemberships)
	}
	if m.removedorg_memberships != nil {
		edges = append(edges, user.EdgeOrgMemberships)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case user.EdgePersonalAccessTokens:
		ids := make([]ent.Value, 0, len(m.removedpersonal_access_tokens))
		for id := range m.removedpersonal_access_tokens {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeEmailVerificationTokens:
		ids := make([]ent.Value, 0, len(m.removedemail_verification_tokens))
		for id := range m.removedemail_verification_tokens {
			ids = append(ids, id)
		}
		return ids
	case user.EdgePasswordResetTokens:
		ids := make([]ent.Value, 0, len(m.removedpassword_reset_tokens))
		for id := range m.removedpassword_reset_tokens {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroups:
		ids := make([]ent.Value, 0, len(m.removedgroups))
		for id := range m.removedgroups {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeOrganizations:
		ids := make([]ent.Value, 0, len(m.removedorganizations))
		for id := range m.removedorganizations {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeWebauthn:
		ids := make([]ent.Value, 0, len(m.removedwebauthn))
		for id := range m.removedwebauthn {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeGroupMemberships:
		ids := make([]ent.Value, 0, len(m.removedgroup_memberships))
		for id := range m.removedgroup_memberships {
			ids = append(ids, id)
		}
		return ids
	case user.EdgeOrgMemberships:
		ids := make([]ent.Value, 0, len(m.removedorg_memberships))
		for id := range m.removedorg_memberships {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 9)
	if m.clearedpersonal_access_tokens {
		edges = append(edges, user.EdgePersonalAccessTokens)
	}
	if m.clearedsetting {
		edges = append(edges, user.EdgeSetting)
	}
	if m.clearedemail_verification_tokens {
		edges = append(edges, user.EdgeEmailVerificationTokens)
	}
	if m.clearedpassword_reset_tokens {
		edges = append(edges, user.EdgePasswordResetTokens)
	}
	if m.clearedgroups {
		edges = append(edges, user.EdgeGroups)
	}
	if m.clearedorganizations {
		edges = append(edges, user.EdgeOrganizations)
	}
	if m.clearedwebauthn {
		edges = append(edges, user.EdgeWebauthn)
	}
	if m.clearedgroup_memberships {
		edges = append(edges, user.EdgeGroupMemberships)
	}
	if m.clearedorg_memberships {
		edges = append(edges, user.EdgeOrgMemberships)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	switch name {
	case user.EdgePersonalAccessTokens:
		return m.clearedpersonal_access_tokens
	case user.EdgeSetting:
		return m.clearedsetting
	case user.EdgeEmailVerificationTokens:
		return m.clearedemail_verification_tokens
	case user.EdgePasswordResetTokens:
		return m.clearedpassword_reset_tokens
	case user.EdgeGroups:
		return m.clearedgroups
	case user.EdgeOrganizations:
		return m.clearedorganizations
	case user.EdgeWebauthn:
		return m.clearedwebauthn
	case user.EdgeGroupMemberships:
		return m.clearedgroup_memberships
	case user.EdgeOrgMemberships:
		return m.clearedorg_memberships
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	switch name {
	case user.EdgeSetting:
		m.ClearSetting()
		return nil
	}
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	switch name {
	case user.EdgePersonalAccessTokens:
		m.ResetPersonalAccessTokens()
		return nil
	case user.EdgeSetting:
		m.ResetSetting()
		return nil
	case user.EdgeEmailVerificationTokens:
		m.ResetEmailVerificationTokens()
		return nil
	case user.EdgePasswordResetTokens:
		m.ResetPasswordResetTokens()
		return nil
	case user.EdgeGroups:
		m.ResetGroups()
		return nil
	case user.EdgeOrganizations:
		m.ResetOrganizations()
		return nil
	case user.EdgeWebauthn:
		m.ResetWebauthn()
		return nil
	case user.EdgeGroupMemberships:
		m.ResetGroupMemberships()
		return nil
	case user.EdgeOrgMemberships:
		m.ResetOrgMemberships()
		return nil
	}
	return fmt.Errorf("unknown User edge %s", name)
}

// UserSettingMutation represents an operation that mutates the UserSetting nodes in the graph.
type UserSettingMutation struct {
	config
	op              Op
	typ             string
	id              *string
	created_at      *time.Time
	updated_at      *time.Time
	created_by      *string
	updated_by      *string
	deleted_at      *time.Time
	deleted_by      *string
	locked          *bool
	silenced_at     *time.Time
	suspended_at    *time.Time
	recovery_code   *string
	status          *enums.UserStatus
	default_org     *string
	email_confirmed *bool
	tags            *[]string
	appendtags      []string
	clearedFields   map[string]struct{}
	user            *string
	cleareduser     bool
	done            bool
	oldValue        func(context.Context) (*UserSetting, error)
	predicates      []predicate.UserSetting
}

var _ ent.Mutation = (*UserSettingMutation)(nil)

// usersettingOption allows management of the mutation configuration using functional options.
type usersettingOption func(*UserSettingMutation)

// newUserSettingMutation creates new mutation for the UserSetting entity.
func newUserSettingMutation(c config, op Op, opts ...usersettingOption) *UserSettingMutation {
	m := &UserSettingMutation{
		config:        c,
		op:            op,
		typ:           TypeUserSetting,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserSettingID sets the ID field of the mutation.
func withUserSettingID(id string) usersettingOption {
	return func(m *UserSettingMutation) {
		var (
			err   error
			once  sync.Once
			value *UserSetting
		)
		m.oldValue = func(ctx context.Context) (*UserSetting, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().UserSetting.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUserSetting sets the old UserSetting of the mutation.
func withUserSetting(node *UserSetting) usersettingOption {
	return func(m *UserSettingMutation) {
		m.oldValue = func(context.Context) (*UserSetting, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserSettingMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserSettingMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of UserSetting entities.
func (m *UserSettingMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserSettingMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserSettingMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().UserSetting.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *UserSettingMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserSettingMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the UserSetting entity.
// If the UserSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserSettingMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserSettingMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserSettingMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the UserSetting entity.
// If the UserSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserSettingMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *UserSettingMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *UserSettingMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the UserSetting entity.
// If the UserSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *UserSettingMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[usersetting.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *UserSettingMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[usersetting.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *UserSettingMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, usersetting.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *UserSettingMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *UserSettingMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the UserSetting entity.
// If the UserSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *UserSettingMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[usersetting.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *UserSettingMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[usersetting.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *UserSettingMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, usersetting.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *UserSettingMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *UserSettingMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the UserSetting entity.
// If the UserSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *UserSettingMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[usersetting.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *UserSettingMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[usersetting.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *UserSettingMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, usersetting.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *UserSettingMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *UserSettingMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the UserSetting entity.
// If the UserSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *UserSettingMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[usersetting.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *UserSettingMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[usersetting.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *UserSettingMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, usersetting.FieldDeletedBy)
}

// SetLocked sets the "locked" field.
func (m *UserSettingMutation) SetLocked(b bool) {
	m.locked = &b
}

// Locked returns the value of the "locked" field in the mutation.
func (m *UserSettingMutation) Locked() (r bool, exists bool) {
	v := m.locked
	if v == nil {
		return
	}
	return *v, true
}

// OldLocked returns the old "locked" field's value of the UserSetting entity.
// If the UserSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingMutation) OldLocked(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLocked is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLocked requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLocked: %w", err)
	}
	return oldValue.Locked, nil
}

// ResetLocked resets all changes to the "locked" field.
func (m *UserSettingMutation) ResetLocked() {
	m.locked = nil
}

// SetSilencedAt sets the "silenced_at" field.
func (m *UserSettingMutation) SetSilencedAt(t time.Time) {
	m.silenced_at = &t
}

// SilencedAt returns the value of the "silenced_at" field in the mutation.
func (m *UserSettingMutation) SilencedAt() (r time.Time, exists bool) {
	v := m.silenced_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSilencedAt returns the old "silenced_at" field's value of the UserSetting entity.
// If the UserSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingMutation) OldSilencedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSilencedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSilencedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSilencedAt: %w", err)
	}
	return oldValue.SilencedAt, nil
}

// ClearSilencedAt clears the value of the "silenced_at" field.
func (m *UserSettingMutation) ClearSilencedAt() {
	m.silenced_at = nil
	m.clearedFields[usersetting.FieldSilencedAt] = struct{}{}
}

// SilencedAtCleared returns if the "silenced_at" field was cleared in this mutation.
func (m *UserSettingMutation) SilencedAtCleared() bool {
	_, ok := m.clearedFields[usersetting.FieldSilencedAt]
	return ok
}

// ResetSilencedAt resets all changes to the "silenced_at" field.
func (m *UserSettingMutation) ResetSilencedAt() {
	m.silenced_at = nil
	delete(m.clearedFields, usersetting.FieldSilencedAt)
}

// SetSuspendedAt sets the "suspended_at" field.
func (m *UserSettingMutation) SetSuspendedAt(t time.Time) {
	m.suspended_at = &t
}

// SuspendedAt returns the value of the "suspended_at" field in the mutation.
func (m *UserSettingMutation) SuspendedAt() (r time.Time, exists bool) {
	v := m.suspended_at
	if v == nil {
		return
	}
	return *v, true
}

// OldSuspendedAt returns the old "suspended_at" field's value of the UserSetting entity.
// If the UserSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingMutation) OldSuspendedAt(ctx context.Context) (v *time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSuspendedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSuspendedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSuspendedAt: %w", err)
	}
	return oldValue.SuspendedAt, nil
}

// ClearSuspendedAt clears the value of the "suspended_at" field.
func (m *UserSettingMutation) ClearSuspendedAt() {
	m.suspended_at = nil
	m.clearedFields[usersetting.FieldSuspendedAt] = struct{}{}
}

// SuspendedAtCleared returns if the "suspended_at" field was cleared in this mutation.
func (m *UserSettingMutation) SuspendedAtCleared() bool {
	_, ok := m.clearedFields[usersetting.FieldSuspendedAt]
	return ok
}

// ResetSuspendedAt resets all changes to the "suspended_at" field.
func (m *UserSettingMutation) ResetSuspendedAt() {
	m.suspended_at = nil
	delete(m.clearedFields, usersetting.FieldSuspendedAt)
}

// SetRecoveryCode sets the "recovery_code" field.
func (m *UserSettingMutation) SetRecoveryCode(s string) {
	m.recovery_code = &s
}

// RecoveryCode returns the value of the "recovery_code" field in the mutation.
func (m *UserSettingMutation) RecoveryCode() (r string, exists bool) {
	v := m.recovery_code
	if v == nil {
		return
	}
	return *v, true
}

// OldRecoveryCode returns the old "recovery_code" field's value of the UserSetting entity.
// If the UserSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingMutation) OldRecoveryCode(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRecoveryCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRecoveryCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRecoveryCode: %w", err)
	}
	return oldValue.RecoveryCode, nil
}

// ClearRecoveryCode clears the value of the "recovery_code" field.
func (m *UserSettingMutation) ClearRecoveryCode() {
	m.recovery_code = nil
	m.clearedFields[usersetting.FieldRecoveryCode] = struct{}{}
}

// RecoveryCodeCleared returns if the "recovery_code" field was cleared in this mutation.
func (m *UserSettingMutation) RecoveryCodeCleared() bool {
	_, ok := m.clearedFields[usersetting.FieldRecoveryCode]
	return ok
}

// ResetRecoveryCode resets all changes to the "recovery_code" field.
func (m *UserSettingMutation) ResetRecoveryCode() {
	m.recovery_code = nil
	delete(m.clearedFields, usersetting.FieldRecoveryCode)
}

// SetStatus sets the "status" field.
func (m *UserSettingMutation) SetStatus(es enums.UserStatus) {
	m.status = &es
}

// Status returns the value of the "status" field in the mutation.
func (m *UserSettingMutation) Status() (r enums.UserStatus, exists bool) {
	v := m.status
	if v == nil {
		return
	}
	return *v, true
}

// OldStatus returns the old "status" field's value of the UserSetting entity.
// If the UserSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingMutation) OldStatus(ctx context.Context) (v enums.UserStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStatus is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStatus requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStatus: %w", err)
	}
	return oldValue.Status, nil
}

// ResetStatus resets all changes to the "status" field.
func (m *UserSettingMutation) ResetStatus() {
	m.status = nil
}

// SetDefaultOrg sets the "default_org" field.
func (m *UserSettingMutation) SetDefaultOrg(s string) {
	m.default_org = &s
}

// DefaultOrg returns the value of the "default_org" field in the mutation.
func (m *UserSettingMutation) DefaultOrg() (r string, exists bool) {
	v := m.default_org
	if v == nil {
		return
	}
	return *v, true
}

// OldDefaultOrg returns the old "default_org" field's value of the UserSetting entity.
// If the UserSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingMutation) OldDefaultOrg(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDefaultOrg is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDefaultOrg requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDefaultOrg: %w", err)
	}
	return oldValue.DefaultOrg, nil
}

// ClearDefaultOrg clears the value of the "default_org" field.
func (m *UserSettingMutation) ClearDefaultOrg() {
	m.default_org = nil
	m.clearedFields[usersetting.FieldDefaultOrg] = struct{}{}
}

// DefaultOrgCleared returns if the "default_org" field was cleared in this mutation.
func (m *UserSettingMutation) DefaultOrgCleared() bool {
	_, ok := m.clearedFields[usersetting.FieldDefaultOrg]
	return ok
}

// ResetDefaultOrg resets all changes to the "default_org" field.
func (m *UserSettingMutation) ResetDefaultOrg() {
	m.default_org = nil
	delete(m.clearedFields, usersetting.FieldDefaultOrg)
}

// SetEmailConfirmed sets the "email_confirmed" field.
func (m *UserSettingMutation) SetEmailConfirmed(b bool) {
	m.email_confirmed = &b
}

// EmailConfirmed returns the value of the "email_confirmed" field in the mutation.
func (m *UserSettingMutation) EmailConfirmed() (r bool, exists bool) {
	v := m.email_confirmed
	if v == nil {
		return
	}
	return *v, true
}

// OldEmailConfirmed returns the old "email_confirmed" field's value of the UserSetting entity.
// If the UserSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingMutation) OldEmailConfirmed(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEmailConfirmed is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEmailConfirmed requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEmailConfirmed: %w", err)
	}
	return oldValue.EmailConfirmed, nil
}

// ResetEmailConfirmed resets all changes to the "email_confirmed" field.
func (m *UserSettingMutation) ResetEmailConfirmed() {
	m.email_confirmed = nil
}

// SetTags sets the "tags" field.
func (m *UserSettingMutation) SetTags(s []string) {
	m.tags = &s
	m.appendtags = nil
}

// Tags returns the value of the "tags" field in the mutation.
func (m *UserSettingMutation) Tags() (r []string, exists bool) {
	v := m.tags
	if v == nil {
		return
	}
	return *v, true
}

// OldTags returns the old "tags" field's value of the UserSetting entity.
// If the UserSetting object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserSettingMutation) OldTags(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTags: %w", err)
	}
	return oldValue.Tags, nil
}

// AppendTags adds s to the "tags" field.
func (m *UserSettingMutation) AppendTags(s []string) {
	m.appendtags = append(m.appendtags, s...)
}

// AppendedTags returns the list of values that were appended to the "tags" field in this mutation.
func (m *UserSettingMutation) AppendedTags() ([]string, bool) {
	if len(m.appendtags) == 0 {
		return nil, false
	}
	return m.appendtags, true
}

// ResetTags resets all changes to the "tags" field.
func (m *UserSettingMutation) ResetTags() {
	m.tags = nil
	m.appendtags = nil
}

// SetUserID sets the "user" edge to the User entity by id.
func (m *UserSettingMutation) SetUserID(id string) {
	m.user = &id
}

// ClearUser clears the "user" edge to the User entity.
func (m *UserSettingMutation) ClearUser() {
	m.cleareduser = true
}

// UserCleared reports if the "user" edge to the User entity was cleared.
func (m *UserSettingMutation) UserCleared() bool {
	return m.cleareduser
}

// UserID returns the "user" edge ID in the mutation.
func (m *UserSettingMutation) UserID() (id string, exists bool) {
	if m.user != nil {
		return *m.user, true
	}
	return
}

// UserIDs returns the "user" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// UserID instead. It exists only for internal usage by the builders.
func (m *UserSettingMutation) UserIDs() (ids []string) {
	if id := m.user; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetUser resets all changes to the "user" edge.
func (m *UserSettingMutation) ResetUser() {
	m.user = nil
	m.cleareduser = false
}

// Where appends a list predicates to the UserSettingMutation builder.
func (m *UserSettingMutation) Where(ps ...predicate.UserSetting) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the UserSettingMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *UserSettingMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.UserSetting, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *UserSettingMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *UserSettingMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (UserSetting).
func (m *UserSettingMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserSettingMutation) Fields() []string {
	fields := make([]string, 0, 14)
	if m.created_at != nil {
		fields = append(fields, usersetting.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, usersetting.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, usersetting.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, usersetting.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, usersetting.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, usersetting.FieldDeletedBy)
	}
	if m.locked != nil {
		fields = append(fields, usersetting.FieldLocked)
	}
	if m.silenced_at != nil {
		fields = append(fields, usersetting.FieldSilencedAt)
	}
	if m.suspended_at != nil {
		fields = append(fields, usersetting.FieldSuspendedAt)
	}
	if m.recovery_code != nil {
		fields = append(fields, usersetting.FieldRecoveryCode)
	}
	if m.status != nil {
		fields = append(fields, usersetting.FieldStatus)
	}
	if m.default_org != nil {
		fields = append(fields, usersetting.FieldDefaultOrg)
	}
	if m.email_confirmed != nil {
		fields = append(fields, usersetting.FieldEmailConfirmed)
	}
	if m.tags != nil {
		fields = append(fields, usersetting.FieldTags)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserSettingMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case usersetting.FieldCreatedAt:
		return m.CreatedAt()
	case usersetting.FieldUpdatedAt:
		return m.UpdatedAt()
	case usersetting.FieldCreatedBy:
		return m.CreatedBy()
	case usersetting.FieldUpdatedBy:
		return m.UpdatedBy()
	case usersetting.FieldDeletedAt:
		return m.DeletedAt()
	case usersetting.FieldDeletedBy:
		return m.DeletedBy()
	case usersetting.FieldLocked:
		return m.Locked()
	case usersetting.FieldSilencedAt:
		return m.SilencedAt()
	case usersetting.FieldSuspendedAt:
		return m.SuspendedAt()
	case usersetting.FieldRecoveryCode:
		return m.RecoveryCode()
	case usersetting.FieldStatus:
		return m.Status()
	case usersetting.FieldDefaultOrg:
		return m.DefaultOrg()
	case usersetting.FieldEmailConfirmed:
		return m.EmailConfirmed()
	case usersetting.FieldTags:
		return m.Tags()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserSettingMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case usersetting.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case usersetting.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case usersetting.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case usersetting.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case usersetting.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case usersetting.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case usersetting.FieldLocked:
		return m.OldLocked(ctx)
	case usersetting.FieldSilencedAt:
		return m.OldSilencedAt(ctx)
	case usersetting.FieldSuspendedAt:
		return m.OldSuspendedAt(ctx)
	case usersetting.FieldRecoveryCode:
		return m.OldRecoveryCode(ctx)
	case usersetting.FieldStatus:
		return m.OldStatus(ctx)
	case usersetting.FieldDefaultOrg:
		return m.OldDefaultOrg(ctx)
	case usersetting.FieldEmailConfirmed:
		return m.OldEmailConfirmed(ctx)
	case usersetting.FieldTags:
		return m.OldTags(ctx)
	}
	return nil, fmt.Errorf("unknown UserSetting field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserSettingMutation) SetField(name string, value ent.Value) error {
	switch name {
	case usersetting.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case usersetting.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case usersetting.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case usersetting.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case usersetting.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case usersetting.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case usersetting.FieldLocked:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLocked(v)
		return nil
	case usersetting.FieldSilencedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSilencedAt(v)
		return nil
	case usersetting.FieldSuspendedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSuspendedAt(v)
		return nil
	case usersetting.FieldRecoveryCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRecoveryCode(v)
		return nil
	case usersetting.FieldStatus:
		v, ok := value.(enums.UserStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStatus(v)
		return nil
	case usersetting.FieldDefaultOrg:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDefaultOrg(v)
		return nil
	case usersetting.FieldEmailConfirmed:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEmailConfirmed(v)
		return nil
	case usersetting.FieldTags:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTags(v)
		return nil
	}
	return fmt.Errorf("unknown UserSetting field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserSettingMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserSettingMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserSettingMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown UserSetting numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserSettingMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(usersetting.FieldCreatedBy) {
		fields = append(fields, usersetting.FieldCreatedBy)
	}
	if m.FieldCleared(usersetting.FieldUpdatedBy) {
		fields = append(fields, usersetting.FieldUpdatedBy)
	}
	if m.FieldCleared(usersetting.FieldDeletedAt) {
		fields = append(fields, usersetting.FieldDeletedAt)
	}
	if m.FieldCleared(usersetting.FieldDeletedBy) {
		fields = append(fields, usersetting.FieldDeletedBy)
	}
	if m.FieldCleared(usersetting.FieldSilencedAt) {
		fields = append(fields, usersetting.FieldSilencedAt)
	}
	if m.FieldCleared(usersetting.FieldSuspendedAt) {
		fields = append(fields, usersetting.FieldSuspendedAt)
	}
	if m.FieldCleared(usersetting.FieldRecoveryCode) {
		fields = append(fields, usersetting.FieldRecoveryCode)
	}
	if m.FieldCleared(usersetting.FieldDefaultOrg) {
		fields = append(fields, usersetting.FieldDefaultOrg)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserSettingMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserSettingMutation) ClearField(name string) error {
	switch name {
	case usersetting.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case usersetting.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case usersetting.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case usersetting.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case usersetting.FieldSilencedAt:
		m.ClearSilencedAt()
		return nil
	case usersetting.FieldSuspendedAt:
		m.ClearSuspendedAt()
		return nil
	case usersetting.FieldRecoveryCode:
		m.ClearRecoveryCode()
		return nil
	case usersetting.FieldDefaultOrg:
		m.ClearDefaultOrg()
		return nil
	}
	return fmt.Errorf("unknown UserSetting nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserSettingMutation) ResetField(name string) error {
	switch name {
	case usersetting.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case usersetting.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case usersetting.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case usersetting.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case usersetting.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case usersetting.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case usersetting.FieldLocked:
		m.ResetLocked()
		return nil
	case usersetting.FieldSilencedAt:
		m.ResetSilencedAt()
		return nil
	case usersetting.FieldSuspendedAt:
		m.ResetSuspendedAt()
		return nil
	case usersetting.FieldRecoveryCode:
		m.ResetRecoveryCode()
		return nil
	case usersetting.FieldStatus:
		m.ResetStatus()
		return nil
	case usersetting.FieldDefaultOrg:
		m.ResetDefaultOrg()
		return nil
	case usersetting.FieldEmailConfirmed:
		m.ResetEmailConfirmed()
		return nil
	case usersetting.FieldTags:
		m.ResetTags()
		return nil
	}
	return fmt.Errorf("unknown UserSetting field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserSettingMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.user != nil {
		edges = append(edges, usersetting.EdgeUser)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserSettingMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case usersetting.EdgeUser:
		if id := m.user; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserSettingMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserSettingMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserSettingMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.cleareduser {
		edges = append(edges, usersetting.EdgeUser)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserSettingMutation) EdgeCleared(name string) bool {
	switch name {
	case usersetting.EdgeUser:
		return m.cleareduser
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserSettingMutation) ClearEdge(name string) error {
	switch name {
	case usersetting.EdgeUser:
		m.ClearUser()
		return nil
	}
	return fmt.Errorf("unknown UserSetting unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserSettingMutation) ResetEdge(name string) error {
	switch name {
	case usersetting.EdgeUser:
		m.ResetUser()
		return nil
	}
	return fmt.Errorf("unknown UserSetting edge %s", name)
}

// WebauthnMutation represents an operation that mutates the Webauthn nodes in the graph.
type WebauthnMutation struct {
	config
	op                  Op
	typ                 string
	id                  *string
	created_at          *time.Time
	updated_at          *time.Time
	created_by          *string
	updated_by          *string
	deleted_at          *time.Time
	deleted_by          *string
	name                *string
	user_id             *string
	credential_id       *string
	public_key          *[]byte
	attestation_type    *string
	aaguid              *string
	sign_count          *int
	addsign_count       *int
	transports          *[]string
	appendtransports    []string
	flags               *[]string
	appendflags         []string
	authenticator       *[]string
	appendauthenticator []string
	backup_eligible     *bool
	backup_state        *bool
	clearedFields       map[string]struct{}
	owner               *string
	clearedowner        bool
	done                bool
	oldValue            func(context.Context) (*Webauthn, error)
	predicates          []predicate.Webauthn
}

var _ ent.Mutation = (*WebauthnMutation)(nil)

// webauthnOption allows management of the mutation configuration using functional options.
type webauthnOption func(*WebauthnMutation)

// newWebauthnMutation creates new mutation for the Webauthn entity.
func newWebauthnMutation(c config, op Op, opts ...webauthnOption) *WebauthnMutation {
	m := &WebauthnMutation{
		config:        c,
		op:            op,
		typ:           TypeWebauthn,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withWebauthnID sets the ID field of the mutation.
func withWebauthnID(id string) webauthnOption {
	return func(m *WebauthnMutation) {
		var (
			err   error
			once  sync.Once
			value *Webauthn
		)
		m.oldValue = func(ctx context.Context) (*Webauthn, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Webauthn.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withWebauthn sets the old Webauthn of the mutation.
func withWebauthn(node *Webauthn) webauthnOption {
	return func(m *WebauthnMutation) {
		m.oldValue = func(context.Context) (*Webauthn, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m WebauthnMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m WebauthnMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("generated: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Webauthn entities.
func (m *WebauthnMutation) SetID(id string) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *WebauthnMutation) ID() (id string, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *WebauthnMutation) IDs(ctx context.Context) ([]string, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []string{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Webauthn.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetCreatedAt sets the "created_at" field.
func (m *WebauthnMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *WebauthnMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *WebauthnMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *WebauthnMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *WebauthnMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *WebauthnMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedBy sets the "created_by" field.
func (m *WebauthnMutation) SetCreatedBy(s string) {
	m.created_by = &s
}

// CreatedBy returns the value of the "created_by" field in the mutation.
func (m *WebauthnMutation) CreatedBy() (r string, exists bool) {
	v := m.created_by
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedBy returns the old "created_by" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldCreatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedBy: %w", err)
	}
	return oldValue.CreatedBy, nil
}

// ClearCreatedBy clears the value of the "created_by" field.
func (m *WebauthnMutation) ClearCreatedBy() {
	m.created_by = nil
	m.clearedFields[webauthn.FieldCreatedBy] = struct{}{}
}

// CreatedByCleared returns if the "created_by" field was cleared in this mutation.
func (m *WebauthnMutation) CreatedByCleared() bool {
	_, ok := m.clearedFields[webauthn.FieldCreatedBy]
	return ok
}

// ResetCreatedBy resets all changes to the "created_by" field.
func (m *WebauthnMutation) ResetCreatedBy() {
	m.created_by = nil
	delete(m.clearedFields, webauthn.FieldCreatedBy)
}

// SetUpdatedBy sets the "updated_by" field.
func (m *WebauthnMutation) SetUpdatedBy(s string) {
	m.updated_by = &s
}

// UpdatedBy returns the value of the "updated_by" field in the mutation.
func (m *WebauthnMutation) UpdatedBy() (r string, exists bool) {
	v := m.updated_by
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedBy returns the old "updated_by" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldUpdatedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedBy: %w", err)
	}
	return oldValue.UpdatedBy, nil
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (m *WebauthnMutation) ClearUpdatedBy() {
	m.updated_by = nil
	m.clearedFields[webauthn.FieldUpdatedBy] = struct{}{}
}

// UpdatedByCleared returns if the "updated_by" field was cleared in this mutation.
func (m *WebauthnMutation) UpdatedByCleared() bool {
	_, ok := m.clearedFields[webauthn.FieldUpdatedBy]
	return ok
}

// ResetUpdatedBy resets all changes to the "updated_by" field.
func (m *WebauthnMutation) ResetUpdatedBy() {
	m.updated_by = nil
	delete(m.clearedFields, webauthn.FieldUpdatedBy)
}

// SetDeletedAt sets the "deleted_at" field.
func (m *WebauthnMutation) SetDeletedAt(t time.Time) {
	m.deleted_at = &t
}

// DeletedAt returns the value of the "deleted_at" field in the mutation.
func (m *WebauthnMutation) DeletedAt() (r time.Time, exists bool) {
	v := m.deleted_at
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedAt returns the old "deleted_at" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldDeletedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedAt: %w", err)
	}
	return oldValue.DeletedAt, nil
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (m *WebauthnMutation) ClearDeletedAt() {
	m.deleted_at = nil
	m.clearedFields[webauthn.FieldDeletedAt] = struct{}{}
}

// DeletedAtCleared returns if the "deleted_at" field was cleared in this mutation.
func (m *WebauthnMutation) DeletedAtCleared() bool {
	_, ok := m.clearedFields[webauthn.FieldDeletedAt]
	return ok
}

// ResetDeletedAt resets all changes to the "deleted_at" field.
func (m *WebauthnMutation) ResetDeletedAt() {
	m.deleted_at = nil
	delete(m.clearedFields, webauthn.FieldDeletedAt)
}

// SetDeletedBy sets the "deleted_by" field.
func (m *WebauthnMutation) SetDeletedBy(s string) {
	m.deleted_by = &s
}

// DeletedBy returns the value of the "deleted_by" field in the mutation.
func (m *WebauthnMutation) DeletedBy() (r string, exists bool) {
	v := m.deleted_by
	if v == nil {
		return
	}
	return *v, true
}

// OldDeletedBy returns the old "deleted_by" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldDeletedBy(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDeletedBy is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDeletedBy requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDeletedBy: %w", err)
	}
	return oldValue.DeletedBy, nil
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (m *WebauthnMutation) ClearDeletedBy() {
	m.deleted_by = nil
	m.clearedFields[webauthn.FieldDeletedBy] = struct{}{}
}

// DeletedByCleared returns if the "deleted_by" field was cleared in this mutation.
func (m *WebauthnMutation) DeletedByCleared() bool {
	_, ok := m.clearedFields[webauthn.FieldDeletedBy]
	return ok
}

// ResetDeletedBy resets all changes to the "deleted_by" field.
func (m *WebauthnMutation) ResetDeletedBy() {
	m.deleted_by = nil
	delete(m.clearedFields, webauthn.FieldDeletedBy)
}

// SetOwnerID sets the "owner_id" field.
func (m *WebauthnMutation) SetOwnerID(s string) {
	m.owner = &s
}

// OwnerID returns the value of the "owner_id" field in the mutation.
func (m *WebauthnMutation) OwnerID() (r string, exists bool) {
	v := m.owner
	if v == nil {
		return
	}
	return *v, true
}

// OldOwnerID returns the old "owner_id" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldOwnerID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOwnerID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOwnerID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOwnerID: %w", err)
	}
	return oldValue.OwnerID, nil
}

// ResetOwnerID resets all changes to the "owner_id" field.
func (m *WebauthnMutation) ResetOwnerID() {
	m.owner = nil
}

// SetName sets the "name" field.
func (m *WebauthnMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *WebauthnMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *WebauthnMutation) ResetName() {
	m.name = nil
}

// SetUserID sets the "user_id" field.
func (m *WebauthnMutation) SetUserID(s string) {
	m.user_id = &s
}

// UserID returns the value of the "user_id" field in the mutation.
func (m *WebauthnMutation) UserID() (r string, exists bool) {
	v := m.user_id
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "user_id" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldUserID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUserID: %w", err)
	}
	return oldValue.UserID, nil
}

// ResetUserID resets all changes to the "user_id" field.
func (m *WebauthnMutation) ResetUserID() {
	m.user_id = nil
}

// SetCredentialID sets the "credential_id" field.
func (m *WebauthnMutation) SetCredentialID(s string) {
	m.credential_id = &s
}

// CredentialID returns the value of the "credential_id" field in the mutation.
func (m *WebauthnMutation) CredentialID() (r string, exists bool) {
	v := m.credential_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCredentialID returns the old "credential_id" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldCredentialID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCredentialID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCredentialID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCredentialID: %w", err)
	}
	return oldValue.CredentialID, nil
}

// ClearCredentialID clears the value of the "credential_id" field.
func (m *WebauthnMutation) ClearCredentialID() {
	m.credential_id = nil
	m.clearedFields[webauthn.FieldCredentialID] = struct{}{}
}

// CredentialIDCleared returns if the "credential_id" field was cleared in this mutation.
func (m *WebauthnMutation) CredentialIDCleared() bool {
	_, ok := m.clearedFields[webauthn.FieldCredentialID]
	return ok
}

// ResetCredentialID resets all changes to the "credential_id" field.
func (m *WebauthnMutation) ResetCredentialID() {
	m.credential_id = nil
	delete(m.clearedFields, webauthn.FieldCredentialID)
}

// SetPublicKey sets the "public_key" field.
func (m *WebauthnMutation) SetPublicKey(b []byte) {
	m.public_key = &b
}

// PublicKey returns the value of the "public_key" field in the mutation.
func (m *WebauthnMutation) PublicKey() (r []byte, exists bool) {
	v := m.public_key
	if v == nil {
		return
	}
	return *v, true
}

// OldPublicKey returns the old "public_key" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldPublicKey(ctx context.Context) (v []byte, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPublicKey is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPublicKey requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPublicKey: %w", err)
	}
	return oldValue.PublicKey, nil
}

// ClearPublicKey clears the value of the "public_key" field.
func (m *WebauthnMutation) ClearPublicKey() {
	m.public_key = nil
	m.clearedFields[webauthn.FieldPublicKey] = struct{}{}
}

// PublicKeyCleared returns if the "public_key" field was cleared in this mutation.
func (m *WebauthnMutation) PublicKeyCleared() bool {
	_, ok := m.clearedFields[webauthn.FieldPublicKey]
	return ok
}

// ResetPublicKey resets all changes to the "public_key" field.
func (m *WebauthnMutation) ResetPublicKey() {
	m.public_key = nil
	delete(m.clearedFields, webauthn.FieldPublicKey)
}

// SetAttestationType sets the "attestation_type" field.
func (m *WebauthnMutation) SetAttestationType(s string) {
	m.attestation_type = &s
}

// AttestationType returns the value of the "attestation_type" field in the mutation.
func (m *WebauthnMutation) AttestationType() (r string, exists bool) {
	v := m.attestation_type
	if v == nil {
		return
	}
	return *v, true
}

// OldAttestationType returns the old "attestation_type" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldAttestationType(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttestationType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttestationType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAttestationType: %w", err)
	}
	return oldValue.AttestationType, nil
}

// ClearAttestationType clears the value of the "attestation_type" field.
func (m *WebauthnMutation) ClearAttestationType() {
	m.attestation_type = nil
	m.clearedFields[webauthn.FieldAttestationType] = struct{}{}
}

// AttestationTypeCleared returns if the "attestation_type" field was cleared in this mutation.
func (m *WebauthnMutation) AttestationTypeCleared() bool {
	_, ok := m.clearedFields[webauthn.FieldAttestationType]
	return ok
}

// ResetAttestationType resets all changes to the "attestation_type" field.
func (m *WebauthnMutation) ResetAttestationType() {
	m.attestation_type = nil
	delete(m.clearedFields, webauthn.FieldAttestationType)
}

// SetAaguid sets the "aaguid" field.
func (m *WebauthnMutation) SetAaguid(s string) {
	m.aaguid = &s
}

// Aaguid returns the value of the "aaguid" field in the mutation.
func (m *WebauthnMutation) Aaguid() (r string, exists bool) {
	v := m.aaguid
	if v == nil {
		return
	}
	return *v, true
}

// OldAaguid returns the old "aaguid" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldAaguid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAaguid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAaguid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAaguid: %w", err)
	}
	return oldValue.Aaguid, nil
}

// ClearAaguid clears the value of the "aaguid" field.
func (m *WebauthnMutation) ClearAaguid() {
	m.aaguid = nil
	m.clearedFields[webauthn.FieldAaguid] = struct{}{}
}

// AaguidCleared returns if the "aaguid" field was cleared in this mutation.
func (m *WebauthnMutation) AaguidCleared() bool {
	_, ok := m.clearedFields[webauthn.FieldAaguid]
	return ok
}

// ResetAaguid resets all changes to the "aaguid" field.
func (m *WebauthnMutation) ResetAaguid() {
	m.aaguid = nil
	delete(m.clearedFields, webauthn.FieldAaguid)
}

// SetSignCount sets the "sign_count" field.
func (m *WebauthnMutation) SetSignCount(i int) {
	m.sign_count = &i
	m.addsign_count = nil
}

// SignCount returns the value of the "sign_count" field in the mutation.
func (m *WebauthnMutation) SignCount() (r int, exists bool) {
	v := m.sign_count
	if v == nil {
		return
	}
	return *v, true
}

// OldSignCount returns the old "sign_count" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldSignCount(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSignCount is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSignCount requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSignCount: %w", err)
	}
	return oldValue.SignCount, nil
}

// AddSignCount adds i to the "sign_count" field.
func (m *WebauthnMutation) AddSignCount(i int) {
	if m.addsign_count != nil {
		*m.addsign_count += i
	} else {
		m.addsign_count = &i
	}
}

// AddedSignCount returns the value that was added to the "sign_count" field in this mutation.
func (m *WebauthnMutation) AddedSignCount() (r int, exists bool) {
	v := m.addsign_count
	if v == nil {
		return
	}
	return *v, true
}

// ClearSignCount clears the value of the "sign_count" field.
func (m *WebauthnMutation) ClearSignCount() {
	m.sign_count = nil
	m.addsign_count = nil
	m.clearedFields[webauthn.FieldSignCount] = struct{}{}
}

// SignCountCleared returns if the "sign_count" field was cleared in this mutation.
func (m *WebauthnMutation) SignCountCleared() bool {
	_, ok := m.clearedFields[webauthn.FieldSignCount]
	return ok
}

// ResetSignCount resets all changes to the "sign_count" field.
func (m *WebauthnMutation) ResetSignCount() {
	m.sign_count = nil
	m.addsign_count = nil
	delete(m.clearedFields, webauthn.FieldSignCount)
}

// SetTransports sets the "transports" field.
func (m *WebauthnMutation) SetTransports(s []string) {
	m.transports = &s
	m.appendtransports = nil
}

// Transports returns the value of the "transports" field in the mutation.
func (m *WebauthnMutation) Transports() (r []string, exists bool) {
	v := m.transports
	if v == nil {
		return
	}
	return *v, true
}

// OldTransports returns the old "transports" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldTransports(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTransports is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTransports requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTransports: %w", err)
	}
	return oldValue.Transports, nil
}

// AppendTransports adds s to the "transports" field.
func (m *WebauthnMutation) AppendTransports(s []string) {
	m.appendtransports = append(m.appendtransports, s...)
}

// AppendedTransports returns the list of values that were appended to the "transports" field in this mutation.
func (m *WebauthnMutation) AppendedTransports() ([]string, bool) {
	if len(m.appendtransports) == 0 {
		return nil, false
	}
	return m.appendtransports, true
}

// ClearTransports clears the value of the "transports" field.
func (m *WebauthnMutation) ClearTransports() {
	m.transports = nil
	m.appendtransports = nil
	m.clearedFields[webauthn.FieldTransports] = struct{}{}
}

// TransportsCleared returns if the "transports" field was cleared in this mutation.
func (m *WebauthnMutation) TransportsCleared() bool {
	_, ok := m.clearedFields[webauthn.FieldTransports]
	return ok
}

// ResetTransports resets all changes to the "transports" field.
func (m *WebauthnMutation) ResetTransports() {
	m.transports = nil
	m.appendtransports = nil
	delete(m.clearedFields, webauthn.FieldTransports)
}

// SetFlags sets the "flags" field.
func (m *WebauthnMutation) SetFlags(s []string) {
	m.flags = &s
	m.appendflags = nil
}

// Flags returns the value of the "flags" field in the mutation.
func (m *WebauthnMutation) Flags() (r []string, exists bool) {
	v := m.flags
	if v == nil {
		return
	}
	return *v, true
}

// OldFlags returns the old "flags" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldFlags(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlags is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlags requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldFlags: %w", err)
	}
	return oldValue.Flags, nil
}

// AppendFlags adds s to the "flags" field.
func (m *WebauthnMutation) AppendFlags(s []string) {
	m.appendflags = append(m.appendflags, s...)
}

// AppendedFlags returns the list of values that were appended to the "flags" field in this mutation.
func (m *WebauthnMutation) AppendedFlags() ([]string, bool) {
	if len(m.appendflags) == 0 {
		return nil, false
	}
	return m.appendflags, true
}

// ClearFlags clears the value of the "flags" field.
func (m *WebauthnMutation) ClearFlags() {
	m.flags = nil
	m.appendflags = nil
	m.clearedFields[webauthn.FieldFlags] = struct{}{}
}

// FlagsCleared returns if the "flags" field was cleared in this mutation.
func (m *WebauthnMutation) FlagsCleared() bool {
	_, ok := m.clearedFields[webauthn.FieldFlags]
	return ok
}

// ResetFlags resets all changes to the "flags" field.
func (m *WebauthnMutation) ResetFlags() {
	m.flags = nil
	m.appendflags = nil
	delete(m.clearedFields, webauthn.FieldFlags)
}

// SetAuthenticator sets the "authenticator" field.
func (m *WebauthnMutation) SetAuthenticator(s []string) {
	m.authenticator = &s
	m.appendauthenticator = nil
}

// Authenticator returns the value of the "authenticator" field in the mutation.
func (m *WebauthnMutation) Authenticator() (r []string, exists bool) {
	v := m.authenticator
	if v == nil {
		return
	}
	return *v, true
}

// OldAuthenticator returns the old "authenticator" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldAuthenticator(ctx context.Context) (v []string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAuthenticator is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAuthenticator requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAuthenticator: %w", err)
	}
	return oldValue.Authenticator, nil
}

// AppendAuthenticator adds s to the "authenticator" field.
func (m *WebauthnMutation) AppendAuthenticator(s []string) {
	m.appendauthenticator = append(m.appendauthenticator, s...)
}

// AppendedAuthenticator returns the list of values that were appended to the "authenticator" field in this mutation.
func (m *WebauthnMutation) AppendedAuthenticator() ([]string, bool) {
	if len(m.appendauthenticator) == 0 {
		return nil, false
	}
	return m.appendauthenticator, true
}

// ClearAuthenticator clears the value of the "authenticator" field.
func (m *WebauthnMutation) ClearAuthenticator() {
	m.authenticator = nil
	m.appendauthenticator = nil
	m.clearedFields[webauthn.FieldAuthenticator] = struct{}{}
}

// AuthenticatorCleared returns if the "authenticator" field was cleared in this mutation.
func (m *WebauthnMutation) AuthenticatorCleared() bool {
	_, ok := m.clearedFields[webauthn.FieldAuthenticator]
	return ok
}

// ResetAuthenticator resets all changes to the "authenticator" field.
func (m *WebauthnMutation) ResetAuthenticator() {
	m.authenticator = nil
	m.appendauthenticator = nil
	delete(m.clearedFields, webauthn.FieldAuthenticator)
}

// SetBackupEligible sets the "backup_eligible" field.
func (m *WebauthnMutation) SetBackupEligible(b bool) {
	m.backup_eligible = &b
}

// BackupEligible returns the value of the "backup_eligible" field in the mutation.
func (m *WebauthnMutation) BackupEligible() (r bool, exists bool) {
	v := m.backup_eligible
	if v == nil {
		return
	}
	return *v, true
}

// OldBackupEligible returns the old "backup_eligible" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldBackupEligible(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBackupEligible is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBackupEligible requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBackupEligible: %w", err)
	}
	return oldValue.BackupEligible, nil
}

// ClearBackupEligible clears the value of the "backup_eligible" field.
func (m *WebauthnMutation) ClearBackupEligible() {
	m.backup_eligible = nil
	m.clearedFields[webauthn.FieldBackupEligible] = struct{}{}
}

// BackupEligibleCleared returns if the "backup_eligible" field was cleared in this mutation.
func (m *WebauthnMutation) BackupEligibleCleared() bool {
	_, ok := m.clearedFields[webauthn.FieldBackupEligible]
	return ok
}

// ResetBackupEligible resets all changes to the "backup_eligible" field.
func (m *WebauthnMutation) ResetBackupEligible() {
	m.backup_eligible = nil
	delete(m.clearedFields, webauthn.FieldBackupEligible)
}

// SetBackupState sets the "backup_state" field.
func (m *WebauthnMutation) SetBackupState(b bool) {
	m.backup_state = &b
}

// BackupState returns the value of the "backup_state" field in the mutation.
func (m *WebauthnMutation) BackupState() (r bool, exists bool) {
	v := m.backup_state
	if v == nil {
		return
	}
	return *v, true
}

// OldBackupState returns the old "backup_state" field's value of the Webauthn entity.
// If the Webauthn object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *WebauthnMutation) OldBackupState(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldBackupState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldBackupState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldBackupState: %w", err)
	}
	return oldValue.BackupState, nil
}

// ClearBackupState clears the value of the "backup_state" field.
func (m *WebauthnMutation) ClearBackupState() {
	m.backup_state = nil
	m.clearedFields[webauthn.FieldBackupState] = struct{}{}
}

// BackupStateCleared returns if the "backup_state" field was cleared in this mutation.
func (m *WebauthnMutation) BackupStateCleared() bool {
	_, ok := m.clearedFields[webauthn.FieldBackupState]
	return ok
}

// ResetBackupState resets all changes to the "backup_state" field.
func (m *WebauthnMutation) ResetBackupState() {
	m.backup_state = nil
	delete(m.clearedFields, webauthn.FieldBackupState)
}

// ClearOwner clears the "owner" edge to the User entity.
func (m *WebauthnMutation) ClearOwner() {
	m.clearedowner = true
	m.clearedFields[webauthn.FieldOwnerID] = struct{}{}
}

// OwnerCleared reports if the "owner" edge to the User entity was cleared.
func (m *WebauthnMutation) OwnerCleared() bool {
	return m.clearedowner
}

// OwnerIDs returns the "owner" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// OwnerID instead. It exists only for internal usage by the builders.
func (m *WebauthnMutation) OwnerIDs() (ids []string) {
	if id := m.owner; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetOwner resets all changes to the "owner" edge.
func (m *WebauthnMutation) ResetOwner() {
	m.owner = nil
	m.clearedowner = false
}

// Where appends a list predicates to the WebauthnMutation builder.
func (m *WebauthnMutation) Where(ps ...predicate.Webauthn) {
	m.predicates = append(m.predicates, ps...)
}

// WhereP appends storage-level predicates to the WebauthnMutation builder. Using this method,
// users can use type-assertion to append predicates that do not depend on any generated package.
func (m *WebauthnMutation) WhereP(ps ...func(*sql.Selector)) {
	p := make([]predicate.Webauthn, len(ps))
	for i := range ps {
		p[i] = ps[i]
	}
	m.Where(p...)
}

// Op returns the operation name.
func (m *WebauthnMutation) Op() Op {
	return m.op
}

// SetOp allows setting the mutation operation.
func (m *WebauthnMutation) SetOp(op Op) {
	m.op = op
}

// Type returns the node type of this mutation (Webauthn).
func (m *WebauthnMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *WebauthnMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.created_at != nil {
		fields = append(fields, webauthn.FieldCreatedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, webauthn.FieldUpdatedAt)
	}
	if m.created_by != nil {
		fields = append(fields, webauthn.FieldCreatedBy)
	}
	if m.updated_by != nil {
		fields = append(fields, webauthn.FieldUpdatedBy)
	}
	if m.deleted_at != nil {
		fields = append(fields, webauthn.FieldDeletedAt)
	}
	if m.deleted_by != nil {
		fields = append(fields, webauthn.FieldDeletedBy)
	}
	if m.owner != nil {
		fields = append(fields, webauthn.FieldOwnerID)
	}
	if m.name != nil {
		fields = append(fields, webauthn.FieldName)
	}
	if m.user_id != nil {
		fields = append(fields, webauthn.FieldUserID)
	}
	if m.credential_id != nil {
		fields = append(fields, webauthn.FieldCredentialID)
	}
	if m.public_key != nil {
		fields = append(fields, webauthn.FieldPublicKey)
	}
	if m.attestation_type != nil {
		fields = append(fields, webauthn.FieldAttestationType)
	}
	if m.aaguid != nil {
		fields = append(fields, webauthn.FieldAaguid)
	}
	if m.sign_count != nil {
		fields = append(fields, webauthn.FieldSignCount)
	}
	if m.transports != nil {
		fields = append(fields, webauthn.FieldTransports)
	}
	if m.flags != nil {
		fields = append(fields, webauthn.FieldFlags)
	}
	if m.authenticator != nil {
		fields = append(fields, webauthn.FieldAuthenticator)
	}
	if m.backup_eligible != nil {
		fields = append(fields, webauthn.FieldBackupEligible)
	}
	if m.backup_state != nil {
		fields = append(fields, webauthn.FieldBackupState)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *WebauthnMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case webauthn.FieldCreatedAt:
		return m.CreatedAt()
	case webauthn.FieldUpdatedAt:
		return m.UpdatedAt()
	case webauthn.FieldCreatedBy:
		return m.CreatedBy()
	case webauthn.FieldUpdatedBy:
		return m.UpdatedBy()
	case webauthn.FieldDeletedAt:
		return m.DeletedAt()
	case webauthn.FieldDeletedBy:
		return m.DeletedBy()
	case webauthn.FieldOwnerID:
		return m.OwnerID()
	case webauthn.FieldName:
		return m.Name()
	case webauthn.FieldUserID:
		return m.UserID()
	case webauthn.FieldCredentialID:
		return m.CredentialID()
	case webauthn.FieldPublicKey:
		return m.PublicKey()
	case webauthn.FieldAttestationType:
		return m.AttestationType()
	case webauthn.FieldAaguid:
		return m.Aaguid()
	case webauthn.FieldSignCount:
		return m.SignCount()
	case webauthn.FieldTransports:
		return m.Transports()
	case webauthn.FieldFlags:
		return m.Flags()
	case webauthn.FieldAuthenticator:
		return m.Authenticator()
	case webauthn.FieldBackupEligible:
		return m.BackupEligible()
	case webauthn.FieldBackupState:
		return m.BackupState()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *WebauthnMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case webauthn.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	case webauthn.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case webauthn.FieldCreatedBy:
		return m.OldCreatedBy(ctx)
	case webauthn.FieldUpdatedBy:
		return m.OldUpdatedBy(ctx)
	case webauthn.FieldDeletedAt:
		return m.OldDeletedAt(ctx)
	case webauthn.FieldDeletedBy:
		return m.OldDeletedBy(ctx)
	case webauthn.FieldOwnerID:
		return m.OldOwnerID(ctx)
	case webauthn.FieldName:
		return m.OldName(ctx)
	case webauthn.FieldUserID:
		return m.OldUserID(ctx)
	case webauthn.FieldCredentialID:
		return m.OldCredentialID(ctx)
	case webauthn.FieldPublicKey:
		return m.OldPublicKey(ctx)
	case webauthn.FieldAttestationType:
		return m.OldAttestationType(ctx)
	case webauthn.FieldAaguid:
		return m.OldAaguid(ctx)
	case webauthn.FieldSignCount:
		return m.OldSignCount(ctx)
	case webauthn.FieldTransports:
		return m.OldTransports(ctx)
	case webauthn.FieldFlags:
		return m.OldFlags(ctx)
	case webauthn.FieldAuthenticator:
		return m.OldAuthenticator(ctx)
	case webauthn.FieldBackupEligible:
		return m.OldBackupEligible(ctx)
	case webauthn.FieldBackupState:
		return m.OldBackupState(ctx)
	}
	return nil, fmt.Errorf("unknown Webauthn field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebauthnMutation) SetField(name string, value ent.Value) error {
	switch name {
	case webauthn.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	case webauthn.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case webauthn.FieldCreatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedBy(v)
		return nil
	case webauthn.FieldUpdatedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedBy(v)
		return nil
	case webauthn.FieldDeletedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedAt(v)
		return nil
	case webauthn.FieldDeletedBy:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDeletedBy(v)
		return nil
	case webauthn.FieldOwnerID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOwnerID(v)
		return nil
	case webauthn.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case webauthn.FieldUserID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case webauthn.FieldCredentialID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCredentialID(v)
		return nil
	case webauthn.FieldPublicKey:
		v, ok := value.([]byte)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPublicKey(v)
		return nil
	case webauthn.FieldAttestationType:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAttestationType(v)
		return nil
	case webauthn.FieldAaguid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAaguid(v)
		return nil
	case webauthn.FieldSignCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSignCount(v)
		return nil
	case webauthn.FieldTransports:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTransports(v)
		return nil
	case webauthn.FieldFlags:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetFlags(v)
		return nil
	case webauthn.FieldAuthenticator:
		v, ok := value.([]string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAuthenticator(v)
		return nil
	case webauthn.FieldBackupEligible:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBackupEligible(v)
		return nil
	case webauthn.FieldBackupState:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetBackupState(v)
		return nil
	}
	return fmt.Errorf("unknown Webauthn field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *WebauthnMutation) AddedFields() []string {
	var fields []string
	if m.addsign_count != nil {
		fields = append(fields, webauthn.FieldSignCount)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *WebauthnMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case webauthn.FieldSignCount:
		return m.AddedSignCount()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *WebauthnMutation) AddField(name string, value ent.Value) error {
	switch name {
	case webauthn.FieldSignCount:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSignCount(v)
		return nil
	}
	return fmt.Errorf("unknown Webauthn numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *WebauthnMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(webauthn.FieldCreatedBy) {
		fields = append(fields, webauthn.FieldCreatedBy)
	}
	if m.FieldCleared(webauthn.FieldUpdatedBy) {
		fields = append(fields, webauthn.FieldUpdatedBy)
	}
	if m.FieldCleared(webauthn.FieldDeletedAt) {
		fields = append(fields, webauthn.FieldDeletedAt)
	}
	if m.FieldCleared(webauthn.FieldDeletedBy) {
		fields = append(fields, webauthn.FieldDeletedBy)
	}
	if m.FieldCleared(webauthn.FieldCredentialID) {
		fields = append(fields, webauthn.FieldCredentialID)
	}
	if m.FieldCleared(webauthn.FieldPublicKey) {
		fields = append(fields, webauthn.FieldPublicKey)
	}
	if m.FieldCleared(webauthn.FieldAttestationType) {
		fields = append(fields, webauthn.FieldAttestationType)
	}
	if m.FieldCleared(webauthn.FieldAaguid) {
		fields = append(fields, webauthn.FieldAaguid)
	}
	if m.FieldCleared(webauthn.FieldSignCount) {
		fields = append(fields, webauthn.FieldSignCount)
	}
	if m.FieldCleared(webauthn.FieldTransports) {
		fields = append(fields, webauthn.FieldTransports)
	}
	if m.FieldCleared(webauthn.FieldFlags) {
		fields = append(fields, webauthn.FieldFlags)
	}
	if m.FieldCleared(webauthn.FieldAuthenticator) {
		fields = append(fields, webauthn.FieldAuthenticator)
	}
	if m.FieldCleared(webauthn.FieldBackupEligible) {
		fields = append(fields, webauthn.FieldBackupEligible)
	}
	if m.FieldCleared(webauthn.FieldBackupState) {
		fields = append(fields, webauthn.FieldBackupState)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *WebauthnMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *WebauthnMutation) ClearField(name string) error {
	switch name {
	case webauthn.FieldCreatedBy:
		m.ClearCreatedBy()
		return nil
	case webauthn.FieldUpdatedBy:
		m.ClearUpdatedBy()
		return nil
	case webauthn.FieldDeletedAt:
		m.ClearDeletedAt()
		return nil
	case webauthn.FieldDeletedBy:
		m.ClearDeletedBy()
		return nil
	case webauthn.FieldCredentialID:
		m.ClearCredentialID()
		return nil
	case webauthn.FieldPublicKey:
		m.ClearPublicKey()
		return nil
	case webauthn.FieldAttestationType:
		m.ClearAttestationType()
		return nil
	case webauthn.FieldAaguid:
		m.ClearAaguid()
		return nil
	case webauthn.FieldSignCount:
		m.ClearSignCount()
		return nil
	case webauthn.FieldTransports:
		m.ClearTransports()
		return nil
	case webauthn.FieldFlags:
		m.ClearFlags()
		return nil
	case webauthn.FieldAuthenticator:
		m.ClearAuthenticator()
		return nil
	case webauthn.FieldBackupEligible:
		m.ClearBackupEligible()
		return nil
	case webauthn.FieldBackupState:
		m.ClearBackupState()
		return nil
	}
	return fmt.Errorf("unknown Webauthn nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *WebauthnMutation) ResetField(name string) error {
	switch name {
	case webauthn.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	case webauthn.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case webauthn.FieldCreatedBy:
		m.ResetCreatedBy()
		return nil
	case webauthn.FieldUpdatedBy:
		m.ResetUpdatedBy()
		return nil
	case webauthn.FieldDeletedAt:
		m.ResetDeletedAt()
		return nil
	case webauthn.FieldDeletedBy:
		m.ResetDeletedBy()
		return nil
	case webauthn.FieldOwnerID:
		m.ResetOwnerID()
		return nil
	case webauthn.FieldName:
		m.ResetName()
		return nil
	case webauthn.FieldUserID:
		m.ResetUserID()
		return nil
	case webauthn.FieldCredentialID:
		m.ResetCredentialID()
		return nil
	case webauthn.FieldPublicKey:
		m.ResetPublicKey()
		return nil
	case webauthn.FieldAttestationType:
		m.ResetAttestationType()
		return nil
	case webauthn.FieldAaguid:
		m.ResetAaguid()
		return nil
	case webauthn.FieldSignCount:
		m.ResetSignCount()
		return nil
	case webauthn.FieldTransports:
		m.ResetTransports()
		return nil
	case webauthn.FieldFlags:
		m.ResetFlags()
		return nil
	case webauthn.FieldAuthenticator:
		m.ResetAuthenticator()
		return nil
	case webauthn.FieldBackupEligible:
		m.ResetBackupEligible()
		return nil
	case webauthn.FieldBackupState:
		m.ResetBackupState()
		return nil
	}
	return fmt.Errorf("unknown Webauthn field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *WebauthnMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.owner != nil {
		edges = append(edges, webauthn.EdgeOwner)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *WebauthnMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case webauthn.EdgeOwner:
		if id := m.owner; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *WebauthnMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *WebauthnMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *WebauthnMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedowner {
		edges = append(edges, webauthn.EdgeOwner)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *WebauthnMutation) EdgeCleared(name string) bool {
	switch name {
	case webauthn.EdgeOwner:
		return m.clearedowner
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *WebauthnMutation) ClearEdge(name string) error {
	switch name {
	case webauthn.EdgeOwner:
		m.ClearOwner()
		return nil
	}
	return fmt.Errorf("unknown Webauthn unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *WebauthnMutation) ResetEdge(name string) error {
	switch name {
	case webauthn.EdgeOwner:
		m.ResetOwner()
		return nil
	}
	return fmt.Errorf("unknown Webauthn edge %s", name)
}
