// Code generated by ent, DO NOT EDIT.

package oauthproviderhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/datumforge/datum/internal/ent/customtypes"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/datumforge/enthistory"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldID, id))
}

// HistoryTime applies equality check predicate on the "history_time" field. It's identical to HistoryTimeEQ.
func HistoryTime(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// Ref applies equality check predicate on the "ref" field. It's identical to RefEQ.
func Ref(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldRef, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// MappingID applies equality check predicate on the "mapping_id" field. It's identical to MappingIDEQ.
func MappingID(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldMappingID, v))
}

// DeletedAt applies equality check predicate on the "deleted_at" field. It's identical to DeletedAtEQ.
func DeletedAt(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedBy applies equality check predicate on the "deleted_by" field. It's identical to DeletedByEQ.
func DeletedBy(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldDeletedBy, v))
}

// OwnerID applies equality check predicate on the "owner_id" field. It's identical to OwnerIDEQ.
func OwnerID(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldOwnerID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldName, v))
}

// ClientID applies equality check predicate on the "client_id" field. It's identical to ClientIDEQ.
func ClientID(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldClientID, v))
}

// ClientSecret applies equality check predicate on the "client_secret" field. It's identical to ClientSecretEQ.
func ClientSecret(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldClientSecret, v))
}

// RedirectURL applies equality check predicate on the "redirect_url" field. It's identical to RedirectURLEQ.
func RedirectURL(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldRedirectURL, v))
}

// Scopes applies equality check predicate on the "scopes" field. It's identical to ScopesEQ.
func Scopes(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldScopes, v))
}

// AuthURL applies equality check predicate on the "auth_url" field. It's identical to AuthURLEQ.
func AuthURL(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldAuthURL, v))
}

// TokenURL applies equality check predicate on the "token_url" field. It's identical to TokenURLEQ.
func TokenURL(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldTokenURL, v))
}

// AuthStyle applies equality check predicate on the "auth_style" field. It's identical to AuthStyleEQ.
func AuthStyle(v customtypes.Uint8) predicate.OauthProviderHistory {
	vc := uint8(v)
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldAuthStyle, vc))
}

// InfoURL applies equality check predicate on the "info_url" field. It's identical to InfoURLEQ.
func InfoURL(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldInfoURL, v))
}

// HistoryTimeEQ applies the EQ predicate on the "history_time" field.
func HistoryTimeEQ(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldHistoryTime, v))
}

// HistoryTimeNEQ applies the NEQ predicate on the "history_time" field.
func HistoryTimeNEQ(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldHistoryTime, v))
}

// HistoryTimeIn applies the In predicate on the "history_time" field.
func HistoryTimeIn(vs ...time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldHistoryTime, vs...))
}

// HistoryTimeNotIn applies the NotIn predicate on the "history_time" field.
func HistoryTimeNotIn(vs ...time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldHistoryTime, vs...))
}

// HistoryTimeGT applies the GT predicate on the "history_time" field.
func HistoryTimeGT(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldHistoryTime, v))
}

// HistoryTimeGTE applies the GTE predicate on the "history_time" field.
func HistoryTimeGTE(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldHistoryTime, v))
}

// HistoryTimeLT applies the LT predicate on the "history_time" field.
func HistoryTimeLT(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldHistoryTime, v))
}

// HistoryTimeLTE applies the LTE predicate on the "history_time" field.
func HistoryTimeLTE(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldHistoryTime, v))
}

// OperationEQ applies the EQ predicate on the "operation" field.
func OperationEQ(v enthistory.OpType) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldOperation, v))
}

// OperationNEQ applies the NEQ predicate on the "operation" field.
func OperationNEQ(v enthistory.OpType) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldOperation, v))
}

// OperationIn applies the In predicate on the "operation" field.
func OperationIn(vs ...enthistory.OpType) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldOperation, vs...))
}

// OperationNotIn applies the NotIn predicate on the "operation" field.
func OperationNotIn(vs ...enthistory.OpType) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldOperation, vs...))
}

// RefEQ applies the EQ predicate on the "ref" field.
func RefEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldRef, v))
}

// RefNEQ applies the NEQ predicate on the "ref" field.
func RefNEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldRef, v))
}

// RefIn applies the In predicate on the "ref" field.
func RefIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldRef, vs...))
}

// RefNotIn applies the NotIn predicate on the "ref" field.
func RefNotIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldRef, vs...))
}

// RefGT applies the GT predicate on the "ref" field.
func RefGT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldRef, v))
}

// RefGTE applies the GTE predicate on the "ref" field.
func RefGTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldRef, v))
}

// RefLT applies the LT predicate on the "ref" field.
func RefLT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldRef, v))
}

// RefLTE applies the LTE predicate on the "ref" field.
func RefLTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldRef, v))
}

// RefContains applies the Contains predicate on the "ref" field.
func RefContains(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContains(FieldRef, v))
}

// RefHasPrefix applies the HasPrefix predicate on the "ref" field.
func RefHasPrefix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasPrefix(FieldRef, v))
}

// RefHasSuffix applies the HasSuffix predicate on the "ref" field.
func RefHasSuffix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasSuffix(FieldRef, v))
}

// RefIsNil applies the IsNil predicate on the "ref" field.
func RefIsNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIsNull(FieldRef))
}

// RefNotNil applies the NotNil predicate on the "ref" field.
func RefNotNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotNull(FieldRef))
}

// RefEqualFold applies the EqualFold predicate on the "ref" field.
func RefEqualFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldRef, v))
}

// RefContainsFold applies the ContainsFold predicate on the "ref" field.
func RefContainsFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldRef, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// CreatedAtIsNil applies the IsNil predicate on the "created_at" field.
func CreatedAtIsNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIsNull(FieldCreatedAt))
}

// CreatedAtNotNil applies the NotNil predicate on the "created_at" field.
func CreatedAtNotNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotNull(FieldCreatedAt))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldUpdatedAt, v))
}

// UpdatedAtIsNil applies the IsNil predicate on the "updated_at" field.
func UpdatedAtIsNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIsNull(FieldUpdatedAt))
}

// UpdatedAtNotNil applies the NotNil predicate on the "updated_at" field.
func UpdatedAtNotNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotNull(FieldUpdatedAt))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// MappingIDEQ applies the EQ predicate on the "mapping_id" field.
func MappingIDEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldMappingID, v))
}

// MappingIDNEQ applies the NEQ predicate on the "mapping_id" field.
func MappingIDNEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldMappingID, v))
}

// MappingIDIn applies the In predicate on the "mapping_id" field.
func MappingIDIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldMappingID, vs...))
}

// MappingIDNotIn applies the NotIn predicate on the "mapping_id" field.
func MappingIDNotIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldMappingID, vs...))
}

// MappingIDGT applies the GT predicate on the "mapping_id" field.
func MappingIDGT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldMappingID, v))
}

// MappingIDGTE applies the GTE predicate on the "mapping_id" field.
func MappingIDGTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldMappingID, v))
}

// MappingIDLT applies the LT predicate on the "mapping_id" field.
func MappingIDLT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldMappingID, v))
}

// MappingIDLTE applies the LTE predicate on the "mapping_id" field.
func MappingIDLTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldMappingID, v))
}

// MappingIDContains applies the Contains predicate on the "mapping_id" field.
func MappingIDContains(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContains(FieldMappingID, v))
}

// MappingIDHasPrefix applies the HasPrefix predicate on the "mapping_id" field.
func MappingIDHasPrefix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasPrefix(FieldMappingID, v))
}

// MappingIDHasSuffix applies the HasSuffix predicate on the "mapping_id" field.
func MappingIDHasSuffix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasSuffix(FieldMappingID, v))
}

// MappingIDEqualFold applies the EqualFold predicate on the "mapping_id" field.
func MappingIDEqualFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldMappingID, v))
}

// MappingIDContainsFold applies the ContainsFold predicate on the "mapping_id" field.
func MappingIDContainsFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldMappingID, v))
}

// TagsIsNil applies the IsNil predicate on the "tags" field.
func TagsIsNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIsNull(FieldTags))
}

// TagsNotNil applies the NotNil predicate on the "tags" field.
func TagsNotNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotNull(FieldTags))
}

// DeletedAtEQ applies the EQ predicate on the "deleted_at" field.
func DeletedAtEQ(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldDeletedAt, v))
}

// DeletedAtNEQ applies the NEQ predicate on the "deleted_at" field.
func DeletedAtNEQ(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldDeletedAt, v))
}

// DeletedAtIn applies the In predicate on the "deleted_at" field.
func DeletedAtIn(vs ...time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldDeletedAt, vs...))
}

// DeletedAtNotIn applies the NotIn predicate on the "deleted_at" field.
func DeletedAtNotIn(vs ...time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldDeletedAt, vs...))
}

// DeletedAtGT applies the GT predicate on the "deleted_at" field.
func DeletedAtGT(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldDeletedAt, v))
}

// DeletedAtGTE applies the GTE predicate on the "deleted_at" field.
func DeletedAtGTE(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldDeletedAt, v))
}

// DeletedAtLT applies the LT predicate on the "deleted_at" field.
func DeletedAtLT(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldDeletedAt, v))
}

// DeletedAtLTE applies the LTE predicate on the "deleted_at" field.
func DeletedAtLTE(v time.Time) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldDeletedAt, v))
}

// DeletedAtIsNil applies the IsNil predicate on the "deleted_at" field.
func DeletedAtIsNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIsNull(FieldDeletedAt))
}

// DeletedAtNotNil applies the NotNil predicate on the "deleted_at" field.
func DeletedAtNotNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotNull(FieldDeletedAt))
}

// DeletedByEQ applies the EQ predicate on the "deleted_by" field.
func DeletedByEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldDeletedBy, v))
}

// DeletedByNEQ applies the NEQ predicate on the "deleted_by" field.
func DeletedByNEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldDeletedBy, v))
}

// DeletedByIn applies the In predicate on the "deleted_by" field.
func DeletedByIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldDeletedBy, vs...))
}

// DeletedByNotIn applies the NotIn predicate on the "deleted_by" field.
func DeletedByNotIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldDeletedBy, vs...))
}

// DeletedByGT applies the GT predicate on the "deleted_by" field.
func DeletedByGT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldDeletedBy, v))
}

// DeletedByGTE applies the GTE predicate on the "deleted_by" field.
func DeletedByGTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldDeletedBy, v))
}

// DeletedByLT applies the LT predicate on the "deleted_by" field.
func DeletedByLT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldDeletedBy, v))
}

// DeletedByLTE applies the LTE predicate on the "deleted_by" field.
func DeletedByLTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldDeletedBy, v))
}

// DeletedByContains applies the Contains predicate on the "deleted_by" field.
func DeletedByContains(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContains(FieldDeletedBy, v))
}

// DeletedByHasPrefix applies the HasPrefix predicate on the "deleted_by" field.
func DeletedByHasPrefix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasPrefix(FieldDeletedBy, v))
}

// DeletedByHasSuffix applies the HasSuffix predicate on the "deleted_by" field.
func DeletedByHasSuffix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasSuffix(FieldDeletedBy, v))
}

// DeletedByIsNil applies the IsNil predicate on the "deleted_by" field.
func DeletedByIsNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIsNull(FieldDeletedBy))
}

// DeletedByNotNil applies the NotNil predicate on the "deleted_by" field.
func DeletedByNotNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotNull(FieldDeletedBy))
}

// DeletedByEqualFold applies the EqualFold predicate on the "deleted_by" field.
func DeletedByEqualFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldDeletedBy, v))
}

// DeletedByContainsFold applies the ContainsFold predicate on the "deleted_by" field.
func DeletedByContainsFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldDeletedBy, v))
}

// OwnerIDEQ applies the EQ predicate on the "owner_id" field.
func OwnerIDEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldOwnerID, v))
}

// OwnerIDNEQ applies the NEQ predicate on the "owner_id" field.
func OwnerIDNEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldOwnerID, v))
}

// OwnerIDIn applies the In predicate on the "owner_id" field.
func OwnerIDIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldOwnerID, vs...))
}

// OwnerIDNotIn applies the NotIn predicate on the "owner_id" field.
func OwnerIDNotIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldOwnerID, vs...))
}

// OwnerIDGT applies the GT predicate on the "owner_id" field.
func OwnerIDGT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldOwnerID, v))
}

// OwnerIDGTE applies the GTE predicate on the "owner_id" field.
func OwnerIDGTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldOwnerID, v))
}

// OwnerIDLT applies the LT predicate on the "owner_id" field.
func OwnerIDLT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldOwnerID, v))
}

// OwnerIDLTE applies the LTE predicate on the "owner_id" field.
func OwnerIDLTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldOwnerID, v))
}

// OwnerIDContains applies the Contains predicate on the "owner_id" field.
func OwnerIDContains(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContains(FieldOwnerID, v))
}

// OwnerIDHasPrefix applies the HasPrefix predicate on the "owner_id" field.
func OwnerIDHasPrefix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasPrefix(FieldOwnerID, v))
}

// OwnerIDHasSuffix applies the HasSuffix predicate on the "owner_id" field.
func OwnerIDHasSuffix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasSuffix(FieldOwnerID, v))
}

// OwnerIDIsNil applies the IsNil predicate on the "owner_id" field.
func OwnerIDIsNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIsNull(FieldOwnerID))
}

// OwnerIDNotNil applies the NotNil predicate on the "owner_id" field.
func OwnerIDNotNil() predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotNull(FieldOwnerID))
}

// OwnerIDEqualFold applies the EqualFold predicate on the "owner_id" field.
func OwnerIDEqualFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldOwnerID, v))
}

// OwnerIDContainsFold applies the ContainsFold predicate on the "owner_id" field.
func OwnerIDContainsFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldOwnerID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldName, v))
}

// ClientIDEQ applies the EQ predicate on the "client_id" field.
func ClientIDEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldClientID, v))
}

// ClientIDNEQ applies the NEQ predicate on the "client_id" field.
func ClientIDNEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldClientID, v))
}

// ClientIDIn applies the In predicate on the "client_id" field.
func ClientIDIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldClientID, vs...))
}

// ClientIDNotIn applies the NotIn predicate on the "client_id" field.
func ClientIDNotIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldClientID, vs...))
}

// ClientIDGT applies the GT predicate on the "client_id" field.
func ClientIDGT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldClientID, v))
}

// ClientIDGTE applies the GTE predicate on the "client_id" field.
func ClientIDGTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldClientID, v))
}

// ClientIDLT applies the LT predicate on the "client_id" field.
func ClientIDLT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldClientID, v))
}

// ClientIDLTE applies the LTE predicate on the "client_id" field.
func ClientIDLTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldClientID, v))
}

// ClientIDContains applies the Contains predicate on the "client_id" field.
func ClientIDContains(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContains(FieldClientID, v))
}

// ClientIDHasPrefix applies the HasPrefix predicate on the "client_id" field.
func ClientIDHasPrefix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasPrefix(FieldClientID, v))
}

// ClientIDHasSuffix applies the HasSuffix predicate on the "client_id" field.
func ClientIDHasSuffix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasSuffix(FieldClientID, v))
}

// ClientIDEqualFold applies the EqualFold predicate on the "client_id" field.
func ClientIDEqualFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldClientID, v))
}

// ClientIDContainsFold applies the ContainsFold predicate on the "client_id" field.
func ClientIDContainsFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldClientID, v))
}

// ClientSecretEQ applies the EQ predicate on the "client_secret" field.
func ClientSecretEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldClientSecret, v))
}

// ClientSecretNEQ applies the NEQ predicate on the "client_secret" field.
func ClientSecretNEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldClientSecret, v))
}

// ClientSecretIn applies the In predicate on the "client_secret" field.
func ClientSecretIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldClientSecret, vs...))
}

// ClientSecretNotIn applies the NotIn predicate on the "client_secret" field.
func ClientSecretNotIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldClientSecret, vs...))
}

// ClientSecretGT applies the GT predicate on the "client_secret" field.
func ClientSecretGT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldClientSecret, v))
}

// ClientSecretGTE applies the GTE predicate on the "client_secret" field.
func ClientSecretGTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldClientSecret, v))
}

// ClientSecretLT applies the LT predicate on the "client_secret" field.
func ClientSecretLT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldClientSecret, v))
}

// ClientSecretLTE applies the LTE predicate on the "client_secret" field.
func ClientSecretLTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldClientSecret, v))
}

// ClientSecretContains applies the Contains predicate on the "client_secret" field.
func ClientSecretContains(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContains(FieldClientSecret, v))
}

// ClientSecretHasPrefix applies the HasPrefix predicate on the "client_secret" field.
func ClientSecretHasPrefix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasPrefix(FieldClientSecret, v))
}

// ClientSecretHasSuffix applies the HasSuffix predicate on the "client_secret" field.
func ClientSecretHasSuffix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasSuffix(FieldClientSecret, v))
}

// ClientSecretEqualFold applies the EqualFold predicate on the "client_secret" field.
func ClientSecretEqualFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldClientSecret, v))
}

// ClientSecretContainsFold applies the ContainsFold predicate on the "client_secret" field.
func ClientSecretContainsFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldClientSecret, v))
}

// RedirectURLEQ applies the EQ predicate on the "redirect_url" field.
func RedirectURLEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldRedirectURL, v))
}

// RedirectURLNEQ applies the NEQ predicate on the "redirect_url" field.
func RedirectURLNEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldRedirectURL, v))
}

// RedirectURLIn applies the In predicate on the "redirect_url" field.
func RedirectURLIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldRedirectURL, vs...))
}

// RedirectURLNotIn applies the NotIn predicate on the "redirect_url" field.
func RedirectURLNotIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldRedirectURL, vs...))
}

// RedirectURLGT applies the GT predicate on the "redirect_url" field.
func RedirectURLGT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldRedirectURL, v))
}

// RedirectURLGTE applies the GTE predicate on the "redirect_url" field.
func RedirectURLGTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldRedirectURL, v))
}

// RedirectURLLT applies the LT predicate on the "redirect_url" field.
func RedirectURLLT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldRedirectURL, v))
}

// RedirectURLLTE applies the LTE predicate on the "redirect_url" field.
func RedirectURLLTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldRedirectURL, v))
}

// RedirectURLContains applies the Contains predicate on the "redirect_url" field.
func RedirectURLContains(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContains(FieldRedirectURL, v))
}

// RedirectURLHasPrefix applies the HasPrefix predicate on the "redirect_url" field.
func RedirectURLHasPrefix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasPrefix(FieldRedirectURL, v))
}

// RedirectURLHasSuffix applies the HasSuffix predicate on the "redirect_url" field.
func RedirectURLHasSuffix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasSuffix(FieldRedirectURL, v))
}

// RedirectURLEqualFold applies the EqualFold predicate on the "redirect_url" field.
func RedirectURLEqualFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldRedirectURL, v))
}

// RedirectURLContainsFold applies the ContainsFold predicate on the "redirect_url" field.
func RedirectURLContainsFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldRedirectURL, v))
}

// ScopesEQ applies the EQ predicate on the "scopes" field.
func ScopesEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldScopes, v))
}

// ScopesNEQ applies the NEQ predicate on the "scopes" field.
func ScopesNEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldScopes, v))
}

// ScopesIn applies the In predicate on the "scopes" field.
func ScopesIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldScopes, vs...))
}

// ScopesNotIn applies the NotIn predicate on the "scopes" field.
func ScopesNotIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldScopes, vs...))
}

// ScopesGT applies the GT predicate on the "scopes" field.
func ScopesGT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldScopes, v))
}

// ScopesGTE applies the GTE predicate on the "scopes" field.
func ScopesGTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldScopes, v))
}

// ScopesLT applies the LT predicate on the "scopes" field.
func ScopesLT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldScopes, v))
}

// ScopesLTE applies the LTE predicate on the "scopes" field.
func ScopesLTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldScopes, v))
}

// ScopesContains applies the Contains predicate on the "scopes" field.
func ScopesContains(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContains(FieldScopes, v))
}

// ScopesHasPrefix applies the HasPrefix predicate on the "scopes" field.
func ScopesHasPrefix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasPrefix(FieldScopes, v))
}

// ScopesHasSuffix applies the HasSuffix predicate on the "scopes" field.
func ScopesHasSuffix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasSuffix(FieldScopes, v))
}

// ScopesEqualFold applies the EqualFold predicate on the "scopes" field.
func ScopesEqualFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldScopes, v))
}

// ScopesContainsFold applies the ContainsFold predicate on the "scopes" field.
func ScopesContainsFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldScopes, v))
}

// AuthURLEQ applies the EQ predicate on the "auth_url" field.
func AuthURLEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldAuthURL, v))
}

// AuthURLNEQ applies the NEQ predicate on the "auth_url" field.
func AuthURLNEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldAuthURL, v))
}

// AuthURLIn applies the In predicate on the "auth_url" field.
func AuthURLIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldAuthURL, vs...))
}

// AuthURLNotIn applies the NotIn predicate on the "auth_url" field.
func AuthURLNotIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldAuthURL, vs...))
}

// AuthURLGT applies the GT predicate on the "auth_url" field.
func AuthURLGT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldAuthURL, v))
}

// AuthURLGTE applies the GTE predicate on the "auth_url" field.
func AuthURLGTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldAuthURL, v))
}

// AuthURLLT applies the LT predicate on the "auth_url" field.
func AuthURLLT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldAuthURL, v))
}

// AuthURLLTE applies the LTE predicate on the "auth_url" field.
func AuthURLLTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldAuthURL, v))
}

// AuthURLContains applies the Contains predicate on the "auth_url" field.
func AuthURLContains(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContains(FieldAuthURL, v))
}

// AuthURLHasPrefix applies the HasPrefix predicate on the "auth_url" field.
func AuthURLHasPrefix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasPrefix(FieldAuthURL, v))
}

// AuthURLHasSuffix applies the HasSuffix predicate on the "auth_url" field.
func AuthURLHasSuffix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasSuffix(FieldAuthURL, v))
}

// AuthURLEqualFold applies the EqualFold predicate on the "auth_url" field.
func AuthURLEqualFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldAuthURL, v))
}

// AuthURLContainsFold applies the ContainsFold predicate on the "auth_url" field.
func AuthURLContainsFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldAuthURL, v))
}

// TokenURLEQ applies the EQ predicate on the "token_url" field.
func TokenURLEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldTokenURL, v))
}

// TokenURLNEQ applies the NEQ predicate on the "token_url" field.
func TokenURLNEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldTokenURL, v))
}

// TokenURLIn applies the In predicate on the "token_url" field.
func TokenURLIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldTokenURL, vs...))
}

// TokenURLNotIn applies the NotIn predicate on the "token_url" field.
func TokenURLNotIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldTokenURL, vs...))
}

// TokenURLGT applies the GT predicate on the "token_url" field.
func TokenURLGT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldTokenURL, v))
}

// TokenURLGTE applies the GTE predicate on the "token_url" field.
func TokenURLGTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldTokenURL, v))
}

// TokenURLLT applies the LT predicate on the "token_url" field.
func TokenURLLT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldTokenURL, v))
}

// TokenURLLTE applies the LTE predicate on the "token_url" field.
func TokenURLLTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldTokenURL, v))
}

// TokenURLContains applies the Contains predicate on the "token_url" field.
func TokenURLContains(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContains(FieldTokenURL, v))
}

// TokenURLHasPrefix applies the HasPrefix predicate on the "token_url" field.
func TokenURLHasPrefix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasPrefix(FieldTokenURL, v))
}

// TokenURLHasSuffix applies the HasSuffix predicate on the "token_url" field.
func TokenURLHasSuffix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasSuffix(FieldTokenURL, v))
}

// TokenURLEqualFold applies the EqualFold predicate on the "token_url" field.
func TokenURLEqualFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldTokenURL, v))
}

// TokenURLContainsFold applies the ContainsFold predicate on the "token_url" field.
func TokenURLContainsFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldTokenURL, v))
}

// AuthStyleEQ applies the EQ predicate on the "auth_style" field.
func AuthStyleEQ(v customtypes.Uint8) predicate.OauthProviderHistory {
	vc := uint8(v)
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldAuthStyle, vc))
}

// AuthStyleNEQ applies the NEQ predicate on the "auth_style" field.
func AuthStyleNEQ(v customtypes.Uint8) predicate.OauthProviderHistory {
	vc := uint8(v)
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldAuthStyle, vc))
}

// AuthStyleIn applies the In predicate on the "auth_style" field.
func AuthStyleIn(vs ...customtypes.Uint8) predicate.OauthProviderHistory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint8(vs[i])
	}
	return predicate.OauthProviderHistory(sql.FieldIn(FieldAuthStyle, v...))
}

// AuthStyleNotIn applies the NotIn predicate on the "auth_style" field.
func AuthStyleNotIn(vs ...customtypes.Uint8) predicate.OauthProviderHistory {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = uint8(vs[i])
	}
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldAuthStyle, v...))
}

// AuthStyleGT applies the GT predicate on the "auth_style" field.
func AuthStyleGT(v customtypes.Uint8) predicate.OauthProviderHistory {
	vc := uint8(v)
	return predicate.OauthProviderHistory(sql.FieldGT(FieldAuthStyle, vc))
}

// AuthStyleGTE applies the GTE predicate on the "auth_style" field.
func AuthStyleGTE(v customtypes.Uint8) predicate.OauthProviderHistory {
	vc := uint8(v)
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldAuthStyle, vc))
}

// AuthStyleLT applies the LT predicate on the "auth_style" field.
func AuthStyleLT(v customtypes.Uint8) predicate.OauthProviderHistory {
	vc := uint8(v)
	return predicate.OauthProviderHistory(sql.FieldLT(FieldAuthStyle, vc))
}

// AuthStyleLTE applies the LTE predicate on the "auth_style" field.
func AuthStyleLTE(v customtypes.Uint8) predicate.OauthProviderHistory {
	vc := uint8(v)
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldAuthStyle, vc))
}

// InfoURLEQ applies the EQ predicate on the "info_url" field.
func InfoURLEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEQ(FieldInfoURL, v))
}

// InfoURLNEQ applies the NEQ predicate on the "info_url" field.
func InfoURLNEQ(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNEQ(FieldInfoURL, v))
}

// InfoURLIn applies the In predicate on the "info_url" field.
func InfoURLIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldIn(FieldInfoURL, vs...))
}

// InfoURLNotIn applies the NotIn predicate on the "info_url" field.
func InfoURLNotIn(vs ...string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldNotIn(FieldInfoURL, vs...))
}

// InfoURLGT applies the GT predicate on the "info_url" field.
func InfoURLGT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGT(FieldInfoURL, v))
}

// InfoURLGTE applies the GTE predicate on the "info_url" field.
func InfoURLGTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldGTE(FieldInfoURL, v))
}

// InfoURLLT applies the LT predicate on the "info_url" field.
func InfoURLLT(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLT(FieldInfoURL, v))
}

// InfoURLLTE applies the LTE predicate on the "info_url" field.
func InfoURLLTE(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldLTE(FieldInfoURL, v))
}

// InfoURLContains applies the Contains predicate on the "info_url" field.
func InfoURLContains(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContains(FieldInfoURL, v))
}

// InfoURLHasPrefix applies the HasPrefix predicate on the "info_url" field.
func InfoURLHasPrefix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasPrefix(FieldInfoURL, v))
}

// InfoURLHasSuffix applies the HasSuffix predicate on the "info_url" field.
func InfoURLHasSuffix(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldHasSuffix(FieldInfoURL, v))
}

// InfoURLEqualFold applies the EqualFold predicate on the "info_url" field.
func InfoURLEqualFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldEqualFold(FieldInfoURL, v))
}

// InfoURLContainsFold applies the ContainsFold predicate on the "info_url" field.
func InfoURLContainsFold(v string) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.FieldContainsFold(FieldInfoURL, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.OauthProviderHistory) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.OauthProviderHistory) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.OauthProviderHistory) predicate.OauthProviderHistory {
	return predicate.OauthProviderHistory(sql.NotPredicates(p))
}
