// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateGroup implements createGroup operation.
	//
	// Creates a new Group and persists it to storage.
	//
	// POST /groups
	CreateGroup(ctx context.Context, req *CreateGroupReq) (CreateGroupRes, error)
	// CreateGroupSettings implements createGroupSettings operation.
	//
	// Creates a new GroupSettings and persists it to storage.
	//
	// POST /group-settings
	CreateGroupSettings(ctx context.Context, req *CreateGroupSettingsReq) (CreateGroupSettingsRes, error)
	// CreateIntegration implements createIntegration operation.
	//
	// Creates a new Integration and persists it to storage.
	//
	// POST /integrations
	CreateIntegration(ctx context.Context, req *CreateIntegrationReq) (CreateIntegrationRes, error)
	// CreateMembership implements createMembership operation.
	//
	// Creates a new Membership and persists it to storage.
	//
	// POST /memberships
	CreateMembership(ctx context.Context, req *CreateMembershipReq) (CreateMembershipRes, error)
	// CreateOrganization implements createOrganization operation.
	//
	// Creates a new Organization and persists it to storage.
	//
	// POST /organizations
	CreateOrganization(ctx context.Context, req *CreateOrganizationReq) (CreateOrganizationRes, error)
	// CreateSession implements createSession operation.
	//
	// Creates a new Session and persists it to storage.
	//
	// POST /sessions
	CreateSession(ctx context.Context, req *CreateSessionReq) (CreateSessionRes, error)
	// CreateTenant implements createTenant operation.
	//
	// Creates a new Tenant and persists it to storage.
	//
	// POST /tenants
	CreateTenant(ctx context.Context, req *CreateTenantReq) (CreateTenantRes, error)
	// CreateUser implements createUser operation.
	//
	// Creates a new User and persists it to storage.
	//
	// POST /users
	CreateUser(ctx context.Context, req *CreateUserReq) (CreateUserRes, error)
	// DeleteGroup implements deleteGroup operation.
	//
	// Deletes the Group with the requested ID.
	//
	// DELETE /groups/{id}
	DeleteGroup(ctx context.Context, params DeleteGroupParams) (DeleteGroupRes, error)
	// DeleteGroupSettings implements deleteGroupSettings operation.
	//
	// Deletes the GroupSettings with the requested ID.
	//
	// DELETE /group-settings/{id}
	DeleteGroupSettings(ctx context.Context, params DeleteGroupSettingsParams) (DeleteGroupSettingsRes, error)
	// DeleteIntegration implements deleteIntegration operation.
	//
	// Deletes the Integration with the requested ID.
	//
	// DELETE /integrations/{id}
	DeleteIntegration(ctx context.Context, params DeleteIntegrationParams) (DeleteIntegrationRes, error)
	// DeleteMembership implements deleteMembership operation.
	//
	// Deletes the Membership with the requested ID.
	//
	// DELETE /memberships/{id}
	DeleteMembership(ctx context.Context, params DeleteMembershipParams) (DeleteMembershipRes, error)
	// DeleteOrganization implements deleteOrganization operation.
	//
	// Deletes the Organization with the requested ID.
	//
	// DELETE /organizations/{id}
	DeleteOrganization(ctx context.Context, params DeleteOrganizationParams) (DeleteOrganizationRes, error)
	// DeleteSession implements deleteSession operation.
	//
	// Deletes the Session with the requested ID.
	//
	// DELETE /sessions/{id}
	DeleteSession(ctx context.Context, params DeleteSessionParams) (DeleteSessionRes, error)
	// DeleteTenant implements deleteTenant operation.
	//
	// Deletes the Tenant with the requested ID.
	//
	// DELETE /tenants/{id}
	DeleteTenant(ctx context.Context, params DeleteTenantParams) (DeleteTenantRes, error)
	// DeleteUser implements deleteUser operation.
	//
	// Deletes the User with the requested ID.
	//
	// DELETE /users/{id}
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// ListGroup implements listGroup operation.
	//
	// List Groups.
	//
	// GET /groups
	ListGroup(ctx context.Context, params ListGroupParams) (ListGroupRes, error)
	// ListGroupMemberships implements listGroupMemberships operation.
	//
	// List attached Memberships.
	//
	// GET /groups/{id}/memberships
	ListGroupMemberships(ctx context.Context, params ListGroupMembershipsParams) (ListGroupMembershipsRes, error)
	// ListGroupSettings implements listGroupSettings operation.
	//
	// List GroupSettings.
	//
	// GET /group-settings
	ListGroupSettings(ctx context.Context, params ListGroupSettingsParams) (ListGroupSettingsRes, error)
	// ListGroupUsers implements listGroupUsers operation.
	//
	// List attached Users.
	//
	// GET /groups/{id}/users
	ListGroupUsers(ctx context.Context, params ListGroupUsersParams) (ListGroupUsersRes, error)
	// ListIntegration implements listIntegration operation.
	//
	// List Integrations.
	//
	// GET /integrations
	ListIntegration(ctx context.Context, params ListIntegrationParams) (ListIntegrationRes, error)
	// ListMembership implements listMembership operation.
	//
	// List Memberships.
	//
	// GET /memberships
	ListMembership(ctx context.Context, params ListMembershipParams) (ListMembershipRes, error)
	// ListOrganization implements listOrganization operation.
	//
	// List Organizations.
	//
	// GET /organizations
	ListOrganization(ctx context.Context, params ListOrganizationParams) (ListOrganizationRes, error)
	// ListOrganizationIntegrations implements listOrganizationIntegrations operation.
	//
	// List attached Integrations.
	//
	// GET /organizations/{id}/integrations
	ListOrganizationIntegrations(ctx context.Context, params ListOrganizationIntegrationsParams) (ListOrganizationIntegrationsRes, error)
	// ListOrganizationMemberships implements listOrganizationMemberships operation.
	//
	// List attached Memberships.
	//
	// GET /organizations/{id}/memberships
	ListOrganizationMemberships(ctx context.Context, params ListOrganizationMembershipsParams) (ListOrganizationMembershipsRes, error)
	// ListSession implements listSession operation.
	//
	// List Sessions.
	//
	// GET /sessions
	ListSession(ctx context.Context, params ListSessionParams) (ListSessionRes, error)
	// ListTenant implements listTenant operation.
	//
	// List Tenants.
	//
	// GET /tenants
	ListTenant(ctx context.Context, params ListTenantParams) (ListTenantRes, error)
	// ListUser implements listUser operation.
	//
	// List Users.
	//
	// GET /users
	ListUser(ctx context.Context, params ListUserParams) (ListUserRes, error)
	// ListUserGroups implements listUserGroups operation.
	//
	// List attached Groups.
	//
	// GET /users/{id}/groups
	ListUserGroups(ctx context.Context, params ListUserGroupsParams) (ListUserGroupsRes, error)
	// ListUserMemberships implements listUserMemberships operation.
	//
	// List attached Memberships.
	//
	// GET /users/{id}/memberships
	ListUserMemberships(ctx context.Context, params ListUserMembershipsParams) (ListUserMembershipsRes, error)
	// ListUserSessions implements listUserSessions operation.
	//
	// List attached Sessions.
	//
	// GET /users/{id}/sessions
	ListUserSessions(ctx context.Context, params ListUserSessionsParams) (ListUserSessionsRes, error)
	// ReadGroup implements readGroup operation.
	//
	// Finds the Group with the requested ID and returns it.
	//
	// GET /groups/{id}
	ReadGroup(ctx context.Context, params ReadGroupParams) (ReadGroupRes, error)
	// ReadGroupSetting implements readGroupSetting operation.
	//
	// Find the attached GroupSettings of the Group with the given ID.
	//
	// GET /groups/{id}/setting
	ReadGroupSetting(ctx context.Context, params ReadGroupSettingParams) (ReadGroupSettingRes, error)
	// ReadGroupSettings implements readGroupSettings operation.
	//
	// Finds the GroupSettings with the requested ID and returns it.
	//
	// GET /group-settings/{id}
	ReadGroupSettings(ctx context.Context, params ReadGroupSettingsParams) (ReadGroupSettingsRes, error)
	// ReadGroupSettingsGroup implements readGroupSettingsGroup operation.
	//
	// Find the attached Group of the GroupSettings with the given ID.
	//
	// GET /group-settings/{id}/group
	ReadGroupSettingsGroup(ctx context.Context, params ReadGroupSettingsGroupParams) (ReadGroupSettingsGroupRes, error)
	// ReadGroupTenant implements readGroupTenant operation.
	//
	// Find the attached Tenant of the Group with the given ID.
	//
	// GET /groups/{id}/tenant
	ReadGroupTenant(ctx context.Context, params ReadGroupTenantParams) (ReadGroupTenantRes, error)
	// ReadIntegration implements readIntegration operation.
	//
	// Finds the Integration with the requested ID and returns it.
	//
	// GET /integrations/{id}
	ReadIntegration(ctx context.Context, params ReadIntegrationParams) (ReadIntegrationRes, error)
	// ReadIntegrationOrganization implements readIntegrationOrganization operation.
	//
	// Find the attached Organization of the Integration with the given ID.
	//
	// GET /integrations/{id}/organization
	ReadIntegrationOrganization(ctx context.Context, params ReadIntegrationOrganizationParams) (ReadIntegrationOrganizationRes, error)
	// ReadMembership implements readMembership operation.
	//
	// Finds the Membership with the requested ID and returns it.
	//
	// GET /memberships/{id}
	ReadMembership(ctx context.Context, params ReadMembershipParams) (ReadMembershipRes, error)
	// ReadMembershipGroup implements readMembershipGroup operation.
	//
	// Find the attached Group of the Membership with the given ID.
	//
	// GET /memberships/{id}/group
	ReadMembershipGroup(ctx context.Context, params ReadMembershipGroupParams) (ReadMembershipGroupRes, error)
	// ReadMembershipOrganization implements readMembershipOrganization operation.
	//
	// Find the attached Organization of the Membership with the given ID.
	//
	// GET /memberships/{id}/organization
	ReadMembershipOrganization(ctx context.Context, params ReadMembershipOrganizationParams) (ReadMembershipOrganizationRes, error)
	// ReadMembershipUser implements readMembershipUser operation.
	//
	// Find the attached User of the Membership with the given ID.
	//
	// GET /memberships/{id}/user
	ReadMembershipUser(ctx context.Context, params ReadMembershipUserParams) (ReadMembershipUserRes, error)
	// ReadOrganization implements readOrganization operation.
	//
	// Finds the Organization with the requested ID and returns it.
	//
	// GET /organizations/{id}
	ReadOrganization(ctx context.Context, params ReadOrganizationParams) (ReadOrganizationRes, error)
	// ReadSession implements readSession operation.
	//
	// Finds the Session with the requested ID and returns it.
	//
	// GET /sessions/{id}
	ReadSession(ctx context.Context, params ReadSessionParams) (ReadSessionRes, error)
	// ReadSessionUsers implements readSessionUsers operation.
	//
	// Find the attached User of the Session with the given ID.
	//
	// GET /sessions/{id}/users
	ReadSessionUsers(ctx context.Context, params ReadSessionUsersParams) (ReadSessionUsersRes, error)
	// ReadTenant implements readTenant operation.
	//
	// Finds the Tenant with the requested ID and returns it.
	//
	// GET /tenants/{id}
	ReadTenant(ctx context.Context, params ReadTenantParams) (ReadTenantRes, error)
	// ReadUser implements readUser operation.
	//
	// Finds the User with the requested ID and returns it.
	//
	// GET /users/{id}
	ReadUser(ctx context.Context, params ReadUserParams) (ReadUserRes, error)
	// ReadUserTenant implements readUserTenant operation.
	//
	// Find the attached Tenant of the User with the given ID.
	//
	// GET /users/{id}/tenant
	ReadUserTenant(ctx context.Context, params ReadUserTenantParams) (ReadUserTenantRes, error)
	// UpdateGroup implements updateGroup operation.
	//
	// Updates a Group and persists changes to storage.
	//
	// PATCH /groups/{id}
	UpdateGroup(ctx context.Context, req *UpdateGroupReq, params UpdateGroupParams) (UpdateGroupRes, error)
	// UpdateGroupSettings implements updateGroupSettings operation.
	//
	// Updates a GroupSettings and persists changes to storage.
	//
	// PATCH /group-settings/{id}
	UpdateGroupSettings(ctx context.Context, req *UpdateGroupSettingsReq, params UpdateGroupSettingsParams) (UpdateGroupSettingsRes, error)
	// UpdateIntegration implements updateIntegration operation.
	//
	// Updates a Integration and persists changes to storage.
	//
	// PATCH /integrations/{id}
	UpdateIntegration(ctx context.Context, req *UpdateIntegrationReq, params UpdateIntegrationParams) (UpdateIntegrationRes, error)
	// UpdateMembership implements updateMembership operation.
	//
	// Updates a Membership and persists changes to storage.
	//
	// PATCH /memberships/{id}
	UpdateMembership(ctx context.Context, req *UpdateMembershipReq, params UpdateMembershipParams) (UpdateMembershipRes, error)
	// UpdateOrganization implements updateOrganization operation.
	//
	// Updates a Organization and persists changes to storage.
	//
	// PATCH /organizations/{id}
	UpdateOrganization(ctx context.Context, req *UpdateOrganizationReq, params UpdateOrganizationParams) (UpdateOrganizationRes, error)
	// UpdateSession implements updateSession operation.
	//
	// Updates a Session and persists changes to storage.
	//
	// PATCH /sessions/{id}
	UpdateSession(ctx context.Context, req *UpdateSessionReq, params UpdateSessionParams) (UpdateSessionRes, error)
	// UpdateTenant implements updateTenant operation.
	//
	// Updates a Tenant and persists changes to storage.
	//
	// PATCH /tenants/{id}
	UpdateTenant(ctx context.Context, req *UpdateTenantReq, params UpdateTenantParams) (UpdateTenantRes, error)
	// UpdateUser implements updateUser operation.
	//
	// Updates a User and persists changes to storage.
	//
	// PATCH /users/{id}
	UpdateUser(ctx context.Context, req *UpdateUserReq, params UpdateUserParams) (UpdateUserRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
