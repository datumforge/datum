// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateIntegration implements createIntegration operation.
	//
	// Creates a new Integration and persists it to storage.
	//
	// POST /integrations
	CreateIntegration(ctx context.Context, req *CreateIntegrationReq) (CreateIntegrationRes, error)
	// CreateMembership implements createMembership operation.
	//
	// Creates a new Membership and persists it to storage.
	//
	// POST /memberships
	CreateMembership(ctx context.Context, req *CreateMembershipReq) (CreateMembershipRes, error)
	// CreateOrganization implements createOrganization operation.
	//
	// Creates a new Organization and persists it to storage.
	//
	// POST /organizations
	CreateOrganization(ctx context.Context, req *CreateOrganizationReq) (CreateOrganizationRes, error)
	// CreateUser implements createUser operation.
	//
	// Creates a new User and persists it to storage.
	//
	// POST /users
	CreateUser(ctx context.Context, req *CreateUserReq) (CreateUserRes, error)
	// DeleteIntegration implements deleteIntegration operation.
	//
	// Deletes the Integration with the requested ID.
	//
	// DELETE /integrations/{id}
	DeleteIntegration(ctx context.Context, params DeleteIntegrationParams) (DeleteIntegrationRes, error)
	// DeleteMembership implements deleteMembership operation.
	//
	// Deletes the Membership with the requested ID.
	//
	// DELETE /memberships/{id}
	DeleteMembership(ctx context.Context, params DeleteMembershipParams) (DeleteMembershipRes, error)
	// DeleteOrganization implements deleteOrganization operation.
	//
	// Deletes the Organization with the requested ID.
	//
	// DELETE /organizations/{id}
	DeleteOrganization(ctx context.Context, params DeleteOrganizationParams) (DeleteOrganizationRes, error)
	// DeleteUser implements deleteUser operation.
	//
	// Deletes the User with the requested ID.
	//
	// DELETE /users/{id}
	DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error)
	// ListIntegration implements listIntegration operation.
	//
	// List Integrations.
	//
	// GET /integrations
	ListIntegration(ctx context.Context, params ListIntegrationParams) (ListIntegrationRes, error)
	// ListMembership implements listMembership operation.
	//
	// List Memberships.
	//
	// GET /memberships
	ListMembership(ctx context.Context, params ListMembershipParams) (ListMembershipRes, error)
	// ListOrganization implements listOrganization operation.
	//
	// List Organizations.
	//
	// GET /organizations
	ListOrganization(ctx context.Context, params ListOrganizationParams) (ListOrganizationRes, error)
	// ListOrganizationIntegrations implements listOrganizationIntegrations operation.
	//
	// List attached Integrations.
	//
	// GET /organizations/{id}/integrations
	ListOrganizationIntegrations(ctx context.Context, params ListOrganizationIntegrationsParams) (ListOrganizationIntegrationsRes, error)
	// ListOrganizationMemberships implements listOrganizationMemberships operation.
	//
	// List attached Memberships.
	//
	// GET /organizations/{id}/memberships
	ListOrganizationMemberships(ctx context.Context, params ListOrganizationMembershipsParams) (ListOrganizationMembershipsRes, error)
	// ListUser implements listUser operation.
	//
	// List Users.
	//
	// GET /users
	ListUser(ctx context.Context, params ListUserParams) (ListUserRes, error)
	// ListUserMemberships implements listUserMemberships operation.
	//
	// List attached Memberships.
	//
	// GET /users/{id}/memberships
	ListUserMemberships(ctx context.Context, params ListUserMembershipsParams) (ListUserMembershipsRes, error)
	// ReadIntegration implements readIntegration operation.
	//
	// Finds the Integration with the requested ID and returns it.
	//
	// GET /integrations/{id}
	ReadIntegration(ctx context.Context, params ReadIntegrationParams) (ReadIntegrationRes, error)
	// ReadIntegrationOrganization implements readIntegrationOrganization operation.
	//
	// Find the attached Organization of the Integration with the given ID.
	//
	// GET /integrations/{id}/organization
	ReadIntegrationOrganization(ctx context.Context, params ReadIntegrationOrganizationParams) (ReadIntegrationOrganizationRes, error)
	// ReadMembership implements readMembership operation.
	//
	// Finds the Membership with the requested ID and returns it.
	//
	// GET /memberships/{id}
	ReadMembership(ctx context.Context, params ReadMembershipParams) (ReadMembershipRes, error)
	// ReadMembershipOrganization implements readMembershipOrganization operation.
	//
	// Find the attached Organization of the Membership with the given ID.
	//
	// GET /memberships/{id}/organization
	ReadMembershipOrganization(ctx context.Context, params ReadMembershipOrganizationParams) (ReadMembershipOrganizationRes, error)
	// ReadMembershipUser implements readMembershipUser operation.
	//
	// Find the attached User of the Membership with the given ID.
	//
	// GET /memberships/{id}/user
	ReadMembershipUser(ctx context.Context, params ReadMembershipUserParams) (ReadMembershipUserRes, error)
	// ReadOrganization implements readOrganization operation.
	//
	// Finds the Organization with the requested ID and returns it.
	//
	// GET /organizations/{id}
	ReadOrganization(ctx context.Context, params ReadOrganizationParams) (ReadOrganizationRes, error)
	// ReadUser implements readUser operation.
	//
	// Finds the User with the requested ID and returns it.
	//
	// GET /users/{id}
	ReadUser(ctx context.Context, params ReadUserParams) (ReadUserRes, error)
	// UpdateIntegration implements updateIntegration operation.
	//
	// Updates a Integration and persists changes to storage.
	//
	// PATCH /integrations/{id}
	UpdateIntegration(ctx context.Context, req *UpdateIntegrationReq, params UpdateIntegrationParams) (UpdateIntegrationRes, error)
	// UpdateMembership implements updateMembership operation.
	//
	// Updates a Membership and persists changes to storage.
	//
	// PATCH /memberships/{id}
	UpdateMembership(ctx context.Context, req *UpdateMembershipReq, params UpdateMembershipParams) (UpdateMembershipRes, error)
	// UpdateOrganization implements updateOrganization operation.
	//
	// Updates a Organization and persists changes to storage.
	//
	// PATCH /organizations/{id}
	UpdateOrganization(ctx context.Context, req *UpdateOrganizationReq, params UpdateOrganizationParams) (UpdateOrganizationRes, error)
	// UpdateUser implements updateUser operation.
	//
	// Updates a User and persists changes to storage.
	//
	// PATCH /users/{id}
	UpdateUser(ctx context.Context, req *UpdateUserReq, params UpdateUserParams) (UpdateUserRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
