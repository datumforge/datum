// Code generated by ogen, DO NOT EDIT.

package ogent

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s *CreateGroupSettingsReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Visibility.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.JoinPolicy.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "join_policy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreateGroupSettingsReqJoinPolicy) Validate() error {
	switch s {
	case "OPEN":
		return nil
	case "INVITE_ONLY":
		return nil
	case "APPLICATION_ONLY":
		return nil
	case "INVITE_OR_APPLICATION":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s CreateGroupSettingsReqVisibility) Validate() error {
	switch s {
	case "PUBLIC":
		return nil
	case "PRIVATE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *CreateSessionReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s CreateSessionReqType) Validate() error {
	switch s {
	case "local":
		return nil
	case "oauth":
		return nil
	case "app_password":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GroupSettingRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Visibility.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.JoinPolicy.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "join_policy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GroupSettingReadJoinPolicy) Validate() error {
	switch s {
	case "OPEN":
		return nil
	case "INVITE_ONLY":
		return nil
	case "APPLICATION_ONLY":
		return nil
	case "INVITE_OR_APPLICATION":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GroupSettingReadVisibility) Validate() error {
	switch s {
	case "PUBLIC":
		return nil
	case "PRIVATE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GroupSettingsCreate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Visibility.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.JoinPolicy.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "join_policy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GroupSettingsCreateJoinPolicy) Validate() error {
	switch s {
	case "OPEN":
		return nil
	case "INVITE_ONLY":
		return nil
	case "APPLICATION_ONLY":
		return nil
	case "INVITE_OR_APPLICATION":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GroupSettingsCreateVisibility) Validate() error {
	switch s {
	case "PUBLIC":
		return nil
	case "PRIVATE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GroupSettingsList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Visibility.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.JoinPolicy.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "join_policy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GroupSettingsListJoinPolicy) Validate() error {
	switch s {
	case "OPEN":
		return nil
	case "INVITE_ONLY":
		return nil
	case "APPLICATION_ONLY":
		return nil
	case "INVITE_OR_APPLICATION":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GroupSettingsListVisibility) Validate() error {
	switch s {
	case "PUBLIC":
		return nil
	case "PRIVATE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GroupSettingsRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Visibility.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.JoinPolicy.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "join_policy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GroupSettingsReadJoinPolicy) Validate() error {
	switch s {
	case "OPEN":
		return nil
	case "INVITE_ONLY":
		return nil
	case "APPLICATION_ONLY":
		return nil
	case "INVITE_OR_APPLICATION":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GroupSettingsReadVisibility) Validate() error {
	switch s {
	case "PUBLIC":
		return nil
	case "PRIVATE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *GroupSettingsUpdate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Visibility.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if err := func() error {
		if err := s.JoinPolicy.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "join_policy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s GroupSettingsUpdateJoinPolicy) Validate() error {
	switch s {
	case "OPEN":
		return nil
	case "INVITE_ONLY":
		return nil
	case "APPLICATION_ONLY":
		return nil
	case "INVITE_OR_APPLICATION":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s GroupSettingsUpdateVisibility) Validate() error {
	switch s {
	case "PUBLIC":
		return nil
	case "PRIVATE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ListGroupMembershipsOKApplicationJSON) Validate() error {
	alias := ([]GroupMembershipsList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ListGroupOKApplicationJSON) Validate() error {
	alias := ([]GroupList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ListGroupSettingsOKApplicationJSON) Validate() error {
	alias := ([]GroupSettingsList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListIntegrationOKApplicationJSON) Validate() error {
	alias := ([]IntegrationList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ListMembershipOKApplicationJSON) Validate() error {
	alias := ([]MembershipList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ListOrganizationIntegrationsOKApplicationJSON) Validate() error {
	alias := ([]OrganizationIntegrationsList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ListOrganizationMembershipsOKApplicationJSON) Validate() error {
	alias := ([]OrganizationMembershipsList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ListOrganizationOKApplicationJSON) Validate() error {
	alias := ([]OrganizationList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ListSessionOKApplicationJSON) Validate() error {
	alias := ([]SessionList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ListUserMembershipsOKApplicationJSON) Validate() error {
	alias := ([]UserMembershipsList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ListUserOKApplicationJSON) Validate() error {
	alias := ([]UserList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	return nil
}

func (s ListUserSessionsOKApplicationJSON) Validate() error {
	alias := ([]UserSessionsList)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if err := elem.Validate(); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SessionCreate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SessionCreateType) Validate() error {
	switch s {
	case "local":
		return nil
	case "oauth":
		return nil
	case "app_password":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SessionList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SessionListType) Validate() error {
	switch s {
	case "local":
		return nil
	case "oauth":
		return nil
	case "app_password":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SessionRead) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SessionReadType) Validate() error {
	switch s {
	case "local":
		return nil
	case "oauth":
		return nil
	case "app_password":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SessionUpdate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s SessionUpdateType) Validate() error {
	switch s {
	case "local":
		return nil
	case "oauth":
		return nil
	case "app_password":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UpdateGroupSettingsReq) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Visibility.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "visibility",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.JoinPolicy.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "join_policy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UpdateGroupSettingsReqJoinPolicy) Validate() error {
	switch s {
	case "OPEN":
		return nil
	case "INVITE_ONLY":
		return nil
	case "APPLICATION_ONLY":
		return nil
	case "INVITE_OR_APPLICATION":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s UpdateGroupSettingsReqVisibility) Validate() error {
	switch s {
	case "PUBLIC":
		return nil
	case "PRIVATE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *UserSessionsList) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if err := s.Type.Validate(); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s UserSessionsListType) Validate() error {
	switch s {
	case "local":
		return nil
	case "oauth":
		return nil
	case "app_password":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}
