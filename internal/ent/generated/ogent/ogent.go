// Code generated by ent, DO NOT EDIT.

package ogent

import (
	"context"
	"net/http"

	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/internal/ent/generated/integration"
	"github.com/datumforge/datum/internal/ent/generated/membership"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/user"
	"github.com/go-faster/jx"
)

// OgentHandler implements the ogen generated Handler interface and uses Ent as data layer.
type OgentHandler struct {
	client *generated.Client
}

// NewOgentHandler returns a new OgentHandler.
func NewOgentHandler(c *generated.Client) *OgentHandler { return &OgentHandler{c} }

// rawError renders err as json string.
func rawError(err error) jx.Raw {
	var e jx.Encoder
	e.Str(err.Error())
	return e.Bytes()
}

// CreateIntegration handles POST /integrations requests.
func (h *OgentHandler) CreateIntegration(ctx context.Context, req *CreateIntegrationReq) (CreateIntegrationRes, error) {
	b := h.client.Integration.Create()
	// Add all fields.
	b.SetKind(req.Kind)
	if v, ok := req.Description.Get(); ok {
		b.SetDescription(v)
	}
	b.SetSecretName(req.SecretName)
	b.SetCreatedAt(req.CreatedAt)
	if v, ok := req.DeletedAt.Get(); ok {
		b.SetDeletedAt(v)
	}
	// Add all edges.
	b.SetOrganizationID(req.Organization)
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		case generated.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Integration.Query().Where(integration.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewIntegrationCreate(e), nil
}

// ReadIntegration handles GET /integrations/{id} requests.
func (h *OgentHandler) ReadIntegration(ctx context.Context, params ReadIntegrationParams) (ReadIntegrationRes, error) {
	q := h.client.Integration.Query().Where(integration.IDEQ(params.ID))
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewIntegrationRead(e), nil
}

// UpdateIntegration handles PATCH /integrations/{id} requests.
func (h *OgentHandler) UpdateIntegration(ctx context.Context, req *UpdateIntegrationReq, params UpdateIntegrationParams) (UpdateIntegrationRes, error) {
	b := h.client.Integration.UpdateOneID(params.ID)
	// Add all fields.
	if v, ok := req.Description.Get(); ok {
		b.SetDescription(v)
	}
	if v, ok := req.DeletedAt.Get(); ok {
		b.SetDeletedAt(v)
	}
	// Add all edges.
	if v, ok := req.Organization.Get(); ok {
		b.SetOrganizationID(v)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Integration.Query().Where(integration.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewIntegrationUpdate(e), nil
}

// DeleteIntegration handles DELETE /integrations/{id} requests.
func (h *OgentHandler) DeleteIntegration(ctx context.Context, params DeleteIntegrationParams) (DeleteIntegrationRes, error) {
	err := h.client.Integration.DeleteOneID(params.ID).Exec(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return new(DeleteIntegrationNoContent), nil

}

// ListIntegration handles GET /integrations requests.
func (h *OgentHandler) ListIntegration(ctx context.Context, params ListIntegrationParams) (ListIntegrationRes, error) {
	q := h.client.Integration.Query()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	es, err := q.All(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewIntegrationLists(es)
	return (*ListIntegrationOKApplicationJSON)(&r), nil
}

// ReadIntegrationOrganization handles GET /integrations/{id}/organization requests.
func (h *OgentHandler) ReadIntegrationOrganization(ctx context.Context, params ReadIntegrationOrganizationParams) (ReadIntegrationOrganizationRes, error) {
	q := h.client.Integration.Query().Where(integration.IDEQ(params.ID)).QueryOrganization()
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewIntegrationOrganizationRead(e), nil
}

// CreateMembership handles POST /memberships requests.
func (h *OgentHandler) CreateMembership(ctx context.Context, req *CreateMembershipReq) (CreateMembershipRes, error) {
	b := h.client.Membership.Create()
	// Add all fields.
	b.SetCurrent(req.Current)
	b.SetCreatedAt(req.CreatedAt)
	b.SetUpdatedAt(req.UpdatedAt)
	// Add all edges.
	b.SetOrganizationID(req.Organization)
	b.SetUserID(req.User)
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		case generated.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Membership.Query().Where(membership.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewMembershipCreate(e), nil
}

// ReadMembership handles GET /memberships/{id} requests.
func (h *OgentHandler) ReadMembership(ctx context.Context, params ReadMembershipParams) (ReadMembershipRes, error) {
	q := h.client.Membership.Query().Where(membership.IDEQ(params.ID))
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewMembershipRead(e), nil
}

// UpdateMembership handles PATCH /memberships/{id} requests.
func (h *OgentHandler) UpdateMembership(ctx context.Context, req *UpdateMembershipReq, params UpdateMembershipParams) (UpdateMembershipRes, error) {
	b := h.client.Membership.UpdateOneID(params.ID)
	// Add all fields.
	if v, ok := req.Current.Get(); ok {
		b.SetCurrent(v)
	}
	if v, ok := req.UpdatedAt.Get(); ok {
		b.SetUpdatedAt(v)
	}
	// Add all edges.
	if v, ok := req.Organization.Get(); ok {
		b.SetOrganizationID(v)
	}
	if v, ok := req.User.Get(); ok {
		b.SetUserID(v)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Membership.Query().Where(membership.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewMembershipUpdate(e), nil
}

// DeleteMembership handles DELETE /memberships/{id} requests.
func (h *OgentHandler) DeleteMembership(ctx context.Context, params DeleteMembershipParams) (DeleteMembershipRes, error) {
	err := h.client.Membership.DeleteOneID(params.ID).Exec(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return new(DeleteMembershipNoContent), nil

}

// ListMembership handles GET /memberships requests.
func (h *OgentHandler) ListMembership(ctx context.Context, params ListMembershipParams) (ListMembershipRes, error) {
	q := h.client.Membership.Query()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	es, err := q.All(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewMembershipLists(es)
	return (*ListMembershipOKApplicationJSON)(&r), nil
}

// ReadMembershipOrganization handles GET /memberships/{id}/organization requests.
func (h *OgentHandler) ReadMembershipOrganization(ctx context.Context, params ReadMembershipOrganizationParams) (ReadMembershipOrganizationRes, error) {
	q := h.client.Membership.Query().Where(membership.IDEQ(params.ID)).QueryOrganization()
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewMembershipOrganizationRead(e), nil
}

// ReadMembershipUser handles GET /memberships/{id}/user requests.
func (h *OgentHandler) ReadMembershipUser(ctx context.Context, params ReadMembershipUserParams) (ReadMembershipUserRes, error) {
	q := h.client.Membership.Query().Where(membership.IDEQ(params.ID)).QueryUser()
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewMembershipUserRead(e), nil
}

// CreateOrganization handles POST /organizations requests.
func (h *OgentHandler) CreateOrganization(ctx context.Context, req *CreateOrganizationReq) (CreateOrganizationRes, error) {
	b := h.client.Organization.Create()
	// Add all fields.
	b.SetName(req.Name)
	b.SetCreatedAt(req.CreatedAt)
	// Add all edges.
	b.AddMembershipIDs(req.Memberships...)
	b.AddIntegrationIDs(req.Integrations...)
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		case generated.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Organization.Query().Where(organization.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewOrganizationCreate(e), nil
}

// ReadOrganization handles GET /organizations/{id} requests.
func (h *OgentHandler) ReadOrganization(ctx context.Context, params ReadOrganizationParams) (ReadOrganizationRes, error) {
	q := h.client.Organization.Query().Where(organization.IDEQ(params.ID))
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewOrganizationRead(e), nil
}

// UpdateOrganization handles PATCH /organizations/{id} requests.
func (h *OgentHandler) UpdateOrganization(ctx context.Context, req *UpdateOrganizationReq, params UpdateOrganizationParams) (UpdateOrganizationRes, error) {
	b := h.client.Organization.UpdateOneID(params.ID)
	// Add all fields.
	if v, ok := req.Name.Get(); ok {
		b.SetName(v)
	}
	// Add all edges.
	if req.Memberships != nil {
		b.ClearMemberships().AddMembershipIDs(req.Memberships...)
	}
	if req.Integrations != nil {
		b.ClearIntegrations().AddIntegrationIDs(req.Integrations...)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.Organization.Query().Where(organization.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewOrganizationUpdate(e), nil
}

// DeleteOrganization handles DELETE /organizations/{id} requests.
func (h *OgentHandler) DeleteOrganization(ctx context.Context, params DeleteOrganizationParams) (DeleteOrganizationRes, error) {
	err := h.client.Organization.DeleteOneID(params.ID).Exec(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return new(DeleteOrganizationNoContent), nil

}

// ListOrganization handles GET /organizations requests.
func (h *OgentHandler) ListOrganization(ctx context.Context, params ListOrganizationParams) (ListOrganizationRes, error) {
	q := h.client.Organization.Query()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	es, err := q.All(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewOrganizationLists(es)
	return (*ListOrganizationOKApplicationJSON)(&r), nil
}

// ListOrganizationMemberships handles GET /organizations/{id}/memberships requests.
func (h *OgentHandler) ListOrganizationMemberships(ctx context.Context, params ListOrganizationMembershipsParams) (ListOrganizationMembershipsRes, error) {
	q := h.client.Organization.Query().Where(organization.IDEQ(params.ID)).QueryMemberships()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)
	es, err := q.All(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewOrganizationMembershipsLists(es)
	return (*ListOrganizationMembershipsOKApplicationJSON)(&r), nil
}

// ListOrganizationIntegrations handles GET /organizations/{id}/integrations requests.
func (h *OgentHandler) ListOrganizationIntegrations(ctx context.Context, params ListOrganizationIntegrationsParams) (ListOrganizationIntegrationsRes, error) {
	q := h.client.Organization.Query().Where(organization.IDEQ(params.ID)).QueryIntegrations()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)
	es, err := q.All(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewOrganizationIntegrationsLists(es)
	return (*ListOrganizationIntegrationsOKApplicationJSON)(&r), nil
}

// CreateUser handles POST /users requests.
func (h *OgentHandler) CreateUser(ctx context.Context, req *CreateUserReq) (CreateUserRes, error) {
	b := h.client.User.Create()
	// Add all fields.
	b.SetEmail(req.Email)
	b.SetCreatedAt(req.CreatedAt)
	// Add all edges.
	b.AddMembershipIDs(req.Memberships...)
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		case generated.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.User.Query().Where(user.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewUserCreate(e), nil
}

// ReadUser handles GET /users/{id} requests.
func (h *OgentHandler) ReadUser(ctx context.Context, params ReadUserParams) (ReadUserRes, error) {
	q := h.client.User.Query().Where(user.IDEQ(params.ID))
	e, err := q.Only(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return NewUserRead(e), nil
}

// UpdateUser handles PATCH /users/{id} requests.
func (h *OgentHandler) UpdateUser(ctx context.Context, req *UpdateUserReq, params UpdateUserParams) (UpdateUserRes, error) {
	b := h.client.User.UpdateOneID(params.ID)
	// Add all fields.
	if v, ok := req.Email.Get(); ok {
		b.SetEmail(v)
	}
	// Add all edges.
	if req.Memberships != nil {
		b.ClearMemberships().AddMembershipIDs(req.Memberships...)
	}
	// Persist to storage.
	e, err := b.Save(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	// Reload the entity to attach all eager-loaded edges.
	q := h.client.User.Query().Where(user.ID(e.ID))
	e, err = q.Only(ctx)
	if err != nil {
		// This should never happen.
		return nil, err
	}
	return NewUserUpdate(e), nil
}

// DeleteUser handles DELETE /users/{id} requests.
func (h *OgentHandler) DeleteUser(ctx context.Context, params DeleteUserParams) (DeleteUserRes, error) {
	err := h.client.User.DeleteOneID(params.ID).Exec(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsConstraintError(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	return new(DeleteUserNoContent), nil

}

// ListUser handles GET /users requests.
func (h *OgentHandler) ListUser(ctx context.Context, params ListUserParams) (ListUserRes, error) {
	q := h.client.User.Query()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)

	es, err := q.All(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewUserLists(es)
	return (*ListUserOKApplicationJSON)(&r), nil
}

// ListUserMemberships handles GET /users/{id}/memberships requests.
func (h *OgentHandler) ListUserMemberships(ctx context.Context, params ListUserMembershipsParams) (ListUserMembershipsRes, error) {
	q := h.client.User.Query().Where(user.IDEQ(params.ID)).QueryMemberships()
	page := 1
	if v, ok := params.Page.Get(); ok {
		page = v
	}
	itemsPerPage := 30
	if v, ok := params.ItemsPerPage.Get(); ok {
		itemsPerPage = v
	}
	q.Limit(itemsPerPage).Offset((page - 1) * itemsPerPage)
	es, err := q.All(ctx)
	if err != nil {
		switch {
		case generated.IsNotFound(err):
			return &R404{
				Code:   http.StatusNotFound,
				Status: http.StatusText(http.StatusNotFound),
				Errors: rawError(err),
			}, nil
		case generated.IsNotSingular(err):
			return &R409{
				Code:   http.StatusConflict,
				Status: http.StatusText(http.StatusConflict),
				Errors: rawError(err),
			}, nil
		default:
			// Let the server handle the error.
			return nil, err
		}
	}
	r := NewUserMembershipsLists(es)
	return (*ListUserMembershipsOKApplicationJSON)(&r), nil
}
