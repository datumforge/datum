// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datumforge/datum/internal/ent/generated/ohauthtootoken"
)

// OhAuthTooToken is the model entity for the OhAuthTooToken schema.
type OhAuthTooToken struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// Scopes holds the value of the "scopes" field.
	Scopes []string `json:"scopes,omitempty"`
	// Nonce holds the value of the "nonce" field.
	Nonce string `json:"nonce,omitempty"`
	// ClaimsUserID holds the value of the "claims_user_id" field.
	ClaimsUserID string `json:"claims_user_id,omitempty"`
	// ClaimsUsername holds the value of the "claims_username" field.
	ClaimsUsername string `json:"claims_username,omitempty"`
	// ClaimsEmail holds the value of the "claims_email" field.
	ClaimsEmail string `json:"claims_email,omitempty"`
	// ClaimsEmailVerified holds the value of the "claims_email_verified" field.
	ClaimsEmailVerified bool `json:"claims_email_verified,omitempty"`
	// ClaimsGroups holds the value of the "claims_groups" field.
	ClaimsGroups []string `json:"claims_groups,omitempty"`
	// ClaimsPreferredUsername holds the value of the "claims_preferred_username" field.
	ClaimsPreferredUsername string `json:"claims_preferred_username,omitempty"`
	// ConnectorID holds the value of the "connector_id" field.
	ConnectorID string `json:"connector_id,omitempty"`
	// ConnectorData holds the value of the "connector_data" field.
	ConnectorData []string `json:"connector_data,omitempty"`
	// LastUsed holds the value of the "last_used" field.
	LastUsed     time.Time `json:"last_used,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OhAuthTooToken) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ohauthtootoken.FieldScopes, ohauthtootoken.FieldClaimsGroups, ohauthtootoken.FieldConnectorData:
			values[i] = new([]byte)
		case ohauthtootoken.FieldClaimsEmailVerified:
			values[i] = new(sql.NullBool)
		case ohauthtootoken.FieldID, ohauthtootoken.FieldClientID, ohauthtootoken.FieldNonce, ohauthtootoken.FieldClaimsUserID, ohauthtootoken.FieldClaimsUsername, ohauthtootoken.FieldClaimsEmail, ohauthtootoken.FieldClaimsPreferredUsername, ohauthtootoken.FieldConnectorID:
			values[i] = new(sql.NullString)
		case ohauthtootoken.FieldLastUsed:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OhAuthTooToken fields.
func (oatt *OhAuthTooToken) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ohauthtootoken.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				oatt.ID = value.String
			}
		case ohauthtootoken.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				oatt.ClientID = value.String
			}
		case ohauthtootoken.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oatt.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case ohauthtootoken.FieldNonce:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nonce", values[i])
			} else if value.Valid {
				oatt.Nonce = value.String
			}
		case ohauthtootoken.FieldClaimsUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field claims_user_id", values[i])
			} else if value.Valid {
				oatt.ClaimsUserID = value.String
			}
		case ohauthtootoken.FieldClaimsUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field claims_username", values[i])
			} else if value.Valid {
				oatt.ClaimsUsername = value.String
			}
		case ohauthtootoken.FieldClaimsEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field claims_email", values[i])
			} else if value.Valid {
				oatt.ClaimsEmail = value.String
			}
		case ohauthtootoken.FieldClaimsEmailVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field claims_email_verified", values[i])
			} else if value.Valid {
				oatt.ClaimsEmailVerified = value.Bool
			}
		case ohauthtootoken.FieldClaimsGroups:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field claims_groups", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oatt.ClaimsGroups); err != nil {
					return fmt.Errorf("unmarshal field claims_groups: %w", err)
				}
			}
		case ohauthtootoken.FieldClaimsPreferredUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field claims_preferred_username", values[i])
			} else if value.Valid {
				oatt.ClaimsPreferredUsername = value.String
			}
		case ohauthtootoken.FieldConnectorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field connector_id", values[i])
			} else if value.Valid {
				oatt.ConnectorID = value.String
			}
		case ohauthtootoken.FieldConnectorData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field connector_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oatt.ConnectorData); err != nil {
					return fmt.Errorf("unmarshal field connector_data: %w", err)
				}
			}
		case ohauthtootoken.FieldLastUsed:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used", values[i])
			} else if value.Valid {
				oatt.LastUsed = value.Time
			}
		default:
			oatt.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OhAuthTooToken.
// This includes values selected through modifiers, order, etc.
func (oatt *OhAuthTooToken) Value(name string) (ent.Value, error) {
	return oatt.selectValues.Get(name)
}

// Update returns a builder for updating this OhAuthTooToken.
// Note that you need to call OhAuthTooToken.Unwrap() before calling this method if this OhAuthTooToken
// was returned from a transaction, and the transaction was committed or rolled back.
func (oatt *OhAuthTooToken) Update() *OhAuthTooTokenUpdateOne {
	return NewOhAuthTooTokenClient(oatt.config).UpdateOne(oatt)
}

// Unwrap unwraps the OhAuthTooToken entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oatt *OhAuthTooToken) Unwrap() *OhAuthTooToken {
	_tx, ok := oatt.config.driver.(*txDriver)
	if !ok {
		panic("generated: OhAuthTooToken is not a transactional entity")
	}
	oatt.config.driver = _tx.drv
	return oatt
}

// String implements the fmt.Stringer.
func (oatt *OhAuthTooToken) String() string {
	var builder strings.Builder
	builder.WriteString("OhAuthTooToken(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oatt.ID))
	builder.WriteString("client_id=")
	builder.WriteString(oatt.ClientID)
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", oatt.Scopes))
	builder.WriteString(", ")
	builder.WriteString("nonce=")
	builder.WriteString(oatt.Nonce)
	builder.WriteString(", ")
	builder.WriteString("claims_user_id=")
	builder.WriteString(oatt.ClaimsUserID)
	builder.WriteString(", ")
	builder.WriteString("claims_username=")
	builder.WriteString(oatt.ClaimsUsername)
	builder.WriteString(", ")
	builder.WriteString("claims_email=")
	builder.WriteString(oatt.ClaimsEmail)
	builder.WriteString(", ")
	builder.WriteString("claims_email_verified=")
	builder.WriteString(fmt.Sprintf("%v", oatt.ClaimsEmailVerified))
	builder.WriteString(", ")
	builder.WriteString("claims_groups=")
	builder.WriteString(fmt.Sprintf("%v", oatt.ClaimsGroups))
	builder.WriteString(", ")
	builder.WriteString("claims_preferred_username=")
	builder.WriteString(oatt.ClaimsPreferredUsername)
	builder.WriteString(", ")
	builder.WriteString("connector_id=")
	builder.WriteString(oatt.ConnectorID)
	builder.WriteString(", ")
	builder.WriteString("connector_data=")
	builder.WriteString(fmt.Sprintf("%v", oatt.ConnectorData))
	builder.WriteString(", ")
	builder.WriteString("last_used=")
	builder.WriteString(oatt.LastUsed.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OhAuthTooTokens is a parsable slice of OhAuthTooToken.
type OhAuthTooTokens []*OhAuthTooToken
