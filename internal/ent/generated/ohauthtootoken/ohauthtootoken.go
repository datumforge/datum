// Code generated by ent, DO NOT EDIT.

package ohauthtootoken

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the ohauthtootoken type in the database.
	Label = "oh_auth_too_token"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldMappingID holds the string denoting the mapping_id field in the database.
	FieldMappingID = "mapping_id"
	// FieldClientID holds the string denoting the client_id field in the database.
	FieldClientID = "client_id"
	// FieldScopes holds the string denoting the scopes field in the database.
	FieldScopes = "scopes"
	// FieldNonce holds the string denoting the nonce field in the database.
	FieldNonce = "nonce"
	// FieldClaimsUserID holds the string denoting the claims_user_id field in the database.
	FieldClaimsUserID = "claims_user_id"
	// FieldClaimsUsername holds the string denoting the claims_username field in the database.
	FieldClaimsUsername = "claims_username"
	// FieldClaimsEmail holds the string denoting the claims_email field in the database.
	FieldClaimsEmail = "claims_email"
	// FieldClaimsEmailVerified holds the string denoting the claims_email_verified field in the database.
	FieldClaimsEmailVerified = "claims_email_verified"
	// FieldClaimsGroups holds the string denoting the claims_groups field in the database.
	FieldClaimsGroups = "claims_groups"
	// FieldClaimsPreferredUsername holds the string denoting the claims_preferred_username field in the database.
	FieldClaimsPreferredUsername = "claims_preferred_username"
	// FieldConnectorID holds the string denoting the connector_id field in the database.
	FieldConnectorID = "connector_id"
	// FieldConnectorData holds the string denoting the connector_data field in the database.
	FieldConnectorData = "connector_data"
	// FieldLastUsed holds the string denoting the last_used field in the database.
	FieldLastUsed = "last_used"
	// EdgeIntegration holds the string denoting the integration edge name in mutations.
	EdgeIntegration = "integration"
	// EdgeEvents holds the string denoting the events edge name in mutations.
	EdgeEvents = "events"
	// Table holds the table name of the ohauthtootoken in the database.
	Table = "oh_auth_too_tokens"
	// IntegrationTable is the table that holds the integration relation/edge. The primary key declared below.
	IntegrationTable = "integration_oauth2tokens"
	// IntegrationInverseTable is the table name for the Integration entity.
	// It exists in this package in order to avoid circular dependency with the "integration" package.
	IntegrationInverseTable = "integrations"
	// EventsTable is the table that holds the events relation/edge. The primary key declared below.
	EventsTable = "oh_auth_too_token_events"
	// EventsInverseTable is the table name for the Event entity.
	// It exists in this package in order to avoid circular dependency with the "event" package.
	EventsInverseTable = "events"
)

// Columns holds all SQL columns for ohauthtootoken fields.
var Columns = []string{
	FieldID,
	FieldMappingID,
	FieldClientID,
	FieldScopes,
	FieldNonce,
	FieldClaimsUserID,
	FieldClaimsUsername,
	FieldClaimsEmail,
	FieldClaimsEmailVerified,
	FieldClaimsGroups,
	FieldClaimsPreferredUsername,
	FieldConnectorID,
	FieldConnectorData,
	FieldLastUsed,
}

var (
	// IntegrationPrimaryKey and IntegrationColumn2 are the table columns denoting the
	// primary key for the integration relation (M2M).
	IntegrationPrimaryKey = []string{"integration_id", "oh_auth_too_token_id"}
	// EventsPrimaryKey and EventsColumn2 are the table columns denoting the
	// primary key for the events relation (M2M).
	EventsPrimaryKey = []string{"oh_auth_too_token_id", "event_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultMappingID holds the default value on creation for the "mapping_id" field.
	DefaultMappingID func() string
	// ClientIDValidator is a validator for the "client_id" field. It is called by the builders before save.
	ClientIDValidator func(string) error
	// NonceValidator is a validator for the "nonce" field. It is called by the builders before save.
	NonceValidator func(string) error
	// ClaimsUserIDValidator is a validator for the "claims_user_id" field. It is called by the builders before save.
	ClaimsUserIDValidator func(string) error
	// ClaimsUsernameValidator is a validator for the "claims_username" field. It is called by the builders before save.
	ClaimsUsernameValidator func(string) error
	// ClaimsEmailValidator is a validator for the "claims_email" field. It is called by the builders before save.
	ClaimsEmailValidator func(string) error
	// ConnectorIDValidator is a validator for the "connector_id" field. It is called by the builders before save.
	ConnectorIDValidator func(string) error
	// DefaultLastUsed holds the default value on creation for the "last_used" field.
	DefaultLastUsed func() time.Time
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the OhAuthTooToken queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByMappingID orders the results by the mapping_id field.
func ByMappingID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMappingID, opts...).ToFunc()
}

// ByClientID orders the results by the client_id field.
func ByClientID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClientID, opts...).ToFunc()
}

// ByNonce orders the results by the nonce field.
func ByNonce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNonce, opts...).ToFunc()
}

// ByClaimsUserID orders the results by the claims_user_id field.
func ByClaimsUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClaimsUserID, opts...).ToFunc()
}

// ByClaimsUsername orders the results by the claims_username field.
func ByClaimsUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClaimsUsername, opts...).ToFunc()
}

// ByClaimsEmail orders the results by the claims_email field.
func ByClaimsEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClaimsEmail, opts...).ToFunc()
}

// ByClaimsEmailVerified orders the results by the claims_email_verified field.
func ByClaimsEmailVerified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClaimsEmailVerified, opts...).ToFunc()
}

// ByClaimsPreferredUsername orders the results by the claims_preferred_username field.
func ByClaimsPreferredUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldClaimsPreferredUsername, opts...).ToFunc()
}

// ByConnectorID orders the results by the connector_id field.
func ByConnectorID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldConnectorID, opts...).ToFunc()
}

// ByLastUsed orders the results by the last_used field.
func ByLastUsed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastUsed, opts...).ToFunc()
}

// ByIntegrationCount orders the results by integration count.
func ByIntegrationCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newIntegrationStep(), opts...)
	}
}

// ByIntegration orders the results by integration terms.
func ByIntegration(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newIntegrationStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByEventsCount orders the results by events count.
func ByEventsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newEventsStep(), opts...)
	}
}

// ByEvents orders the results by events terms.
func ByEvents(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newEventsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newIntegrationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(IntegrationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, IntegrationTable, IntegrationPrimaryKey...),
	)
}
func newEventsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(EventsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, false, EventsTable, EventsPrimaryKey...),
	)
}
