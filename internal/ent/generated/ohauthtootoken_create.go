// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/event"
	"github.com/datumforge/datum/internal/ent/generated/integration"
	"github.com/datumforge/datum/internal/ent/generated/ohauthtootoken"
)

// OhAuthTooTokenCreate is the builder for creating a OhAuthTooToken entity.
type OhAuthTooTokenCreate struct {
	config
	mutation *OhAuthTooTokenMutation
	hooks    []Hook
}

// SetClientID sets the "client_id" field.
func (oattc *OhAuthTooTokenCreate) SetClientID(s string) *OhAuthTooTokenCreate {
	oattc.mutation.SetClientID(s)
	return oattc
}

// SetScopes sets the "scopes" field.
func (oattc *OhAuthTooTokenCreate) SetScopes(s []string) *OhAuthTooTokenCreate {
	oattc.mutation.SetScopes(s)
	return oattc
}

// SetNonce sets the "nonce" field.
func (oattc *OhAuthTooTokenCreate) SetNonce(s string) *OhAuthTooTokenCreate {
	oattc.mutation.SetNonce(s)
	return oattc
}

// SetClaimsUserID sets the "claims_user_id" field.
func (oattc *OhAuthTooTokenCreate) SetClaimsUserID(s string) *OhAuthTooTokenCreate {
	oattc.mutation.SetClaimsUserID(s)
	return oattc
}

// SetClaimsUsername sets the "claims_username" field.
func (oattc *OhAuthTooTokenCreate) SetClaimsUsername(s string) *OhAuthTooTokenCreate {
	oattc.mutation.SetClaimsUsername(s)
	return oattc
}

// SetClaimsEmail sets the "claims_email" field.
func (oattc *OhAuthTooTokenCreate) SetClaimsEmail(s string) *OhAuthTooTokenCreate {
	oattc.mutation.SetClaimsEmail(s)
	return oattc
}

// SetClaimsEmailVerified sets the "claims_email_verified" field.
func (oattc *OhAuthTooTokenCreate) SetClaimsEmailVerified(b bool) *OhAuthTooTokenCreate {
	oattc.mutation.SetClaimsEmailVerified(b)
	return oattc
}

// SetClaimsGroups sets the "claims_groups" field.
func (oattc *OhAuthTooTokenCreate) SetClaimsGroups(s []string) *OhAuthTooTokenCreate {
	oattc.mutation.SetClaimsGroups(s)
	return oattc
}

// SetClaimsPreferredUsername sets the "claims_preferred_username" field.
func (oattc *OhAuthTooTokenCreate) SetClaimsPreferredUsername(s string) *OhAuthTooTokenCreate {
	oattc.mutation.SetClaimsPreferredUsername(s)
	return oattc
}

// SetConnectorID sets the "connector_id" field.
func (oattc *OhAuthTooTokenCreate) SetConnectorID(s string) *OhAuthTooTokenCreate {
	oattc.mutation.SetConnectorID(s)
	return oattc
}

// SetConnectorData sets the "connector_data" field.
func (oattc *OhAuthTooTokenCreate) SetConnectorData(s []string) *OhAuthTooTokenCreate {
	oattc.mutation.SetConnectorData(s)
	return oattc
}

// SetLastUsed sets the "last_used" field.
func (oattc *OhAuthTooTokenCreate) SetLastUsed(t time.Time) *OhAuthTooTokenCreate {
	oattc.mutation.SetLastUsed(t)
	return oattc
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (oattc *OhAuthTooTokenCreate) SetNillableLastUsed(t *time.Time) *OhAuthTooTokenCreate {
	if t != nil {
		oattc.SetLastUsed(*t)
	}
	return oattc
}

// SetID sets the "id" field.
func (oattc *OhAuthTooTokenCreate) SetID(s string) *OhAuthTooTokenCreate {
	oattc.mutation.SetID(s)
	return oattc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (oattc *OhAuthTooTokenCreate) SetNillableID(s *string) *OhAuthTooTokenCreate {
	if s != nil {
		oattc.SetID(*s)
	}
	return oattc
}

// AddIntegrationIDs adds the "integration" edge to the Integration entity by IDs.
func (oattc *OhAuthTooTokenCreate) AddIntegrationIDs(ids ...string) *OhAuthTooTokenCreate {
	oattc.mutation.AddIntegrationIDs(ids...)
	return oattc
}

// AddIntegration adds the "integration" edges to the Integration entity.
func (oattc *OhAuthTooTokenCreate) AddIntegration(i ...*Integration) *OhAuthTooTokenCreate {
	ids := make([]string, len(i))
	for j := range i {
		ids[j] = i[j].ID
	}
	return oattc.AddIntegrationIDs(ids...)
}

// AddEventIDs adds the "events" edge to the Event entity by IDs.
func (oattc *OhAuthTooTokenCreate) AddEventIDs(ids ...string) *OhAuthTooTokenCreate {
	oattc.mutation.AddEventIDs(ids...)
	return oattc
}

// AddEvents adds the "events" edges to the Event entity.
func (oattc *OhAuthTooTokenCreate) AddEvents(e ...*Event) *OhAuthTooTokenCreate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return oattc.AddEventIDs(ids...)
}

// Mutation returns the OhAuthTooTokenMutation object of the builder.
func (oattc *OhAuthTooTokenCreate) Mutation() *OhAuthTooTokenMutation {
	return oattc.mutation
}

// Save creates the OhAuthTooToken in the database.
func (oattc *OhAuthTooTokenCreate) Save(ctx context.Context) (*OhAuthTooToken, error) {
	oattc.defaults()
	return withHooks(ctx, oattc.sqlSave, oattc.mutation, oattc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oattc *OhAuthTooTokenCreate) SaveX(ctx context.Context) *OhAuthTooToken {
	v, err := oattc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oattc *OhAuthTooTokenCreate) Exec(ctx context.Context) error {
	_, err := oattc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oattc *OhAuthTooTokenCreate) ExecX(ctx context.Context) {
	if err := oattc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oattc *OhAuthTooTokenCreate) defaults() {
	if _, ok := oattc.mutation.LastUsed(); !ok {
		v := ohauthtootoken.DefaultLastUsed()
		oattc.mutation.SetLastUsed(v)
	}
	if _, ok := oattc.mutation.ID(); !ok {
		v := ohauthtootoken.DefaultID()
		oattc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oattc *OhAuthTooTokenCreate) check() error {
	if _, ok := oattc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`generated: missing required field "OhAuthTooToken.client_id"`)}
	}
	if v, ok := oattc.mutation.ClientID(); ok {
		if err := ohauthtootoken.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooToken.client_id": %w`, err)}
		}
	}
	if _, ok := oattc.mutation.Nonce(); !ok {
		return &ValidationError{Name: "nonce", err: errors.New(`generated: missing required field "OhAuthTooToken.nonce"`)}
	}
	if v, ok := oattc.mutation.Nonce(); ok {
		if err := ohauthtootoken.NonceValidator(v); err != nil {
			return &ValidationError{Name: "nonce", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooToken.nonce": %w`, err)}
		}
	}
	if _, ok := oattc.mutation.ClaimsUserID(); !ok {
		return &ValidationError{Name: "claims_user_id", err: errors.New(`generated: missing required field "OhAuthTooToken.claims_user_id"`)}
	}
	if v, ok := oattc.mutation.ClaimsUserID(); ok {
		if err := ohauthtootoken.ClaimsUserIDValidator(v); err != nil {
			return &ValidationError{Name: "claims_user_id", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooToken.claims_user_id": %w`, err)}
		}
	}
	if _, ok := oattc.mutation.ClaimsUsername(); !ok {
		return &ValidationError{Name: "claims_username", err: errors.New(`generated: missing required field "OhAuthTooToken.claims_username"`)}
	}
	if v, ok := oattc.mutation.ClaimsUsername(); ok {
		if err := ohauthtootoken.ClaimsUsernameValidator(v); err != nil {
			return &ValidationError{Name: "claims_username", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooToken.claims_username": %w`, err)}
		}
	}
	if _, ok := oattc.mutation.ClaimsEmail(); !ok {
		return &ValidationError{Name: "claims_email", err: errors.New(`generated: missing required field "OhAuthTooToken.claims_email"`)}
	}
	if v, ok := oattc.mutation.ClaimsEmail(); ok {
		if err := ohauthtootoken.ClaimsEmailValidator(v); err != nil {
			return &ValidationError{Name: "claims_email", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooToken.claims_email": %w`, err)}
		}
	}
	if _, ok := oattc.mutation.ClaimsEmailVerified(); !ok {
		return &ValidationError{Name: "claims_email_verified", err: errors.New(`generated: missing required field "OhAuthTooToken.claims_email_verified"`)}
	}
	if _, ok := oattc.mutation.ClaimsPreferredUsername(); !ok {
		return &ValidationError{Name: "claims_preferred_username", err: errors.New(`generated: missing required field "OhAuthTooToken.claims_preferred_username"`)}
	}
	if _, ok := oattc.mutation.ConnectorID(); !ok {
		return &ValidationError{Name: "connector_id", err: errors.New(`generated: missing required field "OhAuthTooToken.connector_id"`)}
	}
	if v, ok := oattc.mutation.ConnectorID(); ok {
		if err := ohauthtootoken.ConnectorIDValidator(v); err != nil {
			return &ValidationError{Name: "connector_id", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooToken.connector_id": %w`, err)}
		}
	}
	if _, ok := oattc.mutation.LastUsed(); !ok {
		return &ValidationError{Name: "last_used", err: errors.New(`generated: missing required field "OhAuthTooToken.last_used"`)}
	}
	return nil
}

func (oattc *OhAuthTooTokenCreate) sqlSave(ctx context.Context) (*OhAuthTooToken, error) {
	if err := oattc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oattc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oattc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OhAuthTooToken.ID type: %T", _spec.ID.Value)
		}
	}
	oattc.mutation.id = &_node.ID
	oattc.mutation.done = true
	return _node, nil
}

func (oattc *OhAuthTooTokenCreate) createSpec() (*OhAuthTooToken, *sqlgraph.CreateSpec) {
	var (
		_node = &OhAuthTooToken{config: oattc.config}
		_spec = sqlgraph.NewCreateSpec(ohauthtootoken.Table, sqlgraph.NewFieldSpec(ohauthtootoken.FieldID, field.TypeString))
	)
	_spec.Schema = oattc.schemaConfig.OhAuthTooToken
	if id, ok := oattc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := oattc.mutation.ClientID(); ok {
		_spec.SetField(ohauthtootoken.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := oattc.mutation.Scopes(); ok {
		_spec.SetField(ohauthtootoken.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	if value, ok := oattc.mutation.Nonce(); ok {
		_spec.SetField(ohauthtootoken.FieldNonce, field.TypeString, value)
		_node.Nonce = value
	}
	if value, ok := oattc.mutation.ClaimsUserID(); ok {
		_spec.SetField(ohauthtootoken.FieldClaimsUserID, field.TypeString, value)
		_node.ClaimsUserID = value
	}
	if value, ok := oattc.mutation.ClaimsUsername(); ok {
		_spec.SetField(ohauthtootoken.FieldClaimsUsername, field.TypeString, value)
		_node.ClaimsUsername = value
	}
	if value, ok := oattc.mutation.ClaimsEmail(); ok {
		_spec.SetField(ohauthtootoken.FieldClaimsEmail, field.TypeString, value)
		_node.ClaimsEmail = value
	}
	if value, ok := oattc.mutation.ClaimsEmailVerified(); ok {
		_spec.SetField(ohauthtootoken.FieldClaimsEmailVerified, field.TypeBool, value)
		_node.ClaimsEmailVerified = value
	}
	if value, ok := oattc.mutation.ClaimsGroups(); ok {
		_spec.SetField(ohauthtootoken.FieldClaimsGroups, field.TypeJSON, value)
		_node.ClaimsGroups = value
	}
	if value, ok := oattc.mutation.ClaimsPreferredUsername(); ok {
		_spec.SetField(ohauthtootoken.FieldClaimsPreferredUsername, field.TypeString, value)
		_node.ClaimsPreferredUsername = value
	}
	if value, ok := oattc.mutation.ConnectorID(); ok {
		_spec.SetField(ohauthtootoken.FieldConnectorID, field.TypeString, value)
		_node.ConnectorID = value
	}
	if value, ok := oattc.mutation.ConnectorData(); ok {
		_spec.SetField(ohauthtootoken.FieldConnectorData, field.TypeJSON, value)
		_node.ConnectorData = value
	}
	if value, ok := oattc.mutation.LastUsed(); ok {
		_spec.SetField(ohauthtootoken.FieldLastUsed, field.TypeTime, value)
		_node.LastUsed = value
	}
	if nodes := oattc.mutation.IntegrationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   ohauthtootoken.IntegrationTable,
			Columns: ohauthtootoken.IntegrationPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(integration.FieldID, field.TypeString),
			},
		}
		edge.Schema = oattc.schemaConfig.IntegrationOauth2tokens
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := oattc.mutation.EventsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   ohauthtootoken.EventsTable,
			Columns: ohauthtootoken.EventsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(event.FieldID, field.TypeString),
			},
		}
		edge.Schema = oattc.schemaConfig.OhAuthTooTokenEvents
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OhAuthTooTokenCreateBulk is the builder for creating many OhAuthTooToken entities in bulk.
type OhAuthTooTokenCreateBulk struct {
	config
	err      error
	builders []*OhAuthTooTokenCreate
}

// Save creates the OhAuthTooToken entities in the database.
func (oattcb *OhAuthTooTokenCreateBulk) Save(ctx context.Context) ([]*OhAuthTooToken, error) {
	if oattcb.err != nil {
		return nil, oattcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oattcb.builders))
	nodes := make([]*OhAuthTooToken, len(oattcb.builders))
	mutators := make([]Mutator, len(oattcb.builders))
	for i := range oattcb.builders {
		func(i int, root context.Context) {
			builder := oattcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OhAuthTooTokenMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oattcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oattcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oattcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oattcb *OhAuthTooTokenCreateBulk) SaveX(ctx context.Context) []*OhAuthTooToken {
	v, err := oattcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oattcb *OhAuthTooTokenCreateBulk) Exec(ctx context.Context) error {
	_, err := oattcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oattcb *OhAuthTooTokenCreateBulk) ExecX(ctx context.Context) {
	if err := oattcb.Exec(ctx); err != nil {
		panic(err)
	}
}
