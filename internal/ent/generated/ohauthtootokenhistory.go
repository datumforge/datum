// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datumforge/datum/internal/ent/generated/ohauthtootokenhistory"
	"github.com/flume/enthistory"
)

// OhAuthTooTokenHistory is the model entity for the OhAuthTooTokenHistory schema.
type OhAuthTooTokenHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation enthistory.OpType `json:"operation,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// ClientID holds the value of the "client_id" field.
	ClientID string `json:"client_id,omitempty"`
	// Scopes holds the value of the "scopes" field.
	Scopes []string `json:"scopes,omitempty"`
	// Nonce holds the value of the "nonce" field.
	Nonce string `json:"nonce,omitempty"`
	// ClaimsUserID holds the value of the "claims_user_id" field.
	ClaimsUserID string `json:"claims_user_id,omitempty"`
	// ClaimsUsername holds the value of the "claims_username" field.
	ClaimsUsername string `json:"claims_username,omitempty"`
	// ClaimsEmail holds the value of the "claims_email" field.
	ClaimsEmail string `json:"claims_email,omitempty"`
	// ClaimsEmailVerified holds the value of the "claims_email_verified" field.
	ClaimsEmailVerified bool `json:"claims_email_verified,omitempty"`
	// ClaimsGroups holds the value of the "claims_groups" field.
	ClaimsGroups []string `json:"claims_groups,omitempty"`
	// ClaimsPreferredUsername holds the value of the "claims_preferred_username" field.
	ClaimsPreferredUsername string `json:"claims_preferred_username,omitempty"`
	// ConnectorID holds the value of the "connector_id" field.
	ConnectorID string `json:"connector_id,omitempty"`
	// ConnectorData holds the value of the "connector_data" field.
	ConnectorData []string `json:"connector_data,omitempty"`
	// LastUsed holds the value of the "last_used" field.
	LastUsed     time.Time `json:"last_used,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OhAuthTooTokenHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case ohauthtootokenhistory.FieldScopes, ohauthtootokenhistory.FieldClaimsGroups, ohauthtootokenhistory.FieldConnectorData:
			values[i] = new([]byte)
		case ohauthtootokenhistory.FieldClaimsEmailVerified:
			values[i] = new(sql.NullBool)
		case ohauthtootokenhistory.FieldID, ohauthtootokenhistory.FieldOperation, ohauthtootokenhistory.FieldRef, ohauthtootokenhistory.FieldClientID, ohauthtootokenhistory.FieldNonce, ohauthtootokenhistory.FieldClaimsUserID, ohauthtootokenhistory.FieldClaimsUsername, ohauthtootokenhistory.FieldClaimsEmail, ohauthtootokenhistory.FieldClaimsPreferredUsername, ohauthtootokenhistory.FieldConnectorID:
			values[i] = new(sql.NullString)
		case ohauthtootokenhistory.FieldHistoryTime, ohauthtootokenhistory.FieldLastUsed:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OhAuthTooTokenHistory fields.
func (oatth *OhAuthTooTokenHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case ohauthtootokenhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				oatth.ID = value.String
			}
		case ohauthtootokenhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				oatth.HistoryTime = value.Time
			}
		case ohauthtootokenhistory.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				oatth.Operation = enthistory.OpType(value.String)
			}
		case ohauthtootokenhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				oatth.Ref = value.String
			}
		case ohauthtootokenhistory.FieldClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field client_id", values[i])
			} else if value.Valid {
				oatth.ClientID = value.String
			}
		case ohauthtootokenhistory.FieldScopes:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field scopes", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oatth.Scopes); err != nil {
					return fmt.Errorf("unmarshal field scopes: %w", err)
				}
			}
		case ohauthtootokenhistory.FieldNonce:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field nonce", values[i])
			} else if value.Valid {
				oatth.Nonce = value.String
			}
		case ohauthtootokenhistory.FieldClaimsUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field claims_user_id", values[i])
			} else if value.Valid {
				oatth.ClaimsUserID = value.String
			}
		case ohauthtootokenhistory.FieldClaimsUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field claims_username", values[i])
			} else if value.Valid {
				oatth.ClaimsUsername = value.String
			}
		case ohauthtootokenhistory.FieldClaimsEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field claims_email", values[i])
			} else if value.Valid {
				oatth.ClaimsEmail = value.String
			}
		case ohauthtootokenhistory.FieldClaimsEmailVerified:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field claims_email_verified", values[i])
			} else if value.Valid {
				oatth.ClaimsEmailVerified = value.Bool
			}
		case ohauthtootokenhistory.FieldClaimsGroups:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field claims_groups", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oatth.ClaimsGroups); err != nil {
					return fmt.Errorf("unmarshal field claims_groups: %w", err)
				}
			}
		case ohauthtootokenhistory.FieldClaimsPreferredUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field claims_preferred_username", values[i])
			} else if value.Valid {
				oatth.ClaimsPreferredUsername = value.String
			}
		case ohauthtootokenhistory.FieldConnectorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field connector_id", values[i])
			} else if value.Valid {
				oatth.ConnectorID = value.String
			}
		case ohauthtootokenhistory.FieldConnectorData:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field connector_data", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &oatth.ConnectorData); err != nil {
					return fmt.Errorf("unmarshal field connector_data: %w", err)
				}
			}
		case ohauthtootokenhistory.FieldLastUsed:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used", values[i])
			} else if value.Valid {
				oatth.LastUsed = value.Time
			}
		default:
			oatth.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OhAuthTooTokenHistory.
// This includes values selected through modifiers, order, etc.
func (oatth *OhAuthTooTokenHistory) Value(name string) (ent.Value, error) {
	return oatth.selectValues.Get(name)
}

// Update returns a builder for updating this OhAuthTooTokenHistory.
// Note that you need to call OhAuthTooTokenHistory.Unwrap() before calling this method if this OhAuthTooTokenHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (oatth *OhAuthTooTokenHistory) Update() *OhAuthTooTokenHistoryUpdateOne {
	return NewOhAuthTooTokenHistoryClient(oatth.config).UpdateOne(oatth)
}

// Unwrap unwraps the OhAuthTooTokenHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (oatth *OhAuthTooTokenHistory) Unwrap() *OhAuthTooTokenHistory {
	_tx, ok := oatth.config.driver.(*txDriver)
	if !ok {
		panic("generated: OhAuthTooTokenHistory is not a transactional entity")
	}
	oatth.config.driver = _tx.drv
	return oatth
}

// String implements the fmt.Stringer.
func (oatth *OhAuthTooTokenHistory) String() string {
	var builder strings.Builder
	builder.WriteString("OhAuthTooTokenHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", oatth.ID))
	builder.WriteString("history_time=")
	builder.WriteString(oatth.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", oatth.Operation))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(oatth.Ref)
	builder.WriteString(", ")
	builder.WriteString("client_id=")
	builder.WriteString(oatth.ClientID)
	builder.WriteString(", ")
	builder.WriteString("scopes=")
	builder.WriteString(fmt.Sprintf("%v", oatth.Scopes))
	builder.WriteString(", ")
	builder.WriteString("nonce=")
	builder.WriteString(oatth.Nonce)
	builder.WriteString(", ")
	builder.WriteString("claims_user_id=")
	builder.WriteString(oatth.ClaimsUserID)
	builder.WriteString(", ")
	builder.WriteString("claims_username=")
	builder.WriteString(oatth.ClaimsUsername)
	builder.WriteString(", ")
	builder.WriteString("claims_email=")
	builder.WriteString(oatth.ClaimsEmail)
	builder.WriteString(", ")
	builder.WriteString("claims_email_verified=")
	builder.WriteString(fmt.Sprintf("%v", oatth.ClaimsEmailVerified))
	builder.WriteString(", ")
	builder.WriteString("claims_groups=")
	builder.WriteString(fmt.Sprintf("%v", oatth.ClaimsGroups))
	builder.WriteString(", ")
	builder.WriteString("claims_preferred_username=")
	builder.WriteString(oatth.ClaimsPreferredUsername)
	builder.WriteString(", ")
	builder.WriteString("connector_id=")
	builder.WriteString(oatth.ConnectorID)
	builder.WriteString(", ")
	builder.WriteString("connector_data=")
	builder.WriteString(fmt.Sprintf("%v", oatth.ConnectorData))
	builder.WriteString(", ")
	builder.WriteString("last_used=")
	builder.WriteString(oatth.LastUsed.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// OhAuthTooTokenHistories is a parsable slice of OhAuthTooTokenHistory.
type OhAuthTooTokenHistories []*OhAuthTooTokenHistory
