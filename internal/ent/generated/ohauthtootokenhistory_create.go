// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/ohauthtootokenhistory"
	"github.com/flume/enthistory"
)

// OhAuthTooTokenHistoryCreate is the builder for creating a OhAuthTooTokenHistory entity.
type OhAuthTooTokenHistoryCreate struct {
	config
	mutation *OhAuthTooTokenHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetHistoryTime(t time.Time) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetHistoryTime(t)
	return oatthc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (oatthc *OhAuthTooTokenHistoryCreate) SetNillableHistoryTime(t *time.Time) *OhAuthTooTokenHistoryCreate {
	if t != nil {
		oatthc.SetHistoryTime(*t)
	}
	return oatthc
}

// SetOperation sets the "operation" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetOperation(et enthistory.OpType) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetOperation(et)
	return oatthc
}

// SetRef sets the "ref" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetRef(s string) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetRef(s)
	return oatthc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (oatthc *OhAuthTooTokenHistoryCreate) SetNillableRef(s *string) *OhAuthTooTokenHistoryCreate {
	if s != nil {
		oatthc.SetRef(*s)
	}
	return oatthc
}

// SetClientID sets the "client_id" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetClientID(s string) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetClientID(s)
	return oatthc
}

// SetScopes sets the "scopes" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetScopes(s []string) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetScopes(s)
	return oatthc
}

// SetNonce sets the "nonce" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetNonce(s string) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetNonce(s)
	return oatthc
}

// SetClaimsUserID sets the "claims_user_id" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetClaimsUserID(s string) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetClaimsUserID(s)
	return oatthc
}

// SetClaimsUsername sets the "claims_username" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetClaimsUsername(s string) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetClaimsUsername(s)
	return oatthc
}

// SetClaimsEmail sets the "claims_email" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetClaimsEmail(s string) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetClaimsEmail(s)
	return oatthc
}

// SetClaimsEmailVerified sets the "claims_email_verified" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetClaimsEmailVerified(b bool) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetClaimsEmailVerified(b)
	return oatthc
}

// SetClaimsGroups sets the "claims_groups" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetClaimsGroups(s []string) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetClaimsGroups(s)
	return oatthc
}

// SetClaimsPreferredUsername sets the "claims_preferred_username" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetClaimsPreferredUsername(s string) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetClaimsPreferredUsername(s)
	return oatthc
}

// SetConnectorID sets the "connector_id" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetConnectorID(s string) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetConnectorID(s)
	return oatthc
}

// SetConnectorData sets the "connector_data" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetConnectorData(s []string) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetConnectorData(s)
	return oatthc
}

// SetLastUsed sets the "last_used" field.
func (oatthc *OhAuthTooTokenHistoryCreate) SetLastUsed(t time.Time) *OhAuthTooTokenHistoryCreate {
	oatthc.mutation.SetLastUsed(t)
	return oatthc
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (oatthc *OhAuthTooTokenHistoryCreate) SetNillableLastUsed(t *time.Time) *OhAuthTooTokenHistoryCreate {
	if t != nil {
		oatthc.SetLastUsed(*t)
	}
	return oatthc
}

// Mutation returns the OhAuthTooTokenHistoryMutation object of the builder.
func (oatthc *OhAuthTooTokenHistoryCreate) Mutation() *OhAuthTooTokenHistoryMutation {
	return oatthc.mutation
}

// Save creates the OhAuthTooTokenHistory in the database.
func (oatthc *OhAuthTooTokenHistoryCreate) Save(ctx context.Context) (*OhAuthTooTokenHistory, error) {
	oatthc.defaults()
	return withHooks(ctx, oatthc.sqlSave, oatthc.mutation, oatthc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (oatthc *OhAuthTooTokenHistoryCreate) SaveX(ctx context.Context) *OhAuthTooTokenHistory {
	v, err := oatthc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oatthc *OhAuthTooTokenHistoryCreate) Exec(ctx context.Context) error {
	_, err := oatthc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oatthc *OhAuthTooTokenHistoryCreate) ExecX(ctx context.Context) {
	if err := oatthc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (oatthc *OhAuthTooTokenHistoryCreate) defaults() {
	if _, ok := oatthc.mutation.HistoryTime(); !ok {
		v := ohauthtootokenhistory.DefaultHistoryTime()
		oatthc.mutation.SetHistoryTime(v)
	}
	if _, ok := oatthc.mutation.LastUsed(); !ok {
		v := ohauthtootokenhistory.DefaultLastUsed()
		oatthc.mutation.SetLastUsed(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oatthc *OhAuthTooTokenHistoryCreate) check() error {
	if _, ok := oatthc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "OhAuthTooTokenHistory.history_time"`)}
	}
	if _, ok := oatthc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "OhAuthTooTokenHistory.operation"`)}
	}
	if v, ok := oatthc.mutation.Operation(); ok {
		if err := ohauthtootokenhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.operation": %w`, err)}
		}
	}
	if _, ok := oatthc.mutation.ClientID(); !ok {
		return &ValidationError{Name: "client_id", err: errors.New(`generated: missing required field "OhAuthTooTokenHistory.client_id"`)}
	}
	if v, ok := oatthc.mutation.ClientID(); ok {
		if err := ohauthtootokenhistory.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.client_id": %w`, err)}
		}
	}
	if _, ok := oatthc.mutation.Nonce(); !ok {
		return &ValidationError{Name: "nonce", err: errors.New(`generated: missing required field "OhAuthTooTokenHistory.nonce"`)}
	}
	if v, ok := oatthc.mutation.Nonce(); ok {
		if err := ohauthtootokenhistory.NonceValidator(v); err != nil {
			return &ValidationError{Name: "nonce", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.nonce": %w`, err)}
		}
	}
	if _, ok := oatthc.mutation.ClaimsUserID(); !ok {
		return &ValidationError{Name: "claims_user_id", err: errors.New(`generated: missing required field "OhAuthTooTokenHistory.claims_user_id"`)}
	}
	if v, ok := oatthc.mutation.ClaimsUserID(); ok {
		if err := ohauthtootokenhistory.ClaimsUserIDValidator(v); err != nil {
			return &ValidationError{Name: "claims_user_id", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.claims_user_id": %w`, err)}
		}
	}
	if _, ok := oatthc.mutation.ClaimsUsername(); !ok {
		return &ValidationError{Name: "claims_username", err: errors.New(`generated: missing required field "OhAuthTooTokenHistory.claims_username"`)}
	}
	if v, ok := oatthc.mutation.ClaimsUsername(); ok {
		if err := ohauthtootokenhistory.ClaimsUsernameValidator(v); err != nil {
			return &ValidationError{Name: "claims_username", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.claims_username": %w`, err)}
		}
	}
	if _, ok := oatthc.mutation.ClaimsEmail(); !ok {
		return &ValidationError{Name: "claims_email", err: errors.New(`generated: missing required field "OhAuthTooTokenHistory.claims_email"`)}
	}
	if v, ok := oatthc.mutation.ClaimsEmail(); ok {
		if err := ohauthtootokenhistory.ClaimsEmailValidator(v); err != nil {
			return &ValidationError{Name: "claims_email", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.claims_email": %w`, err)}
		}
	}
	if _, ok := oatthc.mutation.ClaimsEmailVerified(); !ok {
		return &ValidationError{Name: "claims_email_verified", err: errors.New(`generated: missing required field "OhAuthTooTokenHistory.claims_email_verified"`)}
	}
	if _, ok := oatthc.mutation.ClaimsPreferredUsername(); !ok {
		return &ValidationError{Name: "claims_preferred_username", err: errors.New(`generated: missing required field "OhAuthTooTokenHistory.claims_preferred_username"`)}
	}
	if _, ok := oatthc.mutation.ConnectorID(); !ok {
		return &ValidationError{Name: "connector_id", err: errors.New(`generated: missing required field "OhAuthTooTokenHistory.connector_id"`)}
	}
	if v, ok := oatthc.mutation.ConnectorID(); ok {
		if err := ohauthtootokenhistory.ConnectorIDValidator(v); err != nil {
			return &ValidationError{Name: "connector_id", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.connector_id": %w`, err)}
		}
	}
	if _, ok := oatthc.mutation.LastUsed(); !ok {
		return &ValidationError{Name: "last_used", err: errors.New(`generated: missing required field "OhAuthTooTokenHistory.last_used"`)}
	}
	return nil
}

func (oatthc *OhAuthTooTokenHistoryCreate) sqlSave(ctx context.Context) (*OhAuthTooTokenHistory, error) {
	if err := oatthc.check(); err != nil {
		return nil, err
	}
	_node, _spec := oatthc.createSpec()
	if err := sqlgraph.CreateNode(ctx, oatthc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OhAuthTooTokenHistory.ID type: %T", _spec.ID.Value)
		}
	}
	oatthc.mutation.id = &_node.ID
	oatthc.mutation.done = true
	return _node, nil
}

func (oatthc *OhAuthTooTokenHistoryCreate) createSpec() (*OhAuthTooTokenHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &OhAuthTooTokenHistory{config: oatthc.config}
		_spec = sqlgraph.NewCreateSpec(ohauthtootokenhistory.Table, sqlgraph.NewFieldSpec(ohauthtootokenhistory.FieldID, field.TypeString))
	)
	_spec.Schema = oatthc.schemaConfig.OhAuthTooTokenHistory
	if value, ok := oatthc.mutation.HistoryTime(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := oatthc.mutation.Operation(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := oatthc.mutation.Ref(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := oatthc.mutation.ClientID(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClientID, field.TypeString, value)
		_node.ClientID = value
	}
	if value, ok := oatthc.mutation.Scopes(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldScopes, field.TypeJSON, value)
		_node.Scopes = value
	}
	if value, ok := oatthc.mutation.Nonce(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldNonce, field.TypeString, value)
		_node.Nonce = value
	}
	if value, ok := oatthc.mutation.ClaimsUserID(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsUserID, field.TypeString, value)
		_node.ClaimsUserID = value
	}
	if value, ok := oatthc.mutation.ClaimsUsername(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsUsername, field.TypeString, value)
		_node.ClaimsUsername = value
	}
	if value, ok := oatthc.mutation.ClaimsEmail(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsEmail, field.TypeString, value)
		_node.ClaimsEmail = value
	}
	if value, ok := oatthc.mutation.ClaimsEmailVerified(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsEmailVerified, field.TypeBool, value)
		_node.ClaimsEmailVerified = value
	}
	if value, ok := oatthc.mutation.ClaimsGroups(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsGroups, field.TypeJSON, value)
		_node.ClaimsGroups = value
	}
	if value, ok := oatthc.mutation.ClaimsPreferredUsername(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsPreferredUsername, field.TypeString, value)
		_node.ClaimsPreferredUsername = value
	}
	if value, ok := oatthc.mutation.ConnectorID(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldConnectorID, field.TypeString, value)
		_node.ConnectorID = value
	}
	if value, ok := oatthc.mutation.ConnectorData(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldConnectorData, field.TypeJSON, value)
		_node.ConnectorData = value
	}
	if value, ok := oatthc.mutation.LastUsed(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldLastUsed, field.TypeTime, value)
		_node.LastUsed = value
	}
	return _node, _spec
}

// OhAuthTooTokenHistoryCreateBulk is the builder for creating many OhAuthTooTokenHistory entities in bulk.
type OhAuthTooTokenHistoryCreateBulk struct {
	config
	err      error
	builders []*OhAuthTooTokenHistoryCreate
}

// Save creates the OhAuthTooTokenHistory entities in the database.
func (oatthcb *OhAuthTooTokenHistoryCreateBulk) Save(ctx context.Context) ([]*OhAuthTooTokenHistory, error) {
	if oatthcb.err != nil {
		return nil, oatthcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oatthcb.builders))
	nodes := make([]*OhAuthTooTokenHistory, len(oatthcb.builders))
	mutators := make([]Mutator, len(oatthcb.builders))
	for i := range oatthcb.builders {
		func(i int, root context.Context) {
			builder := oatthcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OhAuthTooTokenHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oatthcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oatthcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oatthcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oatthcb *OhAuthTooTokenHistoryCreateBulk) SaveX(ctx context.Context) []*OhAuthTooTokenHistory {
	v, err := oatthcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oatthcb *OhAuthTooTokenHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := oatthcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oatthcb *OhAuthTooTokenHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := oatthcb.Exec(ctx); err != nil {
		panic(err)
	}
}
