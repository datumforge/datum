// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/ohauthtootokenhistory"
	"github.com/datumforge/datum/internal/ent/generated/predicate"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// OhAuthTooTokenHistoryUpdate is the builder for updating OhAuthTooTokenHistory entities.
type OhAuthTooTokenHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *OhAuthTooTokenHistoryMutation
}

// Where appends a list predicates to the OhAuthTooTokenHistoryUpdate builder.
func (oatthu *OhAuthTooTokenHistoryUpdate) Where(ps ...predicate.OhAuthTooTokenHistory) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.Where(ps...)
	return oatthu
}

// SetClientID sets the "client_id" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetClientID(s string) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.SetClientID(s)
	return oatthu
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetNillableClientID(s *string) *OhAuthTooTokenHistoryUpdate {
	if s != nil {
		oatthu.SetClientID(*s)
	}
	return oatthu
}

// SetScopes sets the "scopes" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetScopes(s []string) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.SetScopes(s)
	return oatthu
}

// AppendScopes appends s to the "scopes" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) AppendScopes(s []string) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.AppendScopes(s)
	return oatthu
}

// ClearScopes clears the value of the "scopes" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) ClearScopes() *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.ClearScopes()
	return oatthu
}

// SetNonce sets the "nonce" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetNonce(s string) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.SetNonce(s)
	return oatthu
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetNillableNonce(s *string) *OhAuthTooTokenHistoryUpdate {
	if s != nil {
		oatthu.SetNonce(*s)
	}
	return oatthu
}

// SetClaimsUserID sets the "claims_user_id" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetClaimsUserID(s string) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.SetClaimsUserID(s)
	return oatthu
}

// SetNillableClaimsUserID sets the "claims_user_id" field if the given value is not nil.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetNillableClaimsUserID(s *string) *OhAuthTooTokenHistoryUpdate {
	if s != nil {
		oatthu.SetClaimsUserID(*s)
	}
	return oatthu
}

// SetClaimsUsername sets the "claims_username" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetClaimsUsername(s string) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.SetClaimsUsername(s)
	return oatthu
}

// SetNillableClaimsUsername sets the "claims_username" field if the given value is not nil.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetNillableClaimsUsername(s *string) *OhAuthTooTokenHistoryUpdate {
	if s != nil {
		oatthu.SetClaimsUsername(*s)
	}
	return oatthu
}

// SetClaimsEmail sets the "claims_email" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetClaimsEmail(s string) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.SetClaimsEmail(s)
	return oatthu
}

// SetNillableClaimsEmail sets the "claims_email" field if the given value is not nil.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetNillableClaimsEmail(s *string) *OhAuthTooTokenHistoryUpdate {
	if s != nil {
		oatthu.SetClaimsEmail(*s)
	}
	return oatthu
}

// SetClaimsEmailVerified sets the "claims_email_verified" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetClaimsEmailVerified(b bool) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.SetClaimsEmailVerified(b)
	return oatthu
}

// SetNillableClaimsEmailVerified sets the "claims_email_verified" field if the given value is not nil.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetNillableClaimsEmailVerified(b *bool) *OhAuthTooTokenHistoryUpdate {
	if b != nil {
		oatthu.SetClaimsEmailVerified(*b)
	}
	return oatthu
}

// SetClaimsGroups sets the "claims_groups" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetClaimsGroups(s []string) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.SetClaimsGroups(s)
	return oatthu
}

// AppendClaimsGroups appends s to the "claims_groups" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) AppendClaimsGroups(s []string) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.AppendClaimsGroups(s)
	return oatthu
}

// ClearClaimsGroups clears the value of the "claims_groups" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) ClearClaimsGroups() *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.ClearClaimsGroups()
	return oatthu
}

// SetClaimsPreferredUsername sets the "claims_preferred_username" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetClaimsPreferredUsername(s string) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.SetClaimsPreferredUsername(s)
	return oatthu
}

// SetNillableClaimsPreferredUsername sets the "claims_preferred_username" field if the given value is not nil.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetNillableClaimsPreferredUsername(s *string) *OhAuthTooTokenHistoryUpdate {
	if s != nil {
		oatthu.SetClaimsPreferredUsername(*s)
	}
	return oatthu
}

// SetConnectorID sets the "connector_id" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetConnectorID(s string) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.SetConnectorID(s)
	return oatthu
}

// SetNillableConnectorID sets the "connector_id" field if the given value is not nil.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetNillableConnectorID(s *string) *OhAuthTooTokenHistoryUpdate {
	if s != nil {
		oatthu.SetConnectorID(*s)
	}
	return oatthu
}

// SetConnectorData sets the "connector_data" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetConnectorData(s []string) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.SetConnectorData(s)
	return oatthu
}

// AppendConnectorData appends s to the "connector_data" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) AppendConnectorData(s []string) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.AppendConnectorData(s)
	return oatthu
}

// ClearConnectorData clears the value of the "connector_data" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) ClearConnectorData() *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.ClearConnectorData()
	return oatthu
}

// SetLastUsed sets the "last_used" field.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetLastUsed(t time.Time) *OhAuthTooTokenHistoryUpdate {
	oatthu.mutation.SetLastUsed(t)
	return oatthu
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (oatthu *OhAuthTooTokenHistoryUpdate) SetNillableLastUsed(t *time.Time) *OhAuthTooTokenHistoryUpdate {
	if t != nil {
		oatthu.SetLastUsed(*t)
	}
	return oatthu
}

// Mutation returns the OhAuthTooTokenHistoryMutation object of the builder.
func (oatthu *OhAuthTooTokenHistoryUpdate) Mutation() *OhAuthTooTokenHistoryMutation {
	return oatthu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (oatthu *OhAuthTooTokenHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, oatthu.sqlSave, oatthu.mutation, oatthu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oatthu *OhAuthTooTokenHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := oatthu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (oatthu *OhAuthTooTokenHistoryUpdate) Exec(ctx context.Context) error {
	_, err := oatthu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oatthu *OhAuthTooTokenHistoryUpdate) ExecX(ctx context.Context) {
	if err := oatthu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oatthu *OhAuthTooTokenHistoryUpdate) check() error {
	if v, ok := oatthu.mutation.ClientID(); ok {
		if err := ohauthtootokenhistory.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.client_id": %w`, err)}
		}
	}
	if v, ok := oatthu.mutation.Nonce(); ok {
		if err := ohauthtootokenhistory.NonceValidator(v); err != nil {
			return &ValidationError{Name: "nonce", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.nonce": %w`, err)}
		}
	}
	if v, ok := oatthu.mutation.ClaimsUserID(); ok {
		if err := ohauthtootokenhistory.ClaimsUserIDValidator(v); err != nil {
			return &ValidationError{Name: "claims_user_id", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.claims_user_id": %w`, err)}
		}
	}
	if v, ok := oatthu.mutation.ClaimsUsername(); ok {
		if err := ohauthtootokenhistory.ClaimsUsernameValidator(v); err != nil {
			return &ValidationError{Name: "claims_username", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.claims_username": %w`, err)}
		}
	}
	if v, ok := oatthu.mutation.ClaimsEmail(); ok {
		if err := ohauthtootokenhistory.ClaimsEmailValidator(v); err != nil {
			return &ValidationError{Name: "claims_email", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.claims_email": %w`, err)}
		}
	}
	if v, ok := oatthu.mutation.ConnectorID(); ok {
		if err := ohauthtootokenhistory.ConnectorIDValidator(v); err != nil {
			return &ValidationError{Name: "connector_id", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.connector_id": %w`, err)}
		}
	}
	return nil
}

func (oatthu *OhAuthTooTokenHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := oatthu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(ohauthtootokenhistory.Table, ohauthtootokenhistory.Columns, sqlgraph.NewFieldSpec(ohauthtootokenhistory.FieldID, field.TypeString))
	if ps := oatthu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if oatthu.mutation.RefCleared() {
		_spec.ClearField(ohauthtootokenhistory.FieldRef, field.TypeString)
	}
	if value, ok := oatthu.mutation.ClientID(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClientID, field.TypeString, value)
	}
	if value, ok := oatthu.mutation.Scopes(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := oatthu.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ohauthtootokenhistory.FieldScopes, value)
		})
	}
	if oatthu.mutation.ScopesCleared() {
		_spec.ClearField(ohauthtootokenhistory.FieldScopes, field.TypeJSON)
	}
	if value, ok := oatthu.mutation.Nonce(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldNonce, field.TypeString, value)
	}
	if value, ok := oatthu.mutation.ClaimsUserID(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsUserID, field.TypeString, value)
	}
	if value, ok := oatthu.mutation.ClaimsUsername(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsUsername, field.TypeString, value)
	}
	if value, ok := oatthu.mutation.ClaimsEmail(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsEmail, field.TypeString, value)
	}
	if value, ok := oatthu.mutation.ClaimsEmailVerified(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsEmailVerified, field.TypeBool, value)
	}
	if value, ok := oatthu.mutation.ClaimsGroups(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsGroups, field.TypeJSON, value)
	}
	if value, ok := oatthu.mutation.AppendedClaimsGroups(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ohauthtootokenhistory.FieldClaimsGroups, value)
		})
	}
	if oatthu.mutation.ClaimsGroupsCleared() {
		_spec.ClearField(ohauthtootokenhistory.FieldClaimsGroups, field.TypeJSON)
	}
	if value, ok := oatthu.mutation.ClaimsPreferredUsername(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsPreferredUsername, field.TypeString, value)
	}
	if value, ok := oatthu.mutation.ConnectorID(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldConnectorID, field.TypeString, value)
	}
	if value, ok := oatthu.mutation.ConnectorData(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldConnectorData, field.TypeJSON, value)
	}
	if value, ok := oatthu.mutation.AppendedConnectorData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ohauthtootokenhistory.FieldConnectorData, value)
		})
	}
	if oatthu.mutation.ConnectorDataCleared() {
		_spec.ClearField(ohauthtootokenhistory.FieldConnectorData, field.TypeJSON)
	}
	if value, ok := oatthu.mutation.LastUsed(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldLastUsed, field.TypeTime, value)
	}
	_spec.Node.Schema = oatthu.schemaConfig.OhAuthTooTokenHistory
	ctx = internal.NewSchemaConfigContext(ctx, oatthu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, oatthu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ohauthtootokenhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	oatthu.mutation.done = true
	return n, nil
}

// OhAuthTooTokenHistoryUpdateOne is the builder for updating a single OhAuthTooTokenHistory entity.
type OhAuthTooTokenHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OhAuthTooTokenHistoryMutation
}

// SetClientID sets the "client_id" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetClientID(s string) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.SetClientID(s)
	return oatthuo
}

// SetNillableClientID sets the "client_id" field if the given value is not nil.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetNillableClientID(s *string) *OhAuthTooTokenHistoryUpdateOne {
	if s != nil {
		oatthuo.SetClientID(*s)
	}
	return oatthuo
}

// SetScopes sets the "scopes" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetScopes(s []string) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.SetScopes(s)
	return oatthuo
}

// AppendScopes appends s to the "scopes" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) AppendScopes(s []string) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.AppendScopes(s)
	return oatthuo
}

// ClearScopes clears the value of the "scopes" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) ClearScopes() *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.ClearScopes()
	return oatthuo
}

// SetNonce sets the "nonce" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetNonce(s string) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.SetNonce(s)
	return oatthuo
}

// SetNillableNonce sets the "nonce" field if the given value is not nil.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetNillableNonce(s *string) *OhAuthTooTokenHistoryUpdateOne {
	if s != nil {
		oatthuo.SetNonce(*s)
	}
	return oatthuo
}

// SetClaimsUserID sets the "claims_user_id" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetClaimsUserID(s string) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.SetClaimsUserID(s)
	return oatthuo
}

// SetNillableClaimsUserID sets the "claims_user_id" field if the given value is not nil.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetNillableClaimsUserID(s *string) *OhAuthTooTokenHistoryUpdateOne {
	if s != nil {
		oatthuo.SetClaimsUserID(*s)
	}
	return oatthuo
}

// SetClaimsUsername sets the "claims_username" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetClaimsUsername(s string) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.SetClaimsUsername(s)
	return oatthuo
}

// SetNillableClaimsUsername sets the "claims_username" field if the given value is not nil.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetNillableClaimsUsername(s *string) *OhAuthTooTokenHistoryUpdateOne {
	if s != nil {
		oatthuo.SetClaimsUsername(*s)
	}
	return oatthuo
}

// SetClaimsEmail sets the "claims_email" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetClaimsEmail(s string) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.SetClaimsEmail(s)
	return oatthuo
}

// SetNillableClaimsEmail sets the "claims_email" field if the given value is not nil.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetNillableClaimsEmail(s *string) *OhAuthTooTokenHistoryUpdateOne {
	if s != nil {
		oatthuo.SetClaimsEmail(*s)
	}
	return oatthuo
}

// SetClaimsEmailVerified sets the "claims_email_verified" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetClaimsEmailVerified(b bool) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.SetClaimsEmailVerified(b)
	return oatthuo
}

// SetNillableClaimsEmailVerified sets the "claims_email_verified" field if the given value is not nil.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetNillableClaimsEmailVerified(b *bool) *OhAuthTooTokenHistoryUpdateOne {
	if b != nil {
		oatthuo.SetClaimsEmailVerified(*b)
	}
	return oatthuo
}

// SetClaimsGroups sets the "claims_groups" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetClaimsGroups(s []string) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.SetClaimsGroups(s)
	return oatthuo
}

// AppendClaimsGroups appends s to the "claims_groups" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) AppendClaimsGroups(s []string) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.AppendClaimsGroups(s)
	return oatthuo
}

// ClearClaimsGroups clears the value of the "claims_groups" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) ClearClaimsGroups() *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.ClearClaimsGroups()
	return oatthuo
}

// SetClaimsPreferredUsername sets the "claims_preferred_username" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetClaimsPreferredUsername(s string) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.SetClaimsPreferredUsername(s)
	return oatthuo
}

// SetNillableClaimsPreferredUsername sets the "claims_preferred_username" field if the given value is not nil.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetNillableClaimsPreferredUsername(s *string) *OhAuthTooTokenHistoryUpdateOne {
	if s != nil {
		oatthuo.SetClaimsPreferredUsername(*s)
	}
	return oatthuo
}

// SetConnectorID sets the "connector_id" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetConnectorID(s string) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.SetConnectorID(s)
	return oatthuo
}

// SetNillableConnectorID sets the "connector_id" field if the given value is not nil.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetNillableConnectorID(s *string) *OhAuthTooTokenHistoryUpdateOne {
	if s != nil {
		oatthuo.SetConnectorID(*s)
	}
	return oatthuo
}

// SetConnectorData sets the "connector_data" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetConnectorData(s []string) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.SetConnectorData(s)
	return oatthuo
}

// AppendConnectorData appends s to the "connector_data" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) AppendConnectorData(s []string) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.AppendConnectorData(s)
	return oatthuo
}

// ClearConnectorData clears the value of the "connector_data" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) ClearConnectorData() *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.ClearConnectorData()
	return oatthuo
}

// SetLastUsed sets the "last_used" field.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetLastUsed(t time.Time) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.SetLastUsed(t)
	return oatthuo
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SetNillableLastUsed(t *time.Time) *OhAuthTooTokenHistoryUpdateOne {
	if t != nil {
		oatthuo.SetLastUsed(*t)
	}
	return oatthuo
}

// Mutation returns the OhAuthTooTokenHistoryMutation object of the builder.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) Mutation() *OhAuthTooTokenHistoryMutation {
	return oatthuo.mutation
}

// Where appends a list predicates to the OhAuthTooTokenHistoryUpdate builder.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) Where(ps ...predicate.OhAuthTooTokenHistory) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.mutation.Where(ps...)
	return oatthuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) Select(field string, fields ...string) *OhAuthTooTokenHistoryUpdateOne {
	oatthuo.fields = append([]string{field}, fields...)
	return oatthuo
}

// Save executes the query and returns the updated OhAuthTooTokenHistory entity.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) Save(ctx context.Context) (*OhAuthTooTokenHistory, error) {
	return withHooks(ctx, oatthuo.sqlSave, oatthuo.mutation, oatthuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) SaveX(ctx context.Context) *OhAuthTooTokenHistory {
	node, err := oatthuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := oatthuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := oatthuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (oatthuo *OhAuthTooTokenHistoryUpdateOne) check() error {
	if v, ok := oatthuo.mutation.ClientID(); ok {
		if err := ohauthtootokenhistory.ClientIDValidator(v); err != nil {
			return &ValidationError{Name: "client_id", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.client_id": %w`, err)}
		}
	}
	if v, ok := oatthuo.mutation.Nonce(); ok {
		if err := ohauthtootokenhistory.NonceValidator(v); err != nil {
			return &ValidationError{Name: "nonce", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.nonce": %w`, err)}
		}
	}
	if v, ok := oatthuo.mutation.ClaimsUserID(); ok {
		if err := ohauthtootokenhistory.ClaimsUserIDValidator(v); err != nil {
			return &ValidationError{Name: "claims_user_id", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.claims_user_id": %w`, err)}
		}
	}
	if v, ok := oatthuo.mutation.ClaimsUsername(); ok {
		if err := ohauthtootokenhistory.ClaimsUsernameValidator(v); err != nil {
			return &ValidationError{Name: "claims_username", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.claims_username": %w`, err)}
		}
	}
	if v, ok := oatthuo.mutation.ClaimsEmail(); ok {
		if err := ohauthtootokenhistory.ClaimsEmailValidator(v); err != nil {
			return &ValidationError{Name: "claims_email", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.claims_email": %w`, err)}
		}
	}
	if v, ok := oatthuo.mutation.ConnectorID(); ok {
		if err := ohauthtootokenhistory.ConnectorIDValidator(v); err != nil {
			return &ValidationError{Name: "connector_id", err: fmt.Errorf(`generated: validator failed for field "OhAuthTooTokenHistory.connector_id": %w`, err)}
		}
	}
	return nil
}

func (oatthuo *OhAuthTooTokenHistoryUpdateOne) sqlSave(ctx context.Context) (_node *OhAuthTooTokenHistory, err error) {
	if err := oatthuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(ohauthtootokenhistory.Table, ohauthtootokenhistory.Columns, sqlgraph.NewFieldSpec(ohauthtootokenhistory.FieldID, field.TypeString))
	id, ok := oatthuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "OhAuthTooTokenHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := oatthuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, ohauthtootokenhistory.FieldID)
		for _, f := range fields {
			if !ohauthtootokenhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != ohauthtootokenhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := oatthuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if oatthuo.mutation.RefCleared() {
		_spec.ClearField(ohauthtootokenhistory.FieldRef, field.TypeString)
	}
	if value, ok := oatthuo.mutation.ClientID(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClientID, field.TypeString, value)
	}
	if value, ok := oatthuo.mutation.Scopes(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldScopes, field.TypeJSON, value)
	}
	if value, ok := oatthuo.mutation.AppendedScopes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ohauthtootokenhistory.FieldScopes, value)
		})
	}
	if oatthuo.mutation.ScopesCleared() {
		_spec.ClearField(ohauthtootokenhistory.FieldScopes, field.TypeJSON)
	}
	if value, ok := oatthuo.mutation.Nonce(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldNonce, field.TypeString, value)
	}
	if value, ok := oatthuo.mutation.ClaimsUserID(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsUserID, field.TypeString, value)
	}
	if value, ok := oatthuo.mutation.ClaimsUsername(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsUsername, field.TypeString, value)
	}
	if value, ok := oatthuo.mutation.ClaimsEmail(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsEmail, field.TypeString, value)
	}
	if value, ok := oatthuo.mutation.ClaimsEmailVerified(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsEmailVerified, field.TypeBool, value)
	}
	if value, ok := oatthuo.mutation.ClaimsGroups(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsGroups, field.TypeJSON, value)
	}
	if value, ok := oatthuo.mutation.AppendedClaimsGroups(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ohauthtootokenhistory.FieldClaimsGroups, value)
		})
	}
	if oatthuo.mutation.ClaimsGroupsCleared() {
		_spec.ClearField(ohauthtootokenhistory.FieldClaimsGroups, field.TypeJSON)
	}
	if value, ok := oatthuo.mutation.ClaimsPreferredUsername(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldClaimsPreferredUsername, field.TypeString, value)
	}
	if value, ok := oatthuo.mutation.ConnectorID(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldConnectorID, field.TypeString, value)
	}
	if value, ok := oatthuo.mutation.ConnectorData(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldConnectorData, field.TypeJSON, value)
	}
	if value, ok := oatthuo.mutation.AppendedConnectorData(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, ohauthtootokenhistory.FieldConnectorData, value)
		})
	}
	if oatthuo.mutation.ConnectorDataCleared() {
		_spec.ClearField(ohauthtootokenhistory.FieldConnectorData, field.TypeJSON)
	}
	if value, ok := oatthuo.mutation.LastUsed(); ok {
		_spec.SetField(ohauthtootokenhistory.FieldLastUsed, field.TypeTime, value)
	}
	_spec.Node.Schema = oatthuo.schemaConfig.OhAuthTooTokenHistory
	ctx = internal.NewSchemaConfigContext(ctx, oatthuo.schemaConfig)
	_node = &OhAuthTooTokenHistory{config: oatthuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, oatthuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{ohauthtootokenhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	oatthuo.mutation.done = true
	return _node, nil
}
