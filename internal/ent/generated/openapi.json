{
  "openapi": "3.1.0",
  "info": {
    "title": "Datum OpenAPI 3.1.0 Specifications",
    "description": "Programmatic interfaces for interacting with Datum Services",
    "termsOfService": "https://datum.net/tos",
    "contact": {
      "name": "Datum Support",
      "url": "https://datum.net/support",
      "email": "support@datum.net"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "1.0.1"
  },
  "servers": [
    {
      "url": "https://api.datum.net/v1",
      "description": "Datum Production API Endpoint"
    },
    {
      "url": "http://localhost:17608/v1",
      "description": "http localhost endpoint for testing purposes"
    }
  ],
  "paths": {
    "/api-tokens": {
      "get": {
        "tags": [
          "APIToken"
        ],
        "summary": "List APITokens",
        "description": "List APITokens.",
        "operationId": "listAPIToken",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result APIToken list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/APIToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "APIToken"
        ],
        "summary": "Create a new APIToken",
        "description": "Creates a new APIToken and persists it to storage.",
        "operationId": "createAPIToken",
        "requestBody": {
          "description": "APIToken to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "description": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "last_used_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "owner": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "APIToken created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api-tokens/{id}": {
      "get": {
        "tags": [
          "APIToken"
        ],
        "summary": "Find a APIToken by ID",
        "description": "Finds the APIToken with the requested ID and returns it.",
        "operationId": "readAPIToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the APIToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "APIToken with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "APIToken"
        ],
        "summary": "Deletes a APIToken by ID",
        "description": "Deletes the APIToken with the requested ID.",
        "operationId": "deleteAPIToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the APIToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "APIToken with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "APIToken"
        ],
        "summary": "Updates a APIToken",
        "description": "Updates a APIToken and persists changes to storage.",
        "operationId": "updateAPIToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the APIToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "APIToken properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "description": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "last_used_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "owner": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "APIToken updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/APIToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/api-tokens/{id}/owner": {
      "get": {
        "tags": [
          "APIToken"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the APIToken with the given ID",
        "operationId": "readAPITokenOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the APIToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to APIToken with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/document-data": {
      "get": {
        "tags": [
          "DocumentData"
        ],
        "summary": "List DocumentData",
        "description": "List DocumentData.",
        "operationId": "listDocumentData",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result DocumentData list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentData"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "DocumentData"
        ],
        "summary": "Create a new DocumentData",
        "description": "Creates a new DocumentData and persists it to storage.",
        "operationId": "createDocumentData",
        "requestBody": {
          "description": "DocumentData to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "template_id": {
                    "type": "string"
                  },
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "template": {
                    "type": "string"
                  }
                },
                "required": [
                  "template_id",
                  "data",
                  "template"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "DocumentData created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/document-data-histories": {
      "get": {
        "tags": [
          "DocumentDataHistory"
        ],
        "summary": "List DocumentDataHistories",
        "description": "List DocumentDataHistories.",
        "operationId": "listDocumentDataHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result DocumentDataHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentDataHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "DocumentDataHistory"
        ],
        "summary": "Create a new DocumentDataHistory",
        "description": "Creates a new DocumentDataHistory and persists it to storage.",
        "operationId": "createDocumentDataHistory",
        "requestBody": {
          "description": "DocumentDataHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "template_id": {
                    "type": "string"
                  },
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "template_id",
                  "data"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "DocumentDataHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDataHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/document-data-histories/{id}": {
      "get": {
        "tags": [
          "DocumentDataHistory"
        ],
        "summary": "Find a DocumentDataHistory by ID",
        "description": "Finds the DocumentDataHistory with the requested ID and returns it.",
        "operationId": "readDocumentDataHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DocumentDataHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DocumentDataHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDataHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "DocumentDataHistory"
        ],
        "summary": "Deletes a DocumentDataHistory by ID",
        "description": "Deletes the DocumentDataHistory with the requested ID.",
        "operationId": "deleteDocumentDataHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DocumentDataHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "DocumentDataHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "DocumentDataHistory"
        ],
        "summary": "Updates a DocumentDataHistory",
        "description": "Updates a DocumentDataHistory and persists changes to storage.",
        "operationId": "updateDocumentDataHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DocumentDataHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "DocumentDataHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "template_id": {
                    "type": "string"
                  },
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "DocumentDataHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentDataHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/document-data/{id}": {
      "get": {
        "tags": [
          "DocumentData"
        ],
        "summary": "Find a DocumentData by ID",
        "description": "Finds the DocumentData with the requested ID and returns it.",
        "operationId": "readDocumentData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DocumentData",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "DocumentData with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "DocumentData"
        ],
        "summary": "Deletes a DocumentData by ID",
        "description": "Deletes the DocumentData with the requested ID.",
        "operationId": "deleteDocumentData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DocumentData",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "DocumentData with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "DocumentData"
        ],
        "summary": "Updates a DocumentData",
        "description": "Updates a DocumentData and persists changes to storage.",
        "operationId": "updateDocumentData",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DocumentData",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "DocumentData properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "template_id": {
                    "type": "string"
                  },
                  "data": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "template": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "DocumentData updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DocumentData"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/document-data/{id}/template": {
      "get": {
        "tags": [
          "DocumentData"
        ],
        "summary": "Find the attached Template",
        "description": "Find the attached Template of the DocumentData with the given ID",
        "operationId": "readDocumentDataTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the DocumentData",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template attached to DocumentData with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlement-histories": {
      "get": {
        "tags": [
          "EntitlementHistory"
        ],
        "summary": "List EntitlementHistories",
        "description": "List EntitlementHistories.",
        "operationId": "listEntitlementHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result EntitlementHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EntitlementHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "EntitlementHistory"
        ],
        "summary": "Create a new EntitlementHistory",
        "description": "Creates a new EntitlementHistory and persists it to storage.",
        "operationId": "createEntitlementHistory",
        "requestBody": {
          "description": "EntitlementHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "tier": {
                    "type": "string",
                    "enum": [
                      "FREE",
                      "PRO",
                      "ENTERPRISE"
                    ],
                    "default": "FREE"
                  },
                  "external_customer_id": {
                    "type": "string"
                  },
                  "external_subscription_id": {
                    "type": "string"
                  },
                  "expires": {
                    "type": "boolean"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "cancelled": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "tier",
                  "expires",
                  "cancelled"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "EntitlementHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlement-histories/{id}": {
      "get": {
        "tags": [
          "EntitlementHistory"
        ],
        "summary": "Find a EntitlementHistory by ID",
        "description": "Finds the EntitlementHistory with the requested ID and returns it.",
        "operationId": "readEntitlementHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EntitlementHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EntitlementHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "EntitlementHistory"
        ],
        "summary": "Deletes a EntitlementHistory by ID",
        "description": "Deletes the EntitlementHistory with the requested ID.",
        "operationId": "deleteEntitlementHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EntitlementHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "EntitlementHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "EntitlementHistory"
        ],
        "summary": "Updates a EntitlementHistory",
        "description": "Updates a EntitlementHistory and persists changes to storage.",
        "operationId": "updateEntitlementHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EntitlementHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "EntitlementHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tier": {
                    "type": "string",
                    "enum": [
                      "FREE",
                      "PRO",
                      "ENTERPRISE"
                    ],
                    "default": "FREE"
                  },
                  "external_customer_id": {
                    "type": "string"
                  },
                  "external_subscription_id": {
                    "type": "string"
                  },
                  "expires": {
                    "type": "boolean"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "cancelled": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "EntitlementHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EntitlementHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "List Entitlements",
        "description": "List Entitlements.",
        "operationId": "listEntitlement",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Entitlement list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Create a new Entitlement",
        "description": "Creates a new Entitlement and persists it to storage.",
        "operationId": "createEntitlement",
        "requestBody": {
          "description": "Entitlement to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tier": {
                    "type": "string",
                    "enum": [
                      "FREE",
                      "PRO",
                      "ENTERPRISE"
                    ],
                    "default": "FREE"
                  },
                  "external_customer_id": {
                    "type": "string"
                  },
                  "external_subscription_id": {
                    "type": "string"
                  },
                  "expires": {
                    "type": "boolean"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "cancelled": {
                    "type": "boolean"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "tier",
                  "expires",
                  "cancelled",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entitlement created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entitlement"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements/{id}": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Find a Entitlement by ID",
        "description": "Finds the Entitlement with the requested ID and returns it.",
        "operationId": "readEntitlement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entitlement",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Entitlement with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entitlement"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Deletes a Entitlement by ID",
        "description": "Deletes the Entitlement with the requested ID.",
        "operationId": "deleteEntitlement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entitlement",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Entitlement with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Updates a Entitlement",
        "description": "Updates a Entitlement and persists changes to storage.",
        "operationId": "updateEntitlement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entitlement",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Entitlement properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "tier": {
                    "type": "string",
                    "enum": [
                      "FREE",
                      "PRO",
                      "ENTERPRISE"
                    ],
                    "default": "FREE"
                  },
                  "external_customer_id": {
                    "type": "string"
                  },
                  "external_subscription_id": {
                    "type": "string"
                  },
                  "expires": {
                    "type": "boolean"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "cancelled": {
                    "type": "boolean"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Entitlement updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Entitlement"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements/{id}/events": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listEntitlementEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entitlement",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Entitlements list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements/{id}/features": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "List attached Features",
        "description": "List attached Features.",
        "operationId": "listEntitlementFeatures",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entitlement",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Entitlements list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feature"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/entitlements/{id}/owner": {
      "get": {
        "tags": [
          "Entitlement"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Entitlement with the given ID",
        "operationId": "readEntitlementOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Entitlement",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Entitlement with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/event-histories": {
      "get": {
        "tags": [
          "EventHistory"
        ],
        "summary": "List EventHistories",
        "description": "List EventHistories.",
        "operationId": "listEventHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result EventHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/EventHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "EventHistory"
        ],
        "summary": "Create a new EventHistory",
        "description": "Creates a new EventHistory and persists it to storage.",
        "operationId": "createEventHistory",
        "requestBody": {
          "description": "EventHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "event_id": {
                    "type": "string"
                  },
                  "correlation_id": {
                    "type": "string"
                  },
                  "event_type": {
                    "type": "string"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "event_type"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "EventHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/event-histories/{id}": {
      "get": {
        "tags": [
          "EventHistory"
        ],
        "summary": "Find a EventHistory by ID",
        "description": "Finds the EventHistory with the requested ID and returns it.",
        "operationId": "readEventHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EventHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "EventHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "EventHistory"
        ],
        "summary": "Deletes a EventHistory by ID",
        "description": "Deletes the EventHistory with the requested ID.",
        "operationId": "deleteEventHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EventHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "EventHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "EventHistory"
        ],
        "summary": "Updates a EventHistory",
        "description": "Updates a EventHistory and persists changes to storage.",
        "operationId": "updateEventHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the EventHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "EventHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event_id": {
                    "type": "string"
                  },
                  "correlation_id": {
                    "type": "string"
                  },
                  "event_type": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "EventHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List Events",
        "description": "List Events.",
        "operationId": "listEvent",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Event list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Event"
        ],
        "summary": "Create a new Event",
        "description": "Creates a new Event and persists it to storage.",
        "operationId": "createEvent",
        "requestBody": {
          "description": "Event to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event_id": {
                    "type": "string"
                  },
                  "correlation_id": {
                    "type": "string"
                  },
                  "event_type": {
                    "type": "string"
                  },
                  "user": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "integration": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organization": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "invite": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "feature": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "personal_access_token": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "oauth2token": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "hush": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "orgmembership": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "groupmembership": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "entitlement": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "webhook": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "subscriber": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "event_type"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Event created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "Find a Event by ID",
        "description": "Finds the Event with the requested ID and returns it.",
        "operationId": "readEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Event with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Event"
        ],
        "summary": "Deletes a Event by ID",
        "description": "Deletes the Event with the requested ID.",
        "operationId": "deleteEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Event with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Event"
        ],
        "summary": "Updates a Event",
        "description": "Updates a Event and persists changes to storage.",
        "operationId": "updateEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Event properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "event_id": {
                    "type": "string"
                  },
                  "correlation_id": {
                    "type": "string"
                  },
                  "event_type": {
                    "type": "string"
                  },
                  "user": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "integration": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organization": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "invite": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "feature": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "personal_access_token": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "oauth2token": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "hush": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "orgmembership": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "groupmembership": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "entitlement": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "webhook": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "subscriber": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Event updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Event"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/entitlement": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached Entitlements",
        "description": "List attached Entitlements.",
        "operationId": "listEventEntitlement",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/feature": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached Features",
        "description": "List attached Features.",
        "operationId": "listEventFeature",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feature"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/group": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached Groups",
        "description": "List attached Groups.",
        "operationId": "listEventGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/groupmembership": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached Groupmemberships",
        "description": "List attached Groupmemberships.",
        "operationId": "listEventGroupmembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMembership"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/hush": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached Hushes",
        "description": "List attached Hushes.",
        "operationId": "listEventHush",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hush"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/integration": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached Integrations",
        "description": "List attached Integrations.",
        "operationId": "listEventIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/invite": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached Invites",
        "description": "List attached Invites.",
        "operationId": "listEventInvite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invite"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/oauth2token": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached Oauth2tokens",
        "description": "List attached Oauth2tokens.",
        "operationId": "listEventOauth2token",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OhAuthTooToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/organization": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached Organizations",
        "description": "List attached Organizations.",
        "operationId": "listEventOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/orgmembership": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached Orgmemberships",
        "description": "List attached Orgmemberships.",
        "operationId": "listEventOrgmembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgMembership"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/personal-access-token": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached PersonalAccessTokens",
        "description": "List attached PersonalAccessTokens.",
        "operationId": "listEventPersonalAccessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonalAccessToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/subscriber": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached Subscribers",
        "description": "List attached Subscribers.",
        "operationId": "listEventSubscriber",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscriber"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/user": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached Users",
        "description": "List attached Users.",
        "operationId": "listEventUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/events/{id}/webhook": {
      "get": {
        "tags": [
          "Event"
        ],
        "summary": "List attached Webhooks",
        "description": "List attached Webhooks.",
        "operationId": "listEventWebhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Event",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Events list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/feature-histories": {
      "get": {
        "tags": [
          "FeatureHistory"
        ],
        "summary": "List FeatureHistories",
        "description": "List FeatureHistories.",
        "operationId": "listFeatureHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result FeatureHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FeatureHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "FeatureHistory"
        ],
        "summary": "Create a new FeatureHistory",
        "description": "Creates a new FeatureHistory and persists it to storage.",
        "operationId": "createFeatureHistory",
        "requestBody": {
          "description": "FeatureHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "global": {
                    "type": "boolean"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "name",
                  "global",
                  "enabled"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "FeatureHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/feature-histories/{id}": {
      "get": {
        "tags": [
          "FeatureHistory"
        ],
        "summary": "Find a FeatureHistory by ID",
        "description": "Finds the FeatureHistory with the requested ID and returns it.",
        "operationId": "readFeatureHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeatureHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FeatureHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "FeatureHistory"
        ],
        "summary": "Deletes a FeatureHistory by ID",
        "description": "Deletes the FeatureHistory with the requested ID.",
        "operationId": "deleteFeatureHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeatureHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "FeatureHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "FeatureHistory"
        ],
        "summary": "Updates a FeatureHistory",
        "description": "Updates a FeatureHistory and persists changes to storage.",
        "operationId": "updateFeatureHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FeatureHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "FeatureHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "global": {
                    "type": "boolean"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "FeatureHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FeatureHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/features": {
      "get": {
        "tags": [
          "Feature"
        ],
        "summary": "List Features",
        "description": "List Features.",
        "operationId": "listFeature",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Feature list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feature"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Feature"
        ],
        "summary": "Create a new Feature",
        "description": "Creates a new Feature and persists it to storage.",
        "operationId": "createFeature",
        "requestBody": {
          "description": "Feature to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "global": {
                    "type": "boolean"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "entitlements": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "global",
                  "enabled"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Feature created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feature"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/features/{id}": {
      "get": {
        "tags": [
          "Feature"
        ],
        "summary": "Find a Feature by ID",
        "description": "Finds the Feature with the requested ID and returns it.",
        "operationId": "readFeature",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Feature with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feature"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Feature"
        ],
        "summary": "Deletes a Feature by ID",
        "description": "Deletes the Feature with the requested ID.",
        "operationId": "deleteFeature",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Feature with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Feature"
        ],
        "summary": "Updates a Feature",
        "description": "Updates a Feature and persists changes to storage.",
        "operationId": "updateFeature",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Feature properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "global": {
                    "type": "boolean"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "description": {
                    "type": "string"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "entitlements": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Feature updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Feature"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/features/{id}/entitlements": {
      "get": {
        "tags": [
          "Feature"
        ],
        "summary": "List attached Entitlements",
        "description": "List attached Entitlements.",
        "operationId": "listFeatureEntitlements",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Features list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/features/{id}/events": {
      "get": {
        "tags": [
          "Feature"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listFeatureEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Features list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/features/{id}/groups": {
      "get": {
        "tags": [
          "Feature"
        ],
        "summary": "List attached Groups",
        "description": "List attached Groups.",
        "operationId": "listFeatureGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Features list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/features/{id}/organizations": {
      "get": {
        "tags": [
          "Feature"
        ],
        "summary": "List attached Organizations",
        "description": "List attached Organizations.",
        "operationId": "listFeatureOrganizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Features list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/features/{id}/users": {
      "get": {
        "tags": [
          "Feature"
        ],
        "summary": "List attached Users",
        "description": "List attached Users.",
        "operationId": "listFeatureUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Feature",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Features list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/file-histories": {
      "get": {
        "tags": [
          "FileHistory"
        ],
        "summary": "List FileHistories",
        "description": "List FileHistories.",
        "operationId": "listFileHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result FileHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "FileHistory"
        ],
        "summary": "Create a new FileHistory",
        "description": "Creates a new FileHistory and persists it to storage.",
        "operationId": "createFileHistory",
        "requestBody": {
          "description": "FileHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "file_name": {
                    "type": "string"
                  },
                  "file_extension": {
                    "type": "string"
                  },
                  "file_size": {
                    "type": "integer"
                  },
                  "content_type": {
                    "type": "string"
                  },
                  "store_key": {
                    "type": "string"
                  },
                  "category": {
                    "type": "string"
                  },
                  "annotation": {
                    "type": "string"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "file_name",
                  "file_extension",
                  "content_type",
                  "store_key"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "FileHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/file-histories/{id}": {
      "get": {
        "tags": [
          "FileHistory"
        ],
        "summary": "Find a FileHistory by ID",
        "description": "Finds the FileHistory with the requested ID and returns it.",
        "operationId": "readFileHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FileHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "FileHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "FileHistory"
        ],
        "summary": "Deletes a FileHistory by ID",
        "description": "Deletes the FileHistory with the requested ID.",
        "operationId": "deleteFileHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FileHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "FileHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "FileHistory"
        ],
        "summary": "Updates a FileHistory",
        "description": "Updates a FileHistory and persists changes to storage.",
        "operationId": "updateFileHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the FileHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "FileHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file_name": {
                    "type": "string"
                  },
                  "file_extension": {
                    "type": "string"
                  },
                  "file_size": {
                    "type": "integer"
                  },
                  "content_type": {
                    "type": "string"
                  },
                  "store_key": {
                    "type": "string"
                  },
                  "category": {
                    "type": "string"
                  },
                  "annotation": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "FileHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/files": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "List Files",
        "description": "List Files.",
        "operationId": "listFile",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result File list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "File"
        ],
        "summary": "Create a new File",
        "description": "Creates a new File and persists it to storage.",
        "operationId": "createFile",
        "requestBody": {
          "description": "File to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file_name": {
                    "type": "string"
                  },
                  "file_extension": {
                    "type": "string"
                  },
                  "file_size": {
                    "type": "integer"
                  },
                  "content_type": {
                    "type": "string"
                  },
                  "store_key": {
                    "type": "string"
                  },
                  "category": {
                    "type": "string"
                  },
                  "annotation": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  },
                  "organization": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "file_name",
                  "file_extension",
                  "content_type",
                  "store_key"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "File created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/files/{id}": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Find a File by ID",
        "description": "Finds the File with the requested ID and returns it.",
        "operationId": "readFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the File",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "File"
        ],
        "summary": "Deletes a File by ID",
        "description": "Deletes the File with the requested ID.",
        "operationId": "deleteFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the File",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "File with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "File"
        ],
        "summary": "Updates a File",
        "description": "Updates a File and persists changes to storage.",
        "operationId": "updateFile",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the File",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "File properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "file_name": {
                    "type": "string"
                  },
                  "file_extension": {
                    "type": "string"
                  },
                  "file_size": {
                    "type": "integer"
                  },
                  "content_type": {
                    "type": "string"
                  },
                  "store_key": {
                    "type": "string"
                  },
                  "category": {
                    "type": "string"
                  },
                  "annotation": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  },
                  "organization": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "File updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/File"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/files/{id}/group": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "List attached Groups",
        "description": "List attached Groups.",
        "operationId": "listFileGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the File",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Files list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/files/{id}/organization": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "List attached Organizations",
        "description": "List attached Organizations.",
        "operationId": "listFileOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the File",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Files list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/files/{id}/user": {
      "get": {
        "tags": [
          "File"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the File with the given ID",
        "operationId": "readFileUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the File",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to File with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-histories": {
      "get": {
        "tags": [
          "GroupHistory"
        ],
        "summary": "List GroupHistories",
        "description": "List GroupHistories.",
        "operationId": "listGroupHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result GroupHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "GroupHistory"
        ],
        "summary": "Create a new GroupHistory",
        "description": "Creates a new GroupHistory and persists it to storage.",
        "operationId": "createGroupHistory",
        "requestBody": {
          "description": "GroupHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "gravatar_logo_url": {
                    "type": "string"
                  },
                  "logo_url": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "name",
                  "display_name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "GroupHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-histories/{id}": {
      "get": {
        "tags": [
          "GroupHistory"
        ],
        "summary": "Find a GroupHistory by ID",
        "description": "Finds the GroupHistory with the requested ID and returns it.",
        "operationId": "readGroupHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GroupHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "GroupHistory"
        ],
        "summary": "Deletes a GroupHistory by ID",
        "description": "Deletes the GroupHistory with the requested ID.",
        "operationId": "deleteGroupHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "GroupHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "GroupHistory"
        ],
        "summary": "Updates a GroupHistory",
        "description": "Updates a GroupHistory and persists changes to storage.",
        "operationId": "updateGroupHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "GroupHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "gravatar_logo_url": {
                    "type": "string"
                  },
                  "logo_url": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "GroupHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-membership-histories": {
      "get": {
        "tags": [
          "GroupMembershipHistory"
        ],
        "summary": "List GroupMembershipHistories",
        "description": "List GroupMembershipHistories.",
        "operationId": "listGroupMembershipHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result GroupMembershipHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMembershipHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "GroupMembershipHistory"
        ],
        "summary": "Create a new GroupMembershipHistory",
        "description": "Creates a new GroupMembershipHistory and persists it to storage.",
        "operationId": "createGroupMembershipHistory",
        "requestBody": {
          "description": "GroupMembershipHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "USER"
                    ],
                    "default": "MEMBER"
                  },
                  "group_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "role",
                  "group_id",
                  "user_id"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "GroupMembershipHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembershipHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-membership-histories/{id}": {
      "get": {
        "tags": [
          "GroupMembershipHistory"
        ],
        "summary": "Find a GroupMembershipHistory by ID",
        "description": "Finds the GroupMembershipHistory with the requested ID and returns it.",
        "operationId": "readGroupMembershipHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupMembershipHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GroupMembershipHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembershipHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "GroupMembershipHistory"
        ],
        "summary": "Deletes a GroupMembershipHistory by ID",
        "description": "Deletes the GroupMembershipHistory with the requested ID.",
        "operationId": "deleteGroupMembershipHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupMembershipHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "GroupMembershipHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "GroupMembershipHistory"
        ],
        "summary": "Updates a GroupMembershipHistory",
        "description": "Updates a GroupMembershipHistory and persists changes to storage.",
        "operationId": "updateGroupMembershipHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupMembershipHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "GroupMembershipHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "USER"
                    ],
                    "default": "MEMBER"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "GroupMembershipHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembershipHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-memberships": {
      "get": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "List GroupMemberships",
        "description": "List GroupMemberships.",
        "operationId": "listGroupMembership",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result GroupMembership list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMembership"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "Create a new GroupMembership",
        "description": "Creates a new GroupMembership and persists it to storage.",
        "operationId": "createGroupMembership",
        "requestBody": {
          "description": "GroupMembership to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "USER"
                    ],
                    "default": "MEMBER"
                  },
                  "group_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "group": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "role",
                  "group_id",
                  "user_id",
                  "group",
                  "user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "GroupMembership created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembership"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-memberships/{id}": {
      "get": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "Find a GroupMembership by ID",
        "description": "Finds the GroupMembership with the requested ID and returns it.",
        "operationId": "readGroupMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GroupMembership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembership"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "Deletes a GroupMembership by ID",
        "description": "Deletes the GroupMembership with the requested ID.",
        "operationId": "deleteGroupMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "GroupMembership with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "Updates a GroupMembership",
        "description": "Updates a GroupMembership and persists changes to storage.",
        "operationId": "updateGroupMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "GroupMembership properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "USER"
                    ],
                    "default": "MEMBER"
                  },
                  "group": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "GroupMembership updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupMembership"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-memberships/{id}/events": {
      "get": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listGroupMembershipEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result GroupMemberships list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-memberships/{id}/group": {
      "get": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "Find the attached Group",
        "description": "Find the attached Group of the GroupMembership with the given ID",
        "operationId": "readGroupMembershipGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group attached to GroupMembership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-memberships/{id}/user": {
      "get": {
        "tags": [
          "GroupMembership"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the GroupMembership with the given ID",
        "operationId": "readGroupMembershipUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to GroupMembership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-setting-histories": {
      "get": {
        "tags": [
          "GroupSettingHistory"
        ],
        "summary": "List GroupSettingHistories",
        "description": "List GroupSettingHistories.",
        "operationId": "listGroupSettingHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result GroupSettingHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupSettingHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "GroupSettingHistory"
        ],
        "summary": "Create a new GroupSettingHistory",
        "description": "Creates a new GroupSettingHistory and persists it to storage.",
        "operationId": "createGroupSettingHistory",
        "requestBody": {
          "description": "GroupSettingHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "visibility": {
                    "type": "string",
                    "enum": [
                      "PUBLIC",
                      "PRIVATE"
                    ],
                    "default": "PUBLIC"
                  },
                  "join_policy": {
                    "type": "string",
                    "enum": [
                      "OPEN",
                      "INVITE_ONLY",
                      "APPLICATION_ONLY",
                      "INVITE_OR_APPLICATION"
                    ],
                    "default": "INVITE_OR_APPLICATION"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "sync_to_slack": {
                    "type": "boolean"
                  },
                  "sync_to_github": {
                    "type": "boolean"
                  },
                  "group_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "visibility",
                  "join_policy"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "GroupSettingHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSettingHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-setting-histories/{id}": {
      "get": {
        "tags": [
          "GroupSettingHistory"
        ],
        "summary": "Find a GroupSettingHistory by ID",
        "description": "Finds the GroupSettingHistory with the requested ID and returns it.",
        "operationId": "readGroupSettingHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupSettingHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GroupSettingHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSettingHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "GroupSettingHistory"
        ],
        "summary": "Deletes a GroupSettingHistory by ID",
        "description": "Deletes the GroupSettingHistory with the requested ID.",
        "operationId": "deleteGroupSettingHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupSettingHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "GroupSettingHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "GroupSettingHistory"
        ],
        "summary": "Updates a GroupSettingHistory",
        "description": "Updates a GroupSettingHistory and persists changes to storage.",
        "operationId": "updateGroupSettingHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupSettingHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "GroupSettingHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "visibility": {
                    "type": "string",
                    "enum": [
                      "PUBLIC",
                      "PRIVATE"
                    ],
                    "default": "PUBLIC"
                  },
                  "join_policy": {
                    "type": "string",
                    "enum": [
                      "OPEN",
                      "INVITE_ONLY",
                      "APPLICATION_ONLY",
                      "INVITE_OR_APPLICATION"
                    ],
                    "default": "INVITE_OR_APPLICATION"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "sync_to_slack": {
                    "type": "boolean"
                  },
                  "sync_to_github": {
                    "type": "boolean"
                  },
                  "group_id": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "GroupSettingHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSettingHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/group-settings/{id}/group": {
      "get": {
        "tags": [
          "GroupSetting"
        ],
        "summary": "Find the attached Group",
        "description": "Find the attached Group of the GroupSetting with the given ID",
        "operationId": "readGroupSettingGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the GroupSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group attached to GroupSetting with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List Groups",
        "description": "List Groups.",
        "operationId": "listGroup",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Group list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Group"
        ],
        "summary": "Create a new Group",
        "description": "Creates a new Group and persists it to storage.",
        "operationId": "createGroup",
        "requestBody": {
          "description": "Group to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "gravatar_logo_url": {
                    "type": "string"
                  },
                  "logo_url": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "setting": {
                    "type": "string"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "integrations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "display_name",
                  "owner",
                  "setting"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Find a Group by ID",
        "description": "Finds the Group with the requested ID and returns it.",
        "operationId": "readGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Group with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Group"
        ],
        "summary": "Deletes a Group by ID",
        "description": "Deletes the Group with the requested ID.",
        "operationId": "deleteGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Group with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Group"
        ],
        "summary": "Updates a Group",
        "description": "Updates a Group and persists changes to storage.",
        "operationId": "updateGroup",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Group properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "gravatar_logo_url": {
                    "type": "string"
                  },
                  "logo_url": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "setting": {
                    "type": "string"
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "integrations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Group updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}/events": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listGroupEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Groups list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}/features": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List attached Features",
        "description": "List attached Features.",
        "operationId": "listGroupFeatures",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Groups list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feature"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}/files": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List attached Files",
        "description": "List attached Files.",
        "operationId": "listGroupFiles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Groups list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}/integrations": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List attached Integrations",
        "description": "List attached Integrations.",
        "operationId": "listGroupIntegrations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Groups list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}/members": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List attached Members",
        "description": "List attached Members.",
        "operationId": "listGroupMembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Groups list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMembership"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}/owner": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Group with the given ID",
        "operationId": "readGroupOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Group with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}/setting": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "Find the attached GroupSetting",
        "description": "Find the attached GroupSetting of the Group with the given ID",
        "operationId": "readGroupSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "GroupSetting attached to Group with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GroupSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/groups/{id}/users": {
      "get": {
        "tags": [
          "Group"
        ],
        "summary": "List attached Users",
        "description": "List attached Users.",
        "operationId": "listGroupUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Group",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Groups list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/hush-histories": {
      "get": {
        "tags": [
          "HushHistory"
        ],
        "summary": "List HushHistories",
        "description": "List HushHistories.",
        "operationId": "listHushHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result HushHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/HushHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "HushHistory"
        ],
        "summary": "Create a new HushHistory",
        "description": "Creates a new HushHistory and persists it to storage.",
        "operationId": "createHushHistory",
        "requestBody": {
          "description": "HushHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "secret_name": {
                    "type": "string"
                  },
                  "secret_value": {
                    "type": "string"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HushHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HushHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/hush-histories/{id}": {
      "get": {
        "tags": [
          "HushHistory"
        ],
        "summary": "Find a HushHistory by ID",
        "description": "Finds the HushHistory with the requested ID and returns it.",
        "operationId": "readHushHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the HushHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "HushHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HushHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "HushHistory"
        ],
        "summary": "Deletes a HushHistory by ID",
        "description": "Deletes the HushHistory with the requested ID.",
        "operationId": "deleteHushHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the HushHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "HushHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "HushHistory"
        ],
        "summary": "Updates a HushHistory",
        "description": "Updates a HushHistory and persists changes to storage.",
        "operationId": "updateHushHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the HushHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "HushHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "HushHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HushHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/hushes": {
      "get": {
        "tags": [
          "Hush"
        ],
        "summary": "List Hushes",
        "description": "List Hushes.",
        "operationId": "listHush",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Hush list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hush"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Hush"
        ],
        "summary": "Create a new Hush",
        "description": "Creates a new Hush and persists it to storage.",
        "operationId": "createHush",
        "requestBody": {
          "description": "Hush to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "secret_name": {
                    "type": "string"
                  },
                  "secret_value": {
                    "type": "string"
                  },
                  "integrations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organization": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Hush created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hush"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/hushes/{id}": {
      "get": {
        "tags": [
          "Hush"
        ],
        "summary": "Find a Hush by ID",
        "description": "Finds the Hush with the requested ID and returns it.",
        "operationId": "readHush",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Hush",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Hush with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hush"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Hush"
        ],
        "summary": "Deletes a Hush by ID",
        "description": "Deletes the Hush with the requested ID.",
        "operationId": "deleteHush",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Hush",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Hush with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Hush"
        ],
        "summary": "Updates a Hush",
        "description": "Updates a Hush and persists changes to storage.",
        "operationId": "updateHush",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Hush",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Hush properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "integrations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organization": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Hush updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Hush"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/hushes/{id}/events": {
      "get": {
        "tags": [
          "Hush"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listHushEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Hush",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Hushes list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/hushes/{id}/integrations": {
      "get": {
        "tags": [
          "Hush"
        ],
        "summary": "List attached Integrations",
        "description": "List attached Integrations.",
        "operationId": "listHushIntegrations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Hush",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Hushes list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/hushes/{id}/organization": {
      "get": {
        "tags": [
          "Hush"
        ],
        "summary": "List attached Organizations",
        "description": "List attached Organizations.",
        "operationId": "listHushOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Hush",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Hushes list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/integration-histories": {
      "get": {
        "tags": [
          "IntegrationHistory"
        ],
        "summary": "List IntegrationHistories",
        "description": "List IntegrationHistories.",
        "operationId": "listIntegrationHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result IntegrationHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "IntegrationHistory"
        ],
        "summary": "Create a new IntegrationHistory",
        "description": "Creates a new IntegrationHistory and persists it to storage.",
        "operationId": "createIntegrationHistory",
        "requestBody": {
          "description": "IntegrationHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "IntegrationHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/integration-histories/{id}": {
      "get": {
        "tags": [
          "IntegrationHistory"
        ],
        "summary": "Find a IntegrationHistory by ID",
        "description": "Finds the IntegrationHistory with the requested ID and returns it.",
        "operationId": "readIntegrationHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the IntegrationHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "IntegrationHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "IntegrationHistory"
        ],
        "summary": "Deletes a IntegrationHistory by ID",
        "description": "Deletes the IntegrationHistory with the requested ID.",
        "operationId": "deleteIntegrationHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the IntegrationHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "IntegrationHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "IntegrationHistory"
        ],
        "summary": "Updates a IntegrationHistory",
        "description": "Updates a IntegrationHistory and persists changes to storage.",
        "operationId": "updateIntegrationHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the IntegrationHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "IntegrationHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "IntegrationHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/integrations": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "List Integrations",
        "description": "List Integrations.",
        "operationId": "listIntegration",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Integration list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Integration"
        ],
        "summary": "Create a new Integration",
        "description": "Creates a new Integration and persists it to storage.",
        "operationId": "createIntegration",
        "requestBody": {
          "description": "Integration to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "secrets": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "oauth2tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Integration created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/integrations/{id}": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Find a Integration by ID",
        "description": "Finds the Integration with the requested ID and returns it.",
        "operationId": "readIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Integration with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Integration"
        ],
        "summary": "Deletes a Integration by ID",
        "description": "Deletes the Integration with the requested ID.",
        "operationId": "deleteIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Integration with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Integration"
        ],
        "summary": "Updates a Integration",
        "description": "Updates a Integration and persists changes to storage.",
        "operationId": "updateIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Integration properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "secrets": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "oauth2tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Integration updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/integrations/{id}/events": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listIntegrationEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Integrations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/integrations/{id}/oauth2tokens": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "List attached Oauth2tokens",
        "description": "List attached Oauth2tokens.",
        "operationId": "listIntegrationOauth2tokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Integrations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OhAuthTooToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/integrations/{id}/owner": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Integration with the given ID",
        "operationId": "readIntegrationOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Integration with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/integrations/{id}/secrets": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "List attached Secrets",
        "description": "List attached Secrets.",
        "operationId": "listIntegrationSecrets",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Integrations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hush"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/invites": {
      "get": {
        "tags": [
          "Invite"
        ],
        "summary": "List Invites",
        "description": "List Invites.",
        "operationId": "listInvite",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Invite list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invite"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Invite"
        ],
        "summary": "Create a new Invite",
        "description": "Creates a new Invite and persists it to storage.",
        "operationId": "createInvite",
        "requestBody": {
          "description": "Invite to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipient": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "USER"
                    ],
                    "default": "MEMBER"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "recipient",
                  "role",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Invite created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/invites/{id}": {
      "get": {
        "tags": [
          "Invite"
        ],
        "summary": "Find a Invite by ID",
        "description": "Finds the Invite with the requested ID and returns it.",
        "operationId": "readInvite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Invite",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Invite with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Invite"
        ],
        "summary": "Deletes a Invite by ID",
        "description": "Deletes the Invite with the requested ID.",
        "operationId": "deleteInvite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Invite",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Invite with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Invite"
        ],
        "summary": "Updates a Invite",
        "description": "Updates a Invite and persists changes to storage.",
        "operationId": "updateInvite",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Invite",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Invite properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "recipient": {
                    "type": "string"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "USER"
                    ],
                    "default": "MEMBER"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Invite updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Invite"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/invites/{id}/events": {
      "get": {
        "tags": [
          "Invite"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listInviteEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Invite",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Invites list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/invites/{id}/owner": {
      "get": {
        "tags": [
          "Invite"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Invite with the given ID",
        "operationId": "readInviteOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Invite",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Invite with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oauth-provider-histories": {
      "get": {
        "tags": [
          "OauthProviderHistory"
        ],
        "summary": "List OauthProviderHistories",
        "description": "List OauthProviderHistories.",
        "operationId": "listOauthProviderHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OauthProviderHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OauthProviderHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OauthProviderHistory"
        ],
        "summary": "Create a new OauthProviderHistory",
        "description": "Creates a new OauthProviderHistory and persists it to storage.",
        "operationId": "createOauthProviderHistory",
        "requestBody": {
          "description": "OauthProviderHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "client_secret": {
                    "type": "string"
                  },
                  "redirect_url": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "string"
                  },
                  "auth_url": {
                    "type": "string"
                  },
                  "token_url": {
                    "type": "string"
                  },
                  "auth_style": {
                    "type": "integer"
                  },
                  "info_url": {
                    "type": "string"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "name",
                  "client_id",
                  "client_secret",
                  "redirect_url",
                  "scopes",
                  "auth_url",
                  "token_url",
                  "auth_style",
                  "info_url"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OauthProviderHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthProviderHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oauth-provider-histories/{id}": {
      "get": {
        "tags": [
          "OauthProviderHistory"
        ],
        "summary": "Find a OauthProviderHistory by ID",
        "description": "Finds the OauthProviderHistory with the requested ID and returns it.",
        "operationId": "readOauthProviderHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OauthProviderHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OauthProviderHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthProviderHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OauthProviderHistory"
        ],
        "summary": "Deletes a OauthProviderHistory by ID",
        "description": "Deletes the OauthProviderHistory with the requested ID.",
        "operationId": "deleteOauthProviderHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OauthProviderHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OauthProviderHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OauthProviderHistory"
        ],
        "summary": "Updates a OauthProviderHistory",
        "description": "Updates a OauthProviderHistory and persists changes to storage.",
        "operationId": "updateOauthProviderHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OauthProviderHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OauthProviderHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "client_secret": {
                    "type": "string"
                  },
                  "redirect_url": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "string"
                  },
                  "auth_url": {
                    "type": "string"
                  },
                  "token_url": {
                    "type": "string"
                  },
                  "auth_style": {
                    "type": "integer"
                  },
                  "info_url": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OauthProviderHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthProviderHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oauth-providers": {
      "get": {
        "tags": [
          "OauthProvider"
        ],
        "summary": "List OauthProviders",
        "description": "List OauthProviders.",
        "operationId": "listOauthProvider",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OauthProvider list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OauthProvider"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OauthProvider"
        ],
        "summary": "Create a new OauthProvider",
        "description": "Creates a new OauthProvider and persists it to storage.",
        "operationId": "createOauthProvider",
        "requestBody": {
          "description": "OauthProvider to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "client_secret": {
                    "type": "string"
                  },
                  "redirect_url": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "string"
                  },
                  "auth_url": {
                    "type": "string"
                  },
                  "token_url": {
                    "type": "string"
                  },
                  "auth_style": {
                    "type": "integer"
                  },
                  "info_url": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  }
                },
                "required": [
                  "name",
                  "client_id",
                  "client_secret",
                  "redirect_url",
                  "scopes",
                  "auth_url",
                  "token_url",
                  "auth_style",
                  "info_url"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OauthProvider created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthProvider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oauth-providers/{id}": {
      "get": {
        "tags": [
          "OauthProvider"
        ],
        "summary": "Find a OauthProvider by ID",
        "description": "Finds the OauthProvider with the requested ID and returns it.",
        "operationId": "readOauthProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OauthProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OauthProvider with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthProvider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OauthProvider"
        ],
        "summary": "Deletes a OauthProvider by ID",
        "description": "Deletes the OauthProvider with the requested ID.",
        "operationId": "deleteOauthProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OauthProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OauthProvider with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OauthProvider"
        ],
        "summary": "Updates a OauthProvider",
        "description": "Updates a OauthProvider and persists changes to storage.",
        "operationId": "updateOauthProvider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OauthProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OauthProvider properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "client_id": {
                    "type": "string"
                  },
                  "client_secret": {
                    "type": "string"
                  },
                  "redirect_url": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "string"
                  },
                  "auth_url": {
                    "type": "string"
                  },
                  "token_url": {
                    "type": "string"
                  },
                  "auth_style": {
                    "type": "integer"
                  },
                  "info_url": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OauthProvider updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OauthProvider"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oauth-providers/{id}/owner": {
      "get": {
        "tags": [
          "OauthProvider"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the OauthProvider with the given ID",
        "operationId": "readOauthProviderOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OauthProvider",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to OauthProvider with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oh-auth-too-tokens": {
      "get": {
        "tags": [
          "OhAuthTooToken"
        ],
        "summary": "List OhAuthTooTokens",
        "description": "List OhAuthTooTokens.",
        "operationId": "listOhAuthTooToken",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OhAuthTooToken list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OhAuthTooToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OhAuthTooToken"
        ],
        "summary": "Create a new OhAuthTooToken",
        "description": "Creates a new OhAuthTooToken and persists it to storage.",
        "operationId": "createOhAuthTooToken",
        "requestBody": {
          "description": "OhAuthTooToken to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "nonce": {
                    "type": "string"
                  },
                  "claims_user_id": {
                    "type": "string"
                  },
                  "claims_username": {
                    "type": "string"
                  },
                  "claims_email": {
                    "type": "string"
                  },
                  "claims_email_verified": {
                    "type": "boolean"
                  },
                  "claims_groups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "claims_preferred_username": {
                    "type": "string"
                  },
                  "connector_id": {
                    "type": "string"
                  },
                  "connector_data": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "last_used": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "integration": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "client_id",
                  "nonce",
                  "claims_user_id",
                  "claims_username",
                  "claims_email",
                  "claims_email_verified",
                  "claims_preferred_username",
                  "connector_id",
                  "last_used"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OhAuthTooToken created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OhAuthTooToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oh-auth-too-tokens/{id}": {
      "get": {
        "tags": [
          "OhAuthTooToken"
        ],
        "summary": "Find a OhAuthTooToken by ID",
        "description": "Finds the OhAuthTooToken with the requested ID and returns it.",
        "operationId": "readOhAuthTooToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OhAuthTooToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OhAuthTooToken with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OhAuthTooToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OhAuthTooToken"
        ],
        "summary": "Deletes a OhAuthTooToken by ID",
        "description": "Deletes the OhAuthTooToken with the requested ID.",
        "operationId": "deleteOhAuthTooToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OhAuthTooToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OhAuthTooToken with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OhAuthTooToken"
        ],
        "summary": "Updates a OhAuthTooToken",
        "description": "Updates a OhAuthTooToken and persists changes to storage.",
        "operationId": "updateOhAuthTooToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OhAuthTooToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OhAuthTooToken properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "client_id": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "nonce": {
                    "type": "string"
                  },
                  "claims_user_id": {
                    "type": "string"
                  },
                  "claims_username": {
                    "type": "string"
                  },
                  "claims_email": {
                    "type": "string"
                  },
                  "claims_email_verified": {
                    "type": "boolean"
                  },
                  "claims_groups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "claims_preferred_username": {
                    "type": "string"
                  },
                  "connector_id": {
                    "type": "string"
                  },
                  "connector_data": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "last_used": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "integration": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OhAuthTooToken updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OhAuthTooToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oh-auth-too-tokens/{id}/events": {
      "get": {
        "tags": [
          "OhAuthTooToken"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listOhAuthTooTokenEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OhAuthTooToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OhAuthTooTokens list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/oh-auth-too-tokens/{id}/integration": {
      "get": {
        "tags": [
          "OhAuthTooToken"
        ],
        "summary": "List attached Integrations",
        "description": "List attached Integrations.",
        "operationId": "listOhAuthTooTokenIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OhAuthTooToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OhAuthTooTokens list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/org-membership-histories": {
      "get": {
        "tags": [
          "OrgMembershipHistory"
        ],
        "summary": "List OrgMembershipHistories",
        "description": "List OrgMembershipHistories.",
        "operationId": "listOrgMembershipHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OrgMembershipHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgMembershipHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OrgMembershipHistory"
        ],
        "summary": "Create a new OrgMembershipHistory",
        "description": "Creates a new OrgMembershipHistory and persists it to storage.",
        "operationId": "createOrgMembershipHistory",
        "requestBody": {
          "description": "OrgMembershipHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "USER",
                      "OWNER"
                    ],
                    "default": "MEMBER"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "role",
                  "organization_id",
                  "user_id"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrgMembershipHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMembershipHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/org-membership-histories/{id}": {
      "get": {
        "tags": [
          "OrgMembershipHistory"
        ],
        "summary": "Find a OrgMembershipHistory by ID",
        "description": "Finds the OrgMembershipHistory with the requested ID and returns it.",
        "operationId": "readOrgMembershipHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrgMembershipHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OrgMembershipHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMembershipHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OrgMembershipHistory"
        ],
        "summary": "Deletes a OrgMembershipHistory by ID",
        "description": "Deletes the OrgMembershipHistory with the requested ID.",
        "operationId": "deleteOrgMembershipHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrgMembershipHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OrgMembershipHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OrgMembershipHistory"
        ],
        "summary": "Updates a OrgMembershipHistory",
        "description": "Updates a OrgMembershipHistory and persists changes to storage.",
        "operationId": "updateOrgMembershipHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrgMembershipHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OrgMembershipHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "USER",
                      "OWNER"
                    ],
                    "default": "MEMBER"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrgMembershipHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMembershipHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/org-memberships": {
      "get": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "List OrgMemberships",
        "description": "List OrgMemberships.",
        "operationId": "listOrgMembership",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OrgMembership list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgMembership"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "Create a new OrgMembership",
        "description": "Creates a new OrgMembership and persists it to storage.",
        "operationId": "createOrgMembership",
        "requestBody": {
          "description": "OrgMembership to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "USER",
                      "OWNER"
                    ],
                    "default": "MEMBER"
                  },
                  "organization_id": {
                    "type": "string"
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "organization": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "role",
                  "organization_id",
                  "user_id",
                  "organization",
                  "user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrgMembership created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMembership"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/org-memberships/{id}": {
      "get": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "Find a OrgMembership by ID",
        "description": "Finds the OrgMembership with the requested ID and returns it.",
        "operationId": "readOrgMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrgMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OrgMembership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMembership"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "Deletes a OrgMembership by ID",
        "description": "Deletes the OrgMembership with the requested ID.",
        "operationId": "deleteOrgMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrgMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OrgMembership with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "Updates a OrgMembership",
        "description": "Updates a OrgMembership and persists changes to storage.",
        "operationId": "updateOrgMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrgMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OrgMembership properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "USER",
                      "OWNER"
                    ],
                    "default": "MEMBER"
                  },
                  "organization": {
                    "type": "string"
                  },
                  "user": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrgMembership updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrgMembership"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/org-memberships/{id}/events": {
      "get": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listOrgMembershipEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrgMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OrgMemberships list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/org-memberships/{id}/organization": {
      "get": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the OrgMembership with the given ID",
        "operationId": "readOrgMembershipOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrgMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to OrgMembership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/org-memberships/{id}/user": {
      "get": {
        "tags": [
          "OrgMembership"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the OrgMembership with the given ID",
        "operationId": "readOrgMembershipUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrgMembership",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to OrgMembership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organization-histories": {
      "get": {
        "tags": [
          "OrganizationHistory"
        ],
        "summary": "List OrganizationHistories",
        "description": "List OrganizationHistories.",
        "operationId": "listOrganizationHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OrganizationHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OrganizationHistory"
        ],
        "summary": "Create a new OrganizationHistory",
        "description": "Creates a new OrganizationHistory and persists it to storage.",
        "operationId": "createOrganizationHistory",
        "requestBody": {
          "description": "OrganizationHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "parent_organization_id": {
                    "type": "string"
                  },
                  "personal_org": {
                    "type": "boolean"
                  },
                  "avatar_remote_url": {
                    "type": "string"
                  },
                  "dedicated_db": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "name",
                  "display_name",
                  "dedicated_db"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrganizationHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organization-histories/{id}": {
      "get": {
        "tags": [
          "OrganizationHistory"
        ],
        "summary": "Find a OrganizationHistory by ID",
        "description": "Finds the OrganizationHistory with the requested ID and returns it.",
        "operationId": "readOrganizationHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OrganizationHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OrganizationHistory"
        ],
        "summary": "Deletes a OrganizationHistory by ID",
        "description": "Deletes the OrganizationHistory with the requested ID.",
        "operationId": "deleteOrganizationHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OrganizationHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OrganizationHistory"
        ],
        "summary": "Updates a OrganizationHistory",
        "description": "Updates a OrganizationHistory and persists changes to storage.",
        "operationId": "updateOrganizationHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OrganizationHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "avatar_remote_url": {
                    "type": "string"
                  },
                  "dedicated_db": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrganizationHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organization-setting-histories": {
      "get": {
        "tags": [
          "OrganizationSettingHistory"
        ],
        "summary": "List OrganizationSettingHistories",
        "description": "List OrganizationSettingHistories.",
        "operationId": "listOrganizationSettingHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result OrganizationSettingHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationSettingHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "OrganizationSettingHistory"
        ],
        "summary": "Create a new OrganizationSettingHistory",
        "description": "Creates a new OrganizationSettingHistory and persists it to storage.",
        "operationId": "createOrganizationSettingHistory",
        "requestBody": {
          "description": "OrganizationSettingHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "domains": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "billing_contact": {
                    "type": "string"
                  },
                  "billing_email": {
                    "type": "string"
                  },
                  "billing_phone": {
                    "type": "string"
                  },
                  "billing_address": {
                    "type": "string"
                  },
                  "tax_identifier": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "geo_location": {
                    "type": "string",
                    "enum": [
                      "AMER",
                      "EMEA",
                      "APAC"
                    ],
                    "default": "AMER"
                  },
                  "organization_id": {
                    "type": "string"
                  }
                },
                "required": [
                  "history_time",
                  "operation"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrganizationSettingHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSettingHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organization-setting-histories/{id}": {
      "get": {
        "tags": [
          "OrganizationSettingHistory"
        ],
        "summary": "Find a OrganizationSettingHistory by ID",
        "description": "Finds the OrganizationSettingHistory with the requested ID and returns it.",
        "operationId": "readOrganizationSettingHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationSettingHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OrganizationSettingHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSettingHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "OrganizationSettingHistory"
        ],
        "summary": "Deletes a OrganizationSettingHistory by ID",
        "description": "Deletes the OrganizationSettingHistory with the requested ID.",
        "operationId": "deleteOrganizationSettingHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationSettingHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "OrganizationSettingHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "OrganizationSettingHistory"
        ],
        "summary": "Updates a OrganizationSettingHistory",
        "description": "Updates a OrganizationSettingHistory and persists changes to storage.",
        "operationId": "updateOrganizationSettingHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationSettingHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "OrganizationSettingHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "domains": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "billing_contact": {
                    "type": "string"
                  },
                  "billing_email": {
                    "type": "string"
                  },
                  "billing_phone": {
                    "type": "string"
                  },
                  "billing_address": {
                    "type": "string"
                  },
                  "tax_identifier": {
                    "type": "string"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "geo_location": {
                    "type": "string",
                    "enum": [
                      "AMER",
                      "EMEA",
                      "APAC"
                    ],
                    "default": "AMER"
                  },
                  "organization_id": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OrganizationSettingHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSettingHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organization-settings/{id}/organization": {
      "get": {
        "tags": [
          "OrganizationSetting"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the OrganizationSetting with the given ID",
        "operationId": "readOrganizationSettingOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the OrganizationSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to OrganizationSetting with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List Organizations",
        "description": "List Organizations.",
        "operationId": "listOrganization",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organization list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Create a new Organization",
        "description": "Creates a new Organization and persists it to storage.",
        "operationId": "createOrganization",
        "requestBody": {
          "description": "Organization to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "parent_organization_id": {
                    "type": "string"
                  },
                  "personal_org": {
                    "type": "boolean"
                  },
                  "avatar_remote_url": {
                    "type": "string"
                  },
                  "dedicated_db": {
                    "type": "boolean"
                  },
                  "parent": {
                    "type": "string"
                  },
                  "children": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "templates": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "integrations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "setting": {
                    "type": "string"
                  },
                  "entitlements": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "personal_access_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "api_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "oauthprovider": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "invites": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "subscribers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "webhooks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "secrets": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "display_name",
                  "dedicated_db"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organization created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Find a Organization by ID",
        "description": "Finds the Organization with the requested ID and returns it.",
        "operationId": "readOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Deletes a Organization by ID",
        "description": "Deletes the Organization with the requested ID.",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Organization with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Updates a Organization",
        "description": "Updates a Organization and persists changes to storage.",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Organization properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "avatar_remote_url": {
                    "type": "string"
                  },
                  "dedicated_db": {
                    "type": "boolean"
                  },
                  "parent": {
                    "type": "string"
                  },
                  "children": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "templates": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "integrations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "setting": {
                    "type": "string"
                  },
                  "entitlements": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "personal_access_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "api_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "oauthprovider": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "users": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "invites": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "subscribers": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "webhooks": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "secrets": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organization updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/api-tokens": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached ApiTokens",
        "description": "List attached ApiTokens.",
        "operationId": "listOrganizationApiTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/APIToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/children": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Childrens",
        "description": "List attached Childrens.",
        "operationId": "listOrganizationChildren",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/entitlements": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Entitlements",
        "description": "List attached Entitlements.",
        "operationId": "listOrganizationEntitlements",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Entitlement"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/events": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listOrganizationEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/features": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Features",
        "description": "List attached Features.",
        "operationId": "listOrganizationFeatures",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feature"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/files": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Files",
        "description": "List attached Files.",
        "operationId": "listOrganizationFiles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/groups": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Groups",
        "description": "List attached Groups.",
        "operationId": "listOrganizationGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/integrations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Integrations",
        "description": "List attached Integrations.",
        "operationId": "listOrganizationIntegrations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Integration"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/invites": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Invites",
        "description": "List attached Invites.",
        "operationId": "listOrganizationInvites",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Invite"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/members": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Members",
        "description": "List attached Members.",
        "operationId": "listOrganizationMembers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgMembership"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/oauthprovider": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Oauthproviders",
        "description": "List attached Oauthproviders.",
        "operationId": "listOrganizationOauthprovider",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OauthProvider"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/parent": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Organization with the given ID",
        "operationId": "readOrganizationParent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Organization with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/personal-access-tokens": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached PersonalAccessTokens",
        "description": "List attached PersonalAccessTokens.",
        "operationId": "listOrganizationPersonalAccessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonalAccessToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/secrets": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Secrets",
        "description": "List attached Secrets.",
        "operationId": "listOrganizationSecrets",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Hush"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/setting": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Find the attached OrganizationSetting",
        "description": "Find the attached OrganizationSetting of the Organization with the given ID",
        "operationId": "readOrganizationSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OrganizationSetting attached to Organization with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/subscribers": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Subscribers",
        "description": "List attached Subscribers.",
        "operationId": "listOrganizationSubscribers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscriber"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/templates": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Templates",
        "description": "List attached Templates.",
        "operationId": "listOrganizationTemplates",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Template"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/users": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Users",
        "description": "List attached Users.",
        "operationId": "listOrganizationUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/webhooks": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Webhooks",
        "description": "List attached Webhooks.",
        "operationId": "listOrganizationWebhooks",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/personal-access-tokens": {
      "get": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "List PersonalAccessTokens",
        "description": "List PersonalAccessTokens.",
        "operationId": "listPersonalAccessToken",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result PersonalAccessToken list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonalAccessToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "Create a new PersonalAccessToken",
        "description": "Creates a new PersonalAccessToken and persists it to storage.",
        "operationId": "createPersonalAccessToken",
        "requestBody": {
          "description": "PersonalAccessToken to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "description": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "last_used_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "expires_at",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PersonalAccessToken created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/personal-access-tokens/{id}": {
      "get": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "Find a PersonalAccessToken by ID",
        "description": "Finds the PersonalAccessToken with the requested ID and returns it.",
        "operationId": "readPersonalAccessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PersonalAccessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "PersonalAccessToken with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "Deletes a PersonalAccessToken by ID",
        "description": "Deletes the PersonalAccessToken with the requested ID.",
        "operationId": "deletePersonalAccessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PersonalAccessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "PersonalAccessToken with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "Updates a PersonalAccessToken",
        "description": "Updates a PersonalAccessToken and persists changes to storage.",
        "operationId": "updatePersonalAccessToken",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PersonalAccessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "PersonalAccessToken properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "description": {
                    "type": "string"
                  },
                  "scopes": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "last_used_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "PersonalAccessToken updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PersonalAccessToken"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/personal-access-tokens/{id}/events": {
      "get": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listPersonalAccessTokenEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PersonalAccessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result PersonalAccessTokens list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/personal-access-tokens/{id}/organizations": {
      "get": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "List attached Organizations",
        "description": "List attached Organizations.",
        "operationId": "listPersonalAccessTokenOrganizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PersonalAccessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result PersonalAccessTokens list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/personal-access-tokens/{id}/owner": {
      "get": {
        "tags": [
          "PersonalAccessToken"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the PersonalAccessToken with the given ID",
        "operationId": "readPersonalAccessTokenOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the PersonalAccessToken",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to PersonalAccessToken with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/subscribers": {
      "get": {
        "tags": [
          "Subscriber"
        ],
        "summary": "List Subscribers",
        "description": "List Subscribers.",
        "operationId": "listSubscriber",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Subscriber list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Subscriber"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Create a new Subscriber",
        "description": "Creates a new Subscriber and persists it to storage.",
        "operationId": "createSubscriber",
        "requestBody": {
          "description": "Subscriber to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "verified_email": {
                    "type": "boolean"
                  },
                  "verified_phone": {
                    "type": "boolean"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "ttl": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "email",
                  "verified_email",
                  "verified_phone",
                  "active",
                  "ttl",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Subscriber created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/subscribers/{id}": {
      "get": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Find a Subscriber by ID",
        "description": "Finds the Subscriber with the requested ID and returns it.",
        "operationId": "readSubscriber",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Subscriber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Subscriber with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Deletes a Subscriber by ID",
        "description": "Deletes the Subscriber with the requested ID.",
        "operationId": "deleteSubscriber",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Subscriber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Subscriber with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Updates a Subscriber",
        "description": "Updates a Subscriber and persists changes to storage.",
        "operationId": "updateSubscriber",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Subscriber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Subscriber properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "phone_number": {
                    "type": "string"
                  },
                  "verified_email": {
                    "type": "boolean"
                  },
                  "verified_phone": {
                    "type": "boolean"
                  },
                  "active": {
                    "type": "boolean"
                  },
                  "ttl": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Subscriber updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Subscriber"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/subscribers/{id}/events": {
      "get": {
        "tags": [
          "Subscriber"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listSubscriberEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Subscriber",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Subscribers list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/subscribers/{id}/owner": {
      "get": {
        "tags": [
          "Subscriber"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Subscriber with the given ID",
        "operationId": "readSubscriberOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Subscriber",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Subscriber with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/template-histories": {
      "get": {
        "tags": [
          "TemplateHistory"
        ],
        "summary": "List TemplateHistories",
        "description": "List TemplateHistories.",
        "operationId": "listTemplateHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result TemplateHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TemplateHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "TemplateHistory"
        ],
        "summary": "Create a new TemplateHistory",
        "description": "Creates a new TemplateHistory and persists it to storage.",
        "operationId": "createTemplateHistory",
        "requestBody": {
          "description": "TemplateHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "template_type": {
                    "type": "string",
                    "enum": [
                      "ROOTTEMPLATE",
                      "DOCUMENT"
                    ],
                    "default": "DOCUMENT"
                  },
                  "description": {
                    "type": "string"
                  },
                  "jsonconfig": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "uischema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "name",
                  "template_type",
                  "jsonconfig"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TemplateHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/template-histories/{id}": {
      "get": {
        "tags": [
          "TemplateHistory"
        ],
        "summary": "Find a TemplateHistory by ID",
        "description": "Finds the TemplateHistory with the requested ID and returns it.",
        "operationId": "readTemplateHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TemplateHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "TemplateHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "TemplateHistory"
        ],
        "summary": "Deletes a TemplateHistory by ID",
        "description": "Deletes the TemplateHistory with the requested ID.",
        "operationId": "deleteTemplateHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TemplateHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "TemplateHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "TemplateHistory"
        ],
        "summary": "Updates a TemplateHistory",
        "description": "Updates a TemplateHistory and persists changes to storage.",
        "operationId": "updateTemplateHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TemplateHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "TemplateHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "template_type": {
                    "type": "string",
                    "enum": [
                      "ROOTTEMPLATE",
                      "DOCUMENT"
                    ],
                    "default": "DOCUMENT"
                  },
                  "description": {
                    "type": "string"
                  },
                  "jsonconfig": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "uischema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "TemplateHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TemplateHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/templates": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "List Templates",
        "description": "List Templates.",
        "operationId": "listTemplate",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Template list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Template"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Template"
        ],
        "summary": "Create a new Template",
        "description": "Creates a new Template and persists it to storage.",
        "operationId": "createTemplate",
        "requestBody": {
          "description": "Template to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "template_type": {
                    "type": "string",
                    "enum": [
                      "ROOTTEMPLATE",
                      "DOCUMENT"
                    ],
                    "default": "DOCUMENT"
                  },
                  "description": {
                    "type": "string"
                  },
                  "jsonconfig": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "uischema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "owner": {
                    "type": "string"
                  },
                  "documents": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "template_type",
                  "jsonconfig",
                  "owner"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Template created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/templates/{id}": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Find a Template by ID",
        "description": "Finds the Template with the requested ID and returns it.",
        "operationId": "readTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Template with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Template"
        ],
        "summary": "Deletes a Template by ID",
        "description": "Deletes the Template with the requested ID.",
        "operationId": "deleteTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Template with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Template"
        ],
        "summary": "Updates a Template",
        "description": "Updates a Template and persists changes to storage.",
        "operationId": "updateTemplate",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Template properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "template_type": {
                    "type": "string",
                    "enum": [
                      "ROOTTEMPLATE",
                      "DOCUMENT"
                    ],
                    "default": "DOCUMENT"
                  },
                  "description": {
                    "type": "string"
                  },
                  "jsonconfig": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "uischema": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "owner": {
                    "type": "string"
                  },
                  "documents": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Template updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Template"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/templates/{id}/documents": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "List attached Documents",
        "description": "List attached Documents.",
        "operationId": "listTemplateDocuments",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Templates list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentData"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/templates/{id}/owner": {
      "get": {
        "tags": [
          "Template"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Template with the given ID",
        "operationId": "readTemplateOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Template",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Template with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/tfa-settings/{id}/owner": {
      "get": {
        "tags": [
          "TFASetting"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the TFASetting with the given ID",
        "operationId": "readTFASettingOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the TFASetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to TFASetting with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-histories": {
      "get": {
        "tags": [
          "UserHistory"
        ],
        "summary": "List UserHistories",
        "description": "List UserHistories.",
        "operationId": "listUserHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result UserHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "UserHistory"
        ],
        "summary": "Create a new UserHistory",
        "description": "Creates a new UserHistory and persists it to storage.",
        "operationId": "createUserHistory",
        "requestBody": {
          "description": "UserHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "email": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "avatar_remote_url": {
                    "type": "string"
                  },
                  "avatar_local_file": {
                    "type": "string"
                  },
                  "avatar_updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "auth_provider": {
                    "type": "string",
                    "enum": [
                      "CREDENTIALS",
                      "GOOGLE",
                      "GITHUB",
                      "WEBAUTHN"
                    ],
                    "default": "CREDENTIALS"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "USER"
                    ],
                    "default": "USER"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "email",
                  "first_name",
                  "last_name",
                  "display_name",
                  "auth_provider"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "UserHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-histories/{id}": {
      "get": {
        "tags": [
          "UserHistory"
        ],
        "summary": "Find a UserHistory by ID",
        "description": "Finds the UserHistory with the requested ID and returns it.",
        "operationId": "readUserHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "UserHistory"
        ],
        "summary": "Deletes a UserHistory by ID",
        "description": "Deletes the UserHistory with the requested ID.",
        "operationId": "deleteUserHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "UserHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "UserHistory"
        ],
        "summary": "Updates a UserHistory",
        "description": "Updates a UserHistory and persists changes to storage.",
        "operationId": "updateUserHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "UserHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "avatar_remote_url": {
                    "type": "string"
                  },
                  "avatar_local_file": {
                    "type": "string"
                  },
                  "avatar_updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "auth_provider": {
                    "type": "string",
                    "enum": [
                      "CREDENTIALS",
                      "GOOGLE",
                      "GITHUB",
                      "WEBAUTHN"
                    ],
                    "default": "CREDENTIALS"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "USER"
                    ],
                    "default": "USER"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "UserHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-setting-histories": {
      "get": {
        "tags": [
          "UserSettingHistory"
        ],
        "summary": "List UserSettingHistories",
        "description": "List UserSettingHistories.",
        "operationId": "listUserSettingHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result UserSettingHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserSettingHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "UserSettingHistory"
        ],
        "summary": "Create a new UserSettingHistory",
        "description": "Creates a new UserSettingHistory and persists it to storage.",
        "operationId": "createUserSettingHistory",
        "requestBody": {
          "description": "UserSettingHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "user_id": {
                    "type": "string"
                  },
                  "locked": {
                    "type": "boolean"
                  },
                  "silenced_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "DEACTIVATED",
                      "SUSPENDED"
                    ],
                    "default": "ACTIVE"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "is_webauthn_allowed": {
                    "type": "boolean"
                  },
                  "is_tfa_enabled": {
                    "type": "boolean"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "locked",
                  "status"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "UserSettingHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettingHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-setting-histories/{id}": {
      "get": {
        "tags": [
          "UserSettingHistory"
        ],
        "summary": "Find a UserSettingHistory by ID",
        "description": "Finds the UserSettingHistory with the requested ID and returns it.",
        "operationId": "readUserSettingHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserSettingHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserSettingHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettingHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "UserSettingHistory"
        ],
        "summary": "Deletes a UserSettingHistory by ID",
        "description": "Deletes the UserSettingHistory with the requested ID.",
        "operationId": "deleteUserSettingHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserSettingHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "UserSettingHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "UserSettingHistory"
        ],
        "summary": "Updates a UserSettingHistory",
        "description": "Updates a UserSettingHistory and persists changes to storage.",
        "operationId": "updateUserSettingHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserSettingHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "UserSettingHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "user_id": {
                    "type": "string"
                  },
                  "locked": {
                    "type": "boolean"
                  },
                  "silenced_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "status": {
                    "type": "string",
                    "enum": [
                      "ACTIVE",
                      "INACTIVE",
                      "DEACTIVATED",
                      "SUSPENDED"
                    ],
                    "default": "ACTIVE"
                  },
                  "tags": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "is_webauthn_allowed": {
                    "type": "boolean"
                  },
                  "is_tfa_enabled": {
                    "type": "boolean"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "UserSettingHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSettingHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/user-settings/{id}/default-org": {
      "get": {
        "tags": [
          "UserSetting"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the UserSetting with the given ID",
        "operationId": "readUserSettingDefaultOrg",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the UserSetting",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to UserSetting with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List Users",
        "description": "List Users.",
        "operationId": "listUser",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result User list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new User",
        "description": "Creates a new User and persists it to storage.",
        "operationId": "createUser",
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "avatar_remote_url": {
                    "type": "string"
                  },
                  "avatar_local_file": {
                    "type": "string"
                  },
                  "avatar_updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "auth_provider": {
                    "type": "string",
                    "enum": [
                      "CREDENTIALS",
                      "GOOGLE",
                      "GITHUB",
                      "WEBAUTHN"
                    ],
                    "default": "CREDENTIALS"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "USER"
                    ],
                    "default": "USER"
                  },
                  "personal_access_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "tfa_settings": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "setting": {
                    "type": "string"
                  },
                  "email_verification_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "password_reset_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "webauthn": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group_memberships": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "org_memberships": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "email",
                  "first_name",
                  "last_name",
                  "display_name",
                  "auth_provider",
                  "setting"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find a User by ID",
        "description": "Finds the User with the requested ID and returns it.",
        "operationId": "readUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a User by ID",
        "description": "Deletes the User with the requested ID.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Updates a User",
        "description": "Updates a User and persists changes to storage.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "User properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  },
                  "first_name": {
                    "type": "string"
                  },
                  "last_name": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "avatar_remote_url": {
                    "type": "string"
                  },
                  "avatar_local_file": {
                    "type": "string"
                  },
                  "avatar_updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "auth_provider": {
                    "type": "string",
                    "enum": [
                      "CREDENTIALS",
                      "GOOGLE",
                      "GITHUB",
                      "WEBAUTHN"
                    ],
                    "default": "CREDENTIALS"
                  },
                  "role": {
                    "type": "string",
                    "enum": [
                      "ADMIN",
                      "MEMBER",
                      "USER"
                    ],
                    "default": "USER"
                  },
                  "personal_access_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "tfa_settings": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "setting": {
                    "type": "string"
                  },
                  "email_verification_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "password_reset_tokens": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "groups": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "organizations": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "webauthn": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "files": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "features": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "group_memberships": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "org_memberships": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/events": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listUserEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/features": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Features",
        "description": "List attached Features.",
        "operationId": "listUserFeatures",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Feature"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/files": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Files",
        "description": "List attached Files.",
        "operationId": "listUserFiles",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/File"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/group-memberships": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached GroupMemberships",
        "description": "List attached GroupMemberships.",
        "operationId": "listUserGroupMemberships",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/GroupMembership"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/groups": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Groups",
        "description": "List attached Groups.",
        "operationId": "listUserGroups",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/org-memberships": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached OrgMemberships",
        "description": "List attached OrgMemberships.",
        "operationId": "listUserOrgMemberships",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrgMembership"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/organizations": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Organizations",
        "description": "List attached Organizations.",
        "operationId": "listUserOrganizations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/personal-access-tokens": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached PersonalAccessTokens",
        "description": "List attached PersonalAccessTokens.",
        "operationId": "listUserPersonalAccessTokens",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PersonalAccessToken"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/setting": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find the attached UserSetting",
        "description": "Find the attached UserSetting of the User with the given ID",
        "operationId": "readUserSetting",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "UserSetting attached to User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserSetting"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/tfa-settings": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached TfaSettings",
        "description": "List attached TfaSettings.",
        "operationId": "listUserTfaSettings",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TFASetting"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/webauthn": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Webauthns",
        "description": "List attached Webauthns.",
        "operationId": "listUserWebauthn",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webauthn"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhook-histories": {
      "get": {
        "tags": [
          "WebhookHistory"
        ],
        "summary": "List WebhookHistories",
        "description": "List WebhookHistories.",
        "operationId": "listWebhookHistory",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result WebhookHistory list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WebhookHistory"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "WebhookHistory"
        ],
        "summary": "Create a new WebhookHistory",
        "description": "Creates a new WebhookHistory and persists it to storage.",
        "operationId": "createWebhookHistory",
        "requestBody": {
          "description": "WebhookHistory to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "history_time": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "operation": {
                    "type": "string",
                    "enum": [
                      "INSERT",
                      "UPDATE",
                      "DELETE"
                    ]
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "destination_url": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "callback": {
                    "type": "string"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "failures": {
                    "type": "integer"
                  },
                  "last_error": {
                    "type": "string"
                  },
                  "last_response": {
                    "type": "string"
                  }
                },
                "required": [
                  "history_time",
                  "operation",
                  "name",
                  "destination_url",
                  "enabled"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "WebhookHistory created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhook-histories/{id}": {
      "get": {
        "tags": [
          "WebhookHistory"
        ],
        "summary": "Find a WebhookHistory by ID",
        "description": "Finds the WebhookHistory with the requested ID and returns it.",
        "operationId": "readWebhookHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WebhookHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "WebhookHistory with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "WebhookHistory"
        ],
        "summary": "Deletes a WebhookHistory by ID",
        "description": "Deletes the WebhookHistory with the requested ID.",
        "operationId": "deleteWebhookHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WebhookHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "WebhookHistory with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "WebhookHistory"
        ],
        "summary": "Updates a WebhookHistory",
        "description": "Updates a WebhookHistory and persists changes to storage.",
        "operationId": "updateWebhookHistory",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the WebhookHistory",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "WebhookHistory properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "destination_url": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "callback": {
                    "type": "string"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "failures": {
                    "type": "integer"
                  },
                  "last_error": {
                    "type": "string"
                  },
                  "last_response": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "WebhookHistory updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WebhookHistory"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhooks": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "List Webhooks",
        "description": "List Webhooks.",
        "operationId": "listWebhook",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Webhook list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Webhook"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Webhook"
        ],
        "summary": "Create a new Webhook",
        "description": "Creates a new Webhook and persists it to storage.",
        "operationId": "createWebhook",
        "requestBody": {
          "description": "Webhook to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "destination_url": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "callback": {
                    "type": "string"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "failures": {
                    "type": "integer"
                  },
                  "last_error": {
                    "type": "string"
                  },
                  "last_response": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "name",
                  "destination_url",
                  "enabled"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webhook created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhooks/{id}": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "Find a Webhook by ID",
        "description": "Finds the Webhook with the requested ID and returns it.",
        "operationId": "readWebhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Webhook with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Webhook"
        ],
        "summary": "Deletes a Webhook by ID",
        "description": "Deletes the Webhook with the requested ID.",
        "operationId": "deleteWebhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Webhook with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Webhook"
        ],
        "summary": "Updates a Webhook",
        "description": "Updates a Webhook and persists changes to storage.",
        "operationId": "updateWebhook",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Webhook properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "destination_url": {
                    "type": "string"
                  },
                  "enabled": {
                    "type": "boolean"
                  },
                  "callback": {
                    "type": "string"
                  },
                  "expires_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "failures": {
                    "type": "integer"
                  },
                  "last_error": {
                    "type": "string"
                  },
                  "last_response": {
                    "type": "string"
                  },
                  "owner": {
                    "type": "string"
                  },
                  "events": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Webhook updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Webhook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhooks/{id}/events": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "List attached Events",
        "description": "List attached Events.",
        "operationId": "listWebhookEvents",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Webhooks list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Event"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/webhooks/{id}/owner": {
      "get": {
        "tags": [
          "Webhook"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Webhook with the given ID",
        "operationId": "readWebhookOwner",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Webhook",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Webhook with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Organization"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "APIToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "required": [
          "id",
          "name",
          "owner"
        ]
      },
      "DocumentData": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "template_id": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "template": {
            "$ref": "#/components/schemas/Template"
          }
        },
        "required": [
          "id",
          "template_id",
          "data",
          "template"
        ]
      },
      "DocumentDataHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "template_id": {
            "type": "string"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "template_id",
          "data"
        ]
      },
      "EmailVerificationToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "owner"
        ]
      },
      "Entitlement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "tier": {
            "type": "string",
            "enum": [
              "FREE",
              "PRO",
              "ENTERPRISE"
            ],
            "default": "FREE"
          },
          "external_customer_id": {
            "type": "string"
          },
          "external_subscription_id": {
            "type": "string"
          },
          "expires": {
            "type": "boolean"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "cancelled": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/Organization"
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "id",
          "tier",
          "expires",
          "cancelled",
          "owner"
        ]
      },
      "EntitlementHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "tier": {
            "type": "string",
            "enum": [
              "FREE",
              "PRO",
              "ENTERPRISE"
            ],
            "default": "FREE"
          },
          "external_customer_id": {
            "type": "string"
          },
          "external_subscription_id": {
            "type": "string"
          },
          "expires": {
            "type": "boolean"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "cancelled": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "tier",
          "expires",
          "cancelled"
        ]
      },
      "Event": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "event_id": {
            "type": "string"
          },
          "correlation_id": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          },
          "user": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "group": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "integration": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Integration"
            }
          },
          "organization": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "invite": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invite"
            }
          },
          "feature": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          },
          "personal_access_token": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalAccessToken"
            }
          },
          "oauth2token": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OhAuthTooToken"
            }
          },
          "hush": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Hush"
            }
          },
          "orgmembership": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgMembership"
            }
          },
          "groupmembership": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMembership"
            }
          },
          "entitlement": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Entitlement"
            }
          },
          "webhook": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webhook"
            }
          },
          "subscriber": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscriber"
            }
          }
        },
        "required": [
          "id",
          "event_type"
        ]
      },
      "EventHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "event_id": {
            "type": "string"
          },
          "correlation_id": {
            "type": "string"
          },
          "event_type": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "event_type"
        ]
      },
      "Feature": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "global": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "entitlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Entitlement"
            }
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "id",
          "name",
          "global",
          "enabled"
        ]
      },
      "FeatureHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "global": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "description": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "name",
          "global",
          "enabled"
        ]
      },
      "File": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "file_name": {
            "type": "string"
          },
          "file_extension": {
            "type": "string"
          },
          "file_size": {
            "type": "integer"
          },
          "content_type": {
            "type": "string"
          },
          "store_key": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "annotation": {
            "type": "string"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "organization": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "group": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          }
        },
        "required": [
          "id",
          "file_name",
          "file_extension",
          "content_type",
          "store_key"
        ]
      },
      "FileHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "file_name": {
            "type": "string"
          },
          "file_extension": {
            "type": "string"
          },
          "file_size": {
            "type": "integer"
          },
          "content_type": {
            "type": "string"
          },
          "store_key": {
            "type": "string"
          },
          "category": {
            "type": "string"
          },
          "annotation": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "file_name",
          "file_extension",
          "content_type",
          "store_key"
        ]
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "gravatar_logo_url": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/Organization"
          },
          "setting": {
            "$ref": "#/components/schemas/GroupSetting"
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "integrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Integration"
            }
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMembership"
            }
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "owner",
          "setting"
        ]
      },
      "GroupHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "gravatar_logo_url": {
            "type": "string"
          },
          "logo_url": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "name",
          "display_name"
        ]
      },
      "GroupMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "USER"
            ],
            "default": "MEMBER"
          },
          "group_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "id",
          "role",
          "group_id",
          "user_id",
          "group",
          "user"
        ]
      },
      "GroupMembershipHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "USER"
            ],
            "default": "MEMBER"
          },
          "group_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "role",
          "group_id",
          "user_id"
        ]
      },
      "GroupSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "PRIVATE"
            ],
            "default": "PUBLIC"
          },
          "join_policy": {
            "type": "string",
            "enum": [
              "OPEN",
              "INVITE_ONLY",
              "APPLICATION_ONLY",
              "INVITE_OR_APPLICATION"
            ],
            "default": "INVITE_OR_APPLICATION"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sync_to_slack": {
            "type": "boolean"
          },
          "sync_to_github": {
            "type": "boolean"
          },
          "group_id": {
            "type": "string"
          },
          "group": {
            "$ref": "#/components/schemas/Group"
          }
        },
        "required": [
          "id",
          "visibility",
          "join_policy"
        ]
      },
      "GroupSettingHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "PRIVATE"
            ],
            "default": "PUBLIC"
          },
          "join_policy": {
            "type": "string",
            "enum": [
              "OPEN",
              "INVITE_ONLY",
              "APPLICATION_ONLY",
              "INVITE_OR_APPLICATION"
            ],
            "default": "INVITE_OR_APPLICATION"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "sync_to_slack": {
            "type": "boolean"
          },
          "sync_to_github": {
            "type": "boolean"
          },
          "group_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "visibility",
          "join_policy"
        ]
      },
      "Hush": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "secret_name": {
            "type": "string"
          },
          "secret_value": {
            "type": "string"
          },
          "integrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Integration"
            }
          },
          "organization": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "HushHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "secret_name": {
            "type": "string"
          },
          "secret_value": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "name"
        ]
      },
      "Integration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/Organization"
          },
          "secrets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Hush"
            }
          },
          "oauth2tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OhAuthTooToken"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "id",
          "name",
          "owner"
        ]
      },
      "IntegrationHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "kind": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "name"
        ]
      },
      "Invite": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "expires": {
            "type": "string",
            "format": "date-time"
          },
          "recipient": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "enum": [
              "INVITATION_SENT",
              "APPROVAL_REQUIRED",
              "INVITATION_ACCEPTED",
              "INVITATION_EXPIRED"
            ],
            "default": "INVITATION_SENT"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "USER"
            ],
            "default": "MEMBER"
          },
          "send_attempts": {
            "type": "integer"
          },
          "requestor_id": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/Organization"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "id",
          "recipient",
          "status",
          "role",
          "send_attempts",
          "requestor_id",
          "owner"
        ]
      },
      "OauthProvider": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          },
          "scopes": {
            "type": "string"
          },
          "auth_url": {
            "type": "string"
          },
          "token_url": {
            "type": "string"
          },
          "auth_style": {
            "type": "integer"
          },
          "info_url": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "required": [
          "id",
          "name",
          "client_id",
          "client_secret",
          "redirect_url",
          "scopes",
          "auth_url",
          "token_url",
          "auth_style",
          "info_url"
        ]
      },
      "OauthProviderHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "client_secret": {
            "type": "string"
          },
          "redirect_url": {
            "type": "string"
          },
          "scopes": {
            "type": "string"
          },
          "auth_url": {
            "type": "string"
          },
          "token_url": {
            "type": "string"
          },
          "auth_style": {
            "type": "integer"
          },
          "info_url": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "name",
          "client_id",
          "client_secret",
          "redirect_url",
          "scopes",
          "auth_url",
          "token_url",
          "auth_style",
          "info_url"
        ]
      },
      "OhAuthTooToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "client_id": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "nonce": {
            "type": "string"
          },
          "claims_user_id": {
            "type": "string"
          },
          "claims_username": {
            "type": "string"
          },
          "claims_email": {
            "type": "string"
          },
          "claims_email_verified": {
            "type": "boolean"
          },
          "claims_groups": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "claims_preferred_username": {
            "type": "string"
          },
          "connector_id": {
            "type": "string"
          },
          "connector_data": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_used": {
            "type": "string",
            "format": "date-time"
          },
          "integration": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Integration"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "id",
          "client_id",
          "nonce",
          "claims_user_id",
          "claims_username",
          "claims_email",
          "claims_email_verified",
          "claims_preferred_username",
          "connector_id",
          "last_used"
        ]
      },
      "OrgMembership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "USER",
              "OWNER"
            ],
            "default": "MEMBER"
          },
          "organization_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "id",
          "role",
          "organization_id",
          "user_id",
          "organization",
          "user"
        ]
      },
      "OrgMembershipHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "USER",
              "OWNER"
            ],
            "default": "MEMBER"
          },
          "organization_id": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "role",
          "organization_id",
          "user_id"
        ]
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "parent_organization_id": {
            "type": "string"
          },
          "personal_org": {
            "type": "boolean"
          },
          "avatar_remote_url": {
            "type": "string"
          },
          "dedicated_db": {
            "type": "boolean"
          },
          "parent": {
            "$ref": "#/components/schemas/Organization"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "templates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Template"
            }
          },
          "integrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Integration"
            }
          },
          "setting": {
            "$ref": "#/components/schemas/OrganizationSetting"
          },
          "entitlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Entitlement"
            }
          },
          "personal_access_tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalAccessToken"
            }
          },
          "api_tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/APIToken"
            }
          },
          "oauthprovider": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OauthProvider"
            }
          },
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "invites": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Invite"
            }
          },
          "subscribers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subscriber"
            }
          },
          "webhooks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webhook"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "secrets": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Hush"
            }
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "members": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgMembership"
            }
          }
        },
        "required": [
          "id",
          "name",
          "display_name",
          "dedicated_db"
        ]
      },
      "OrganizationHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "parent_organization_id": {
            "type": "string"
          },
          "personal_org": {
            "type": "boolean"
          },
          "avatar_remote_url": {
            "type": "string"
          },
          "dedicated_db": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "name",
          "display_name",
          "dedicated_db"
        ]
      },
      "OrganizationSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "billing_contact": {
            "type": "string"
          },
          "billing_email": {
            "type": "string"
          },
          "billing_phone": {
            "type": "string"
          },
          "billing_address": {
            "type": "string"
          },
          "tax_identifier": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "geo_location": {
            "type": "string",
            "enum": [
              "AMER",
              "EMEA",
              "APAC"
            ],
            "default": "AMER"
          },
          "organization_id": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "required": [
          "id"
        ]
      },
      "OrganizationSettingHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "domains": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "billing_contact": {
            "type": "string"
          },
          "billing_email": {
            "type": "string"
          },
          "billing_phone": {
            "type": "string"
          },
          "billing_address": {
            "type": "string"
          },
          "tax_identifier": {
            "type": "string"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "geo_location": {
            "type": "string",
            "enum": [
              "AMER",
              "EMEA",
              "APAC"
            ],
            "default": "AMER"
          },
          "organization_id": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation"
        ]
      },
      "PasswordResetToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "owner"
        ]
      },
      "PersonalAccessToken": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "description": {
            "type": "string"
          },
          "scopes": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "last_used_at": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "id",
          "name",
          "owner"
        ]
      },
      "Subscriber": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone_number": {
            "type": "string"
          },
          "verified_email": {
            "type": "boolean"
          },
          "verified_phone": {
            "type": "boolean"
          },
          "active": {
            "type": "boolean"
          },
          "ttl": {
            "type": "string",
            "format": "date-time"
          },
          "owner": {
            "$ref": "#/components/schemas/Organization"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "id",
          "email",
          "verified_email",
          "verified_phone",
          "active",
          "owner"
        ]
      },
      "TFASetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "verified": {
            "type": "boolean"
          },
          "totp_allowed": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "verified"
        ]
      },
      "Template": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "template_type": {
            "type": "string",
            "enum": [
              "ROOTTEMPLATE",
              "DOCUMENT"
            ],
            "default": "DOCUMENT"
          },
          "description": {
            "type": "string"
          },
          "jsonconfig": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uischema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "owner": {
            "$ref": "#/components/schemas/Organization"
          },
          "documents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DocumentData"
            }
          }
        },
        "required": [
          "id",
          "name",
          "template_type",
          "jsonconfig",
          "owner"
        ]
      },
      "TemplateHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "template_type": {
            "type": "string",
            "enum": [
              "ROOTTEMPLATE",
              "DOCUMENT"
            ],
            "default": "DOCUMENT"
          },
          "description": {
            "type": "string"
          },
          "jsonconfig": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "uischema": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "name",
          "template_type",
          "jsonconfig"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "avatar_remote_url": {
            "type": "string"
          },
          "avatar_local_file": {
            "type": "string"
          },
          "avatar_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_seen": {
            "type": "string",
            "format": "date-time"
          },
          "auth_provider": {
            "type": "string",
            "enum": [
              "CREDENTIALS",
              "GOOGLE",
              "GITHUB",
              "WEBAUTHN"
            ],
            "default": "CREDENTIALS"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "USER"
            ],
            "default": "USER"
          },
          "personal_access_tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonalAccessToken"
            }
          },
          "tfa_settings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TFASetting"
            }
          },
          "setting": {
            "$ref": "#/components/schemas/UserSetting"
          },
          "email_verification_tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EmailVerificationToken"
            }
          },
          "password_reset_tokens": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PasswordResetToken"
            }
          },
          "groups": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Group"
            }
          },
          "organizations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Organization"
            }
          },
          "webauthn": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Webauthn"
            }
          },
          "files": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/File"
            }
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          },
          "features": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Feature"
            }
          },
          "group_memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/GroupMembership"
            }
          },
          "org_memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OrgMembership"
            }
          }
        },
        "required": [
          "id",
          "email",
          "first_name",
          "last_name",
          "display_name",
          "auth_provider",
          "setting"
        ]
      },
      "UserHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "first_name": {
            "type": "string"
          },
          "last_name": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "avatar_remote_url": {
            "type": "string"
          },
          "avatar_local_file": {
            "type": "string"
          },
          "avatar_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "last_seen": {
            "type": "string",
            "format": "date-time"
          },
          "auth_provider": {
            "type": "string",
            "enum": [
              "CREDENTIALS",
              "GOOGLE",
              "GITHUB",
              "WEBAUTHN"
            ],
            "default": "CREDENTIALS"
          },
          "role": {
            "type": "string",
            "enum": [
              "ADMIN",
              "MEMBER",
              "USER"
            ],
            "default": "USER"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "email",
          "first_name",
          "last_name",
          "display_name",
          "auth_provider"
        ]
      },
      "UserSetting": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "silenced_at": {
            "type": "string",
            "format": "date-time"
          },
          "suspended_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DEACTIVATED",
              "SUSPENDED"
            ],
            "default": "ACTIVE"
          },
          "email_confirmed": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "is_webauthn_allowed": {
            "type": "boolean"
          },
          "is_tfa_enabled": {
            "type": "boolean"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          },
          "default_org": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "required": [
          "id",
          "locked",
          "status",
          "email_confirmed"
        ]
      },
      "UserSettingHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "user_id": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "silenced_at": {
            "type": "string",
            "format": "date-time"
          },
          "suspended_at": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "type": "string",
            "enum": [
              "ACTIVE",
              "INACTIVE",
              "DEACTIVATED",
              "SUSPENDED"
            ],
            "default": "ACTIVE"
          },
          "email_confirmed": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "is_webauthn_allowed": {
            "type": "boolean"
          },
          "is_tfa_enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "locked",
          "status",
          "email_confirmed"
        ]
      },
      "Webauthn": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "credential_id": {
            "type": "string",
            "format": "byte"
          },
          "public_key": {
            "type": "string",
            "format": "byte"
          },
          "attestation_type": {
            "type": "string"
          },
          "aaguid": {
            "type": "string",
            "format": "byte"
          },
          "sign_count": {
            "type": "integer",
            "format": "int32"
          },
          "transports": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "backup_eligible": {
            "type": "boolean"
          },
          "backup_state": {
            "type": "boolean"
          },
          "user_present": {
            "type": "boolean"
          },
          "user_verified": {
            "type": "boolean"
          },
          "owner": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "aaguid",
          "sign_count",
          "transports",
          "backup_eligible",
          "backup_state",
          "user_present",
          "user_verified",
          "owner"
        ]
      },
      "Webhook": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "destination_url": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "callback": {
            "type": "string"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "failures": {
            "type": "integer"
          },
          "last_error": {
            "type": "string"
          },
          "last_response": {
            "type": "string"
          },
          "owner": {
            "$ref": "#/components/schemas/Organization"
          },
          "events": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Event"
            }
          }
        },
        "required": [
          "id",
          "name",
          "destination_url",
          "enabled"
        ]
      },
      "WebhookHistory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "history_time": {
            "type": "string",
            "format": "date-time"
          },
          "ref": {
            "type": "string"
          },
          "operation": {
            "type": "string",
            "enum": [
              "INSERT",
              "UPDATE",
              "DELETE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "string"
          },
          "updated_by": {
            "type": "string"
          },
          "deleted_at": {
            "type": "string",
            "format": "date-time"
          },
          "deleted_by": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "destination_url": {
            "type": "string"
          },
          "enabled": {
            "type": "boolean"
          },
          "callback": {
            "type": "string"
          },
          "expires_at": {
            "type": "string",
            "format": "date-time"
          },
          "failures": {
            "type": "integer"
          },
          "last_error": {
            "type": "string"
          },
          "last_response": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "history_time",
          "operation",
          "name",
          "destination_url",
          "enabled"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "invalid input, data invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "403": {
        "description": "insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "409": {
        "description": "conflicting resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "500": {
        "description": "unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "description": "Bearer Token Authentication",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "OAuth2": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://api.datum.net/oauth2/authorize",
            "scopes": {
              "email": "email",
              "profile": "profile"
            }
          }
        }
      },
      "OIDC": {
        "type": "openIdConnect",
        "openIdConnectUrl": "https://api.datum.net/.well-known/openid-configuration"
      }
    }
  },
  "security": [
    {
      "BearerAuth": [],
      "OAuth2": [
        "email",
        "profile"
      ],
      "OIDC": []
    }
  ]
}