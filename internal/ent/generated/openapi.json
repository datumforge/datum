{
  "openapi": "3.0.3",
  "info": {
    "title": "Ent Schema API",
    "description": "This is an auto generated API description made out of an Ent schema definition",
    "version": "0.1.0"
  },
  "paths": {
    "/integrations": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "List Integrations",
        "description": "List Integrations.",
        "operationId": "listIntegration",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Integration list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IntegrationList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Integration"
        ],
        "summary": "Create a new Integration",
        "description": "Creates a new Integration and persists it to storage.",
        "operationId": "createIntegration",
        "requestBody": {
          "description": "Integration to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "created_by": {
                    "type": "integer"
                  },
                  "updated_by": {
                    "type": "integer"
                  },
                  "kind": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "secret_name": {
                    "type": "string"
                  },
                  "organization": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "kind",
                  "secret_name",
                  "organization"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Integration created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/integrations/{id}": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Find a Integration by ID",
        "description": "Finds the Integration with the requested ID and returns it.",
        "operationId": "readIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Integration with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Integration"
        ],
        "summary": "Deletes a Integration by ID",
        "description": "Deletes the Integration with the requested ID.",
        "operationId": "deleteIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Integration with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Integration"
        ],
        "summary": "Updates a Integration",
        "description": "Updates a Integration and persists changes to storage.",
        "operationId": "updateIntegration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Integration properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "created_by": {
                    "type": "integer"
                  },
                  "updated_by": {
                    "type": "integer"
                  },
                  "description": {
                    "type": "string"
                  },
                  "organization": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Integration updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IntegrationUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/integrations/{id}/organization": {
      "get": {
        "tags": [
          "Integration"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Integration with the given ID",
        "operationId": "readIntegrationOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Integration",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Integration with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Integration_OrganizationRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/memberships": {
      "get": {
        "tags": [
          "Membership"
        ],
        "summary": "List Memberships",
        "description": "List Memberships.",
        "operationId": "listMembership",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Membership list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MembershipList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Membership"
        ],
        "summary": "Create a new Membership",
        "description": "Creates a new Membership and persists it to storage.",
        "operationId": "createMembership",
        "requestBody": {
          "description": "Membership to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "created_by": {
                    "type": "integer"
                  },
                  "updated_by": {
                    "type": "integer"
                  },
                  "current": {
                    "type": "boolean"
                  },
                  "organization": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "user": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "current",
                  "organization",
                  "user"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Membership created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/memberships/{id}": {
      "get": {
        "tags": [
          "Membership"
        ],
        "summary": "Find a Membership by ID",
        "description": "Finds the Membership with the requested ID and returns it.",
        "operationId": "readMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Membership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Membership"
        ],
        "summary": "Deletes a Membership by ID",
        "description": "Deletes the Membership with the requested ID.",
        "operationId": "deleteMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Membership with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Membership"
        ],
        "summary": "Updates a Membership",
        "description": "Updates a Membership and persists changes to storage.",
        "operationId": "updateMembership",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Membership properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "created_by": {
                    "type": "integer"
                  },
                  "updated_by": {
                    "type": "integer"
                  },
                  "current": {
                    "type": "boolean"
                  },
                  "organization": {
                    "type": "string",
                    "format": "uuid"
                  },
                  "user": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Membership updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MembershipUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/memberships/{id}/organization": {
      "get": {
        "tags": [
          "Membership"
        ],
        "summary": "Find the attached Organization",
        "description": "Find the attached Organization of the Membership with the given ID",
        "operationId": "readMembershipOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization attached to Membership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Membership_OrganizationRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/memberships/{id}/user": {
      "get": {
        "tags": [
          "Membership"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Membership with the given ID",
        "operationId": "readMembershipUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Membership",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Membership with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Membership_UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List Organizations",
        "description": "List Organizations.",
        "operationId": "listOrganization",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organization list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OrganizationList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Organization"
        ],
        "summary": "Create a new Organization",
        "description": "Creates a new Organization and persists it to storage.",
        "operationId": "createOrganization",
        "requestBody": {
          "description": "Organization to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "created_by": {
                    "type": "integer"
                  },
                  "updated_by": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "memberships": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "integrations": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "name"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organization created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "Find a Organization by ID",
        "description": "Finds the Organization with the requested ID and returns it.",
        "operationId": "readOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Organization with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Organization"
        ],
        "summary": "Deletes a Organization by ID",
        "description": "Deletes the Organization with the requested ID.",
        "operationId": "deleteOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Organization with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Organization"
        ],
        "summary": "Updates a Organization",
        "description": "Updates a Organization and persists changes to storage.",
        "operationId": "updateOrganization",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Organization properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "created_by": {
                    "type": "integer"
                  },
                  "updated_by": {
                    "type": "integer"
                  },
                  "name": {
                    "type": "string"
                  },
                  "memberships": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "integrations": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Organization updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrganizationUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/integrations": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Integrations",
        "description": "List attached Integrations.",
        "operationId": "listOrganizationIntegrations",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization_IntegrationsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/organizations/{id}/memberships": {
      "get": {
        "tags": [
          "Organization"
        ],
        "summary": "List attached Memberships",
        "description": "List attached Memberships.",
        "operationId": "listOrganizationMemberships",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Organization",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Organizations list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Organization_MembershipsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sessions": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "List Sessions",
        "description": "List Sessions.",
        "operationId": "listSession",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Session list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/SessionList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "Session"
        ],
        "summary": "Create a new Session",
        "description": "Creates a new Session and persists it to storage.",
        "operationId": "createSession",
        "requestBody": {
          "description": "Session to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "created_by": {
                    "type": "integer"
                  },
                  "updated_by": {
                    "type": "integer"
                  },
                  "type": {
                    "type": "string",
                    "enum": [
                      "local",
                      "oauth",
                      "app_password"
                    ]
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "token": {
                    "type": "string"
                  },
                  "user_agent": {
                    "type": "string"
                  },
                  "ips": {
                    "type": "string"
                  },
                  "users": {
                    "type": "string",
                    "format": "uuid"
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "type",
                  "disabled",
                  "token",
                  "ips"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Session created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sessions/{id}": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Find a Session by ID",
        "description": "Finds the Session with the requested ID and returns it.",
        "operationId": "readSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Session",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Session with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "Session"
        ],
        "summary": "Deletes a Session by ID",
        "description": "Deletes the Session with the requested ID.",
        "operationId": "deleteSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Session",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Session with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "Session"
        ],
        "summary": "Updates a Session",
        "description": "Updates a Session and persists changes to storage.",
        "operationId": "updateSession",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Session",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "Session properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "created_by": {
                    "type": "integer"
                  },
                  "updated_by": {
                    "type": "integer"
                  },
                  "disabled": {
                    "type": "boolean"
                  },
                  "user_agent": {
                    "type": "string"
                  },
                  "ips": {
                    "type": "string"
                  },
                  "users": {
                    "type": "string",
                    "format": "uuid"
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Session updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/sessions/{id}/users": {
      "get": {
        "tags": [
          "Session"
        ],
        "summary": "Find the attached User",
        "description": "Find the attached User of the Session with the given ID",
        "operationId": "readSessionUsers",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the Session",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User attached to Session with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Session_UsersRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List Users",
        "description": "List Users.",
        "operationId": "listUser",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer",
              "minimum": 1
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer",
              "maximum": 255,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result User list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "post": {
        "tags": [
          "User"
        ],
        "summary": "Create a new User",
        "description": "Creates a new User and persists it to storage.",
        "operationId": "createUser",
        "requestBody": {
          "description": "User to create",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "created_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "created_by": {
                    "type": "integer"
                  },
                  "updated_by": {
                    "type": "integer"
                  },
                  "email": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "locked": {
                    "type": "boolean"
                  },
                  "avatar_remote_url": {
                    "type": "string"
                  },
                  "avatar_local_file": {
                    "type": "string"
                  },
                  "avatar_updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "silenced_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "suspended_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "recovery_code": {
                    "type": "string"
                  },
                  "memberships": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "sessions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                },
                "required": [
                  "created_at",
                  "updated_at",
                  "email",
                  "display_name",
                  "locked"
                ]
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCreate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "Find a User by ID",
        "description": "Finds the User with the requested ID and returns it.",
        "operationId": "readUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User with requested ID was found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserRead"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "delete": {
        "tags": [
          "User"
        ],
        "summary": "Deletes a User by ID",
        "description": "Deletes the User with the requested ID.",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User with requested ID was deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      },
      "patch": {
        "tags": [
          "User"
        ],
        "summary": "Updates a User",
        "description": "Updates a User and persists changes to storage.",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "description": "User properties to update",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "created_by": {
                    "type": "integer"
                  },
                  "updated_by": {
                    "type": "integer"
                  },
                  "email": {
                    "type": "string"
                  },
                  "display_name": {
                    "type": "string"
                  },
                  "locked": {
                    "type": "boolean"
                  },
                  "avatar_remote_url": {
                    "type": "string"
                  },
                  "avatar_local_file": {
                    "type": "string"
                  },
                  "avatar_updated_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "silenced_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "suspended_at": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "recovery_code": {
                    "type": "string"
                  },
                  "memberships": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  },
                  "sessions": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "format": "uuid"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "User updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdate"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/memberships": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Memberships",
        "description": "List attached Memberships.",
        "operationId": "listUserMemberships",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_MembershipsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    },
    "/users/{id}/sessions": {
      "get": {
        "tags": [
          "User"
        ],
        "summary": "List attached Sessions",
        "description": "List attached Sessions.",
        "operationId": "listUserSessions",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "ID of the User",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "what page to render",
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "itemsPerPage",
            "in": "query",
            "description": "item count to render per page",
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "result Users list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User_SessionsList"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "404": {
            "$ref": "#/components/responses/404"
          },
          "409": {
            "$ref": "#/components/responses/409"
          },
          "500": {
            "$ref": "#/components/responses/500"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Integration": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "kind": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "secret_name": {
            "type": "string"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "kind",
          "secret_name",
          "organization"
        ]
      },
      "IntegrationCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "kind": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "secret_name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "kind",
          "secret_name"
        ]
      },
      "IntegrationList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "kind": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "secret_name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "kind",
          "secret_name"
        ]
      },
      "IntegrationRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "kind": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "secret_name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "kind",
          "secret_name"
        ]
      },
      "IntegrationUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "kind": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "secret_name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "kind",
          "secret_name"
        ]
      },
      "Integration_OrganizationRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name"
        ]
      },
      "Membership": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "current": {
            "type": "boolean"
          },
          "organization": {
            "$ref": "#/components/schemas/Organization"
          },
          "user": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "current",
          "organization",
          "user"
        ]
      },
      "MembershipCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "current": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "current"
        ]
      },
      "MembershipList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "current": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "current"
        ]
      },
      "MembershipRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "current": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "current"
        ]
      },
      "MembershipUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "current": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "current"
        ]
      },
      "Membership_OrganizationRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name"
        ]
      },
      "Membership_UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "avatar_remote_url": {
            "type": "string"
          },
          "avatar_local_file": {
            "type": "string"
          },
          "avatar_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "silenced_at": {
            "type": "string",
            "format": "date-time"
          },
          "suspended_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "display_name",
          "locked"
        ]
      },
      "Organization": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Membership"
            }
          },
          "integrations": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Integration"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name"
        ]
      },
      "OrganizationCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name"
        ]
      },
      "OrganizationList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name"
        ]
      },
      "OrganizationRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name"
        ]
      },
      "OrganizationUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "name"
        ]
      },
      "Organization_IntegrationsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "kind": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "secret_name": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "kind",
          "secret_name"
        ]
      },
      "Organization_MembershipsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "current": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "current"
        ]
      },
      "Session": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "type": {
            "type": "string",
            "enum": [
              "local",
              "oauth",
              "app_password"
            ]
          },
          "disabled": {
            "type": "boolean"
          },
          "token": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "ips": {
            "type": "string"
          },
          "users": {
            "$ref": "#/components/schemas/User"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "disabled",
          "token",
          "ips"
        ]
      },
      "SessionCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "type": {
            "type": "string",
            "enum": [
              "local",
              "oauth",
              "app_password"
            ]
          },
          "disabled": {
            "type": "boolean"
          },
          "token": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "ips": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "disabled",
          "token",
          "ips"
        ]
      },
      "SessionList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "type": {
            "type": "string",
            "enum": [
              "local",
              "oauth",
              "app_password"
            ]
          },
          "disabled": {
            "type": "boolean"
          },
          "token": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "ips": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "disabled",
          "token",
          "ips"
        ]
      },
      "SessionRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "type": {
            "type": "string",
            "enum": [
              "local",
              "oauth",
              "app_password"
            ]
          },
          "disabled": {
            "type": "boolean"
          },
          "token": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "ips": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "disabled",
          "token",
          "ips"
        ]
      },
      "SessionUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "type": {
            "type": "string",
            "enum": [
              "local",
              "oauth",
              "app_password"
            ]
          },
          "disabled": {
            "type": "boolean"
          },
          "token": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "ips": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "disabled",
          "token",
          "ips"
        ]
      },
      "Session_UsersRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "avatar_remote_url": {
            "type": "string"
          },
          "avatar_local_file": {
            "type": "string"
          },
          "avatar_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "silenced_at": {
            "type": "string",
            "format": "date-time"
          },
          "suspended_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "display_name",
          "locked"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "avatar_remote_url": {
            "type": "string"
          },
          "avatar_local_file": {
            "type": "string"
          },
          "avatar_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "silenced_at": {
            "type": "string",
            "format": "date-time"
          },
          "suspended_at": {
            "type": "string",
            "format": "date-time"
          },
          "recovery_code": {
            "type": "string"
          },
          "memberships": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Membership"
            }
          },
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Session"
            }
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "display_name",
          "locked"
        ]
      },
      "UserCreate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "avatar_remote_url": {
            "type": "string"
          },
          "avatar_local_file": {
            "type": "string"
          },
          "avatar_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "silenced_at": {
            "type": "string",
            "format": "date-time"
          },
          "suspended_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "display_name",
          "locked"
        ]
      },
      "UserList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "avatar_remote_url": {
            "type": "string"
          },
          "avatar_local_file": {
            "type": "string"
          },
          "avatar_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "silenced_at": {
            "type": "string",
            "format": "date-time"
          },
          "suspended_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "display_name",
          "locked"
        ]
      },
      "UserRead": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "avatar_remote_url": {
            "type": "string"
          },
          "avatar_local_file": {
            "type": "string"
          },
          "avatar_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "silenced_at": {
            "type": "string",
            "format": "date-time"
          },
          "suspended_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "display_name",
          "locked"
        ]
      },
      "UserUpdate": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "email": {
            "type": "string"
          },
          "display_name": {
            "type": "string"
          },
          "locked": {
            "type": "boolean"
          },
          "avatar_remote_url": {
            "type": "string"
          },
          "avatar_local_file": {
            "type": "string"
          },
          "avatar_updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "silenced_at": {
            "type": "string",
            "format": "date-time"
          },
          "suspended_at": {
            "type": "string",
            "format": "date-time"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "email",
          "display_name",
          "locked"
        ]
      },
      "User_MembershipsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "current": {
            "type": "boolean"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "current"
        ]
      },
      "User_SessionsList": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "created_by": {
            "type": "integer"
          },
          "updated_by": {
            "type": "integer"
          },
          "type": {
            "type": "string",
            "enum": [
              "local",
              "oauth",
              "app_password"
            ]
          },
          "disabled": {
            "type": "boolean"
          },
          "token": {
            "type": "string"
          },
          "user_agent": {
            "type": "string"
          },
          "ips": {
            "type": "string"
          }
        },
        "required": [
          "id",
          "created_at",
          "updated_at",
          "type",
          "disabled",
          "token",
          "ips"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "invalid input, data invalid",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "403": {
        "description": "insufficient permissions",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "404": {
        "description": "resource not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "409": {
        "description": "conflicting resources",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      },
      "500": {
        "description": "unexpected error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "code": {
                  "type": "integer"
                },
                "status": {
                  "type": "string"
                },
                "errors": {}
              },
              "required": [
                "code",
                "status"
              ]
            }
          }
        }
      }
    }
  }
}