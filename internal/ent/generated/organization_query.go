// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/apitoken"
	"github.com/datumforge/datum/internal/ent/generated/documentdata"
	"github.com/datumforge/datum/internal/ent/generated/entitlement"
	"github.com/datumforge/datum/internal/ent/generated/event"
	"github.com/datumforge/datum/internal/ent/generated/feature"
	"github.com/datumforge/datum/internal/ent/generated/file"
	"github.com/datumforge/datum/internal/ent/generated/group"
	"github.com/datumforge/datum/internal/ent/generated/hush"
	"github.com/datumforge/datum/internal/ent/generated/integration"
	"github.com/datumforge/datum/internal/ent/generated/invite"
	"github.com/datumforge/datum/internal/ent/generated/oauthprovider"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/organizationsetting"
	"github.com/datumforge/datum/internal/ent/generated/orgmembership"
	"github.com/datumforge/datum/internal/ent/generated/personalaccesstoken"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/datumforge/datum/internal/ent/generated/subscriber"
	"github.com/datumforge/datum/internal/ent/generated/template"
	"github.com/datumforge/datum/internal/ent/generated/user"
	"github.com/datumforge/datum/internal/ent/generated/webhook"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// OrganizationQuery is the builder for querying Organization entities.
type OrganizationQuery struct {
	config
	ctx                           *QueryContext
	order                         []organization.OrderOption
	inters                        []Interceptor
	predicates                    []predicate.Organization
	withParent                    *OrganizationQuery
	withChildren                  *OrganizationQuery
	withGroups                    *GroupQuery
	withTemplates                 *TemplateQuery
	withIntegrations              *IntegrationQuery
	withSetting                   *OrganizationSettingQuery
	withDocumentdata              *DocumentDataQuery
	withEntitlements              *EntitlementQuery
	withPersonalAccessTokens      *PersonalAccessTokenQuery
	withAPITokens                 *APITokenQuery
	withOauthprovider             *OauthProviderQuery
	withUsers                     *UserQuery
	withInvites                   *InviteQuery
	withSubscribers               *SubscriberQuery
	withWebhooks                  *WebhookQuery
	withEvents                    *EventQuery
	withSecrets                   *HushQuery
	withFeatures                  *FeatureQuery
	withFiles                     *FileQuery
	withMembers                   *OrgMembershipQuery
	modifiers                     []func(*sql.Selector)
	loadTotal                     []func(context.Context, []*Organization) error
	withNamedChildren             map[string]*OrganizationQuery
	withNamedGroups               map[string]*GroupQuery
	withNamedTemplates            map[string]*TemplateQuery
	withNamedIntegrations         map[string]*IntegrationQuery
	withNamedDocumentdata         map[string]*DocumentDataQuery
	withNamedEntitlements         map[string]*EntitlementQuery
	withNamedPersonalAccessTokens map[string]*PersonalAccessTokenQuery
	withNamedAPITokens            map[string]*APITokenQuery
	withNamedOauthprovider        map[string]*OauthProviderQuery
	withNamedUsers                map[string]*UserQuery
	withNamedInvites              map[string]*InviteQuery
	withNamedSubscribers          map[string]*SubscriberQuery
	withNamedWebhooks             map[string]*WebhookQuery
	withNamedEvents               map[string]*EventQuery
	withNamedSecrets              map[string]*HushQuery
	withNamedFeatures             map[string]*FeatureQuery
	withNamedFiles                map[string]*FileQuery
	withNamedMembers              map[string]*OrgMembershipQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the OrganizationQuery builder.
func (oq *OrganizationQuery) Where(ps ...predicate.Organization) *OrganizationQuery {
	oq.predicates = append(oq.predicates, ps...)
	return oq
}

// Limit the number of records to be returned by this query.
func (oq *OrganizationQuery) Limit(limit int) *OrganizationQuery {
	oq.ctx.Limit = &limit
	return oq
}

// Offset to start from.
func (oq *OrganizationQuery) Offset(offset int) *OrganizationQuery {
	oq.ctx.Offset = &offset
	return oq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (oq *OrganizationQuery) Unique(unique bool) *OrganizationQuery {
	oq.ctx.Unique = &unique
	return oq
}

// Order specifies how the records should be ordered.
func (oq *OrganizationQuery) Order(o ...organization.OrderOption) *OrganizationQuery {
	oq.order = append(oq.order, o...)
	return oq
}

// QueryParent chains the current query on the "parent" edge.
func (oq *OrganizationQuery) QueryParent() *OrganizationQuery {
	query := (&OrganizationClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, organization.ParentTable, organization.ParentColumn),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Organization
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryChildren chains the current query on the "children" edge.
func (oq *OrganizationQuery) QueryChildren() *OrganizationQuery {
	query := (&OrganizationClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(organization.Table, organization.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.ChildrenTable, organization.ChildrenColumn),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.Organization
		step.Edge.Schema = schemaConfig.Organization
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryGroups chains the current query on the "groups" edge.
func (oq *OrganizationQuery) QueryGroups() *GroupQuery {
	query := (&GroupClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(group.Table, group.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.GroupsTable, organization.GroupsColumn),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.Group
		step.Edge.Schema = schemaConfig.Group
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTemplates chains the current query on the "templates" edge.
func (oq *OrganizationQuery) QueryTemplates() *TemplateQuery {
	query := (&TemplateClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(template.Table, template.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.TemplatesTable, organization.TemplatesColumn),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.Template
		step.Edge.Schema = schemaConfig.Template
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryIntegrations chains the current query on the "integrations" edge.
func (oq *OrganizationQuery) QueryIntegrations() *IntegrationQuery {
	query := (&IntegrationClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(integration.Table, integration.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.IntegrationsTable, organization.IntegrationsColumn),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.Integration
		step.Edge.Schema = schemaConfig.Integration
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySetting chains the current query on the "setting" edge.
func (oq *OrganizationQuery) QuerySetting() *OrganizationSettingQuery {
	query := (&OrganizationSettingClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(organizationsetting.Table, organizationsetting.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, organization.SettingTable, organization.SettingColumn),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.OrganizationSetting
		step.Edge.Schema = schemaConfig.OrganizationSetting
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryDocumentdata chains the current query on the "documentdata" edge.
func (oq *OrganizationQuery) QueryDocumentdata() *DocumentDataQuery {
	query := (&DocumentDataClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(documentdata.Table, documentdata.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.DocumentdataTable, organization.DocumentdataColumn),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.DocumentData
		step.Edge.Schema = schemaConfig.DocumentData
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEntitlements chains the current query on the "entitlements" edge.
func (oq *OrganizationQuery) QueryEntitlements() *EntitlementQuery {
	query := (&EntitlementClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(entitlement.Table, entitlement.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.EntitlementsTable, organization.EntitlementsColumn),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.Entitlement
		step.Edge.Schema = schemaConfig.Entitlement
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryPersonalAccessTokens chains the current query on the "personal_access_tokens" edge.
func (oq *OrganizationQuery) QueryPersonalAccessTokens() *PersonalAccessTokenQuery {
	query := (&PersonalAccessTokenClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(personalaccesstoken.Table, personalaccesstoken.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organization.PersonalAccessTokensTable, organization.PersonalAccessTokensPrimaryKey...),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.PersonalAccessToken
		step.Edge.Schema = schemaConfig.OrganizationPersonalAccessTokens
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryAPITokens chains the current query on the "api_tokens" edge.
func (oq *OrganizationQuery) QueryAPITokens() *APITokenQuery {
	query := (&APITokenClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(apitoken.Table, apitoken.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.APITokensTable, organization.APITokensColumn),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.APIToken
		step.Edge.Schema = schemaConfig.APIToken
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryOauthprovider chains the current query on the "oauthprovider" edge.
func (oq *OrganizationQuery) QueryOauthprovider() *OauthProviderQuery {
	query := (&OauthProviderClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(oauthprovider.Table, oauthprovider.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.OauthproviderTable, organization.OauthproviderColumn),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.OauthProvider
		step.Edge.Schema = schemaConfig.OauthProvider
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryUsers chains the current query on the "users" edge.
func (oq *OrganizationQuery) QueryUsers() *UserQuery {
	query := (&UserClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, organization.UsersTable, organization.UsersPrimaryKey...),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.OrgMembership
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryInvites chains the current query on the "invites" edge.
func (oq *OrganizationQuery) QueryInvites() *InviteQuery {
	query := (&InviteClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(invite.Table, invite.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.InvitesTable, organization.InvitesColumn),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.Invite
		step.Edge.Schema = schemaConfig.Invite
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySubscribers chains the current query on the "subscribers" edge.
func (oq *OrganizationQuery) QuerySubscribers() *SubscriberQuery {
	query := (&SubscriberClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(subscriber.Table, subscriber.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.SubscribersTable, organization.SubscribersColumn),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.Subscriber
		step.Edge.Schema = schemaConfig.Subscriber
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryWebhooks chains the current query on the "webhooks" edge.
func (oq *OrganizationQuery) QueryWebhooks() *WebhookQuery {
	query := (&WebhookClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(webhook.Table, webhook.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, organization.WebhooksTable, organization.WebhooksColumn),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.Webhook
		step.Edge.Schema = schemaConfig.Webhook
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryEvents chains the current query on the "events" edge.
func (oq *OrganizationQuery) QueryEvents() *EventQuery {
	query := (&EventClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(event.Table, event.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organization.EventsTable, organization.EventsPrimaryKey...),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.Event
		step.Edge.Schema = schemaConfig.OrganizationEvents
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QuerySecrets chains the current query on the "secrets" edge.
func (oq *OrganizationQuery) QuerySecrets() *HushQuery {
	query := (&HushClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(hush.Table, hush.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organization.SecretsTable, organization.SecretsPrimaryKey...),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.Hush
		step.Edge.Schema = schemaConfig.OrganizationSecrets
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFeatures chains the current query on the "features" edge.
func (oq *OrganizationQuery) QueryFeatures() *FeatureQuery {
	query := (&FeatureClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(feature.Table, feature.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organization.FeaturesTable, organization.FeaturesPrimaryKey...),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.Feature
		step.Edge.Schema = schemaConfig.OrganizationFeatures
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryFiles chains the current query on the "files" edge.
func (oq *OrganizationQuery) QueryFiles() *FileQuery {
	query := (&FileClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(file.Table, file.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, organization.FilesTable, organization.FilesPrimaryKey...),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.File
		step.Edge.Schema = schemaConfig.OrganizationFiles
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryMembers chains the current query on the "members" edge.
func (oq *OrganizationQuery) QueryMembers() *OrgMembershipQuery {
	query := (&OrgMembershipClient{config: oq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := oq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := oq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(organization.Table, organization.FieldID, selector),
			sqlgraph.To(orgmembership.Table, orgmembership.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, true, organization.MembersTable, organization.MembersColumn),
		)
		schemaConfig := oq.schemaConfig
		step.To.Schema = schemaConfig.OrgMembership
		step.Edge.Schema = schemaConfig.OrgMembership
		fromU = sqlgraph.SetNeighbors(oq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Organization entity from the query.
// Returns a *NotFoundError when no Organization was found.
func (oq *OrganizationQuery) First(ctx context.Context) (*Organization, error) {
	nodes, err := oq.Limit(1).All(setContextOp(ctx, oq.ctx, "First"))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{organization.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (oq *OrganizationQuery) FirstX(ctx context.Context) *Organization {
	node, err := oq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Organization ID from the query.
// Returns a *NotFoundError when no Organization ID was found.
func (oq *OrganizationQuery) FirstID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = oq.Limit(1).IDs(setContextOp(ctx, oq.ctx, "FirstID")); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{organization.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (oq *OrganizationQuery) FirstIDX(ctx context.Context) string {
	id, err := oq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Organization entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Organization entity is found.
// Returns a *NotFoundError when no Organization entities are found.
func (oq *OrganizationQuery) Only(ctx context.Context) (*Organization, error) {
	nodes, err := oq.Limit(2).All(setContextOp(ctx, oq.ctx, "Only"))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{organization.Label}
	default:
		return nil, &NotSingularError{organization.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (oq *OrganizationQuery) OnlyX(ctx context.Context) *Organization {
	node, err := oq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Organization ID in the query.
// Returns a *NotSingularError when more than one Organization ID is found.
// Returns a *NotFoundError when no entities are found.
func (oq *OrganizationQuery) OnlyID(ctx context.Context) (id string, err error) {
	var ids []string
	if ids, err = oq.Limit(2).IDs(setContextOp(ctx, oq.ctx, "OnlyID")); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{organization.Label}
	default:
		err = &NotSingularError{organization.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (oq *OrganizationQuery) OnlyIDX(ctx context.Context) string {
	id, err := oq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Organizations.
func (oq *OrganizationQuery) All(ctx context.Context) ([]*Organization, error) {
	ctx = setContextOp(ctx, oq.ctx, "All")
	if err := oq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*Organization, *OrganizationQuery]()
	return withInterceptors[[]*Organization](ctx, oq, qr, oq.inters)
}

// AllX is like All, but panics if an error occurs.
func (oq *OrganizationQuery) AllX(ctx context.Context) []*Organization {
	nodes, err := oq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Organization IDs.
func (oq *OrganizationQuery) IDs(ctx context.Context) (ids []string, err error) {
	if oq.ctx.Unique == nil && oq.path != nil {
		oq.Unique(true)
	}
	ctx = setContextOp(ctx, oq.ctx, "IDs")
	if err = oq.Select(organization.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (oq *OrganizationQuery) IDsX(ctx context.Context) []string {
	ids, err := oq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (oq *OrganizationQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, oq.ctx, "Count")
	if err := oq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, oq, querierCount[*OrganizationQuery](), oq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (oq *OrganizationQuery) CountX(ctx context.Context) int {
	count, err := oq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (oq *OrganizationQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, oq.ctx, "Exist")
	switch _, err := oq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("generated: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (oq *OrganizationQuery) ExistX(ctx context.Context) bool {
	exist, err := oq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the OrganizationQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (oq *OrganizationQuery) Clone() *OrganizationQuery {
	if oq == nil {
		return nil
	}
	return &OrganizationQuery{
		config:                   oq.config,
		ctx:                      oq.ctx.Clone(),
		order:                    append([]organization.OrderOption{}, oq.order...),
		inters:                   append([]Interceptor{}, oq.inters...),
		predicates:               append([]predicate.Organization{}, oq.predicates...),
		withParent:               oq.withParent.Clone(),
		withChildren:             oq.withChildren.Clone(),
		withGroups:               oq.withGroups.Clone(),
		withTemplates:            oq.withTemplates.Clone(),
		withIntegrations:         oq.withIntegrations.Clone(),
		withSetting:              oq.withSetting.Clone(),
		withDocumentdata:         oq.withDocumentdata.Clone(),
		withEntitlements:         oq.withEntitlements.Clone(),
		withPersonalAccessTokens: oq.withPersonalAccessTokens.Clone(),
		withAPITokens:            oq.withAPITokens.Clone(),
		withOauthprovider:        oq.withOauthprovider.Clone(),
		withUsers:                oq.withUsers.Clone(),
		withInvites:              oq.withInvites.Clone(),
		withSubscribers:          oq.withSubscribers.Clone(),
		withWebhooks:             oq.withWebhooks.Clone(),
		withEvents:               oq.withEvents.Clone(),
		withSecrets:              oq.withSecrets.Clone(),
		withFeatures:             oq.withFeatures.Clone(),
		withFiles:                oq.withFiles.Clone(),
		withMembers:              oq.withMembers.Clone(),
		// clone intermediate query.
		sql:  oq.sql.Clone(),
		path: oq.path,
	}
}

// WithParent tells the query-builder to eager-load the nodes that are connected to
// the "parent" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithParent(opts ...func(*OrganizationQuery)) *OrganizationQuery {
	query := (&OrganizationClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withParent = query
	return oq
}

// WithChildren tells the query-builder to eager-load the nodes that are connected to
// the "children" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithChildren(opts ...func(*OrganizationQuery)) *OrganizationQuery {
	query := (&OrganizationClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withChildren = query
	return oq
}

// WithGroups tells the query-builder to eager-load the nodes that are connected to
// the "groups" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithGroups(opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withGroups = query
	return oq
}

// WithTemplates tells the query-builder to eager-load the nodes that are connected to
// the "templates" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithTemplates(opts ...func(*TemplateQuery)) *OrganizationQuery {
	query := (&TemplateClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withTemplates = query
	return oq
}

// WithIntegrations tells the query-builder to eager-load the nodes that are connected to
// the "integrations" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithIntegrations(opts ...func(*IntegrationQuery)) *OrganizationQuery {
	query := (&IntegrationClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withIntegrations = query
	return oq
}

// WithSetting tells the query-builder to eager-load the nodes that are connected to
// the "setting" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithSetting(opts ...func(*OrganizationSettingQuery)) *OrganizationQuery {
	query := (&OrganizationSettingClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withSetting = query
	return oq
}

// WithDocumentdata tells the query-builder to eager-load the nodes that are connected to
// the "documentdata" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithDocumentdata(opts ...func(*DocumentDataQuery)) *OrganizationQuery {
	query := (&DocumentDataClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withDocumentdata = query
	return oq
}

// WithEntitlements tells the query-builder to eager-load the nodes that are connected to
// the "entitlements" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithEntitlements(opts ...func(*EntitlementQuery)) *OrganizationQuery {
	query := (&EntitlementClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withEntitlements = query
	return oq
}

// WithPersonalAccessTokens tells the query-builder to eager-load the nodes that are connected to
// the "personal_access_tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithPersonalAccessTokens(opts ...func(*PersonalAccessTokenQuery)) *OrganizationQuery {
	query := (&PersonalAccessTokenClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withPersonalAccessTokens = query
	return oq
}

// WithAPITokens tells the query-builder to eager-load the nodes that are connected to
// the "api_tokens" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithAPITokens(opts ...func(*APITokenQuery)) *OrganizationQuery {
	query := (&APITokenClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withAPITokens = query
	return oq
}

// WithOauthprovider tells the query-builder to eager-load the nodes that are connected to
// the "oauthprovider" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithOauthprovider(opts ...func(*OauthProviderQuery)) *OrganizationQuery {
	query := (&OauthProviderClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withOauthprovider = query
	return oq
}

// WithUsers tells the query-builder to eager-load the nodes that are connected to
// the "users" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithUsers(opts ...func(*UserQuery)) *OrganizationQuery {
	query := (&UserClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withUsers = query
	return oq
}

// WithInvites tells the query-builder to eager-load the nodes that are connected to
// the "invites" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithInvites(opts ...func(*InviteQuery)) *OrganizationQuery {
	query := (&InviteClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withInvites = query
	return oq
}

// WithSubscribers tells the query-builder to eager-load the nodes that are connected to
// the "subscribers" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithSubscribers(opts ...func(*SubscriberQuery)) *OrganizationQuery {
	query := (&SubscriberClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withSubscribers = query
	return oq
}

// WithWebhooks tells the query-builder to eager-load the nodes that are connected to
// the "webhooks" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithWebhooks(opts ...func(*WebhookQuery)) *OrganizationQuery {
	query := (&WebhookClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withWebhooks = query
	return oq
}

// WithEvents tells the query-builder to eager-load the nodes that are connected to
// the "events" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithEvents(opts ...func(*EventQuery)) *OrganizationQuery {
	query := (&EventClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withEvents = query
	return oq
}

// WithSecrets tells the query-builder to eager-load the nodes that are connected to
// the "secrets" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithSecrets(opts ...func(*HushQuery)) *OrganizationQuery {
	query := (&HushClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withSecrets = query
	return oq
}

// WithFeatures tells the query-builder to eager-load the nodes that are connected to
// the "features" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithFeatures(opts ...func(*FeatureQuery)) *OrganizationQuery {
	query := (&FeatureClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withFeatures = query
	return oq
}

// WithFiles tells the query-builder to eager-load the nodes that are connected to
// the "files" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithFiles(opts ...func(*FileQuery)) *OrganizationQuery {
	query := (&FileClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withFiles = query
	return oq
}

// WithMembers tells the query-builder to eager-load the nodes that are connected to
// the "members" edge. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithMembers(opts ...func(*OrgMembershipQuery)) *OrganizationQuery {
	query := (&OrgMembershipClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	oq.withMembers = query
	return oq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Organization.Query().
//		GroupBy(organization.FieldCreatedAt).
//		Aggregate(generated.Count()).
//		Scan(ctx, &v)
func (oq *OrganizationQuery) GroupBy(field string, fields ...string) *OrganizationGroupBy {
	oq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &OrganizationGroupBy{build: oq}
	grbuild.flds = &oq.ctx.Fields
	grbuild.label = organization.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.Organization.Query().
//		Select(organization.FieldCreatedAt).
//		Scan(ctx, &v)
func (oq *OrganizationQuery) Select(fields ...string) *OrganizationSelect {
	oq.ctx.Fields = append(oq.ctx.Fields, fields...)
	sbuild := &OrganizationSelect{OrganizationQuery: oq}
	sbuild.label = organization.Label
	sbuild.flds, sbuild.scan = &oq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a OrganizationSelect configured with the given aggregations.
func (oq *OrganizationQuery) Aggregate(fns ...AggregateFunc) *OrganizationSelect {
	return oq.Select().Aggregate(fns...)
}

func (oq *OrganizationQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range oq.inters {
		if inter == nil {
			return fmt.Errorf("generated: uninitialized interceptor (forgotten import generated/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, oq); err != nil {
				return err
			}
		}
	}
	for _, f := range oq.ctx.Fields {
		if !organization.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
		}
	}
	if oq.path != nil {
		prev, err := oq.path(ctx)
		if err != nil {
			return err
		}
		oq.sql = prev
	}
	if organization.Policy == nil {
		return errors.New("generated: uninitialized organization.Policy (forgotten import generated/runtime?)")
	}
	if err := organization.Policy.EvalQuery(ctx, oq); err != nil {
		return err
	}
	return nil
}

func (oq *OrganizationQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*Organization, error) {
	var (
		nodes       = []*Organization{}
		_spec       = oq.querySpec()
		loadedTypes = [20]bool{
			oq.withParent != nil,
			oq.withChildren != nil,
			oq.withGroups != nil,
			oq.withTemplates != nil,
			oq.withIntegrations != nil,
			oq.withSetting != nil,
			oq.withDocumentdata != nil,
			oq.withEntitlements != nil,
			oq.withPersonalAccessTokens != nil,
			oq.withAPITokens != nil,
			oq.withOauthprovider != nil,
			oq.withUsers != nil,
			oq.withInvites != nil,
			oq.withSubscribers != nil,
			oq.withWebhooks != nil,
			oq.withEvents != nil,
			oq.withSecrets != nil,
			oq.withFeatures != nil,
			oq.withFiles != nil,
			oq.withMembers != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*Organization).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &Organization{config: oq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	_spec.Node.Schema = oq.schemaConfig.Organization
	ctx = internal.NewSchemaConfigContext(ctx, oq.schemaConfig)
	if len(oq.modifiers) > 0 {
		_spec.Modifiers = oq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, oq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := oq.withParent; query != nil {
		if err := oq.loadParent(ctx, query, nodes, nil,
			func(n *Organization, e *Organization) { n.Edges.Parent = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withChildren; query != nil {
		if err := oq.loadChildren(ctx, query, nodes,
			func(n *Organization) { n.Edges.Children = []*Organization{} },
			func(n *Organization, e *Organization) { n.Edges.Children = append(n.Edges.Children, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withGroups; query != nil {
		if err := oq.loadGroups(ctx, query, nodes,
			func(n *Organization) { n.Edges.Groups = []*Group{} },
			func(n *Organization, e *Group) { n.Edges.Groups = append(n.Edges.Groups, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withTemplates; query != nil {
		if err := oq.loadTemplates(ctx, query, nodes,
			func(n *Organization) { n.Edges.Templates = []*Template{} },
			func(n *Organization, e *Template) { n.Edges.Templates = append(n.Edges.Templates, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withIntegrations; query != nil {
		if err := oq.loadIntegrations(ctx, query, nodes,
			func(n *Organization) { n.Edges.Integrations = []*Integration{} },
			func(n *Organization, e *Integration) { n.Edges.Integrations = append(n.Edges.Integrations, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withSetting; query != nil {
		if err := oq.loadSetting(ctx, query, nodes, nil,
			func(n *Organization, e *OrganizationSetting) { n.Edges.Setting = e }); err != nil {
			return nil, err
		}
	}
	if query := oq.withDocumentdata; query != nil {
		if err := oq.loadDocumentdata(ctx, query, nodes,
			func(n *Organization) { n.Edges.Documentdata = []*DocumentData{} },
			func(n *Organization, e *DocumentData) { n.Edges.Documentdata = append(n.Edges.Documentdata, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withEntitlements; query != nil {
		if err := oq.loadEntitlements(ctx, query, nodes,
			func(n *Organization) { n.Edges.Entitlements = []*Entitlement{} },
			func(n *Organization, e *Entitlement) { n.Edges.Entitlements = append(n.Edges.Entitlements, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withPersonalAccessTokens; query != nil {
		if err := oq.loadPersonalAccessTokens(ctx, query, nodes,
			func(n *Organization) { n.Edges.PersonalAccessTokens = []*PersonalAccessToken{} },
			func(n *Organization, e *PersonalAccessToken) {
				n.Edges.PersonalAccessTokens = append(n.Edges.PersonalAccessTokens, e)
			}); err != nil {
			return nil, err
		}
	}
	if query := oq.withAPITokens; query != nil {
		if err := oq.loadAPITokens(ctx, query, nodes,
			func(n *Organization) { n.Edges.APITokens = []*APIToken{} },
			func(n *Organization, e *APIToken) { n.Edges.APITokens = append(n.Edges.APITokens, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withOauthprovider; query != nil {
		if err := oq.loadOauthprovider(ctx, query, nodes,
			func(n *Organization) { n.Edges.Oauthprovider = []*OauthProvider{} },
			func(n *Organization, e *OauthProvider) { n.Edges.Oauthprovider = append(n.Edges.Oauthprovider, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withUsers; query != nil {
		if err := oq.loadUsers(ctx, query, nodes,
			func(n *Organization) { n.Edges.Users = []*User{} },
			func(n *Organization, e *User) { n.Edges.Users = append(n.Edges.Users, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withInvites; query != nil {
		if err := oq.loadInvites(ctx, query, nodes,
			func(n *Organization) { n.Edges.Invites = []*Invite{} },
			func(n *Organization, e *Invite) { n.Edges.Invites = append(n.Edges.Invites, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withSubscribers; query != nil {
		if err := oq.loadSubscribers(ctx, query, nodes,
			func(n *Organization) { n.Edges.Subscribers = []*Subscriber{} },
			func(n *Organization, e *Subscriber) { n.Edges.Subscribers = append(n.Edges.Subscribers, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withWebhooks; query != nil {
		if err := oq.loadWebhooks(ctx, query, nodes,
			func(n *Organization) { n.Edges.Webhooks = []*Webhook{} },
			func(n *Organization, e *Webhook) { n.Edges.Webhooks = append(n.Edges.Webhooks, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withEvents; query != nil {
		if err := oq.loadEvents(ctx, query, nodes,
			func(n *Organization) { n.Edges.Events = []*Event{} },
			func(n *Organization, e *Event) { n.Edges.Events = append(n.Edges.Events, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withSecrets; query != nil {
		if err := oq.loadSecrets(ctx, query, nodes,
			func(n *Organization) { n.Edges.Secrets = []*Hush{} },
			func(n *Organization, e *Hush) { n.Edges.Secrets = append(n.Edges.Secrets, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withFeatures; query != nil {
		if err := oq.loadFeatures(ctx, query, nodes,
			func(n *Organization) { n.Edges.Features = []*Feature{} },
			func(n *Organization, e *Feature) { n.Edges.Features = append(n.Edges.Features, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withFiles; query != nil {
		if err := oq.loadFiles(ctx, query, nodes,
			func(n *Organization) { n.Edges.Files = []*File{} },
			func(n *Organization, e *File) { n.Edges.Files = append(n.Edges.Files, e) }); err != nil {
			return nil, err
		}
	}
	if query := oq.withMembers; query != nil {
		if err := oq.loadMembers(ctx, query, nodes,
			func(n *Organization) { n.Edges.Members = []*OrgMembership{} },
			func(n *Organization, e *OrgMembership) { n.Edges.Members = append(n.Edges.Members, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedChildren {
		if err := oq.loadChildren(ctx, query, nodes,
			func(n *Organization) { n.appendNamedChildren(name) },
			func(n *Organization, e *Organization) { n.appendNamedChildren(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedGroups {
		if err := oq.loadGroups(ctx, query, nodes,
			func(n *Organization) { n.appendNamedGroups(name) },
			func(n *Organization, e *Group) { n.appendNamedGroups(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedTemplates {
		if err := oq.loadTemplates(ctx, query, nodes,
			func(n *Organization) { n.appendNamedTemplates(name) },
			func(n *Organization, e *Template) { n.appendNamedTemplates(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedIntegrations {
		if err := oq.loadIntegrations(ctx, query, nodes,
			func(n *Organization) { n.appendNamedIntegrations(name) },
			func(n *Organization, e *Integration) { n.appendNamedIntegrations(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedDocumentdata {
		if err := oq.loadDocumentdata(ctx, query, nodes,
			func(n *Organization) { n.appendNamedDocumentdata(name) },
			func(n *Organization, e *DocumentData) { n.appendNamedDocumentdata(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedEntitlements {
		if err := oq.loadEntitlements(ctx, query, nodes,
			func(n *Organization) { n.appendNamedEntitlements(name) },
			func(n *Organization, e *Entitlement) { n.appendNamedEntitlements(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedPersonalAccessTokens {
		if err := oq.loadPersonalAccessTokens(ctx, query, nodes,
			func(n *Organization) { n.appendNamedPersonalAccessTokens(name) },
			func(n *Organization, e *PersonalAccessToken) { n.appendNamedPersonalAccessTokens(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedAPITokens {
		if err := oq.loadAPITokens(ctx, query, nodes,
			func(n *Organization) { n.appendNamedAPITokens(name) },
			func(n *Organization, e *APIToken) { n.appendNamedAPITokens(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedOauthprovider {
		if err := oq.loadOauthprovider(ctx, query, nodes,
			func(n *Organization) { n.appendNamedOauthprovider(name) },
			func(n *Organization, e *OauthProvider) { n.appendNamedOauthprovider(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedUsers {
		if err := oq.loadUsers(ctx, query, nodes,
			func(n *Organization) { n.appendNamedUsers(name) },
			func(n *Organization, e *User) { n.appendNamedUsers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedInvites {
		if err := oq.loadInvites(ctx, query, nodes,
			func(n *Organization) { n.appendNamedInvites(name) },
			func(n *Organization, e *Invite) { n.appendNamedInvites(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedSubscribers {
		if err := oq.loadSubscribers(ctx, query, nodes,
			func(n *Organization) { n.appendNamedSubscribers(name) },
			func(n *Organization, e *Subscriber) { n.appendNamedSubscribers(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedWebhooks {
		if err := oq.loadWebhooks(ctx, query, nodes,
			func(n *Organization) { n.appendNamedWebhooks(name) },
			func(n *Organization, e *Webhook) { n.appendNamedWebhooks(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedEvents {
		if err := oq.loadEvents(ctx, query, nodes,
			func(n *Organization) { n.appendNamedEvents(name) },
			func(n *Organization, e *Event) { n.appendNamedEvents(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedSecrets {
		if err := oq.loadSecrets(ctx, query, nodes,
			func(n *Organization) { n.appendNamedSecrets(name) },
			func(n *Organization, e *Hush) { n.appendNamedSecrets(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedFeatures {
		if err := oq.loadFeatures(ctx, query, nodes,
			func(n *Organization) { n.appendNamedFeatures(name) },
			func(n *Organization, e *Feature) { n.appendNamedFeatures(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedFiles {
		if err := oq.loadFiles(ctx, query, nodes,
			func(n *Organization) { n.appendNamedFiles(name) },
			func(n *Organization, e *File) { n.appendNamedFiles(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range oq.withNamedMembers {
		if err := oq.loadMembers(ctx, query, nodes,
			func(n *Organization) { n.appendNamedMembers(name) },
			func(n *Organization, e *OrgMembership) { n.appendNamedMembers(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range oq.loadTotal {
		if err := oq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (oq *OrganizationQuery) loadParent(ctx context.Context, query *OrganizationQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Organization)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*Organization)
	for i := range nodes {
		fk := nodes[i].ParentOrganizationID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(organization.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "parent_organization_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (oq *OrganizationQuery) loadChildren(ctx context.Context, query *OrganizationQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Organization)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(organization.FieldParentOrganizationID)
	}
	query.Where(predicate.Organization(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.ChildrenColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.ParentOrganizationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "parent_organization_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrganizationQuery) loadGroups(ctx context.Context, query *GroupQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Group)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(group.FieldOwnerID)
	}
	query.Where(predicate.Group(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.GroupsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrganizationQuery) loadTemplates(ctx context.Context, query *TemplateQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Template)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(template.FieldOwnerID)
	}
	query.Where(predicate.Template(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.TemplatesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrganizationQuery) loadIntegrations(ctx context.Context, query *IntegrationQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Integration)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.withFKs = true
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(integration.FieldOwnerID)
	}
	query.Where(predicate.Integration(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.IntegrationsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrganizationQuery) loadSetting(ctx context.Context, query *OrganizationSettingQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *OrganizationSetting)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(organizationsetting.FieldOrganizationID)
	}
	query.Where(predicate.OrganizationSetting(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.SettingColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrganizationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrganizationQuery) loadDocumentdata(ctx context.Context, query *DocumentDataQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *DocumentData)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(documentdata.FieldOwnerID)
	}
	query.Where(predicate.DocumentData(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.DocumentdataColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrganizationQuery) loadEntitlements(ctx context.Context, query *EntitlementQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Entitlement)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(entitlement.FieldOwnerID)
	}
	query.Where(predicate.Entitlement(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.EntitlementsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrganizationQuery) loadPersonalAccessTokens(ctx context.Context, query *PersonalAccessTokenQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *PersonalAccessToken)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Organization)
	nids := make(map[string]map[*Organization]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(organization.PersonalAccessTokensTable)
		joinT.Schema(oq.schemaConfig.OrganizationPersonalAccessTokens)
		s.Join(joinT).On(s.C(personalaccesstoken.FieldID), joinT.C(organization.PersonalAccessTokensPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(organization.PersonalAccessTokensPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(organization.PersonalAccessTokensPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Organization]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*PersonalAccessToken](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "personal_access_tokens" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (oq *OrganizationQuery) loadAPITokens(ctx context.Context, query *APITokenQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *APIToken)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(apitoken.FieldOwnerID)
	}
	query.Where(predicate.APIToken(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.APITokensColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrganizationQuery) loadOauthprovider(ctx context.Context, query *OauthProviderQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *OauthProvider)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(oauthprovider.FieldOwnerID)
	}
	query.Where(predicate.OauthProvider(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.OauthproviderColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrganizationQuery) loadUsers(ctx context.Context, query *UserQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *User)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Organization)
	nids := make(map[string]map[*Organization]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(organization.UsersTable)
		joinT.Schema(oq.schemaConfig.OrgMembership)
		s.Join(joinT).On(s.C(user.FieldID), joinT.C(organization.UsersPrimaryKey[0]))
		s.Where(sql.InValues(joinT.C(organization.UsersPrimaryKey[1]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(organization.UsersPrimaryKey[1]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Organization]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*User](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "users" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (oq *OrganizationQuery) loadInvites(ctx context.Context, query *InviteQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Invite)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(invite.FieldOwnerID)
	}
	query.Where(predicate.Invite(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.InvitesColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrganizationQuery) loadSubscribers(ctx context.Context, query *SubscriberQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Subscriber)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(subscriber.FieldOwnerID)
	}
	query.Where(predicate.Subscriber(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.SubscribersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrganizationQuery) loadWebhooks(ctx context.Context, query *WebhookQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Webhook)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(webhook.FieldOwnerID)
	}
	query.Where(predicate.Webhook(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.WebhooksColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OwnerID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "owner_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}
func (oq *OrganizationQuery) loadEvents(ctx context.Context, query *EventQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Event)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Organization)
	nids := make(map[string]map[*Organization]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(organization.EventsTable)
		joinT.Schema(oq.schemaConfig.OrganizationEvents)
		s.Join(joinT).On(s.C(event.FieldID), joinT.C(organization.EventsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(organization.EventsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(organization.EventsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Organization]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Event](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "events" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (oq *OrganizationQuery) loadSecrets(ctx context.Context, query *HushQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Hush)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Organization)
	nids := make(map[string]map[*Organization]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(organization.SecretsTable)
		joinT.Schema(oq.schemaConfig.OrganizationSecrets)
		s.Join(joinT).On(s.C(hush.FieldID), joinT.C(organization.SecretsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(organization.SecretsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(organization.SecretsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Organization]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Hush](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "secrets" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (oq *OrganizationQuery) loadFeatures(ctx context.Context, query *FeatureQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *Feature)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Organization)
	nids := make(map[string]map[*Organization]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(organization.FeaturesTable)
		joinT.Schema(oq.schemaConfig.OrganizationFeatures)
		s.Join(joinT).On(s.C(feature.FieldID), joinT.C(organization.FeaturesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(organization.FeaturesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(organization.FeaturesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Organization]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*Feature](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "features" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (oq *OrganizationQuery) loadFiles(ctx context.Context, query *FileQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *File)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[string]*Organization)
	nids := make(map[string]map[*Organization]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(organization.FilesTable)
		joinT.Schema(oq.schemaConfig.OrganizationFiles)
		s.Join(joinT).On(s.C(file.FieldID), joinT.C(organization.FilesPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(organization.FilesPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(organization.FilesPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	qr := QuerierFunc(func(ctx context.Context, q Query) (Value, error) {
		return query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
			assign := spec.Assign
			values := spec.ScanValues
			spec.ScanValues = func(columns []string) ([]any, error) {
				values, err := values(columns[1:])
				if err != nil {
					return nil, err
				}
				return append([]any{new(sql.NullString)}, values...), nil
			}
			spec.Assign = func(columns []string, values []any) error {
				outValue := values[0].(*sql.NullString).String
				inValue := values[1].(*sql.NullString).String
				if nids[inValue] == nil {
					nids[inValue] = map[*Organization]struct{}{byID[outValue]: {}}
					return assign(columns[1:], values[1:])
				}
				nids[inValue][byID[outValue]] = struct{}{}
				return nil
			}
		})
	})
	neighbors, err := withInterceptors[[]*File](ctx, query, qr, query.inters)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "files" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (oq *OrganizationQuery) loadMembers(ctx context.Context, query *OrgMembershipQuery, nodes []*Organization, init func(*Organization), assign func(*Organization, *OrgMembership)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[string]*Organization)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(orgmembership.FieldOrganizationID)
	}
	query.Where(predicate.OrgMembership(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(organization.MembersColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.OrganizationID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "organization_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (oq *OrganizationQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := oq.querySpec()
	_spec.Node.Schema = oq.schemaConfig.Organization
	ctx = internal.NewSchemaConfigContext(ctx, oq.schemaConfig)
	if len(oq.modifiers) > 0 {
		_spec.Modifiers = oq.modifiers
	}
	_spec.Node.Columns = oq.ctx.Fields
	if len(oq.ctx.Fields) > 0 {
		_spec.Unique = oq.ctx.Unique != nil && *oq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, oq.driver, _spec)
}

func (oq *OrganizationQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	_spec.From = oq.sql
	if unique := oq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if oq.path != nil {
		_spec.Unique = true
	}
	if fields := oq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for i := range fields {
			if fields[i] != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
		if oq.withParent != nil {
			_spec.Node.AddColumnOnce(organization.FieldParentOrganizationID)
		}
	}
	if ps := oq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := oq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := oq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := oq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (oq *OrganizationQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(oq.driver.Dialect())
	t1 := builder.Table(organization.Table)
	columns := oq.ctx.Fields
	if len(columns) == 0 {
		columns = organization.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if oq.sql != nil {
		selector = oq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if oq.ctx.Unique != nil && *oq.ctx.Unique {
		selector.Distinct()
	}
	t1.Schema(oq.schemaConfig.Organization)
	ctx = internal.NewSchemaConfigContext(ctx, oq.schemaConfig)
	selector.WithContext(ctx)
	for _, p := range oq.predicates {
		p(selector)
	}
	for _, p := range oq.order {
		p(selector)
	}
	if offset := oq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := oq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedChildren tells the query-builder to eager-load the nodes that are connected to the "children"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedChildren(name string, opts ...func(*OrganizationQuery)) *OrganizationQuery {
	query := (&OrganizationClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedChildren == nil {
		oq.withNamedChildren = make(map[string]*OrganizationQuery)
	}
	oq.withNamedChildren[name] = query
	return oq
}

// WithNamedGroups tells the query-builder to eager-load the nodes that are connected to the "groups"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedGroups(name string, opts ...func(*GroupQuery)) *OrganizationQuery {
	query := (&GroupClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedGroups == nil {
		oq.withNamedGroups = make(map[string]*GroupQuery)
	}
	oq.withNamedGroups[name] = query
	return oq
}

// WithNamedTemplates tells the query-builder to eager-load the nodes that are connected to the "templates"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedTemplates(name string, opts ...func(*TemplateQuery)) *OrganizationQuery {
	query := (&TemplateClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedTemplates == nil {
		oq.withNamedTemplates = make(map[string]*TemplateQuery)
	}
	oq.withNamedTemplates[name] = query
	return oq
}

// WithNamedIntegrations tells the query-builder to eager-load the nodes that are connected to the "integrations"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedIntegrations(name string, opts ...func(*IntegrationQuery)) *OrganizationQuery {
	query := (&IntegrationClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedIntegrations == nil {
		oq.withNamedIntegrations = make(map[string]*IntegrationQuery)
	}
	oq.withNamedIntegrations[name] = query
	return oq
}

// WithNamedDocumentdata tells the query-builder to eager-load the nodes that are connected to the "documentdata"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedDocumentdata(name string, opts ...func(*DocumentDataQuery)) *OrganizationQuery {
	query := (&DocumentDataClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedDocumentdata == nil {
		oq.withNamedDocumentdata = make(map[string]*DocumentDataQuery)
	}
	oq.withNamedDocumentdata[name] = query
	return oq
}

// WithNamedEntitlements tells the query-builder to eager-load the nodes that are connected to the "entitlements"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedEntitlements(name string, opts ...func(*EntitlementQuery)) *OrganizationQuery {
	query := (&EntitlementClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedEntitlements == nil {
		oq.withNamedEntitlements = make(map[string]*EntitlementQuery)
	}
	oq.withNamedEntitlements[name] = query
	return oq
}

// WithNamedPersonalAccessTokens tells the query-builder to eager-load the nodes that are connected to the "personal_access_tokens"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedPersonalAccessTokens(name string, opts ...func(*PersonalAccessTokenQuery)) *OrganizationQuery {
	query := (&PersonalAccessTokenClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedPersonalAccessTokens == nil {
		oq.withNamedPersonalAccessTokens = make(map[string]*PersonalAccessTokenQuery)
	}
	oq.withNamedPersonalAccessTokens[name] = query
	return oq
}

// WithNamedAPITokens tells the query-builder to eager-load the nodes that are connected to the "api_tokens"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedAPITokens(name string, opts ...func(*APITokenQuery)) *OrganizationQuery {
	query := (&APITokenClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedAPITokens == nil {
		oq.withNamedAPITokens = make(map[string]*APITokenQuery)
	}
	oq.withNamedAPITokens[name] = query
	return oq
}

// WithNamedOauthprovider tells the query-builder to eager-load the nodes that are connected to the "oauthprovider"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedOauthprovider(name string, opts ...func(*OauthProviderQuery)) *OrganizationQuery {
	query := (&OauthProviderClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedOauthprovider == nil {
		oq.withNamedOauthprovider = make(map[string]*OauthProviderQuery)
	}
	oq.withNamedOauthprovider[name] = query
	return oq
}

// WithNamedUsers tells the query-builder to eager-load the nodes that are connected to the "users"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedUsers(name string, opts ...func(*UserQuery)) *OrganizationQuery {
	query := (&UserClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedUsers == nil {
		oq.withNamedUsers = make(map[string]*UserQuery)
	}
	oq.withNamedUsers[name] = query
	return oq
}

// WithNamedInvites tells the query-builder to eager-load the nodes that are connected to the "invites"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedInvites(name string, opts ...func(*InviteQuery)) *OrganizationQuery {
	query := (&InviteClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedInvites == nil {
		oq.withNamedInvites = make(map[string]*InviteQuery)
	}
	oq.withNamedInvites[name] = query
	return oq
}

// WithNamedSubscribers tells the query-builder to eager-load the nodes that are connected to the "subscribers"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedSubscribers(name string, opts ...func(*SubscriberQuery)) *OrganizationQuery {
	query := (&SubscriberClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedSubscribers == nil {
		oq.withNamedSubscribers = make(map[string]*SubscriberQuery)
	}
	oq.withNamedSubscribers[name] = query
	return oq
}

// WithNamedWebhooks tells the query-builder to eager-load the nodes that are connected to the "webhooks"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedWebhooks(name string, opts ...func(*WebhookQuery)) *OrganizationQuery {
	query := (&WebhookClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedWebhooks == nil {
		oq.withNamedWebhooks = make(map[string]*WebhookQuery)
	}
	oq.withNamedWebhooks[name] = query
	return oq
}

// WithNamedEvents tells the query-builder to eager-load the nodes that are connected to the "events"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedEvents(name string, opts ...func(*EventQuery)) *OrganizationQuery {
	query := (&EventClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedEvents == nil {
		oq.withNamedEvents = make(map[string]*EventQuery)
	}
	oq.withNamedEvents[name] = query
	return oq
}

// WithNamedSecrets tells the query-builder to eager-load the nodes that are connected to the "secrets"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedSecrets(name string, opts ...func(*HushQuery)) *OrganizationQuery {
	query := (&HushClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedSecrets == nil {
		oq.withNamedSecrets = make(map[string]*HushQuery)
	}
	oq.withNamedSecrets[name] = query
	return oq
}

// WithNamedFeatures tells the query-builder to eager-load the nodes that are connected to the "features"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedFeatures(name string, opts ...func(*FeatureQuery)) *OrganizationQuery {
	query := (&FeatureClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedFeatures == nil {
		oq.withNamedFeatures = make(map[string]*FeatureQuery)
	}
	oq.withNamedFeatures[name] = query
	return oq
}

// WithNamedFiles tells the query-builder to eager-load the nodes that are connected to the "files"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedFiles(name string, opts ...func(*FileQuery)) *OrganizationQuery {
	query := (&FileClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedFiles == nil {
		oq.withNamedFiles = make(map[string]*FileQuery)
	}
	oq.withNamedFiles[name] = query
	return oq
}

// WithNamedMembers tells the query-builder to eager-load the nodes that are connected to the "members"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (oq *OrganizationQuery) WithNamedMembers(name string, opts ...func(*OrgMembershipQuery)) *OrganizationQuery {
	query := (&OrgMembershipClient{config: oq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	if oq.withNamedMembers == nil {
		oq.withNamedMembers = make(map[string]*OrgMembershipQuery)
	}
	oq.withNamedMembers[name] = query
	return oq
}

// OrganizationGroupBy is the group-by builder for Organization entities.
type OrganizationGroupBy struct {
	selector
	build *OrganizationQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ogb *OrganizationGroupBy) Aggregate(fns ...AggregateFunc) *OrganizationGroupBy {
	ogb.fns = append(ogb.fns, fns...)
	return ogb
}

// Scan applies the selector query and scans the result into the given value.
func (ogb *OrganizationGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, ogb.build.ctx, "GroupBy")
	if err := ogb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrganizationQuery, *OrganizationGroupBy](ctx, ogb.build, ogb, ogb.build.inters, v)
}

func (ogb *OrganizationGroupBy) sqlScan(ctx context.Context, root *OrganizationQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(ogb.fns))
	for _, fn := range ogb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*ogb.flds)+len(ogb.fns))
		for _, f := range *ogb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*ogb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ogb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// OrganizationSelect is the builder for selecting fields of Organization entities.
type OrganizationSelect struct {
	*OrganizationQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (os *OrganizationSelect) Aggregate(fns ...AggregateFunc) *OrganizationSelect {
	os.fns = append(os.fns, fns...)
	return os
}

// Scan applies the selector query and scans the result into the given value.
func (os *OrganizationSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, os.ctx, "Select")
	if err := os.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*OrganizationQuery, *OrganizationSelect](ctx, os.OrganizationQuery, os, os.inters, v)
}

func (os *OrganizationSelect) sqlScan(ctx context.Context, root *OrganizationQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(os.fns))
	for _, fn := range os.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*os.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := os.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
