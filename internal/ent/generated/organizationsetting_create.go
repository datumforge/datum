// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/organizationsetting"
)

// OrganizationSettingCreate is the builder for creating a OrganizationSetting entity.
type OrganizationSettingCreate struct {
	config
	mutation *OrganizationSettingMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (osc *OrganizationSettingCreate) SetCreatedAt(t time.Time) *OrganizationSettingCreate {
	osc.mutation.SetCreatedAt(t)
	return osc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (osc *OrganizationSettingCreate) SetNillableCreatedAt(t *time.Time) *OrganizationSettingCreate {
	if t != nil {
		osc.SetCreatedAt(*t)
	}
	return osc
}

// SetUpdatedAt sets the "updated_at" field.
func (osc *OrganizationSettingCreate) SetUpdatedAt(t time.Time) *OrganizationSettingCreate {
	osc.mutation.SetUpdatedAt(t)
	return osc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (osc *OrganizationSettingCreate) SetNillableUpdatedAt(t *time.Time) *OrganizationSettingCreate {
	if t != nil {
		osc.SetUpdatedAt(*t)
	}
	return osc
}

// SetCreatedBy sets the "created_by" field.
func (osc *OrganizationSettingCreate) SetCreatedBy(s string) *OrganizationSettingCreate {
	osc.mutation.SetCreatedBy(s)
	return osc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (osc *OrganizationSettingCreate) SetNillableCreatedBy(s *string) *OrganizationSettingCreate {
	if s != nil {
		osc.SetCreatedBy(*s)
	}
	return osc
}

// SetUpdatedBy sets the "updated_by" field.
func (osc *OrganizationSettingCreate) SetUpdatedBy(s string) *OrganizationSettingCreate {
	osc.mutation.SetUpdatedBy(s)
	return osc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (osc *OrganizationSettingCreate) SetNillableUpdatedBy(s *string) *OrganizationSettingCreate {
	if s != nil {
		osc.SetUpdatedBy(*s)
	}
	return osc
}

// SetDomains sets the "domains" field.
func (osc *OrganizationSettingCreate) SetDomains(s []string) *OrganizationSettingCreate {
	osc.mutation.SetDomains(s)
	return osc
}

// SetSSOCert sets the "sso_cert" field.
func (osc *OrganizationSettingCreate) SetSSOCert(s string) *OrganizationSettingCreate {
	osc.mutation.SetSSOCert(s)
	return osc
}

// SetNillableSSOCert sets the "sso_cert" field if the given value is not nil.
func (osc *OrganizationSettingCreate) SetNillableSSOCert(s *string) *OrganizationSettingCreate {
	if s != nil {
		osc.SetSSOCert(*s)
	}
	return osc
}

// SetSSOEntrypoint sets the "sso_entrypoint" field.
func (osc *OrganizationSettingCreate) SetSSOEntrypoint(s string) *OrganizationSettingCreate {
	osc.mutation.SetSSOEntrypoint(s)
	return osc
}

// SetNillableSSOEntrypoint sets the "sso_entrypoint" field if the given value is not nil.
func (osc *OrganizationSettingCreate) SetNillableSSOEntrypoint(s *string) *OrganizationSettingCreate {
	if s != nil {
		osc.SetSSOEntrypoint(*s)
	}
	return osc
}

// SetSSOIssuer sets the "sso_issuer" field.
func (osc *OrganizationSettingCreate) SetSSOIssuer(s string) *OrganizationSettingCreate {
	osc.mutation.SetSSOIssuer(s)
	return osc
}

// SetNillableSSOIssuer sets the "sso_issuer" field if the given value is not nil.
func (osc *OrganizationSettingCreate) SetNillableSSOIssuer(s *string) *OrganizationSettingCreate {
	if s != nil {
		osc.SetSSOIssuer(*s)
	}
	return osc
}

// SetBillingContact sets the "billing_contact" field.
func (osc *OrganizationSettingCreate) SetBillingContact(s string) *OrganizationSettingCreate {
	osc.mutation.SetBillingContact(s)
	return osc
}

// SetBillingEmail sets the "billing_email" field.
func (osc *OrganizationSettingCreate) SetBillingEmail(s string) *OrganizationSettingCreate {
	osc.mutation.SetBillingEmail(s)
	return osc
}

// SetBillingPhone sets the "billing_phone" field.
func (osc *OrganizationSettingCreate) SetBillingPhone(s string) *OrganizationSettingCreate {
	osc.mutation.SetBillingPhone(s)
	return osc
}

// SetBillingAddress sets the "billing_address" field.
func (osc *OrganizationSettingCreate) SetBillingAddress(s string) *OrganizationSettingCreate {
	osc.mutation.SetBillingAddress(s)
	return osc
}

// SetTaxIdentifier sets the "tax_identifier" field.
func (osc *OrganizationSettingCreate) SetTaxIdentifier(s string) *OrganizationSettingCreate {
	osc.mutation.SetTaxIdentifier(s)
	return osc
}

// SetTags sets the "tags" field.
func (osc *OrganizationSettingCreate) SetTags(s []string) *OrganizationSettingCreate {
	osc.mutation.SetTags(s)
	return osc
}

// SetID sets the "id" field.
func (osc *OrganizationSettingCreate) SetID(s string) *OrganizationSettingCreate {
	osc.mutation.SetID(s)
	return osc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (osc *OrganizationSettingCreate) SetNillableID(s *string) *OrganizationSettingCreate {
	if s != nil {
		osc.SetID(*s)
	}
	return osc
}

// SetOrgnaizationID sets the "orgnaization" edge to the Organization entity by ID.
func (osc *OrganizationSettingCreate) SetOrgnaizationID(id string) *OrganizationSettingCreate {
	osc.mutation.SetOrgnaizationID(id)
	return osc
}

// SetNillableOrgnaizationID sets the "orgnaization" edge to the Organization entity by ID if the given value is not nil.
func (osc *OrganizationSettingCreate) SetNillableOrgnaizationID(id *string) *OrganizationSettingCreate {
	if id != nil {
		osc = osc.SetOrgnaizationID(*id)
	}
	return osc
}

// SetOrgnaization sets the "orgnaization" edge to the Organization entity.
func (osc *OrganizationSettingCreate) SetOrgnaization(o *Organization) *OrganizationSettingCreate {
	return osc.SetOrgnaizationID(o.ID)
}

// Mutation returns the OrganizationSettingMutation object of the builder.
func (osc *OrganizationSettingCreate) Mutation() *OrganizationSettingMutation {
	return osc.mutation
}

// Save creates the OrganizationSetting in the database.
func (osc *OrganizationSettingCreate) Save(ctx context.Context) (*OrganizationSetting, error) {
	if err := osc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, osc.sqlSave, osc.mutation, osc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (osc *OrganizationSettingCreate) SaveX(ctx context.Context) *OrganizationSetting {
	v, err := osc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (osc *OrganizationSettingCreate) Exec(ctx context.Context) error {
	_, err := osc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osc *OrganizationSettingCreate) ExecX(ctx context.Context) {
	if err := osc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osc *OrganizationSettingCreate) defaults() error {
	if _, ok := osc.mutation.CreatedAt(); !ok {
		if organizationsetting.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized organizationsetting.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := organizationsetting.DefaultCreatedAt()
		osc.mutation.SetCreatedAt(v)
	}
	if _, ok := osc.mutation.UpdatedAt(); !ok {
		if organizationsetting.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized organizationsetting.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := organizationsetting.DefaultUpdatedAt()
		osc.mutation.SetUpdatedAt(v)
	}
	if _, ok := osc.mutation.SSOCert(); !ok {
		v := organizationsetting.DefaultSSOCert
		osc.mutation.SetSSOCert(v)
	}
	if _, ok := osc.mutation.SSOEntrypoint(); !ok {
		v := organizationsetting.DefaultSSOEntrypoint
		osc.mutation.SetSSOEntrypoint(v)
	}
	if _, ok := osc.mutation.SSOIssuer(); !ok {
		v := organizationsetting.DefaultSSOIssuer
		osc.mutation.SetSSOIssuer(v)
	}
	if _, ok := osc.mutation.Tags(); !ok {
		v := organizationsetting.DefaultTags
		osc.mutation.SetTags(v)
	}
	if _, ok := osc.mutation.ID(); !ok {
		if organizationsetting.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized organizationsetting.DefaultID (forgotten import generated/runtime?)")
		}
		v := organizationsetting.DefaultID()
		osc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (osc *OrganizationSettingCreate) check() error {
	if _, ok := osc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "OrganizationSetting.created_at"`)}
	}
	if _, ok := osc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "OrganizationSetting.updated_at"`)}
	}
	if _, ok := osc.mutation.Domains(); !ok {
		return &ValidationError{Name: "domains", err: errors.New(`generated: missing required field "OrganizationSetting.domains"`)}
	}
	if _, ok := osc.mutation.SSOCert(); !ok {
		return &ValidationError{Name: "sso_cert", err: errors.New(`generated: missing required field "OrganizationSetting.sso_cert"`)}
	}
	if _, ok := osc.mutation.SSOEntrypoint(); !ok {
		return &ValidationError{Name: "sso_entrypoint", err: errors.New(`generated: missing required field "OrganizationSetting.sso_entrypoint"`)}
	}
	if _, ok := osc.mutation.SSOIssuer(); !ok {
		return &ValidationError{Name: "sso_issuer", err: errors.New(`generated: missing required field "OrganizationSetting.sso_issuer"`)}
	}
	if _, ok := osc.mutation.BillingContact(); !ok {
		return &ValidationError{Name: "billing_contact", err: errors.New(`generated: missing required field "OrganizationSetting.billing_contact"`)}
	}
	if v, ok := osc.mutation.BillingContact(); ok {
		if err := organizationsetting.BillingContactValidator(v); err != nil {
			return &ValidationError{Name: "billing_contact", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.billing_contact": %w`, err)}
		}
	}
	if _, ok := osc.mutation.BillingEmail(); !ok {
		return &ValidationError{Name: "billing_email", err: errors.New(`generated: missing required field "OrganizationSetting.billing_email"`)}
	}
	if v, ok := osc.mutation.BillingEmail(); ok {
		if err := organizationsetting.BillingEmailValidator(v); err != nil {
			return &ValidationError{Name: "billing_email", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.billing_email": %w`, err)}
		}
	}
	if _, ok := osc.mutation.BillingPhone(); !ok {
		return &ValidationError{Name: "billing_phone", err: errors.New(`generated: missing required field "OrganizationSetting.billing_phone"`)}
	}
	if v, ok := osc.mutation.BillingPhone(); ok {
		if err := organizationsetting.BillingPhoneValidator(v); err != nil {
			return &ValidationError{Name: "billing_phone", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.billing_phone": %w`, err)}
		}
	}
	if _, ok := osc.mutation.BillingAddress(); !ok {
		return &ValidationError{Name: "billing_address", err: errors.New(`generated: missing required field "OrganizationSetting.billing_address"`)}
	}
	if v, ok := osc.mutation.BillingAddress(); ok {
		if err := organizationsetting.BillingAddressValidator(v); err != nil {
			return &ValidationError{Name: "billing_address", err: fmt.Errorf(`generated: validator failed for field "OrganizationSetting.billing_address": %w`, err)}
		}
	}
	if _, ok := osc.mutation.TaxIdentifier(); !ok {
		return &ValidationError{Name: "tax_identifier", err: errors.New(`generated: missing required field "OrganizationSetting.tax_identifier"`)}
	}
	return nil
}

func (osc *OrganizationSettingCreate) sqlSave(ctx context.Context) (*OrganizationSetting, error) {
	if err := osc.check(); err != nil {
		return nil, err
	}
	_node, _spec := osc.createSpec()
	if err := sqlgraph.CreateNode(ctx, osc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected OrganizationSetting.ID type: %T", _spec.ID.Value)
		}
	}
	osc.mutation.id = &_node.ID
	osc.mutation.done = true
	return _node, nil
}

func (osc *OrganizationSettingCreate) createSpec() (*OrganizationSetting, *sqlgraph.CreateSpec) {
	var (
		_node = &OrganizationSetting{config: osc.config}
		_spec = sqlgraph.NewCreateSpec(organizationsetting.Table, sqlgraph.NewFieldSpec(organizationsetting.FieldID, field.TypeString))
	)
	_spec.Schema = osc.schemaConfig.OrganizationSetting
	if id, ok := osc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := osc.mutation.CreatedAt(); ok {
		_spec.SetField(organizationsetting.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := osc.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationsetting.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := osc.mutation.CreatedBy(); ok {
		_spec.SetField(organizationsetting.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := osc.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationsetting.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := osc.mutation.Domains(); ok {
		_spec.SetField(organizationsetting.FieldDomains, field.TypeJSON, value)
		_node.Domains = value
	}
	if value, ok := osc.mutation.SSOCert(); ok {
		_spec.SetField(organizationsetting.FieldSSOCert, field.TypeString, value)
		_node.SSOCert = value
	}
	if value, ok := osc.mutation.SSOEntrypoint(); ok {
		_spec.SetField(organizationsetting.FieldSSOEntrypoint, field.TypeString, value)
		_node.SSOEntrypoint = value
	}
	if value, ok := osc.mutation.SSOIssuer(); ok {
		_spec.SetField(organizationsetting.FieldSSOIssuer, field.TypeString, value)
		_node.SSOIssuer = value
	}
	if value, ok := osc.mutation.BillingContact(); ok {
		_spec.SetField(organizationsetting.FieldBillingContact, field.TypeString, value)
		_node.BillingContact = value
	}
	if value, ok := osc.mutation.BillingEmail(); ok {
		_spec.SetField(organizationsetting.FieldBillingEmail, field.TypeString, value)
		_node.BillingEmail = value
	}
	if value, ok := osc.mutation.BillingPhone(); ok {
		_spec.SetField(organizationsetting.FieldBillingPhone, field.TypeString, value)
		_node.BillingPhone = value
	}
	if value, ok := osc.mutation.BillingAddress(); ok {
		_spec.SetField(organizationsetting.FieldBillingAddress, field.TypeString, value)
		_node.BillingAddress = value
	}
	if value, ok := osc.mutation.TaxIdentifier(); ok {
		_spec.SetField(organizationsetting.FieldTaxIdentifier, field.TypeString, value)
		_node.TaxIdentifier = value
	}
	if value, ok := osc.mutation.Tags(); ok {
		_spec.SetField(organizationsetting.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if nodes := osc.mutation.OrgnaizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organizationsetting.OrgnaizationTable,
			Columns: []string{organizationsetting.OrgnaizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = osc.schemaConfig.OrganizationSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.organization_setting = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OrganizationSettingCreateBulk is the builder for creating many OrganizationSetting entities in bulk.
type OrganizationSettingCreateBulk struct {
	config
	err      error
	builders []*OrganizationSettingCreate
}

// Save creates the OrganizationSetting entities in the database.
func (oscb *OrganizationSettingCreateBulk) Save(ctx context.Context) ([]*OrganizationSetting, error) {
	if oscb.err != nil {
		return nil, oscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(oscb.builders))
	nodes := make([]*OrganizationSetting, len(oscb.builders))
	mutators := make([]Mutator, len(oscb.builders))
	for i := range oscb.builders {
		func(i int, root context.Context) {
			builder := oscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*OrganizationSettingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, oscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, oscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, oscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (oscb *OrganizationSettingCreateBulk) SaveX(ctx context.Context) []*OrganizationSetting {
	v, err := oscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (oscb *OrganizationSettingCreateBulk) Exec(ctx context.Context) error {
	_, err := oscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (oscb *OrganizationSettingCreateBulk) ExecX(ctx context.Context) {
	if err := oscb.Exec(ctx); err != nil {
		panic(err)
	}
}
