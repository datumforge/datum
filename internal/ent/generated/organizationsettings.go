// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datumforge/datum/internal/ent/generated/organizationsettings"
)

// OrganizationSettings is the model entity for the OrganizationSettings schema.
type OrganizationSettings struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Domains holds the value of the "domains" field.
	Domains []string `json:"domains,omitempty"`
	// SSOCert holds the value of the "sso_cert" field.
	SSOCert string `json:"sso_cert,omitempty"`
	// SSOEntrypoint holds the value of the "sso_entrypoint" field.
	SSOEntrypoint string `json:"sso_entrypoint,omitempty"`
	// SSOIssuer holds the value of the "sso_issuer" field.
	SSOIssuer string `json:"sso_issuer,omitempty"`
	// Name of the person to contact for billing
	BillingContact string `json:"billing_contact,omitempty"`
	// BillingEmail holds the value of the "billing_email" field.
	BillingEmail string `json:"billing_email,omitempty"`
	// BillingPhone holds the value of the "billing_phone" field.
	BillingPhone string `json:"billing_phone,omitempty"`
	// BillingAddress holds the value of the "billing_address" field.
	BillingAddress string `json:"billing_address,omitempty"`
	// Usually government-issued tax ID or business ID such as ABN in Australia
	TaxIdentifier string `json:"tax_identifier,omitempty"`
	selectValues  sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*OrganizationSettings) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case organizationsettings.FieldDomains:
			values[i] = new([]byte)
		case organizationsettings.FieldID, organizationsettings.FieldCreatedBy, organizationsettings.FieldUpdatedBy, organizationsettings.FieldSSOCert, organizationsettings.FieldSSOEntrypoint, organizationsettings.FieldSSOIssuer, organizationsettings.FieldBillingContact, organizationsettings.FieldBillingEmail, organizationsettings.FieldBillingPhone, organizationsettings.FieldBillingAddress, organizationsettings.FieldTaxIdentifier:
			values[i] = new(sql.NullString)
		case organizationsettings.FieldCreatedAt, organizationsettings.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the OrganizationSettings fields.
func (os *OrganizationSettings) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case organizationsettings.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				os.ID = value.String
			}
		case organizationsettings.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				os.CreatedAt = value.Time
			}
		case organizationsettings.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				os.UpdatedAt = value.Time
			}
		case organizationsettings.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				os.CreatedBy = value.String
			}
		case organizationsettings.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				os.UpdatedBy = value.String
			}
		case organizationsettings.FieldDomains:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field domains", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &os.Domains); err != nil {
					return fmt.Errorf("unmarshal field domains: %w", err)
				}
			}
		case organizationsettings.FieldSSOCert:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sso_cert", values[i])
			} else if value.Valid {
				os.SSOCert = value.String
			}
		case organizationsettings.FieldSSOEntrypoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sso_entrypoint", values[i])
			} else if value.Valid {
				os.SSOEntrypoint = value.String
			}
		case organizationsettings.FieldSSOIssuer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sso_issuer", values[i])
			} else if value.Valid {
				os.SSOIssuer = value.String
			}
		case organizationsettings.FieldBillingContact:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_contact", values[i])
			} else if value.Valid {
				os.BillingContact = value.String
			}
		case organizationsettings.FieldBillingEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_email", values[i])
			} else if value.Valid {
				os.BillingEmail = value.String
			}
		case organizationsettings.FieldBillingPhone:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_phone", values[i])
			} else if value.Valid {
				os.BillingPhone = value.String
			}
		case organizationsettings.FieldBillingAddress:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field billing_address", values[i])
			} else if value.Valid {
				os.BillingAddress = value.String
			}
		case organizationsettings.FieldTaxIdentifier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tax_identifier", values[i])
			} else if value.Valid {
				os.TaxIdentifier = value.String
			}
		default:
			os.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the OrganizationSettings.
// This includes values selected through modifiers, order, etc.
func (os *OrganizationSettings) Value(name string) (ent.Value, error) {
	return os.selectValues.Get(name)
}

// Update returns a builder for updating this OrganizationSettings.
// Note that you need to call OrganizationSettings.Unwrap() before calling this method if this OrganizationSettings
// was returned from a transaction, and the transaction was committed or rolled back.
func (os *OrganizationSettings) Update() *OrganizationSettingsUpdateOne {
	return NewOrganizationSettingsClient(os.config).UpdateOne(os)
}

// Unwrap unwraps the OrganizationSettings entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (os *OrganizationSettings) Unwrap() *OrganizationSettings {
	_tx, ok := os.config.driver.(*txDriver)
	if !ok {
		panic("generated: OrganizationSettings is not a transactional entity")
	}
	os.config.driver = _tx.drv
	return os
}

// String implements the fmt.Stringer.
func (os *OrganizationSettings) String() string {
	var builder strings.Builder
	builder.WriteString("OrganizationSettings(")
	builder.WriteString(fmt.Sprintf("id=%v, ", os.ID))
	builder.WriteString("created_at=")
	builder.WriteString(os.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(os.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(os.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(os.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("domains=")
	builder.WriteString(fmt.Sprintf("%v", os.Domains))
	builder.WriteString(", ")
	builder.WriteString("sso_cert=")
	builder.WriteString(os.SSOCert)
	builder.WriteString(", ")
	builder.WriteString("sso_entrypoint=")
	builder.WriteString(os.SSOEntrypoint)
	builder.WriteString(", ")
	builder.WriteString("sso_issuer=")
	builder.WriteString(os.SSOIssuer)
	builder.WriteString(", ")
	builder.WriteString("billing_contact=")
	builder.WriteString(os.BillingContact)
	builder.WriteString(", ")
	builder.WriteString("billing_email=")
	builder.WriteString(os.BillingEmail)
	builder.WriteString(", ")
	builder.WriteString("billing_phone=")
	builder.WriteString(os.BillingPhone)
	builder.WriteString(", ")
	builder.WriteString("billing_address=")
	builder.WriteString(os.BillingAddress)
	builder.WriteString(", ")
	builder.WriteString("tax_identifier=")
	builder.WriteString(os.TaxIdentifier)
	builder.WriteByte(')')
	return builder.String()
}

// OrganizationSettingsSlice is a parsable slice of OrganizationSettings.
type OrganizationSettingsSlice []*OrganizationSettings
