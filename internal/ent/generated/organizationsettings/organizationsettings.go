// Code generated by ent, DO NOT EDIT.

package organizationsettings

import (
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the organizationsettings type in the database.
	Label = "organization_settings"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldCreatedBy holds the string denoting the created_by field in the database.
	FieldCreatedBy = "created_by"
	// FieldUpdatedBy holds the string denoting the updated_by field in the database.
	FieldUpdatedBy = "updated_by"
	// FieldDomains holds the string denoting the domains field in the database.
	FieldDomains = "domains"
	// FieldSSOCert holds the string denoting the sso_cert field in the database.
	FieldSSOCert = "sso_cert"
	// FieldSSOEntrypoint holds the string denoting the sso_entrypoint field in the database.
	FieldSSOEntrypoint = "sso_entrypoint"
	// FieldSSOIssuer holds the string denoting the sso_issuer field in the database.
	FieldSSOIssuer = "sso_issuer"
	// FieldBillingContact holds the string denoting the billing_contact field in the database.
	FieldBillingContact = "billing_contact"
	// FieldBillingEmail holds the string denoting the billing_email field in the database.
	FieldBillingEmail = "billing_email"
	// FieldBillingPhone holds the string denoting the billing_phone field in the database.
	FieldBillingPhone = "billing_phone"
	// FieldBillingAddress holds the string denoting the billing_address field in the database.
	FieldBillingAddress = "billing_address"
	// FieldTaxIdentifier holds the string denoting the tax_identifier field in the database.
	FieldTaxIdentifier = "tax_identifier"
	// FieldTags holds the string denoting the tags field in the database.
	FieldTags = "tags"
	// EdgeOrgnaization holds the string denoting the orgnaization edge name in mutations.
	EdgeOrgnaization = "orgnaization"
	// Table holds the table name of the organizationsettings in the database.
	Table = "organization_settings"
	// OrgnaizationTable is the table that holds the orgnaization relation/edge.
	OrgnaizationTable = "organization_settings"
	// OrgnaizationInverseTable is the table name for the Organization entity.
	// It exists in this package in order to avoid circular dependency with the "organization" package.
	OrgnaizationInverseTable = "organizations"
	// OrgnaizationColumn is the table column denoting the orgnaization relation/edge.
	OrgnaizationColumn = "organization_setting"
)

// Columns holds all SQL columns for organizationsettings fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldCreatedBy,
	FieldUpdatedBy,
	FieldDomains,
	FieldSSOCert,
	FieldSSOEntrypoint,
	FieldSSOIssuer,
	FieldBillingContact,
	FieldBillingEmail,
	FieldBillingPhone,
	FieldBillingAddress,
	FieldTaxIdentifier,
	FieldTags,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "organization_settings"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"organization_setting",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// Note that the variables below are initialized by the runtime
// package on the initialization of the application. Therefore,
// it should be imported in the main as follows:
//
//	import _ "github.com/datumforge/datum/internal/ent/generated/runtime"
var (
	Hooks [1]ent.Hook
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultSSOCert holds the default value on creation for the "sso_cert" field.
	DefaultSSOCert string
	// DefaultSSOEntrypoint holds the default value on creation for the "sso_entrypoint" field.
	DefaultSSOEntrypoint string
	// DefaultSSOIssuer holds the default value on creation for the "sso_issuer" field.
	DefaultSSOIssuer string
	// BillingContactValidator is a validator for the "billing_contact" field. It is called by the builders before save.
	BillingContactValidator func(string) error
	// BillingEmailValidator is a validator for the "billing_email" field. It is called by the builders before save.
	BillingEmailValidator func(string) error
	// BillingPhoneValidator is a validator for the "billing_phone" field. It is called by the builders before save.
	BillingPhoneValidator func(string) error
	// BillingAddressValidator is a validator for the "billing_address" field. It is called by the builders before save.
	BillingAddressValidator func(string) error
	// DefaultTags holds the default value on creation for the "tags" field.
	DefaultTags []string
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() string
)

// OrderOption defines the ordering options for the OrganizationSettings queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByCreatedBy orders the results by the created_by field.
func ByCreatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedBy, opts...).ToFunc()
}

// ByUpdatedBy orders the results by the updated_by field.
func ByUpdatedBy(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedBy, opts...).ToFunc()
}

// BySSOCert orders the results by the sso_cert field.
func BySSOCert(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSSOCert, opts...).ToFunc()
}

// BySSOEntrypoint orders the results by the sso_entrypoint field.
func BySSOEntrypoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSSOEntrypoint, opts...).ToFunc()
}

// BySSOIssuer orders the results by the sso_issuer field.
func BySSOIssuer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSSOIssuer, opts...).ToFunc()
}

// ByBillingContact orders the results by the billing_contact field.
func ByBillingContact(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingContact, opts...).ToFunc()
}

// ByBillingEmail orders the results by the billing_email field.
func ByBillingEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingEmail, opts...).ToFunc()
}

// ByBillingPhone orders the results by the billing_phone field.
func ByBillingPhone(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingPhone, opts...).ToFunc()
}

// ByBillingAddress orders the results by the billing_address field.
func ByBillingAddress(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBillingAddress, opts...).ToFunc()
}

// ByTaxIdentifier orders the results by the tax_identifier field.
func ByTaxIdentifier(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTaxIdentifier, opts...).ToFunc()
}

// ByOrgnaizationField orders the results by orgnaization field.
func ByOrgnaizationField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOrgnaizationStep(), sql.OrderByField(field, opts...))
	}
}
func newOrgnaizationStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OrgnaizationInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, OrgnaizationTable, OrgnaizationColumn),
	)
}
