// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/organizationsettings"
	"github.com/datumforge/datum/internal/ent/generated/predicate"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// OrganizationSettingsUpdate is the builder for updating OrganizationSettings entities.
type OrganizationSettingsUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationSettingsMutation
}

// Where appends a list predicates to the OrganizationSettingsUpdate builder.
func (osu *OrganizationSettingsUpdate) Where(ps ...predicate.OrganizationSettings) *OrganizationSettingsUpdate {
	osu.mutation.Where(ps...)
	return osu
}

// SetUpdatedAt sets the "updated_at" field.
func (osu *OrganizationSettingsUpdate) SetUpdatedAt(t time.Time) *OrganizationSettingsUpdate {
	osu.mutation.SetUpdatedAt(t)
	return osu
}

// SetCreatedBy sets the "created_by" field.
func (osu *OrganizationSettingsUpdate) SetCreatedBy(s string) *OrganizationSettingsUpdate {
	osu.mutation.SetCreatedBy(s)
	return osu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (osu *OrganizationSettingsUpdate) SetNillableCreatedBy(s *string) *OrganizationSettingsUpdate {
	if s != nil {
		osu.SetCreatedBy(*s)
	}
	return osu
}

// ClearCreatedBy clears the value of the "created_by" field.
func (osu *OrganizationSettingsUpdate) ClearCreatedBy() *OrganizationSettingsUpdate {
	osu.mutation.ClearCreatedBy()
	return osu
}

// SetUpdatedBy sets the "updated_by" field.
func (osu *OrganizationSettingsUpdate) SetUpdatedBy(s string) *OrganizationSettingsUpdate {
	osu.mutation.SetUpdatedBy(s)
	return osu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (osu *OrganizationSettingsUpdate) SetNillableUpdatedBy(s *string) *OrganizationSettingsUpdate {
	if s != nil {
		osu.SetUpdatedBy(*s)
	}
	return osu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (osu *OrganizationSettingsUpdate) ClearUpdatedBy() *OrganizationSettingsUpdate {
	osu.mutation.ClearUpdatedBy()
	return osu
}

// SetDomains sets the "domains" field.
func (osu *OrganizationSettingsUpdate) SetDomains(s []string) *OrganizationSettingsUpdate {
	osu.mutation.SetDomains(s)
	return osu
}

// AppendDomains appends s to the "domains" field.
func (osu *OrganizationSettingsUpdate) AppendDomains(s []string) *OrganizationSettingsUpdate {
	osu.mutation.AppendDomains(s)
	return osu
}

// SetSSOCert sets the "sso_cert" field.
func (osu *OrganizationSettingsUpdate) SetSSOCert(s string) *OrganizationSettingsUpdate {
	osu.mutation.SetSSOCert(s)
	return osu
}

// SetNillableSSOCert sets the "sso_cert" field if the given value is not nil.
func (osu *OrganizationSettingsUpdate) SetNillableSSOCert(s *string) *OrganizationSettingsUpdate {
	if s != nil {
		osu.SetSSOCert(*s)
	}
	return osu
}

// SetSSOEntrypoint sets the "sso_entrypoint" field.
func (osu *OrganizationSettingsUpdate) SetSSOEntrypoint(s string) *OrganizationSettingsUpdate {
	osu.mutation.SetSSOEntrypoint(s)
	return osu
}

// SetNillableSSOEntrypoint sets the "sso_entrypoint" field if the given value is not nil.
func (osu *OrganizationSettingsUpdate) SetNillableSSOEntrypoint(s *string) *OrganizationSettingsUpdate {
	if s != nil {
		osu.SetSSOEntrypoint(*s)
	}
	return osu
}

// SetSSOIssuer sets the "sso_issuer" field.
func (osu *OrganizationSettingsUpdate) SetSSOIssuer(s string) *OrganizationSettingsUpdate {
	osu.mutation.SetSSOIssuer(s)
	return osu
}

// SetNillableSSOIssuer sets the "sso_issuer" field if the given value is not nil.
func (osu *OrganizationSettingsUpdate) SetNillableSSOIssuer(s *string) *OrganizationSettingsUpdate {
	if s != nil {
		osu.SetSSOIssuer(*s)
	}
	return osu
}

// SetBillingContact sets the "billing_contact" field.
func (osu *OrganizationSettingsUpdate) SetBillingContact(s string) *OrganizationSettingsUpdate {
	osu.mutation.SetBillingContact(s)
	return osu
}

// SetBillingEmail sets the "billing_email" field.
func (osu *OrganizationSettingsUpdate) SetBillingEmail(s string) *OrganizationSettingsUpdate {
	osu.mutation.SetBillingEmail(s)
	return osu
}

// SetBillingPhone sets the "billing_phone" field.
func (osu *OrganizationSettingsUpdate) SetBillingPhone(s string) *OrganizationSettingsUpdate {
	osu.mutation.SetBillingPhone(s)
	return osu
}

// SetBillingAddress sets the "billing_address" field.
func (osu *OrganizationSettingsUpdate) SetBillingAddress(s string) *OrganizationSettingsUpdate {
	osu.mutation.SetBillingAddress(s)
	return osu
}

// SetTaxIdentifier sets the "tax_identifier" field.
func (osu *OrganizationSettingsUpdate) SetTaxIdentifier(s string) *OrganizationSettingsUpdate {
	osu.mutation.SetTaxIdentifier(s)
	return osu
}

// SetTags sets the "tags" field.
func (osu *OrganizationSettingsUpdate) SetTags(s []string) *OrganizationSettingsUpdate {
	osu.mutation.SetTags(s)
	return osu
}

// AppendTags appends s to the "tags" field.
func (osu *OrganizationSettingsUpdate) AppendTags(s []string) *OrganizationSettingsUpdate {
	osu.mutation.AppendTags(s)
	return osu
}

// ClearTags clears the value of the "tags" field.
func (osu *OrganizationSettingsUpdate) ClearTags() *OrganizationSettingsUpdate {
	osu.mutation.ClearTags()
	return osu
}

// SetOrgnaizationID sets the "orgnaization" edge to the Organization entity by ID.
func (osu *OrganizationSettingsUpdate) SetOrgnaizationID(id string) *OrganizationSettingsUpdate {
	osu.mutation.SetOrgnaizationID(id)
	return osu
}

// SetNillableOrgnaizationID sets the "orgnaization" edge to the Organization entity by ID if the given value is not nil.
func (osu *OrganizationSettingsUpdate) SetNillableOrgnaizationID(id *string) *OrganizationSettingsUpdate {
	if id != nil {
		osu = osu.SetOrgnaizationID(*id)
	}
	return osu
}

// SetOrgnaization sets the "orgnaization" edge to the Organization entity.
func (osu *OrganizationSettingsUpdate) SetOrgnaization(o *Organization) *OrganizationSettingsUpdate {
	return osu.SetOrgnaizationID(o.ID)
}

// Mutation returns the OrganizationSettingsMutation object of the builder.
func (osu *OrganizationSettingsUpdate) Mutation() *OrganizationSettingsMutation {
	return osu.mutation
}

// ClearOrgnaization clears the "orgnaization" edge to the Organization entity.
func (osu *OrganizationSettingsUpdate) ClearOrgnaization() *OrganizationSettingsUpdate {
	osu.mutation.ClearOrgnaization()
	return osu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (osu *OrganizationSettingsUpdate) Save(ctx context.Context) (int, error) {
	if err := osu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, osu.sqlSave, osu.mutation, osu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osu *OrganizationSettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := osu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (osu *OrganizationSettingsUpdate) Exec(ctx context.Context) error {
	_, err := osu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osu *OrganizationSettingsUpdate) ExecX(ctx context.Context) {
	if err := osu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osu *OrganizationSettingsUpdate) defaults() error {
	if _, ok := osu.mutation.UpdatedAt(); !ok {
		if organizationsettings.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized organizationsettings.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := organizationsettings.UpdateDefaultUpdatedAt()
		osu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (osu *OrganizationSettingsUpdate) check() error {
	if v, ok := osu.mutation.BillingContact(); ok {
		if err := organizationsettings.BillingContactValidator(v); err != nil {
			return &ValidationError{Name: "billing_contact", err: fmt.Errorf(`generated: validator failed for field "OrganizationSettings.billing_contact": %w`, err)}
		}
	}
	if v, ok := osu.mutation.BillingEmail(); ok {
		if err := organizationsettings.BillingEmailValidator(v); err != nil {
			return &ValidationError{Name: "billing_email", err: fmt.Errorf(`generated: validator failed for field "OrganizationSettings.billing_email": %w`, err)}
		}
	}
	if v, ok := osu.mutation.BillingPhone(); ok {
		if err := organizationsettings.BillingPhoneValidator(v); err != nil {
			return &ValidationError{Name: "billing_phone", err: fmt.Errorf(`generated: validator failed for field "OrganizationSettings.billing_phone": %w`, err)}
		}
	}
	if v, ok := osu.mutation.BillingAddress(); ok {
		if err := organizationsettings.BillingAddressValidator(v); err != nil {
			return &ValidationError{Name: "billing_address", err: fmt.Errorf(`generated: validator failed for field "OrganizationSettings.billing_address": %w`, err)}
		}
	}
	return nil
}

func (osu *OrganizationSettingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := osu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationsettings.Table, organizationsettings.Columns, sqlgraph.NewFieldSpec(organizationsettings.FieldID, field.TypeString))
	if ps := osu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osu.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationsettings.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := osu.mutation.CreatedBy(); ok {
		_spec.SetField(organizationsettings.FieldCreatedBy, field.TypeString, value)
	}
	if osu.mutation.CreatedByCleared() {
		_spec.ClearField(organizationsettings.FieldCreatedBy, field.TypeString)
	}
	if value, ok := osu.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationsettings.FieldUpdatedBy, field.TypeString, value)
	}
	if osu.mutation.UpdatedByCleared() {
		_spec.ClearField(organizationsettings.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := osu.mutation.Domains(); ok {
		_spec.SetField(organizationsettings.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := osu.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organizationsettings.FieldDomains, value)
		})
	}
	if value, ok := osu.mutation.SSOCert(); ok {
		_spec.SetField(organizationsettings.FieldSSOCert, field.TypeString, value)
	}
	if value, ok := osu.mutation.SSOEntrypoint(); ok {
		_spec.SetField(organizationsettings.FieldSSOEntrypoint, field.TypeString, value)
	}
	if value, ok := osu.mutation.SSOIssuer(); ok {
		_spec.SetField(organizationsettings.FieldSSOIssuer, field.TypeString, value)
	}
	if value, ok := osu.mutation.BillingContact(); ok {
		_spec.SetField(organizationsettings.FieldBillingContact, field.TypeString, value)
	}
	if value, ok := osu.mutation.BillingEmail(); ok {
		_spec.SetField(organizationsettings.FieldBillingEmail, field.TypeString, value)
	}
	if value, ok := osu.mutation.BillingPhone(); ok {
		_spec.SetField(organizationsettings.FieldBillingPhone, field.TypeString, value)
	}
	if value, ok := osu.mutation.BillingAddress(); ok {
		_spec.SetField(organizationsettings.FieldBillingAddress, field.TypeString, value)
	}
	if value, ok := osu.mutation.TaxIdentifier(); ok {
		_spec.SetField(organizationsettings.FieldTaxIdentifier, field.TypeString, value)
	}
	if value, ok := osu.mutation.Tags(); ok {
		_spec.SetField(organizationsettings.FieldTags, field.TypeJSON, value)
	}
	if value, ok := osu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organizationsettings.FieldTags, value)
		})
	}
	if osu.mutation.TagsCleared() {
		_spec.ClearField(organizationsettings.FieldTags, field.TypeJSON)
	}
	if osu.mutation.OrgnaizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organizationsettings.OrgnaizationTable,
			Columns: []string{organizationsettings.OrgnaizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = osu.schemaConfig.OrganizationSettings
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osu.mutation.OrgnaizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organizationsettings.OrgnaizationTable,
			Columns: []string{organizationsettings.OrgnaizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = osu.schemaConfig.OrganizationSettings
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = osu.schemaConfig.OrganizationSettings
	ctx = internal.NewSchemaConfigContext(ctx, osu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, osu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationsettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	osu.mutation.done = true
	return n, nil
}

// OrganizationSettingsUpdateOne is the builder for updating a single OrganizationSettings entity.
type OrganizationSettingsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationSettingsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (osuo *OrganizationSettingsUpdateOne) SetUpdatedAt(t time.Time) *OrganizationSettingsUpdateOne {
	osuo.mutation.SetUpdatedAt(t)
	return osuo
}

// SetCreatedBy sets the "created_by" field.
func (osuo *OrganizationSettingsUpdateOne) SetCreatedBy(s string) *OrganizationSettingsUpdateOne {
	osuo.mutation.SetCreatedBy(s)
	return osuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (osuo *OrganizationSettingsUpdateOne) SetNillableCreatedBy(s *string) *OrganizationSettingsUpdateOne {
	if s != nil {
		osuo.SetCreatedBy(*s)
	}
	return osuo
}

// ClearCreatedBy clears the value of the "created_by" field.
func (osuo *OrganizationSettingsUpdateOne) ClearCreatedBy() *OrganizationSettingsUpdateOne {
	osuo.mutation.ClearCreatedBy()
	return osuo
}

// SetUpdatedBy sets the "updated_by" field.
func (osuo *OrganizationSettingsUpdateOne) SetUpdatedBy(s string) *OrganizationSettingsUpdateOne {
	osuo.mutation.SetUpdatedBy(s)
	return osuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (osuo *OrganizationSettingsUpdateOne) SetNillableUpdatedBy(s *string) *OrganizationSettingsUpdateOne {
	if s != nil {
		osuo.SetUpdatedBy(*s)
	}
	return osuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (osuo *OrganizationSettingsUpdateOne) ClearUpdatedBy() *OrganizationSettingsUpdateOne {
	osuo.mutation.ClearUpdatedBy()
	return osuo
}

// SetDomains sets the "domains" field.
func (osuo *OrganizationSettingsUpdateOne) SetDomains(s []string) *OrganizationSettingsUpdateOne {
	osuo.mutation.SetDomains(s)
	return osuo
}

// AppendDomains appends s to the "domains" field.
func (osuo *OrganizationSettingsUpdateOne) AppendDomains(s []string) *OrganizationSettingsUpdateOne {
	osuo.mutation.AppendDomains(s)
	return osuo
}

// SetSSOCert sets the "sso_cert" field.
func (osuo *OrganizationSettingsUpdateOne) SetSSOCert(s string) *OrganizationSettingsUpdateOne {
	osuo.mutation.SetSSOCert(s)
	return osuo
}

// SetNillableSSOCert sets the "sso_cert" field if the given value is not nil.
func (osuo *OrganizationSettingsUpdateOne) SetNillableSSOCert(s *string) *OrganizationSettingsUpdateOne {
	if s != nil {
		osuo.SetSSOCert(*s)
	}
	return osuo
}

// SetSSOEntrypoint sets the "sso_entrypoint" field.
func (osuo *OrganizationSettingsUpdateOne) SetSSOEntrypoint(s string) *OrganizationSettingsUpdateOne {
	osuo.mutation.SetSSOEntrypoint(s)
	return osuo
}

// SetNillableSSOEntrypoint sets the "sso_entrypoint" field if the given value is not nil.
func (osuo *OrganizationSettingsUpdateOne) SetNillableSSOEntrypoint(s *string) *OrganizationSettingsUpdateOne {
	if s != nil {
		osuo.SetSSOEntrypoint(*s)
	}
	return osuo
}

// SetSSOIssuer sets the "sso_issuer" field.
func (osuo *OrganizationSettingsUpdateOne) SetSSOIssuer(s string) *OrganizationSettingsUpdateOne {
	osuo.mutation.SetSSOIssuer(s)
	return osuo
}

// SetNillableSSOIssuer sets the "sso_issuer" field if the given value is not nil.
func (osuo *OrganizationSettingsUpdateOne) SetNillableSSOIssuer(s *string) *OrganizationSettingsUpdateOne {
	if s != nil {
		osuo.SetSSOIssuer(*s)
	}
	return osuo
}

// SetBillingContact sets the "billing_contact" field.
func (osuo *OrganizationSettingsUpdateOne) SetBillingContact(s string) *OrganizationSettingsUpdateOne {
	osuo.mutation.SetBillingContact(s)
	return osuo
}

// SetBillingEmail sets the "billing_email" field.
func (osuo *OrganizationSettingsUpdateOne) SetBillingEmail(s string) *OrganizationSettingsUpdateOne {
	osuo.mutation.SetBillingEmail(s)
	return osuo
}

// SetBillingPhone sets the "billing_phone" field.
func (osuo *OrganizationSettingsUpdateOne) SetBillingPhone(s string) *OrganizationSettingsUpdateOne {
	osuo.mutation.SetBillingPhone(s)
	return osuo
}

// SetBillingAddress sets the "billing_address" field.
func (osuo *OrganizationSettingsUpdateOne) SetBillingAddress(s string) *OrganizationSettingsUpdateOne {
	osuo.mutation.SetBillingAddress(s)
	return osuo
}

// SetTaxIdentifier sets the "tax_identifier" field.
func (osuo *OrganizationSettingsUpdateOne) SetTaxIdentifier(s string) *OrganizationSettingsUpdateOne {
	osuo.mutation.SetTaxIdentifier(s)
	return osuo
}

// SetTags sets the "tags" field.
func (osuo *OrganizationSettingsUpdateOne) SetTags(s []string) *OrganizationSettingsUpdateOne {
	osuo.mutation.SetTags(s)
	return osuo
}

// AppendTags appends s to the "tags" field.
func (osuo *OrganizationSettingsUpdateOne) AppendTags(s []string) *OrganizationSettingsUpdateOne {
	osuo.mutation.AppendTags(s)
	return osuo
}

// ClearTags clears the value of the "tags" field.
func (osuo *OrganizationSettingsUpdateOne) ClearTags() *OrganizationSettingsUpdateOne {
	osuo.mutation.ClearTags()
	return osuo
}

// SetOrgnaizationID sets the "orgnaization" edge to the Organization entity by ID.
func (osuo *OrganizationSettingsUpdateOne) SetOrgnaizationID(id string) *OrganizationSettingsUpdateOne {
	osuo.mutation.SetOrgnaizationID(id)
	return osuo
}

// SetNillableOrgnaizationID sets the "orgnaization" edge to the Organization entity by ID if the given value is not nil.
func (osuo *OrganizationSettingsUpdateOne) SetNillableOrgnaizationID(id *string) *OrganizationSettingsUpdateOne {
	if id != nil {
		osuo = osuo.SetOrgnaizationID(*id)
	}
	return osuo
}

// SetOrgnaization sets the "orgnaization" edge to the Organization entity.
func (osuo *OrganizationSettingsUpdateOne) SetOrgnaization(o *Organization) *OrganizationSettingsUpdateOne {
	return osuo.SetOrgnaizationID(o.ID)
}

// Mutation returns the OrganizationSettingsMutation object of the builder.
func (osuo *OrganizationSettingsUpdateOne) Mutation() *OrganizationSettingsMutation {
	return osuo.mutation
}

// ClearOrgnaization clears the "orgnaization" edge to the Organization entity.
func (osuo *OrganizationSettingsUpdateOne) ClearOrgnaization() *OrganizationSettingsUpdateOne {
	osuo.mutation.ClearOrgnaization()
	return osuo
}

// Where appends a list predicates to the OrganizationSettingsUpdate builder.
func (osuo *OrganizationSettingsUpdateOne) Where(ps ...predicate.OrganizationSettings) *OrganizationSettingsUpdateOne {
	osuo.mutation.Where(ps...)
	return osuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (osuo *OrganizationSettingsUpdateOne) Select(field string, fields ...string) *OrganizationSettingsUpdateOne {
	osuo.fields = append([]string{field}, fields...)
	return osuo
}

// Save executes the query and returns the updated OrganizationSettings entity.
func (osuo *OrganizationSettingsUpdateOne) Save(ctx context.Context) (*OrganizationSettings, error) {
	if err := osuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, osuo.sqlSave, osuo.mutation, osuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (osuo *OrganizationSettingsUpdateOne) SaveX(ctx context.Context) *OrganizationSettings {
	node, err := osuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (osuo *OrganizationSettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := osuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (osuo *OrganizationSettingsUpdateOne) ExecX(ctx context.Context) {
	if err := osuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (osuo *OrganizationSettingsUpdateOne) defaults() error {
	if _, ok := osuo.mutation.UpdatedAt(); !ok {
		if organizationsettings.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized organizationsettings.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := organizationsettings.UpdateDefaultUpdatedAt()
		osuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (osuo *OrganizationSettingsUpdateOne) check() error {
	if v, ok := osuo.mutation.BillingContact(); ok {
		if err := organizationsettings.BillingContactValidator(v); err != nil {
			return &ValidationError{Name: "billing_contact", err: fmt.Errorf(`generated: validator failed for field "OrganizationSettings.billing_contact": %w`, err)}
		}
	}
	if v, ok := osuo.mutation.BillingEmail(); ok {
		if err := organizationsettings.BillingEmailValidator(v); err != nil {
			return &ValidationError{Name: "billing_email", err: fmt.Errorf(`generated: validator failed for field "OrganizationSettings.billing_email": %w`, err)}
		}
	}
	if v, ok := osuo.mutation.BillingPhone(); ok {
		if err := organizationsettings.BillingPhoneValidator(v); err != nil {
			return &ValidationError{Name: "billing_phone", err: fmt.Errorf(`generated: validator failed for field "OrganizationSettings.billing_phone": %w`, err)}
		}
	}
	if v, ok := osuo.mutation.BillingAddress(); ok {
		if err := organizationsettings.BillingAddressValidator(v); err != nil {
			return &ValidationError{Name: "billing_address", err: fmt.Errorf(`generated: validator failed for field "OrganizationSettings.billing_address": %w`, err)}
		}
	}
	return nil
}

func (osuo *OrganizationSettingsUpdateOne) sqlSave(ctx context.Context) (_node *OrganizationSettings, err error) {
	if err := osuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organizationsettings.Table, organizationsettings.Columns, sqlgraph.NewFieldSpec(organizationsettings.FieldID, field.TypeString))
	id, ok := osuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "OrganizationSettings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := osuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organizationsettings.FieldID)
		for _, f := range fields {
			if !organizationsettings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != organizationsettings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := osuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := osuo.mutation.UpdatedAt(); ok {
		_spec.SetField(organizationsettings.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := osuo.mutation.CreatedBy(); ok {
		_spec.SetField(organizationsettings.FieldCreatedBy, field.TypeString, value)
	}
	if osuo.mutation.CreatedByCleared() {
		_spec.ClearField(organizationsettings.FieldCreatedBy, field.TypeString)
	}
	if value, ok := osuo.mutation.UpdatedBy(); ok {
		_spec.SetField(organizationsettings.FieldUpdatedBy, field.TypeString, value)
	}
	if osuo.mutation.UpdatedByCleared() {
		_spec.ClearField(organizationsettings.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := osuo.mutation.Domains(); ok {
		_spec.SetField(organizationsettings.FieldDomains, field.TypeJSON, value)
	}
	if value, ok := osuo.mutation.AppendedDomains(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organizationsettings.FieldDomains, value)
		})
	}
	if value, ok := osuo.mutation.SSOCert(); ok {
		_spec.SetField(organizationsettings.FieldSSOCert, field.TypeString, value)
	}
	if value, ok := osuo.mutation.SSOEntrypoint(); ok {
		_spec.SetField(organizationsettings.FieldSSOEntrypoint, field.TypeString, value)
	}
	if value, ok := osuo.mutation.SSOIssuer(); ok {
		_spec.SetField(organizationsettings.FieldSSOIssuer, field.TypeString, value)
	}
	if value, ok := osuo.mutation.BillingContact(); ok {
		_spec.SetField(organizationsettings.FieldBillingContact, field.TypeString, value)
	}
	if value, ok := osuo.mutation.BillingEmail(); ok {
		_spec.SetField(organizationsettings.FieldBillingEmail, field.TypeString, value)
	}
	if value, ok := osuo.mutation.BillingPhone(); ok {
		_spec.SetField(organizationsettings.FieldBillingPhone, field.TypeString, value)
	}
	if value, ok := osuo.mutation.BillingAddress(); ok {
		_spec.SetField(organizationsettings.FieldBillingAddress, field.TypeString, value)
	}
	if value, ok := osuo.mutation.TaxIdentifier(); ok {
		_spec.SetField(organizationsettings.FieldTaxIdentifier, field.TypeString, value)
	}
	if value, ok := osuo.mutation.Tags(); ok {
		_spec.SetField(organizationsettings.FieldTags, field.TypeJSON, value)
	}
	if value, ok := osuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, organizationsettings.FieldTags, value)
		})
	}
	if osuo.mutation.TagsCleared() {
		_spec.ClearField(organizationsettings.FieldTags, field.TypeJSON)
	}
	if osuo.mutation.OrgnaizationCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organizationsettings.OrgnaizationTable,
			Columns: []string{organizationsettings.OrgnaizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = osuo.schemaConfig.OrganizationSettings
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := osuo.mutation.OrgnaizationIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   organizationsettings.OrgnaizationTable,
			Columns: []string{organizationsettings.OrgnaizationColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = osuo.schemaConfig.OrganizationSettings
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = osuo.schemaConfig.OrganizationSettings
	ctx = internal.NewSchemaConfigContext(ctx, osuo.schemaConfig)
	_node = &OrganizationSettings{config: osuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, osuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organizationsettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	osuo.mutation.done = true
	return _node, nil
}
