// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datumforge/datum/internal/ent/generated/passwordresettokenhistory"
	"github.com/flume/enthistory"
)

// PasswordResetTokenHistory is the model entity for the PasswordResetTokenHistory schema.
type PasswordResetTokenHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation enthistory.OpType `json:"operation,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the reset token sent to the user via email which should only be provided to the /forgot-password endpoint + handler
	Token string `json:"token,omitempty"`
	// the ttl of the reset token which defaults to 15 minutes
	TTL *time.Time `json:"ttl,omitempty"`
	// the email used as input to generate the reset token; this is used to verify that the token when regenerated within the server matches the token emailed
	Email string `json:"email,omitempty"`
	// the comparison secret to verify the token's signature
	Secret       *[]byte `json:"secret,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PasswordResetTokenHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case passwordresettokenhistory.FieldSecret:
			values[i] = new([]byte)
		case passwordresettokenhistory.FieldID, passwordresettokenhistory.FieldOperation, passwordresettokenhistory.FieldRef, passwordresettokenhistory.FieldCreatedBy, passwordresettokenhistory.FieldUpdatedBy, passwordresettokenhistory.FieldDeletedBy, passwordresettokenhistory.FieldToken, passwordresettokenhistory.FieldEmail:
			values[i] = new(sql.NullString)
		case passwordresettokenhistory.FieldHistoryTime, passwordresettokenhistory.FieldCreatedAt, passwordresettokenhistory.FieldUpdatedAt, passwordresettokenhistory.FieldDeletedAt, passwordresettokenhistory.FieldTTL:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PasswordResetTokenHistory fields.
func (prth *PasswordResetTokenHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case passwordresettokenhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				prth.ID = value.String
			}
		case passwordresettokenhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				prth.HistoryTime = value.Time
			}
		case passwordresettokenhistory.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				prth.Operation = enthistory.OpType(value.String)
			}
		case passwordresettokenhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				prth.Ref = value.String
			}
		case passwordresettokenhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				prth.CreatedAt = value.Time
			}
		case passwordresettokenhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				prth.UpdatedAt = value.Time
			}
		case passwordresettokenhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				prth.CreatedBy = value.String
			}
		case passwordresettokenhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				prth.UpdatedBy = value.String
			}
		case passwordresettokenhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				prth.DeletedAt = value.Time
			}
		case passwordresettokenhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				prth.DeletedBy = value.String
			}
		case passwordresettokenhistory.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				prth.Token = value.String
			}
		case passwordresettokenhistory.FieldTTL:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field ttl", values[i])
			} else if value.Valid {
				prth.TTL = new(time.Time)
				*prth.TTL = value.Time
			}
		case passwordresettokenhistory.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				prth.Email = value.String
			}
		case passwordresettokenhistory.FieldSecret:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field secret", values[i])
			} else if value != nil {
				prth.Secret = value
			}
		default:
			prth.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PasswordResetTokenHistory.
// This includes values selected through modifiers, order, etc.
func (prth *PasswordResetTokenHistory) Value(name string) (ent.Value, error) {
	return prth.selectValues.Get(name)
}

// Update returns a builder for updating this PasswordResetTokenHistory.
// Note that you need to call PasswordResetTokenHistory.Unwrap() before calling this method if this PasswordResetTokenHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (prth *PasswordResetTokenHistory) Update() *PasswordResetTokenHistoryUpdateOne {
	return NewPasswordResetTokenHistoryClient(prth.config).UpdateOne(prth)
}

// Unwrap unwraps the PasswordResetTokenHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (prth *PasswordResetTokenHistory) Unwrap() *PasswordResetTokenHistory {
	_tx, ok := prth.config.driver.(*txDriver)
	if !ok {
		panic("generated: PasswordResetTokenHistory is not a transactional entity")
	}
	prth.config.driver = _tx.drv
	return prth
}

// String implements the fmt.Stringer.
func (prth *PasswordResetTokenHistory) String() string {
	var builder strings.Builder
	builder.WriteString("PasswordResetTokenHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", prth.ID))
	builder.WriteString("history_time=")
	builder.WriteString(prth.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", prth.Operation))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(prth.Ref)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(prth.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(prth.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(prth.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(prth.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(prth.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(prth.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("token=")
	builder.WriteString(prth.Token)
	builder.WriteString(", ")
	if v := prth.TTL; v != nil {
		builder.WriteString("ttl=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(prth.Email)
	builder.WriteString(", ")
	if v := prth.Secret; v != nil {
		builder.WriteString("secret=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// PasswordResetTokenHistories is a parsable slice of PasswordResetTokenHistory.
type PasswordResetTokenHistories []*PasswordResetTokenHistory
