// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/predicate"

	"github.com/datumforge/datum/internal/ent/generated/internal"
	"github.com/datumforge/datum/internal/ent/generated/passwordresettokenhistory"
)

// PasswordResetTokenHistoryDelete is the builder for deleting a PasswordResetTokenHistory entity.
type PasswordResetTokenHistoryDelete struct {
	config
	hooks    []Hook
	mutation *PasswordResetTokenHistoryMutation
}

// Where appends a list predicates to the PasswordResetTokenHistoryDelete builder.
func (prthd *PasswordResetTokenHistoryDelete) Where(ps ...predicate.PasswordResetTokenHistory) *PasswordResetTokenHistoryDelete {
	prthd.mutation.Where(ps...)
	return prthd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (prthd *PasswordResetTokenHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, prthd.sqlExec, prthd.mutation, prthd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (prthd *PasswordResetTokenHistoryDelete) ExecX(ctx context.Context) int {
	n, err := prthd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (prthd *PasswordResetTokenHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(passwordresettokenhistory.Table, sqlgraph.NewFieldSpec(passwordresettokenhistory.FieldID, field.TypeString))
	_spec.Node.Schema = prthd.schemaConfig.PasswordResetTokenHistory
	ctx = internal.NewSchemaConfigContext(ctx, prthd.schemaConfig)
	if ps := prthd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, prthd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	prthd.mutation.done = true
	return affected, err
}

// PasswordResetTokenHistoryDeleteOne is the builder for deleting a single PasswordResetTokenHistory entity.
type PasswordResetTokenHistoryDeleteOne struct {
	prthd *PasswordResetTokenHistoryDelete
}

// Where appends a list predicates to the PasswordResetTokenHistoryDelete builder.
func (prthdo *PasswordResetTokenHistoryDeleteOne) Where(ps ...predicate.PasswordResetTokenHistory) *PasswordResetTokenHistoryDeleteOne {
	prthdo.prthd.mutation.Where(ps...)
	return prthdo
}

// Exec executes the deletion query.
func (prthdo *PasswordResetTokenHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := prthdo.prthd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{passwordresettokenhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (prthdo *PasswordResetTokenHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := prthdo.Exec(ctx); err != nil {
		panic(err)
	}
}
