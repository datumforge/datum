// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/passwordresettokenhistory"
	"github.com/datumforge/datum/internal/ent/generated/predicate"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// PasswordResetTokenHistoryUpdate is the builder for updating PasswordResetTokenHistory entities.
type PasswordResetTokenHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *PasswordResetTokenHistoryMutation
}

// Where appends a list predicates to the PasswordResetTokenHistoryUpdate builder.
func (prthu *PasswordResetTokenHistoryUpdate) Where(ps ...predicate.PasswordResetTokenHistory) *PasswordResetTokenHistoryUpdate {
	prthu.mutation.Where(ps...)
	return prthu
}

// SetUpdatedAt sets the "updated_at" field.
func (prthu *PasswordResetTokenHistoryUpdate) SetUpdatedAt(t time.Time) *PasswordResetTokenHistoryUpdate {
	prthu.mutation.SetUpdatedAt(t)
	return prthu
}

// SetUpdatedBy sets the "updated_by" field.
func (prthu *PasswordResetTokenHistoryUpdate) SetUpdatedBy(s string) *PasswordResetTokenHistoryUpdate {
	prthu.mutation.SetUpdatedBy(s)
	return prthu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (prthu *PasswordResetTokenHistoryUpdate) SetNillableUpdatedBy(s *string) *PasswordResetTokenHistoryUpdate {
	if s != nil {
		prthu.SetUpdatedBy(*s)
	}
	return prthu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (prthu *PasswordResetTokenHistoryUpdate) ClearUpdatedBy() *PasswordResetTokenHistoryUpdate {
	prthu.mutation.ClearUpdatedBy()
	return prthu
}

// SetDeletedAt sets the "deleted_at" field.
func (prthu *PasswordResetTokenHistoryUpdate) SetDeletedAt(t time.Time) *PasswordResetTokenHistoryUpdate {
	prthu.mutation.SetDeletedAt(t)
	return prthu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (prthu *PasswordResetTokenHistoryUpdate) SetNillableDeletedAt(t *time.Time) *PasswordResetTokenHistoryUpdate {
	if t != nil {
		prthu.SetDeletedAt(*t)
	}
	return prthu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (prthu *PasswordResetTokenHistoryUpdate) ClearDeletedAt() *PasswordResetTokenHistoryUpdate {
	prthu.mutation.ClearDeletedAt()
	return prthu
}

// SetDeletedBy sets the "deleted_by" field.
func (prthu *PasswordResetTokenHistoryUpdate) SetDeletedBy(s string) *PasswordResetTokenHistoryUpdate {
	prthu.mutation.SetDeletedBy(s)
	return prthu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (prthu *PasswordResetTokenHistoryUpdate) SetNillableDeletedBy(s *string) *PasswordResetTokenHistoryUpdate {
	if s != nil {
		prthu.SetDeletedBy(*s)
	}
	return prthu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (prthu *PasswordResetTokenHistoryUpdate) ClearDeletedBy() *PasswordResetTokenHistoryUpdate {
	prthu.mutation.ClearDeletedBy()
	return prthu
}

// SetToken sets the "token" field.
func (prthu *PasswordResetTokenHistoryUpdate) SetToken(s string) *PasswordResetTokenHistoryUpdate {
	prthu.mutation.SetToken(s)
	return prthu
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (prthu *PasswordResetTokenHistoryUpdate) SetNillableToken(s *string) *PasswordResetTokenHistoryUpdate {
	if s != nil {
		prthu.SetToken(*s)
	}
	return prthu
}

// SetTTL sets the "ttl" field.
func (prthu *PasswordResetTokenHistoryUpdate) SetTTL(t time.Time) *PasswordResetTokenHistoryUpdate {
	prthu.mutation.SetTTL(t)
	return prthu
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (prthu *PasswordResetTokenHistoryUpdate) SetNillableTTL(t *time.Time) *PasswordResetTokenHistoryUpdate {
	if t != nil {
		prthu.SetTTL(*t)
	}
	return prthu
}

// SetEmail sets the "email" field.
func (prthu *PasswordResetTokenHistoryUpdate) SetEmail(s string) *PasswordResetTokenHistoryUpdate {
	prthu.mutation.SetEmail(s)
	return prthu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (prthu *PasswordResetTokenHistoryUpdate) SetNillableEmail(s *string) *PasswordResetTokenHistoryUpdate {
	if s != nil {
		prthu.SetEmail(*s)
	}
	return prthu
}

// SetSecret sets the "secret" field.
func (prthu *PasswordResetTokenHistoryUpdate) SetSecret(b []byte) *PasswordResetTokenHistoryUpdate {
	prthu.mutation.SetSecret(b)
	return prthu
}

// Mutation returns the PasswordResetTokenHistoryMutation object of the builder.
func (prthu *PasswordResetTokenHistoryUpdate) Mutation() *PasswordResetTokenHistoryMutation {
	return prthu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (prthu *PasswordResetTokenHistoryUpdate) Save(ctx context.Context) (int, error) {
	prthu.defaults()
	return withHooks(ctx, prthu.sqlSave, prthu.mutation, prthu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (prthu *PasswordResetTokenHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := prthu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (prthu *PasswordResetTokenHistoryUpdate) Exec(ctx context.Context) error {
	_, err := prthu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prthu *PasswordResetTokenHistoryUpdate) ExecX(ctx context.Context) {
	if err := prthu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prthu *PasswordResetTokenHistoryUpdate) defaults() {
	if _, ok := prthu.mutation.UpdatedAt(); !ok {
		v := passwordresettokenhistory.UpdateDefaultUpdatedAt()
		prthu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prthu *PasswordResetTokenHistoryUpdate) check() error {
	if v, ok := prthu.mutation.Token(); ok {
		if err := passwordresettokenhistory.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "PasswordResetTokenHistory.token": %w`, err)}
		}
	}
	if v, ok := prthu.mutation.Email(); ok {
		if err := passwordresettokenhistory.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "PasswordResetTokenHistory.email": %w`, err)}
		}
	}
	if v, ok := prthu.mutation.Secret(); ok {
		if err := passwordresettokenhistory.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "PasswordResetTokenHistory.secret": %w`, err)}
		}
	}
	return nil
}

func (prthu *PasswordResetTokenHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := prthu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(passwordresettokenhistory.Table, passwordresettokenhistory.Columns, sqlgraph.NewFieldSpec(passwordresettokenhistory.FieldID, field.TypeString))
	if ps := prthu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if prthu.mutation.RefCleared() {
		_spec.ClearField(passwordresettokenhistory.FieldRef, field.TypeString)
	}
	if value, ok := prthu.mutation.UpdatedAt(); ok {
		_spec.SetField(passwordresettokenhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if prthu.mutation.CreatedByCleared() {
		_spec.ClearField(passwordresettokenhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := prthu.mutation.UpdatedBy(); ok {
		_spec.SetField(passwordresettokenhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if prthu.mutation.UpdatedByCleared() {
		_spec.ClearField(passwordresettokenhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := prthu.mutation.DeletedAt(); ok {
		_spec.SetField(passwordresettokenhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if prthu.mutation.DeletedAtCleared() {
		_spec.ClearField(passwordresettokenhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := prthu.mutation.DeletedBy(); ok {
		_spec.SetField(passwordresettokenhistory.FieldDeletedBy, field.TypeString, value)
	}
	if prthu.mutation.DeletedByCleared() {
		_spec.ClearField(passwordresettokenhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := prthu.mutation.Token(); ok {
		_spec.SetField(passwordresettokenhistory.FieldToken, field.TypeString, value)
	}
	if value, ok := prthu.mutation.TTL(); ok {
		_spec.SetField(passwordresettokenhistory.FieldTTL, field.TypeTime, value)
	}
	if value, ok := prthu.mutation.Email(); ok {
		_spec.SetField(passwordresettokenhistory.FieldEmail, field.TypeString, value)
	}
	if value, ok := prthu.mutation.Secret(); ok {
		_spec.SetField(passwordresettokenhistory.FieldSecret, field.TypeBytes, value)
	}
	_spec.Node.Schema = prthu.schemaConfig.PasswordResetTokenHistory
	ctx = internal.NewSchemaConfigContext(ctx, prthu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, prthu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{passwordresettokenhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	prthu.mutation.done = true
	return n, nil
}

// PasswordResetTokenHistoryUpdateOne is the builder for updating a single PasswordResetTokenHistory entity.
type PasswordResetTokenHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PasswordResetTokenHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SetUpdatedAt(t time.Time) *PasswordResetTokenHistoryUpdateOne {
	prthuo.mutation.SetUpdatedAt(t)
	return prthuo
}

// SetUpdatedBy sets the "updated_by" field.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SetUpdatedBy(s string) *PasswordResetTokenHistoryUpdateOne {
	prthuo.mutation.SetUpdatedBy(s)
	return prthuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SetNillableUpdatedBy(s *string) *PasswordResetTokenHistoryUpdateOne {
	if s != nil {
		prthuo.SetUpdatedBy(*s)
	}
	return prthuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (prthuo *PasswordResetTokenHistoryUpdateOne) ClearUpdatedBy() *PasswordResetTokenHistoryUpdateOne {
	prthuo.mutation.ClearUpdatedBy()
	return prthuo
}

// SetDeletedAt sets the "deleted_at" field.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SetDeletedAt(t time.Time) *PasswordResetTokenHistoryUpdateOne {
	prthuo.mutation.SetDeletedAt(t)
	return prthuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *PasswordResetTokenHistoryUpdateOne {
	if t != nil {
		prthuo.SetDeletedAt(*t)
	}
	return prthuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (prthuo *PasswordResetTokenHistoryUpdateOne) ClearDeletedAt() *PasswordResetTokenHistoryUpdateOne {
	prthuo.mutation.ClearDeletedAt()
	return prthuo
}

// SetDeletedBy sets the "deleted_by" field.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SetDeletedBy(s string) *PasswordResetTokenHistoryUpdateOne {
	prthuo.mutation.SetDeletedBy(s)
	return prthuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SetNillableDeletedBy(s *string) *PasswordResetTokenHistoryUpdateOne {
	if s != nil {
		prthuo.SetDeletedBy(*s)
	}
	return prthuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (prthuo *PasswordResetTokenHistoryUpdateOne) ClearDeletedBy() *PasswordResetTokenHistoryUpdateOne {
	prthuo.mutation.ClearDeletedBy()
	return prthuo
}

// SetToken sets the "token" field.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SetToken(s string) *PasswordResetTokenHistoryUpdateOne {
	prthuo.mutation.SetToken(s)
	return prthuo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SetNillableToken(s *string) *PasswordResetTokenHistoryUpdateOne {
	if s != nil {
		prthuo.SetToken(*s)
	}
	return prthuo
}

// SetTTL sets the "ttl" field.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SetTTL(t time.Time) *PasswordResetTokenHistoryUpdateOne {
	prthuo.mutation.SetTTL(t)
	return prthuo
}

// SetNillableTTL sets the "ttl" field if the given value is not nil.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SetNillableTTL(t *time.Time) *PasswordResetTokenHistoryUpdateOne {
	if t != nil {
		prthuo.SetTTL(*t)
	}
	return prthuo
}

// SetEmail sets the "email" field.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SetEmail(s string) *PasswordResetTokenHistoryUpdateOne {
	prthuo.mutation.SetEmail(s)
	return prthuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SetNillableEmail(s *string) *PasswordResetTokenHistoryUpdateOne {
	if s != nil {
		prthuo.SetEmail(*s)
	}
	return prthuo
}

// SetSecret sets the "secret" field.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SetSecret(b []byte) *PasswordResetTokenHistoryUpdateOne {
	prthuo.mutation.SetSecret(b)
	return prthuo
}

// Mutation returns the PasswordResetTokenHistoryMutation object of the builder.
func (prthuo *PasswordResetTokenHistoryUpdateOne) Mutation() *PasswordResetTokenHistoryMutation {
	return prthuo.mutation
}

// Where appends a list predicates to the PasswordResetTokenHistoryUpdate builder.
func (prthuo *PasswordResetTokenHistoryUpdateOne) Where(ps ...predicate.PasswordResetTokenHistory) *PasswordResetTokenHistoryUpdateOne {
	prthuo.mutation.Where(ps...)
	return prthuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (prthuo *PasswordResetTokenHistoryUpdateOne) Select(field string, fields ...string) *PasswordResetTokenHistoryUpdateOne {
	prthuo.fields = append([]string{field}, fields...)
	return prthuo
}

// Save executes the query and returns the updated PasswordResetTokenHistory entity.
func (prthuo *PasswordResetTokenHistoryUpdateOne) Save(ctx context.Context) (*PasswordResetTokenHistory, error) {
	prthuo.defaults()
	return withHooks(ctx, prthuo.sqlSave, prthuo.mutation, prthuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (prthuo *PasswordResetTokenHistoryUpdateOne) SaveX(ctx context.Context) *PasswordResetTokenHistory {
	node, err := prthuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (prthuo *PasswordResetTokenHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := prthuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (prthuo *PasswordResetTokenHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := prthuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (prthuo *PasswordResetTokenHistoryUpdateOne) defaults() {
	if _, ok := prthuo.mutation.UpdatedAt(); !ok {
		v := passwordresettokenhistory.UpdateDefaultUpdatedAt()
		prthuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (prthuo *PasswordResetTokenHistoryUpdateOne) check() error {
	if v, ok := prthuo.mutation.Token(); ok {
		if err := passwordresettokenhistory.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "PasswordResetTokenHistory.token": %w`, err)}
		}
	}
	if v, ok := prthuo.mutation.Email(); ok {
		if err := passwordresettokenhistory.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "PasswordResetTokenHistory.email": %w`, err)}
		}
	}
	if v, ok := prthuo.mutation.Secret(); ok {
		if err := passwordresettokenhistory.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "PasswordResetTokenHistory.secret": %w`, err)}
		}
	}
	return nil
}

func (prthuo *PasswordResetTokenHistoryUpdateOne) sqlSave(ctx context.Context) (_node *PasswordResetTokenHistory, err error) {
	if err := prthuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(passwordresettokenhistory.Table, passwordresettokenhistory.Columns, sqlgraph.NewFieldSpec(passwordresettokenhistory.FieldID, field.TypeString))
	id, ok := prthuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "PasswordResetTokenHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := prthuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, passwordresettokenhistory.FieldID)
		for _, f := range fields {
			if !passwordresettokenhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != passwordresettokenhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := prthuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if prthuo.mutation.RefCleared() {
		_spec.ClearField(passwordresettokenhistory.FieldRef, field.TypeString)
	}
	if value, ok := prthuo.mutation.UpdatedAt(); ok {
		_spec.SetField(passwordresettokenhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if prthuo.mutation.CreatedByCleared() {
		_spec.ClearField(passwordresettokenhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := prthuo.mutation.UpdatedBy(); ok {
		_spec.SetField(passwordresettokenhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if prthuo.mutation.UpdatedByCleared() {
		_spec.ClearField(passwordresettokenhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := prthuo.mutation.DeletedAt(); ok {
		_spec.SetField(passwordresettokenhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if prthuo.mutation.DeletedAtCleared() {
		_spec.ClearField(passwordresettokenhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := prthuo.mutation.DeletedBy(); ok {
		_spec.SetField(passwordresettokenhistory.FieldDeletedBy, field.TypeString, value)
	}
	if prthuo.mutation.DeletedByCleared() {
		_spec.ClearField(passwordresettokenhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := prthuo.mutation.Token(); ok {
		_spec.SetField(passwordresettokenhistory.FieldToken, field.TypeString, value)
	}
	if value, ok := prthuo.mutation.TTL(); ok {
		_spec.SetField(passwordresettokenhistory.FieldTTL, field.TypeTime, value)
	}
	if value, ok := prthuo.mutation.Email(); ok {
		_spec.SetField(passwordresettokenhistory.FieldEmail, field.TypeString, value)
	}
	if value, ok := prthuo.mutation.Secret(); ok {
		_spec.SetField(passwordresettokenhistory.FieldSecret, field.TypeBytes, value)
	}
	_spec.Node.Schema = prthuo.schemaConfig.PasswordResetTokenHistory
	ctx = internal.NewSchemaConfigContext(ctx, prthuo.schemaConfig)
	_node = &PasswordResetTokenHistory{config: prthuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, prthuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{passwordresettokenhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	prthuo.mutation.done = true
	return _node, nil
}
