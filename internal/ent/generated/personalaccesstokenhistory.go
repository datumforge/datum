// Code generated by ent, DO NOT EDIT.

package generated

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datumforge/datum/internal/ent/generated/personalaccesstokenhistory"
	"github.com/flume/enthistory"
)

// PersonalAccessTokenHistory is the model entity for the PersonalAccessTokenHistory schema.
type PersonalAccessTokenHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation enthistory.OpType `json:"operation,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// the name associated with the token
	Name string `json:"name,omitempty"`
	// Token holds the value of the "token" field.
	Token string `json:"-"`
	// what abilites the token should have
	Abilities []string `json:"abilities,omitempty"`
	// when the token expires
	ExpiresAt *time.Time `json:"expires_at,omitempty"`
	// a description of the token's purpose
	Description string `json:"description,omitempty"`
	// LastUsedAt holds the value of the "last_used_at" field.
	LastUsedAt   *time.Time `json:"last_used_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PersonalAccessTokenHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case personalaccesstokenhistory.FieldAbilities:
			values[i] = new([]byte)
		case personalaccesstokenhistory.FieldID, personalaccesstokenhistory.FieldOperation, personalaccesstokenhistory.FieldRef, personalaccesstokenhistory.FieldCreatedBy, personalaccesstokenhistory.FieldUpdatedBy, personalaccesstokenhistory.FieldDeletedBy, personalaccesstokenhistory.FieldName, personalaccesstokenhistory.FieldToken, personalaccesstokenhistory.FieldDescription:
			values[i] = new(sql.NullString)
		case personalaccesstokenhistory.FieldHistoryTime, personalaccesstokenhistory.FieldCreatedAt, personalaccesstokenhistory.FieldUpdatedAt, personalaccesstokenhistory.FieldDeletedAt, personalaccesstokenhistory.FieldExpiresAt, personalaccesstokenhistory.FieldLastUsedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PersonalAccessTokenHistory fields.
func (path *PersonalAccessTokenHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case personalaccesstokenhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				path.ID = value.String
			}
		case personalaccesstokenhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				path.HistoryTime = value.Time
			}
		case personalaccesstokenhistory.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				path.Operation = enthistory.OpType(value.String)
			}
		case personalaccesstokenhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				path.Ref = value.String
			}
		case personalaccesstokenhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				path.CreatedAt = value.Time
			}
		case personalaccesstokenhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				path.UpdatedAt = value.Time
			}
		case personalaccesstokenhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				path.CreatedBy = value.String
			}
		case personalaccesstokenhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				path.UpdatedBy = value.String
			}
		case personalaccesstokenhistory.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				path.DeletedAt = value.Time
			}
		case personalaccesstokenhistory.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				path.DeletedBy = value.String
			}
		case personalaccesstokenhistory.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				path.Name = value.String
			}
		case personalaccesstokenhistory.FieldToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field token", values[i])
			} else if value.Valid {
				path.Token = value.String
			}
		case personalaccesstokenhistory.FieldAbilities:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field abilities", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &path.Abilities); err != nil {
					return fmt.Errorf("unmarshal field abilities: %w", err)
				}
			}
		case personalaccesstokenhistory.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				path.ExpiresAt = new(time.Time)
				*path.ExpiresAt = value.Time
			}
		case personalaccesstokenhistory.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				path.Description = value.String
			}
		case personalaccesstokenhistory.FieldLastUsedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_used_at", values[i])
			} else if value.Valid {
				path.LastUsedAt = new(time.Time)
				*path.LastUsedAt = value.Time
			}
		default:
			path.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PersonalAccessTokenHistory.
// This includes values selected through modifiers, order, etc.
func (path *PersonalAccessTokenHistory) Value(name string) (ent.Value, error) {
	return path.selectValues.Get(name)
}

// Update returns a builder for updating this PersonalAccessTokenHistory.
// Note that you need to call PersonalAccessTokenHistory.Unwrap() before calling this method if this PersonalAccessTokenHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (path *PersonalAccessTokenHistory) Update() *PersonalAccessTokenHistoryUpdateOne {
	return NewPersonalAccessTokenHistoryClient(path.config).UpdateOne(path)
}

// Unwrap unwraps the PersonalAccessTokenHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (path *PersonalAccessTokenHistory) Unwrap() *PersonalAccessTokenHistory {
	_tx, ok := path.config.driver.(*txDriver)
	if !ok {
		panic("generated: PersonalAccessTokenHistory is not a transactional entity")
	}
	path.config.driver = _tx.drv
	return path
}

// String implements the fmt.Stringer.
func (path *PersonalAccessTokenHistory) String() string {
	var builder strings.Builder
	builder.WriteString("PersonalAccessTokenHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", path.ID))
	builder.WriteString("history_time=")
	builder.WriteString(path.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", path.Operation))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(path.Ref)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(path.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(path.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(path.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(path.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(path.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(path.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(path.Name)
	builder.WriteString(", ")
	builder.WriteString("token=<sensitive>")
	builder.WriteString(", ")
	builder.WriteString("abilities=")
	builder.WriteString(fmt.Sprintf("%v", path.Abilities))
	builder.WriteString(", ")
	if v := path.ExpiresAt; v != nil {
		builder.WriteString("expires_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(path.Description)
	builder.WriteString(", ")
	if v := path.LastUsedAt; v != nil {
		builder.WriteString("last_used_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// PersonalAccessTokenHistories is a parsable slice of PersonalAccessTokenHistory.
type PersonalAccessTokenHistories []*PersonalAccessTokenHistory
