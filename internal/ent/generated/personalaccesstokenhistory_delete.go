// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/predicate"

	"github.com/datumforge/datum/internal/ent/generated/internal"
	"github.com/datumforge/datum/internal/ent/generated/personalaccesstokenhistory"
)

// PersonalAccessTokenHistoryDelete is the builder for deleting a PersonalAccessTokenHistory entity.
type PersonalAccessTokenHistoryDelete struct {
	config
	hooks    []Hook
	mutation *PersonalAccessTokenHistoryMutation
}

// Where appends a list predicates to the PersonalAccessTokenHistoryDelete builder.
func (pathd *PersonalAccessTokenHistoryDelete) Where(ps ...predicate.PersonalAccessTokenHistory) *PersonalAccessTokenHistoryDelete {
	pathd.mutation.Where(ps...)
	return pathd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (pathd *PersonalAccessTokenHistoryDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, pathd.sqlExec, pathd.mutation, pathd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (pathd *PersonalAccessTokenHistoryDelete) ExecX(ctx context.Context) int {
	n, err := pathd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (pathd *PersonalAccessTokenHistoryDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(personalaccesstokenhistory.Table, sqlgraph.NewFieldSpec(personalaccesstokenhistory.FieldID, field.TypeString))
	_spec.Node.Schema = pathd.schemaConfig.PersonalAccessTokenHistory
	ctx = internal.NewSchemaConfigContext(ctx, pathd.schemaConfig)
	if ps := pathd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, pathd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	pathd.mutation.done = true
	return affected, err
}

// PersonalAccessTokenHistoryDeleteOne is the builder for deleting a single PersonalAccessTokenHistory entity.
type PersonalAccessTokenHistoryDeleteOne struct {
	pathd *PersonalAccessTokenHistoryDelete
}

// Where appends a list predicates to the PersonalAccessTokenHistoryDelete builder.
func (pathdo *PersonalAccessTokenHistoryDeleteOne) Where(ps ...predicate.PersonalAccessTokenHistory) *PersonalAccessTokenHistoryDeleteOne {
	pathdo.pathd.mutation.Where(ps...)
	return pathdo
}

// Exec executes the deletion query.
func (pathdo *PersonalAccessTokenHistoryDeleteOne) Exec(ctx context.Context) error {
	n, err := pathdo.pathd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{personalaccesstokenhistory.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (pathdo *PersonalAccessTokenHistoryDeleteOne) ExecX(ctx context.Context) {
	if err := pathdo.Exec(ctx); err != nil {
		panic(err)
	}
}
