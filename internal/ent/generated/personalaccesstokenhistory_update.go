// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/personalaccesstokenhistory"
	"github.com/datumforge/datum/internal/ent/generated/predicate"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// PersonalAccessTokenHistoryUpdate is the builder for updating PersonalAccessTokenHistory entities.
type PersonalAccessTokenHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *PersonalAccessTokenHistoryMutation
}

// Where appends a list predicates to the PersonalAccessTokenHistoryUpdate builder.
func (pathu *PersonalAccessTokenHistoryUpdate) Where(ps ...predicate.PersonalAccessTokenHistory) *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.Where(ps...)
	return pathu
}

// SetUpdatedAt sets the "updated_at" field.
func (pathu *PersonalAccessTokenHistoryUpdate) SetUpdatedAt(t time.Time) *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.SetUpdatedAt(t)
	return pathu
}

// SetUpdatedBy sets the "updated_by" field.
func (pathu *PersonalAccessTokenHistoryUpdate) SetUpdatedBy(s string) *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.SetUpdatedBy(s)
	return pathu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pathu *PersonalAccessTokenHistoryUpdate) SetNillableUpdatedBy(s *string) *PersonalAccessTokenHistoryUpdate {
	if s != nil {
		pathu.SetUpdatedBy(*s)
	}
	return pathu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pathu *PersonalAccessTokenHistoryUpdate) ClearUpdatedBy() *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.ClearUpdatedBy()
	return pathu
}

// SetDeletedAt sets the "deleted_at" field.
func (pathu *PersonalAccessTokenHistoryUpdate) SetDeletedAt(t time.Time) *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.SetDeletedAt(t)
	return pathu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pathu *PersonalAccessTokenHistoryUpdate) SetNillableDeletedAt(t *time.Time) *PersonalAccessTokenHistoryUpdate {
	if t != nil {
		pathu.SetDeletedAt(*t)
	}
	return pathu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pathu *PersonalAccessTokenHistoryUpdate) ClearDeletedAt() *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.ClearDeletedAt()
	return pathu
}

// SetDeletedBy sets the "deleted_by" field.
func (pathu *PersonalAccessTokenHistoryUpdate) SetDeletedBy(s string) *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.SetDeletedBy(s)
	return pathu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pathu *PersonalAccessTokenHistoryUpdate) SetNillableDeletedBy(s *string) *PersonalAccessTokenHistoryUpdate {
	if s != nil {
		pathu.SetDeletedBy(*s)
	}
	return pathu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pathu *PersonalAccessTokenHistoryUpdate) ClearDeletedBy() *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.ClearDeletedBy()
	return pathu
}

// SetName sets the "name" field.
func (pathu *PersonalAccessTokenHistoryUpdate) SetName(s string) *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.SetName(s)
	return pathu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pathu *PersonalAccessTokenHistoryUpdate) SetNillableName(s *string) *PersonalAccessTokenHistoryUpdate {
	if s != nil {
		pathu.SetName(*s)
	}
	return pathu
}

// SetAbilities sets the "abilities" field.
func (pathu *PersonalAccessTokenHistoryUpdate) SetAbilities(s []string) *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.SetAbilities(s)
	return pathu
}

// AppendAbilities appends s to the "abilities" field.
func (pathu *PersonalAccessTokenHistoryUpdate) AppendAbilities(s []string) *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.AppendAbilities(s)
	return pathu
}

// ClearAbilities clears the value of the "abilities" field.
func (pathu *PersonalAccessTokenHistoryUpdate) ClearAbilities() *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.ClearAbilities()
	return pathu
}

// SetExpiresAt sets the "expires_at" field.
func (pathu *PersonalAccessTokenHistoryUpdate) SetExpiresAt(t time.Time) *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.SetExpiresAt(t)
	return pathu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (pathu *PersonalAccessTokenHistoryUpdate) SetNillableExpiresAt(t *time.Time) *PersonalAccessTokenHistoryUpdate {
	if t != nil {
		pathu.SetExpiresAt(*t)
	}
	return pathu
}

// SetDescription sets the "description" field.
func (pathu *PersonalAccessTokenHistoryUpdate) SetDescription(s string) *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.SetDescription(s)
	return pathu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pathu *PersonalAccessTokenHistoryUpdate) SetNillableDescription(s *string) *PersonalAccessTokenHistoryUpdate {
	if s != nil {
		pathu.SetDescription(*s)
	}
	return pathu
}

// ClearDescription clears the value of the "description" field.
func (pathu *PersonalAccessTokenHistoryUpdate) ClearDescription() *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.ClearDescription()
	return pathu
}

// SetLastUsedAt sets the "last_used_at" field.
func (pathu *PersonalAccessTokenHistoryUpdate) SetLastUsedAt(t time.Time) *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.SetLastUsedAt(t)
	return pathu
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (pathu *PersonalAccessTokenHistoryUpdate) ClearLastUsedAt() *PersonalAccessTokenHistoryUpdate {
	pathu.mutation.ClearLastUsedAt()
	return pathu
}

// Mutation returns the PersonalAccessTokenHistoryMutation object of the builder.
func (pathu *PersonalAccessTokenHistoryUpdate) Mutation() *PersonalAccessTokenHistoryMutation {
	return pathu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pathu *PersonalAccessTokenHistoryUpdate) Save(ctx context.Context) (int, error) {
	pathu.defaults()
	return withHooks(ctx, pathu.sqlSave, pathu.mutation, pathu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pathu *PersonalAccessTokenHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := pathu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pathu *PersonalAccessTokenHistoryUpdate) Exec(ctx context.Context) error {
	_, err := pathu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pathu *PersonalAccessTokenHistoryUpdate) ExecX(ctx context.Context) {
	if err := pathu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pathu *PersonalAccessTokenHistoryUpdate) defaults() {
	if _, ok := pathu.mutation.UpdatedAt(); !ok {
		v := personalaccesstokenhistory.UpdateDefaultUpdatedAt()
		pathu.mutation.SetUpdatedAt(v)
	}
	if _, ok := pathu.mutation.LastUsedAt(); !ok && !pathu.mutation.LastUsedAtCleared() {
		v := personalaccesstokenhistory.UpdateDefaultLastUsedAt()
		pathu.mutation.SetLastUsedAt(v)
	}
}

func (pathu *PersonalAccessTokenHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(personalaccesstokenhistory.Table, personalaccesstokenhistory.Columns, sqlgraph.NewFieldSpec(personalaccesstokenhistory.FieldID, field.TypeString))
	if ps := pathu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pathu.mutation.RefCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldRef, field.TypeString)
	}
	if value, ok := pathu.mutation.UpdatedAt(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if pathu.mutation.CreatedByCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pathu.mutation.UpdatedBy(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if pathu.mutation.UpdatedByCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pathu.mutation.DeletedAt(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if pathu.mutation.DeletedAtCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pathu.mutation.DeletedBy(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldDeletedBy, field.TypeString, value)
	}
	if pathu.mutation.DeletedByCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pathu.mutation.Name(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldName, field.TypeString, value)
	}
	if value, ok := pathu.mutation.Abilities(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldAbilities, field.TypeJSON, value)
	}
	if value, ok := pathu.mutation.AppendedAbilities(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, personalaccesstokenhistory.FieldAbilities, value)
		})
	}
	if pathu.mutation.AbilitiesCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldAbilities, field.TypeJSON)
	}
	if value, ok := pathu.mutation.ExpiresAt(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := pathu.mutation.Description(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldDescription, field.TypeString, value)
	}
	if pathu.mutation.DescriptionCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldDescription, field.TypeString)
	}
	if value, ok := pathu.mutation.LastUsedAt(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldLastUsedAt, field.TypeTime, value)
	}
	if pathu.mutation.LastUsedAtCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldLastUsedAt, field.TypeTime)
	}
	_spec.Node.Schema = pathu.schemaConfig.PersonalAccessTokenHistory
	ctx = internal.NewSchemaConfigContext(ctx, pathu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, pathu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalaccesstokenhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pathu.mutation.done = true
	return n, nil
}

// PersonalAccessTokenHistoryUpdateOne is the builder for updating a single PersonalAccessTokenHistory entity.
type PersonalAccessTokenHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonalAccessTokenHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetUpdatedAt(t time.Time) *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.SetUpdatedAt(t)
	return pathuo
}

// SetUpdatedBy sets the "updated_by" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetUpdatedBy(s string) *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.SetUpdatedBy(s)
	return pathuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetNillableUpdatedBy(s *string) *PersonalAccessTokenHistoryUpdateOne {
	if s != nil {
		pathuo.SetUpdatedBy(*s)
	}
	return pathuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) ClearUpdatedBy() *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.ClearUpdatedBy()
	return pathuo
}

// SetDeletedAt sets the "deleted_at" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetDeletedAt(t time.Time) *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.SetDeletedAt(t)
	return pathuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetNillableDeletedAt(t *time.Time) *PersonalAccessTokenHistoryUpdateOne {
	if t != nil {
		pathuo.SetDeletedAt(*t)
	}
	return pathuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) ClearDeletedAt() *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.ClearDeletedAt()
	return pathuo
}

// SetDeletedBy sets the "deleted_by" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetDeletedBy(s string) *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.SetDeletedBy(s)
	return pathuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetNillableDeletedBy(s *string) *PersonalAccessTokenHistoryUpdateOne {
	if s != nil {
		pathuo.SetDeletedBy(*s)
	}
	return pathuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) ClearDeletedBy() *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.ClearDeletedBy()
	return pathuo
}

// SetName sets the "name" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetName(s string) *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.SetName(s)
	return pathuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetNillableName(s *string) *PersonalAccessTokenHistoryUpdateOne {
	if s != nil {
		pathuo.SetName(*s)
	}
	return pathuo
}

// SetAbilities sets the "abilities" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetAbilities(s []string) *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.SetAbilities(s)
	return pathuo
}

// AppendAbilities appends s to the "abilities" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) AppendAbilities(s []string) *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.AppendAbilities(s)
	return pathuo
}

// ClearAbilities clears the value of the "abilities" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) ClearAbilities() *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.ClearAbilities()
	return pathuo
}

// SetExpiresAt sets the "expires_at" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetExpiresAt(t time.Time) *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.SetExpiresAt(t)
	return pathuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetNillableExpiresAt(t *time.Time) *PersonalAccessTokenHistoryUpdateOne {
	if t != nil {
		pathuo.SetExpiresAt(*t)
	}
	return pathuo
}

// SetDescription sets the "description" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetDescription(s string) *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.SetDescription(s)
	return pathuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetNillableDescription(s *string) *PersonalAccessTokenHistoryUpdateOne {
	if s != nil {
		pathuo.SetDescription(*s)
	}
	return pathuo
}

// ClearDescription clears the value of the "description" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) ClearDescription() *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.ClearDescription()
	return pathuo
}

// SetLastUsedAt sets the "last_used_at" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SetLastUsedAt(t time.Time) *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.SetLastUsedAt(t)
	return pathuo
}

// ClearLastUsedAt clears the value of the "last_used_at" field.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) ClearLastUsedAt() *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.ClearLastUsedAt()
	return pathuo
}

// Mutation returns the PersonalAccessTokenHistoryMutation object of the builder.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) Mutation() *PersonalAccessTokenHistoryMutation {
	return pathuo.mutation
}

// Where appends a list predicates to the PersonalAccessTokenHistoryUpdate builder.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) Where(ps ...predicate.PersonalAccessTokenHistory) *PersonalAccessTokenHistoryUpdateOne {
	pathuo.mutation.Where(ps...)
	return pathuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) Select(field string, fields ...string) *PersonalAccessTokenHistoryUpdateOne {
	pathuo.fields = append([]string{field}, fields...)
	return pathuo
}

// Save executes the query and returns the updated PersonalAccessTokenHistory entity.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) Save(ctx context.Context) (*PersonalAccessTokenHistory, error) {
	pathuo.defaults()
	return withHooks(ctx, pathuo.sqlSave, pathuo.mutation, pathuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) SaveX(ctx context.Context) *PersonalAccessTokenHistory {
	node, err := pathuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := pathuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := pathuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pathuo *PersonalAccessTokenHistoryUpdateOne) defaults() {
	if _, ok := pathuo.mutation.UpdatedAt(); !ok {
		v := personalaccesstokenhistory.UpdateDefaultUpdatedAt()
		pathuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := pathuo.mutation.LastUsedAt(); !ok && !pathuo.mutation.LastUsedAtCleared() {
		v := personalaccesstokenhistory.UpdateDefaultLastUsedAt()
		pathuo.mutation.SetLastUsedAt(v)
	}
}

func (pathuo *PersonalAccessTokenHistoryUpdateOne) sqlSave(ctx context.Context) (_node *PersonalAccessTokenHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(personalaccesstokenhistory.Table, personalaccesstokenhistory.Columns, sqlgraph.NewFieldSpec(personalaccesstokenhistory.FieldID, field.TypeString))
	id, ok := pathuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "PersonalAccessTokenHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pathuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personalaccesstokenhistory.FieldID)
		for _, f := range fields {
			if !personalaccesstokenhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != personalaccesstokenhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pathuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if pathuo.mutation.RefCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldRef, field.TypeString)
	}
	if value, ok := pathuo.mutation.UpdatedAt(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if pathuo.mutation.CreatedByCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := pathuo.mutation.UpdatedBy(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if pathuo.mutation.UpdatedByCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := pathuo.mutation.DeletedAt(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldDeletedAt, field.TypeTime, value)
	}
	if pathuo.mutation.DeletedAtCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := pathuo.mutation.DeletedBy(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldDeletedBy, field.TypeString, value)
	}
	if pathuo.mutation.DeletedByCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldDeletedBy, field.TypeString)
	}
	if value, ok := pathuo.mutation.Name(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldName, field.TypeString, value)
	}
	if value, ok := pathuo.mutation.Abilities(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldAbilities, field.TypeJSON, value)
	}
	if value, ok := pathuo.mutation.AppendedAbilities(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, personalaccesstokenhistory.FieldAbilities, value)
		})
	}
	if pathuo.mutation.AbilitiesCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldAbilities, field.TypeJSON)
	}
	if value, ok := pathuo.mutation.ExpiresAt(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := pathuo.mutation.Description(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldDescription, field.TypeString, value)
	}
	if pathuo.mutation.DescriptionCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldDescription, field.TypeString)
	}
	if value, ok := pathuo.mutation.LastUsedAt(); ok {
		_spec.SetField(personalaccesstokenhistory.FieldLastUsedAt, field.TypeTime, value)
	}
	if pathuo.mutation.LastUsedAtCleared() {
		_spec.ClearField(personalaccesstokenhistory.FieldLastUsedAt, field.TypeTime)
	}
	_spec.Node.Schema = pathuo.schemaConfig.PersonalAccessTokenHistory
	ctx = internal.NewSchemaConfigContext(ctx, pathuo.schemaConfig)
	_node = &PersonalAccessTokenHistory{config: pathuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pathuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personalaccesstokenhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pathuo.mutation.done = true
	return _node, nil
}
