// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/datumforge/datum/internal/ent/generated/refreshtoken"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// RefreshTokenUpdate is the builder for updating RefreshToken entities.
type RefreshTokenUpdate struct {
	config
	hooks    []Hook
	mutation *RefreshTokenMutation
}

// Where appends a list predicates to the RefreshTokenUpdate builder.
func (rtu *RefreshTokenUpdate) Where(ps ...predicate.RefreshToken) *RefreshTokenUpdate {
	rtu.mutation.Where(ps...)
	return rtu
}

// SetExpiresAt sets the "expires_at" field.
func (rtu *RefreshTokenUpdate) SetExpiresAt(t time.Time) *RefreshTokenUpdate {
	rtu.mutation.SetExpiresAt(t)
	return rtu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (rtu *RefreshTokenUpdate) SetNillableExpiresAt(t *time.Time) *RefreshTokenUpdate {
	if t != nil {
		rtu.SetExpiresAt(*t)
	}
	return rtu
}

// SetIssuedAt sets the "issued_at" field.
func (rtu *RefreshTokenUpdate) SetIssuedAt(t time.Time) *RefreshTokenUpdate {
	rtu.mutation.SetIssuedAt(t)
	return rtu
}

// SetNillableIssuedAt sets the "issued_at" field if the given value is not nil.
func (rtu *RefreshTokenUpdate) SetNillableIssuedAt(t *time.Time) *RefreshTokenUpdate {
	if t != nil {
		rtu.SetIssuedAt(*t)
	}
	return rtu
}

// SetOrganizationID sets the "organization_id" field.
func (rtu *RefreshTokenUpdate) SetOrganizationID(s string) *RefreshTokenUpdate {
	rtu.mutation.SetOrganizationID(s)
	return rtu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (rtu *RefreshTokenUpdate) SetNillableOrganizationID(s *string) *RefreshTokenUpdate {
	if s != nil {
		rtu.SetOrganizationID(*s)
	}
	return rtu
}

// SetUserID sets the "user_id" field.
func (rtu *RefreshTokenUpdate) SetUserID(s string) *RefreshTokenUpdate {
	rtu.mutation.SetUserID(s)
	return rtu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rtu *RefreshTokenUpdate) SetNillableUserID(s *string) *RefreshTokenUpdate {
	if s != nil {
		rtu.SetUserID(*s)
	}
	return rtu
}

// Mutation returns the RefreshTokenMutation object of the builder.
func (rtu *RefreshTokenUpdate) Mutation() *RefreshTokenMutation {
	return rtu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rtu *RefreshTokenUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rtu.sqlSave, rtu.mutation, rtu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtu *RefreshTokenUpdate) SaveX(ctx context.Context) int {
	affected, err := rtu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rtu *RefreshTokenUpdate) Exec(ctx context.Context) error {
	_, err := rtu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtu *RefreshTokenUpdate) ExecX(ctx context.Context) {
	if err := rtu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rtu *RefreshTokenUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(refreshtoken.Table, refreshtoken.Columns, sqlgraph.NewFieldSpec(refreshtoken.FieldID, field.TypeString))
	if ps := rtu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtu.mutation.ExpiresAt(); ok {
		_spec.SetField(refreshtoken.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := rtu.mutation.IssuedAt(); ok {
		_spec.SetField(refreshtoken.FieldIssuedAt, field.TypeTime, value)
	}
	if value, ok := rtu.mutation.OrganizationID(); ok {
		_spec.SetField(refreshtoken.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := rtu.mutation.UserID(); ok {
		_spec.SetField(refreshtoken.FieldUserID, field.TypeString, value)
	}
	_spec.Node.Schema = rtu.schemaConfig.RefreshToken
	ctx = internal.NewSchemaConfigContext(ctx, rtu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, rtu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refreshtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rtu.mutation.done = true
	return n, nil
}

// RefreshTokenUpdateOne is the builder for updating a single RefreshToken entity.
type RefreshTokenUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RefreshTokenMutation
}

// SetExpiresAt sets the "expires_at" field.
func (rtuo *RefreshTokenUpdateOne) SetExpiresAt(t time.Time) *RefreshTokenUpdateOne {
	rtuo.mutation.SetExpiresAt(t)
	return rtuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (rtuo *RefreshTokenUpdateOne) SetNillableExpiresAt(t *time.Time) *RefreshTokenUpdateOne {
	if t != nil {
		rtuo.SetExpiresAt(*t)
	}
	return rtuo
}

// SetIssuedAt sets the "issued_at" field.
func (rtuo *RefreshTokenUpdateOne) SetIssuedAt(t time.Time) *RefreshTokenUpdateOne {
	rtuo.mutation.SetIssuedAt(t)
	return rtuo
}

// SetNillableIssuedAt sets the "issued_at" field if the given value is not nil.
func (rtuo *RefreshTokenUpdateOne) SetNillableIssuedAt(t *time.Time) *RefreshTokenUpdateOne {
	if t != nil {
		rtuo.SetIssuedAt(*t)
	}
	return rtuo
}

// SetOrganizationID sets the "organization_id" field.
func (rtuo *RefreshTokenUpdateOne) SetOrganizationID(s string) *RefreshTokenUpdateOne {
	rtuo.mutation.SetOrganizationID(s)
	return rtuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (rtuo *RefreshTokenUpdateOne) SetNillableOrganizationID(s *string) *RefreshTokenUpdateOne {
	if s != nil {
		rtuo.SetOrganizationID(*s)
	}
	return rtuo
}

// SetUserID sets the "user_id" field.
func (rtuo *RefreshTokenUpdateOne) SetUserID(s string) *RefreshTokenUpdateOne {
	rtuo.mutation.SetUserID(s)
	return rtuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (rtuo *RefreshTokenUpdateOne) SetNillableUserID(s *string) *RefreshTokenUpdateOne {
	if s != nil {
		rtuo.SetUserID(*s)
	}
	return rtuo
}

// Mutation returns the RefreshTokenMutation object of the builder.
func (rtuo *RefreshTokenUpdateOne) Mutation() *RefreshTokenMutation {
	return rtuo.mutation
}

// Where appends a list predicates to the RefreshTokenUpdate builder.
func (rtuo *RefreshTokenUpdateOne) Where(ps ...predicate.RefreshToken) *RefreshTokenUpdateOne {
	rtuo.mutation.Where(ps...)
	return rtuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rtuo *RefreshTokenUpdateOne) Select(field string, fields ...string) *RefreshTokenUpdateOne {
	rtuo.fields = append([]string{field}, fields...)
	return rtuo
}

// Save executes the query and returns the updated RefreshToken entity.
func (rtuo *RefreshTokenUpdateOne) Save(ctx context.Context) (*RefreshToken, error) {
	return withHooks(ctx, rtuo.sqlSave, rtuo.mutation, rtuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rtuo *RefreshTokenUpdateOne) SaveX(ctx context.Context) *RefreshToken {
	node, err := rtuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rtuo *RefreshTokenUpdateOne) Exec(ctx context.Context) error {
	_, err := rtuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rtuo *RefreshTokenUpdateOne) ExecX(ctx context.Context) {
	if err := rtuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (rtuo *RefreshTokenUpdateOne) sqlSave(ctx context.Context) (_node *RefreshToken, err error) {
	_spec := sqlgraph.NewUpdateSpec(refreshtoken.Table, refreshtoken.Columns, sqlgraph.NewFieldSpec(refreshtoken.FieldID, field.TypeString))
	id, ok := rtuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "RefreshToken.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rtuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, refreshtoken.FieldID)
		for _, f := range fields {
			if !refreshtoken.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != refreshtoken.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rtuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rtuo.mutation.ExpiresAt(); ok {
		_spec.SetField(refreshtoken.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := rtuo.mutation.IssuedAt(); ok {
		_spec.SetField(refreshtoken.FieldIssuedAt, field.TypeTime, value)
	}
	if value, ok := rtuo.mutation.OrganizationID(); ok {
		_spec.SetField(refreshtoken.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := rtuo.mutation.UserID(); ok {
		_spec.SetField(refreshtoken.FieldUserID, field.TypeString, value)
	}
	_spec.Node.Schema = rtuo.schemaConfig.RefreshToken
	ctx = internal.NewSchemaConfigContext(ctx, rtuo.schemaConfig)
	_node = &RefreshToken{config: rtuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rtuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{refreshtoken.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rtuo.mutation.done = true
	return _node, nil
}
