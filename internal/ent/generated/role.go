// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datumforge/datum/internal/ent/generated/role"
)

// Role is the model entity for the Role schema.
type Role struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// IsDisabled holds the value of the "is_disabled" field.
	IsDisabled bool `json:"is_disabled,omitempty"`
	// CreatedTime holds the value of the "created_time" field.
	CreatedTime *time.Time `json:"created_time,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RoleQuery when eager-loading is set.
	Edges        RoleEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RoleEdges holds the relations/edges for other nodes in the graph.
type RoleEdges struct {
	// Permissions holds the value of the permissions edge.
	Permissions []*Permission `json:"permissions,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// RolePermission holds the value of the role_permission edge.
	RolePermission []*RolePermission `json:"role_permission,omitempty"`
	// UserRole holds the value of the user_role edge.
	UserRole []*UserRole `json:"user_role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
	// totalCount holds the count of the edges above.
	totalCount [4]map[string]int

	namedPermissions    map[string][]*Permission
	namedUsers          map[string][]*User
	namedRolePermission map[string][]*RolePermission
	namedUserRole       map[string][]*UserRole
}

// PermissionsOrErr returns the Permissions value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) PermissionsOrErr() ([]*Permission, error) {
	if e.loadedTypes[0] {
		return e.Permissions, nil
	}
	return nil, &NotLoadedError{edge: "permissions"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[1] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// RolePermissionOrErr returns the RolePermission value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) RolePermissionOrErr() ([]*RolePermission, error) {
	if e.loadedTypes[2] {
		return e.RolePermission, nil
	}
	return nil, &NotLoadedError{edge: "role_permission"}
}

// UserRoleOrErr returns the UserRole value or an error if the edge
// was not loaded in eager-loading.
func (e RoleEdges) UserRoleOrErr() ([]*UserRole, error) {
	if e.loadedTypes[3] {
		return e.UserRole, nil
	}
	return nil, &NotLoadedError{edge: "user_role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Role) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case role.FieldIsDisabled:
			values[i] = new(sql.NullBool)
		case role.FieldID, role.FieldCreatedBy, role.FieldUpdatedBy, role.FieldName, role.FieldDescription:
			values[i] = new(sql.NullString)
		case role.FieldCreatedAt, role.FieldUpdatedAt, role.FieldCreatedTime:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Role fields.
func (r *Role) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case role.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				r.ID = value.String
			}
		case role.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				r.CreatedAt = value.Time
			}
		case role.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				r.UpdatedAt = value.Time
			}
		case role.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				r.CreatedBy = value.String
			}
		case role.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				r.UpdatedBy = value.String
			}
		case role.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				r.Name = value.String
			}
		case role.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				r.Description = value.String
			}
		case role.FieldIsDisabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field is_disabled", values[i])
			} else if value.Valid {
				r.IsDisabled = value.Bool
			}
		case role.FieldCreatedTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_time", values[i])
			} else if value.Valid {
				r.CreatedTime = new(time.Time)
				*r.CreatedTime = value.Time
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Role.
// This includes values selected through modifiers, order, etc.
func (r *Role) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryPermissions queries the "permissions" edge of the Role entity.
func (r *Role) QueryPermissions() *PermissionQuery {
	return NewRoleClient(r.config).QueryPermissions(r)
}

// QueryUsers queries the "users" edge of the Role entity.
func (r *Role) QueryUsers() *UserQuery {
	return NewRoleClient(r.config).QueryUsers(r)
}

// QueryRolePermission queries the "role_permission" edge of the Role entity.
func (r *Role) QueryRolePermission() *RolePermissionQuery {
	return NewRoleClient(r.config).QueryRolePermission(r)
}

// QueryUserRole queries the "user_role" edge of the Role entity.
func (r *Role) QueryUserRole() *UserRoleQuery {
	return NewRoleClient(r.config).QueryUserRole(r)
}

// Update returns a builder for updating this Role.
// Note that you need to call Role.Unwrap() before calling this method if this Role
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Role) Update() *RoleUpdateOne {
	return NewRoleClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Role entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Role) Unwrap() *Role {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("generated: Role is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Role) String() string {
	var builder strings.Builder
	builder.WriteString("Role(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("created_at=")
	builder.WriteString(r.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(r.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(r.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(r.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(r.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(r.Description)
	builder.WriteString(", ")
	builder.WriteString("is_disabled=")
	builder.WriteString(fmt.Sprintf("%v", r.IsDisabled))
	builder.WriteString(", ")
	if v := r.CreatedTime; v != nil {
		builder.WriteString("created_time=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteByte(')')
	return builder.String()
}

// NamedPermissions returns the Permissions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Role) NamedPermissions(name string) ([]*Permission, error) {
	if r.Edges.namedPermissions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedPermissions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Role) appendNamedPermissions(name string, edges ...*Permission) {
	if r.Edges.namedPermissions == nil {
		r.Edges.namedPermissions = make(map[string][]*Permission)
	}
	if len(edges) == 0 {
		r.Edges.namedPermissions[name] = []*Permission{}
	} else {
		r.Edges.namedPermissions[name] = append(r.Edges.namedPermissions[name], edges...)
	}
}

// NamedUsers returns the Users named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Role) NamedUsers(name string) ([]*User, error) {
	if r.Edges.namedUsers == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedUsers[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Role) appendNamedUsers(name string, edges ...*User) {
	if r.Edges.namedUsers == nil {
		r.Edges.namedUsers = make(map[string][]*User)
	}
	if len(edges) == 0 {
		r.Edges.namedUsers[name] = []*User{}
	} else {
		r.Edges.namedUsers[name] = append(r.Edges.namedUsers[name], edges...)
	}
}

// NamedRolePermission returns the RolePermission named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Role) NamedRolePermission(name string) ([]*RolePermission, error) {
	if r.Edges.namedRolePermission == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedRolePermission[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Role) appendNamedRolePermission(name string, edges ...*RolePermission) {
	if r.Edges.namedRolePermission == nil {
		r.Edges.namedRolePermission = make(map[string][]*RolePermission)
	}
	if len(edges) == 0 {
		r.Edges.namedRolePermission[name] = []*RolePermission{}
	} else {
		r.Edges.namedRolePermission[name] = append(r.Edges.namedRolePermission[name], edges...)
	}
}

// NamedUserRole returns the UserRole named value or an error if the edge was not
// loaded in eager-loading with this name.
func (r *Role) NamedUserRole(name string) ([]*UserRole, error) {
	if r.Edges.namedUserRole == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := r.Edges.namedUserRole[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (r *Role) appendNamedUserRole(name string, edges ...*UserRole) {
	if r.Edges.namedUserRole == nil {
		r.Edges.namedUserRole = make(map[string][]*UserRole)
	}
	if len(edges) == 0 {
		r.Edges.namedUserRole[name] = []*UserRole{}
	} else {
		r.Edges.namedUserRole[name] = append(r.Edges.namedUserRole[name], edges...)
	}
}

// Roles is a parsable slice of Role.
type Roles []*Role
