// Code generated by ent, DO NOT EDIT.

package runtime

import (
	"context"
	"time"

	"github.com/datumforge/datum/internal/ent/generated/emailverificationtoken"
	"github.com/datumforge/datum/internal/ent/generated/entitlement"
	"github.com/datumforge/datum/internal/ent/generated/group"
	"github.com/datumforge/datum/internal/ent/generated/groupmembership"
	"github.com/datumforge/datum/internal/ent/generated/groupsetting"
	"github.com/datumforge/datum/internal/ent/generated/integration"
	"github.com/datumforge/datum/internal/ent/generated/invite"
	"github.com/datumforge/datum/internal/ent/generated/oauthprovider"
	"github.com/datumforge/datum/internal/ent/generated/ohauthtootoken"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/organizationsetting"
	"github.com/datumforge/datum/internal/ent/generated/orgmembership"
	"github.com/datumforge/datum/internal/ent/generated/passwordresettoken"
	"github.com/datumforge/datum/internal/ent/generated/personalaccesstoken"
	"github.com/datumforge/datum/internal/ent/generated/user"
	"github.com/datumforge/datum/internal/ent/generated/usersetting"
	"github.com/datumforge/datum/internal/ent/generated/webauthn"
	"github.com/datumforge/datum/internal/ent/schema"

	"entgo.io/ent"
	"entgo.io/ent/privacy"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	emailverificationtokenMixin := schema.EmailVerificationToken{}.Mixin()
	emailverificationtoken.Policy = privacy.NewPolicies(schema.EmailVerificationToken{})
	emailverificationtoken.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := emailverificationtoken.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	emailverificationtokenMixinHooks0 := emailverificationtokenMixin[0].Hooks()
	emailverificationtokenMixinHooks2 := emailverificationtokenMixin[2].Hooks()
	emailverificationtokenHooks := schema.EmailVerificationToken{}.Hooks()

	emailverificationtoken.Hooks[1] = emailverificationtokenMixinHooks0[0]

	emailverificationtoken.Hooks[2] = emailverificationtokenMixinHooks2[0]

	emailverificationtoken.Hooks[3] = emailverificationtokenHooks[0]
	emailverificationtokenMixinInters2 := emailverificationtokenMixin[2].Interceptors()
	emailverificationtoken.Interceptors[0] = emailverificationtokenMixinInters2[0]
	emailverificationtokenMixinFields0 := emailverificationtokenMixin[0].Fields()
	_ = emailverificationtokenMixinFields0
	emailverificationtokenMixinFields1 := emailverificationtokenMixin[1].Fields()
	_ = emailverificationtokenMixinFields1
	emailverificationtokenFields := schema.EmailVerificationToken{}.Fields()
	_ = emailverificationtokenFields
	// emailverificationtokenDescCreatedAt is the schema descriptor for created_at field.
	emailverificationtokenDescCreatedAt := emailverificationtokenMixinFields0[0].Descriptor()
	// emailverificationtoken.DefaultCreatedAt holds the default value on creation for the created_at field.
	emailverificationtoken.DefaultCreatedAt = emailverificationtokenDescCreatedAt.Default.(func() time.Time)
	// emailverificationtokenDescUpdatedAt is the schema descriptor for updated_at field.
	emailverificationtokenDescUpdatedAt := emailverificationtokenMixinFields0[1].Descriptor()
	// emailverificationtoken.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	emailverificationtoken.DefaultUpdatedAt = emailverificationtokenDescUpdatedAt.Default.(func() time.Time)
	// emailverificationtoken.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	emailverificationtoken.UpdateDefaultUpdatedAt = emailverificationtokenDescUpdatedAt.UpdateDefault.(func() time.Time)
	// emailverificationtokenDescToken is the schema descriptor for token field.
	emailverificationtokenDescToken := emailverificationtokenFields[0].Descriptor()
	// emailverificationtoken.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	emailverificationtoken.TokenValidator = emailverificationtokenDescToken.Validators[0].(func(string) error)
	// emailverificationtokenDescEmail is the schema descriptor for email field.
	emailverificationtokenDescEmail := emailverificationtokenFields[2].Descriptor()
	// emailverificationtoken.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	emailverificationtoken.EmailValidator = func() func(string) error {
		validators := emailverificationtokenDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// emailverificationtokenDescSecret is the schema descriptor for secret field.
	emailverificationtokenDescSecret := emailverificationtokenFields[3].Descriptor()
	// emailverificationtoken.SecretValidator is a validator for the "secret" field. It is called by the builders before save.
	emailverificationtoken.SecretValidator = emailverificationtokenDescSecret.Validators[0].(func([]byte) error)
	// emailverificationtokenDescID is the schema descriptor for id field.
	emailverificationtokenDescID := emailverificationtokenMixinFields1[0].Descriptor()
	// emailverificationtoken.DefaultID holds the default value on creation for the id field.
	emailverificationtoken.DefaultID = emailverificationtokenDescID.Default.(func() string)
	entitlementMixin := schema.Entitlement{}.Mixin()
	entitlementMixinHooks0 := entitlementMixin[0].Hooks()
	entitlementMixinHooks2 := entitlementMixin[2].Hooks()
	entitlement.Hooks[0] = entitlementMixinHooks0[0]
	entitlement.Hooks[1] = entitlementMixinHooks2[0]
	entitlementMixinInters2 := entitlementMixin[2].Interceptors()
	entitlement.Interceptors[0] = entitlementMixinInters2[0]
	entitlementMixinFields0 := entitlementMixin[0].Fields()
	_ = entitlementMixinFields0
	entitlementMixinFields1 := entitlementMixin[1].Fields()
	_ = entitlementMixinFields1
	entitlementFields := schema.Entitlement{}.Fields()
	_ = entitlementFields
	// entitlementDescCreatedAt is the schema descriptor for created_at field.
	entitlementDescCreatedAt := entitlementMixinFields0[0].Descriptor()
	// entitlement.DefaultCreatedAt holds the default value on creation for the created_at field.
	entitlement.DefaultCreatedAt = entitlementDescCreatedAt.Default.(func() time.Time)
	// entitlementDescUpdatedAt is the schema descriptor for updated_at field.
	entitlementDescUpdatedAt := entitlementMixinFields0[1].Descriptor()
	// entitlement.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	entitlement.DefaultUpdatedAt = entitlementDescUpdatedAt.Default.(func() time.Time)
	// entitlement.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	entitlement.UpdateDefaultUpdatedAt = entitlementDescUpdatedAt.UpdateDefault.(func() time.Time)
	// entitlementDescExpires is the schema descriptor for expires field.
	entitlementDescExpires := entitlementFields[3].Descriptor()
	// entitlement.DefaultExpires holds the default value on creation for the expires field.
	entitlement.DefaultExpires = entitlementDescExpires.Default.(bool)
	// entitlementDescCancelled is the schema descriptor for cancelled field.
	entitlementDescCancelled := entitlementFields[5].Descriptor()
	// entitlement.DefaultCancelled holds the default value on creation for the cancelled field.
	entitlement.DefaultCancelled = entitlementDescCancelled.Default.(bool)
	// entitlementDescID is the schema descriptor for id field.
	entitlementDescID := entitlementMixinFields1[0].Descriptor()
	// entitlement.DefaultID holds the default value on creation for the id field.
	entitlement.DefaultID = entitlementDescID.Default.(func() string)
	groupMixin := schema.Group{}.Mixin()
	group.Policy = privacy.NewPolicies(schema.Group{})
	group.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := group.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	groupMixinHooks0 := groupMixin[0].Hooks()
	groupMixinHooks1 := groupMixin[1].Hooks()
	groupHooks := schema.Group{}.Hooks()

	group.Hooks[1] = groupMixinHooks0[0]

	group.Hooks[2] = groupMixinHooks1[0]

	group.Hooks[3] = groupHooks[0]

	group.Hooks[4] = groupHooks[1]
	groupMixinInters1 := groupMixin[1].Interceptors()
	groupInters := schema.Group{}.Interceptors()
	group.Interceptors[0] = groupMixinInters1[0]
	group.Interceptors[1] = groupInters[0]
	groupMixinFields0 := groupMixin[0].Fields()
	_ = groupMixinFields0
	groupMixinFields2 := groupMixin[2].Fields()
	_ = groupMixinFields2
	groupFields := schema.Group{}.Fields()
	_ = groupFields
	// groupDescCreatedAt is the schema descriptor for created_at field.
	groupDescCreatedAt := groupMixinFields0[0].Descriptor()
	// group.DefaultCreatedAt holds the default value on creation for the created_at field.
	group.DefaultCreatedAt = groupDescCreatedAt.Default.(func() time.Time)
	// groupDescUpdatedAt is the schema descriptor for updated_at field.
	groupDescUpdatedAt := groupMixinFields0[1].Descriptor()
	// group.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	group.DefaultUpdatedAt = groupDescUpdatedAt.Default.(func() time.Time)
	// group.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	group.UpdateDefaultUpdatedAt = groupDescUpdatedAt.UpdateDefault.(func() time.Time)
	// groupDescName is the schema descriptor for name field.
	groupDescName := groupFields[0].Descriptor()
	// group.NameValidator is a validator for the "name" field. It is called by the builders before save.
	group.NameValidator = groupDescName.Validators[0].(func(string) error)
	// groupDescDisplayName is the schema descriptor for display_name field.
	groupDescDisplayName := groupFields[4].Descriptor()
	// group.DefaultDisplayName holds the default value on creation for the display_name field.
	group.DefaultDisplayName = groupDescDisplayName.Default.(string)
	// group.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	group.DisplayNameValidator = groupDescDisplayName.Validators[0].(func(string) error)
	// groupDescID is the schema descriptor for id field.
	groupDescID := groupMixinFields2[0].Descriptor()
	// group.DefaultID holds the default value on creation for the id field.
	group.DefaultID = groupDescID.Default.(func() string)
	groupmembershipMixin := schema.GroupMembership{}.Mixin()
	groupmembership.Policy = privacy.NewPolicies(schema.GroupMembership{})
	groupmembership.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := groupmembership.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	groupmembershipMixinHooks0 := groupmembershipMixin[0].Hooks()
	groupmembershipMixinHooks2 := groupmembershipMixin[2].Hooks()
	groupmembershipHooks := schema.GroupMembership{}.Hooks()

	groupmembership.Hooks[1] = groupmembershipMixinHooks0[0]

	groupmembership.Hooks[2] = groupmembershipMixinHooks2[0]

	groupmembership.Hooks[3] = groupmembershipHooks[0]
	groupmembershipMixinInters2 := groupmembershipMixin[2].Interceptors()
	groupmembership.Interceptors[0] = groupmembershipMixinInters2[0]
	groupmembershipMixinFields0 := groupmembershipMixin[0].Fields()
	_ = groupmembershipMixinFields0
	groupmembershipMixinFields1 := groupmembershipMixin[1].Fields()
	_ = groupmembershipMixinFields1
	groupmembershipFields := schema.GroupMembership{}.Fields()
	_ = groupmembershipFields
	// groupmembershipDescCreatedAt is the schema descriptor for created_at field.
	groupmembershipDescCreatedAt := groupmembershipMixinFields0[0].Descriptor()
	// groupmembership.DefaultCreatedAt holds the default value on creation for the created_at field.
	groupmembership.DefaultCreatedAt = groupmembershipDescCreatedAt.Default.(func() time.Time)
	// groupmembershipDescUpdatedAt is the schema descriptor for updated_at field.
	groupmembershipDescUpdatedAt := groupmembershipMixinFields0[1].Descriptor()
	// groupmembership.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	groupmembership.DefaultUpdatedAt = groupmembershipDescUpdatedAt.Default.(func() time.Time)
	// groupmembership.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	groupmembership.UpdateDefaultUpdatedAt = groupmembershipDescUpdatedAt.UpdateDefault.(func() time.Time)
	// groupmembershipDescID is the schema descriptor for id field.
	groupmembershipDescID := groupmembershipMixinFields1[0].Descriptor()
	// groupmembership.DefaultID holds the default value on creation for the id field.
	groupmembership.DefaultID = groupmembershipDescID.Default.(func() string)
	groupsettingMixin := schema.GroupSetting{}.Mixin()
	groupsettingMixinHooks0 := groupsettingMixin[0].Hooks()
	groupsettingMixinHooks2 := groupsettingMixin[2].Hooks()
	groupsetting.Hooks[0] = groupsettingMixinHooks0[0]
	groupsetting.Hooks[1] = groupsettingMixinHooks2[0]
	groupsettingMixinInters2 := groupsettingMixin[2].Interceptors()
	groupsetting.Interceptors[0] = groupsettingMixinInters2[0]
	groupsettingMixinFields0 := groupsettingMixin[0].Fields()
	_ = groupsettingMixinFields0
	groupsettingMixinFields1 := groupsettingMixin[1].Fields()
	_ = groupsettingMixinFields1
	groupsettingFields := schema.GroupSetting{}.Fields()
	_ = groupsettingFields
	// groupsettingDescCreatedAt is the schema descriptor for created_at field.
	groupsettingDescCreatedAt := groupsettingMixinFields0[0].Descriptor()
	// groupsetting.DefaultCreatedAt holds the default value on creation for the created_at field.
	groupsetting.DefaultCreatedAt = groupsettingDescCreatedAt.Default.(func() time.Time)
	// groupsettingDescUpdatedAt is the schema descriptor for updated_at field.
	groupsettingDescUpdatedAt := groupsettingMixinFields0[1].Descriptor()
	// groupsetting.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	groupsetting.DefaultUpdatedAt = groupsettingDescUpdatedAt.Default.(func() time.Time)
	// groupsetting.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	groupsetting.UpdateDefaultUpdatedAt = groupsettingDescUpdatedAt.UpdateDefault.(func() time.Time)
	// groupsettingDescTags is the schema descriptor for tags field.
	groupsettingDescTags := groupsettingFields[2].Descriptor()
	// groupsetting.DefaultTags holds the default value on creation for the tags field.
	groupsetting.DefaultTags = groupsettingDescTags.Default.([]string)
	// groupsettingDescSyncToSlack is the schema descriptor for sync_to_slack field.
	groupsettingDescSyncToSlack := groupsettingFields[3].Descriptor()
	// groupsetting.DefaultSyncToSlack holds the default value on creation for the sync_to_slack field.
	groupsetting.DefaultSyncToSlack = groupsettingDescSyncToSlack.Default.(bool)
	// groupsettingDescSyncToGithub is the schema descriptor for sync_to_github field.
	groupsettingDescSyncToGithub := groupsettingFields[4].Descriptor()
	// groupsetting.DefaultSyncToGithub holds the default value on creation for the sync_to_github field.
	groupsetting.DefaultSyncToGithub = groupsettingDescSyncToGithub.Default.(bool)
	// groupsettingDescID is the schema descriptor for id field.
	groupsettingDescID := groupsettingMixinFields1[0].Descriptor()
	// groupsetting.DefaultID holds the default value on creation for the id field.
	groupsetting.DefaultID = groupsettingDescID.Default.(func() string)
	integrationMixin := schema.Integration{}.Mixin()
	integrationMixinHooks0 := integrationMixin[0].Hooks()
	integrationMixinHooks2 := integrationMixin[2].Hooks()
	integration.Hooks[0] = integrationMixinHooks0[0]
	integration.Hooks[1] = integrationMixinHooks2[0]
	integrationMixinInters2 := integrationMixin[2].Interceptors()
	integration.Interceptors[0] = integrationMixinInters2[0]
	integrationMixinFields0 := integrationMixin[0].Fields()
	_ = integrationMixinFields0
	integrationMixinFields1 := integrationMixin[1].Fields()
	_ = integrationMixinFields1
	integrationFields := schema.Integration{}.Fields()
	_ = integrationFields
	// integrationDescCreatedAt is the schema descriptor for created_at field.
	integrationDescCreatedAt := integrationMixinFields0[0].Descriptor()
	// integration.DefaultCreatedAt holds the default value on creation for the created_at field.
	integration.DefaultCreatedAt = integrationDescCreatedAt.Default.(func() time.Time)
	// integrationDescUpdatedAt is the schema descriptor for updated_at field.
	integrationDescUpdatedAt := integrationMixinFields0[1].Descriptor()
	// integration.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	integration.DefaultUpdatedAt = integrationDescUpdatedAt.Default.(func() time.Time)
	// integration.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	integration.UpdateDefaultUpdatedAt = integrationDescUpdatedAt.UpdateDefault.(func() time.Time)
	// integrationDescName is the schema descriptor for name field.
	integrationDescName := integrationFields[0].Descriptor()
	// integration.NameValidator is a validator for the "name" field. It is called by the builders before save.
	integration.NameValidator = integrationDescName.Validators[0].(func(string) error)
	// integrationDescID is the schema descriptor for id field.
	integrationDescID := integrationMixinFields1[0].Descriptor()
	// integration.DefaultID holds the default value on creation for the id field.
	integration.DefaultID = integrationDescID.Default.(func() string)
	inviteMixin := schema.Invite{}.Mixin()
	invite.Policy = privacy.NewPolicies(schema.Invite{})
	invite.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := invite.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	inviteMixinHooks0 := inviteMixin[0].Hooks()
	inviteMixinHooks2 := inviteMixin[2].Hooks()
	inviteHooks := schema.Invite{}.Hooks()

	invite.Hooks[1] = inviteMixinHooks0[0]

	invite.Hooks[2] = inviteMixinHooks2[0]

	invite.Hooks[3] = inviteHooks[0]

	invite.Hooks[4] = inviteHooks[1]
	inviteMixinInters2 := inviteMixin[2].Interceptors()
	invite.Interceptors[0] = inviteMixinInters2[0]
	inviteMixinFields0 := inviteMixin[0].Fields()
	_ = inviteMixinFields0
	inviteMixinFields1 := inviteMixin[1].Fields()
	_ = inviteMixinFields1
	inviteFields := schema.Invite{}.Fields()
	_ = inviteFields
	// inviteDescCreatedAt is the schema descriptor for created_at field.
	inviteDescCreatedAt := inviteMixinFields0[0].Descriptor()
	// invite.DefaultCreatedAt holds the default value on creation for the created_at field.
	invite.DefaultCreatedAt = inviteDescCreatedAt.Default.(func() time.Time)
	// inviteDescUpdatedAt is the schema descriptor for updated_at field.
	inviteDescUpdatedAt := inviteMixinFields0[1].Descriptor()
	// invite.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	invite.DefaultUpdatedAt = inviteDescUpdatedAt.Default.(func() time.Time)
	// invite.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	invite.UpdateDefaultUpdatedAt = inviteDescUpdatedAt.UpdateDefault.(func() time.Time)
	// inviteDescToken is the schema descriptor for token field.
	inviteDescToken := inviteFields[0].Descriptor()
	// invite.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	invite.TokenValidator = inviteDescToken.Validators[0].(func(string) error)
	// inviteDescRecipient is the schema descriptor for recipient field.
	inviteDescRecipient := inviteFields[2].Descriptor()
	// invite.RecipientValidator is a validator for the "recipient" field. It is called by the builders before save.
	invite.RecipientValidator = func() func(string) error {
		validators := inviteDescRecipient.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(recipient string) error {
			for _, fn := range fns {
				if err := fn(recipient); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// inviteDescSendAttempts is the schema descriptor for send_attempts field.
	inviteDescSendAttempts := inviteFields[5].Descriptor()
	// invite.DefaultSendAttempts holds the default value on creation for the send_attempts field.
	invite.DefaultSendAttempts = inviteDescSendAttempts.Default.(int)
	// inviteDescRequestorID is the schema descriptor for requestor_id field.
	inviteDescRequestorID := inviteFields[6].Descriptor()
	// invite.RequestorIDValidator is a validator for the "requestor_id" field. It is called by the builders before save.
	invite.RequestorIDValidator = inviteDescRequestorID.Validators[0].(func(string) error)
	// inviteDescSecret is the schema descriptor for secret field.
	inviteDescSecret := inviteFields[7].Descriptor()
	// invite.SecretValidator is a validator for the "secret" field. It is called by the builders before save.
	invite.SecretValidator = inviteDescSecret.Validators[0].(func([]byte) error)
	// inviteDescID is the schema descriptor for id field.
	inviteDescID := inviteMixinFields1[0].Descriptor()
	// invite.DefaultID holds the default value on creation for the id field.
	invite.DefaultID = inviteDescID.Default.(func() string)
	oauthproviderMixin := schema.OauthProvider{}.Mixin()
	oauthproviderMixinHooks0 := oauthproviderMixin[0].Hooks()
	oauthproviderMixinHooks2 := oauthproviderMixin[2].Hooks()
	oauthprovider.Hooks[0] = oauthproviderMixinHooks0[0]
	oauthprovider.Hooks[1] = oauthproviderMixinHooks2[0]
	oauthproviderMixinInters2 := oauthproviderMixin[2].Interceptors()
	oauthprovider.Interceptors[0] = oauthproviderMixinInters2[0]
	oauthproviderMixinFields0 := oauthproviderMixin[0].Fields()
	_ = oauthproviderMixinFields0
	oauthproviderMixinFields1 := oauthproviderMixin[1].Fields()
	_ = oauthproviderMixinFields1
	oauthproviderFields := schema.OauthProvider{}.Fields()
	_ = oauthproviderFields
	// oauthproviderDescCreatedAt is the schema descriptor for created_at field.
	oauthproviderDescCreatedAt := oauthproviderMixinFields0[0].Descriptor()
	// oauthprovider.DefaultCreatedAt holds the default value on creation for the created_at field.
	oauthprovider.DefaultCreatedAt = oauthproviderDescCreatedAt.Default.(func() time.Time)
	// oauthproviderDescUpdatedAt is the schema descriptor for updated_at field.
	oauthproviderDescUpdatedAt := oauthproviderMixinFields0[1].Descriptor()
	// oauthprovider.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	oauthprovider.DefaultUpdatedAt = oauthproviderDescUpdatedAt.Default.(func() time.Time)
	// oauthprovider.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	oauthprovider.UpdateDefaultUpdatedAt = oauthproviderDescUpdatedAt.UpdateDefault.(func() time.Time)
	// oauthproviderDescID is the schema descriptor for id field.
	oauthproviderDescID := oauthproviderMixinFields1[0].Descriptor()
	// oauthprovider.DefaultID holds the default value on creation for the id field.
	oauthprovider.DefaultID = oauthproviderDescID.Default.(func() string)
	ohauthtootokenMixin := schema.OhAuthTooToken{}.Mixin()
	ohauthtootokenMixinFields0 := ohauthtootokenMixin[0].Fields()
	_ = ohauthtootokenMixinFields0
	ohauthtootokenFields := schema.OhAuthTooToken{}.Fields()
	_ = ohauthtootokenFields
	// ohauthtootokenDescClientID is the schema descriptor for client_id field.
	ohauthtootokenDescClientID := ohauthtootokenFields[0].Descriptor()
	// ohauthtootoken.ClientIDValidator is a validator for the "client_id" field. It is called by the builders before save.
	ohauthtootoken.ClientIDValidator = ohauthtootokenDescClientID.Validators[0].(func(string) error)
	// ohauthtootokenDescNonce is the schema descriptor for nonce field.
	ohauthtootokenDescNonce := ohauthtootokenFields[2].Descriptor()
	// ohauthtootoken.NonceValidator is a validator for the "nonce" field. It is called by the builders before save.
	ohauthtootoken.NonceValidator = ohauthtootokenDescNonce.Validators[0].(func(string) error)
	// ohauthtootokenDescClaimsUserID is the schema descriptor for claims_user_id field.
	ohauthtootokenDescClaimsUserID := ohauthtootokenFields[3].Descriptor()
	// ohauthtootoken.ClaimsUserIDValidator is a validator for the "claims_user_id" field. It is called by the builders before save.
	ohauthtootoken.ClaimsUserIDValidator = ohauthtootokenDescClaimsUserID.Validators[0].(func(string) error)
	// ohauthtootokenDescClaimsUsername is the schema descriptor for claims_username field.
	ohauthtootokenDescClaimsUsername := ohauthtootokenFields[4].Descriptor()
	// ohauthtootoken.ClaimsUsernameValidator is a validator for the "claims_username" field. It is called by the builders before save.
	ohauthtootoken.ClaimsUsernameValidator = ohauthtootokenDescClaimsUsername.Validators[0].(func(string) error)
	// ohauthtootokenDescClaimsEmail is the schema descriptor for claims_email field.
	ohauthtootokenDescClaimsEmail := ohauthtootokenFields[5].Descriptor()
	// ohauthtootoken.ClaimsEmailValidator is a validator for the "claims_email" field. It is called by the builders before save.
	ohauthtootoken.ClaimsEmailValidator = ohauthtootokenDescClaimsEmail.Validators[0].(func(string) error)
	// ohauthtootokenDescConnectorID is the schema descriptor for connector_id field.
	ohauthtootokenDescConnectorID := ohauthtootokenFields[9].Descriptor()
	// ohauthtootoken.ConnectorIDValidator is a validator for the "connector_id" field. It is called by the builders before save.
	ohauthtootoken.ConnectorIDValidator = ohauthtootokenDescConnectorID.Validators[0].(func(string) error)
	// ohauthtootokenDescLastUsed is the schema descriptor for last_used field.
	ohauthtootokenDescLastUsed := ohauthtootokenFields[11].Descriptor()
	// ohauthtootoken.DefaultLastUsed holds the default value on creation for the last_used field.
	ohauthtootoken.DefaultLastUsed = ohauthtootokenDescLastUsed.Default.(func() time.Time)
	// ohauthtootokenDescID is the schema descriptor for id field.
	ohauthtootokenDescID := ohauthtootokenMixinFields0[0].Descriptor()
	// ohauthtootoken.DefaultID holds the default value on creation for the id field.
	ohauthtootoken.DefaultID = ohauthtootokenDescID.Default.(func() string)
	orgmembershipMixin := schema.OrgMembership{}.Mixin()
	orgmembership.Policy = privacy.NewPolicies(schema.OrgMembership{})
	orgmembership.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := orgmembership.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	orgmembershipMixinHooks0 := orgmembershipMixin[0].Hooks()
	orgmembershipMixinHooks2 := orgmembershipMixin[2].Hooks()
	orgmembershipHooks := schema.OrgMembership{}.Hooks()

	orgmembership.Hooks[1] = orgmembershipMixinHooks0[0]

	orgmembership.Hooks[2] = orgmembershipMixinHooks2[0]

	orgmembership.Hooks[3] = orgmembershipHooks[0]
	orgmembershipMixinInters2 := orgmembershipMixin[2].Interceptors()
	orgmembership.Interceptors[0] = orgmembershipMixinInters2[0]
	orgmembershipMixinFields0 := orgmembershipMixin[0].Fields()
	_ = orgmembershipMixinFields0
	orgmembershipMixinFields1 := orgmembershipMixin[1].Fields()
	_ = orgmembershipMixinFields1
	orgmembershipFields := schema.OrgMembership{}.Fields()
	_ = orgmembershipFields
	// orgmembershipDescCreatedAt is the schema descriptor for created_at field.
	orgmembershipDescCreatedAt := orgmembershipMixinFields0[0].Descriptor()
	// orgmembership.DefaultCreatedAt holds the default value on creation for the created_at field.
	orgmembership.DefaultCreatedAt = orgmembershipDescCreatedAt.Default.(func() time.Time)
	// orgmembershipDescUpdatedAt is the schema descriptor for updated_at field.
	orgmembershipDescUpdatedAt := orgmembershipMixinFields0[1].Descriptor()
	// orgmembership.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	orgmembership.DefaultUpdatedAt = orgmembershipDescUpdatedAt.Default.(func() time.Time)
	// orgmembership.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	orgmembership.UpdateDefaultUpdatedAt = orgmembershipDescUpdatedAt.UpdateDefault.(func() time.Time)
	// orgmembershipDescID is the schema descriptor for id field.
	orgmembershipDescID := orgmembershipMixinFields1[0].Descriptor()
	// orgmembership.DefaultID holds the default value on creation for the id field.
	orgmembership.DefaultID = orgmembershipDescID.Default.(func() string)
	organizationMixin := schema.Organization{}.Mixin()
	organization.Policy = privacy.NewPolicies(schema.Organization{})
	organization.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := organization.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	organizationMixinHooks0 := organizationMixin[0].Hooks()
	organizationMixinHooks2 := organizationMixin[2].Hooks()
	organizationHooks := schema.Organization{}.Hooks()

	organization.Hooks[1] = organizationMixinHooks0[0]

	organization.Hooks[2] = organizationMixinHooks2[0]

	organization.Hooks[3] = organizationHooks[0]
	organizationMixinInters2 := organizationMixin[2].Interceptors()
	organizationInters := schema.Organization{}.Interceptors()
	organization.Interceptors[0] = organizationMixinInters2[0]
	organization.Interceptors[1] = organizationInters[0]
	organizationMixinFields0 := organizationMixin[0].Fields()
	_ = organizationMixinFields0
	organizationMixinFields1 := organizationMixin[1].Fields()
	_ = organizationMixinFields1
	organizationFields := schema.Organization{}.Fields()
	_ = organizationFields
	// organizationDescCreatedAt is the schema descriptor for created_at field.
	organizationDescCreatedAt := organizationMixinFields0[0].Descriptor()
	// organization.DefaultCreatedAt holds the default value on creation for the created_at field.
	organization.DefaultCreatedAt = organizationDescCreatedAt.Default.(func() time.Time)
	// organizationDescUpdatedAt is the schema descriptor for updated_at field.
	organizationDescUpdatedAt := organizationMixinFields0[1].Descriptor()
	// organization.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	organization.DefaultUpdatedAt = organizationDescUpdatedAt.Default.(func() time.Time)
	// organization.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	organization.UpdateDefaultUpdatedAt = organizationDescUpdatedAt.UpdateDefault.(func() time.Time)
	// organizationDescName is the schema descriptor for name field.
	organizationDescName := organizationFields[0].Descriptor()
	// organization.NameValidator is a validator for the "name" field. It is called by the builders before save.
	organization.NameValidator = func() func(string) error {
		validators := organizationDescName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(name string) error {
			for _, fn := range fns {
				if err := fn(name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// organizationDescDisplayName is the schema descriptor for display_name field.
	organizationDescDisplayName := organizationFields[1].Descriptor()
	// organization.DefaultDisplayName holds the default value on creation for the display_name field.
	organization.DefaultDisplayName = organizationDescDisplayName.Default.(string)
	// organization.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	organization.DisplayNameValidator = organizationDescDisplayName.Validators[0].(func(string) error)
	// organizationDescPersonalOrg is the schema descriptor for personal_org field.
	organizationDescPersonalOrg := organizationFields[4].Descriptor()
	// organization.DefaultPersonalOrg holds the default value on creation for the personal_org field.
	organization.DefaultPersonalOrg = organizationDescPersonalOrg.Default.(bool)
	// organizationDescID is the schema descriptor for id field.
	organizationDescID := organizationMixinFields1[0].Descriptor()
	// organization.DefaultID holds the default value on creation for the id field.
	organization.DefaultID = organizationDescID.Default.(func() string)
	organizationsettingMixin := schema.OrganizationSetting{}.Mixin()
	organizationsettingMixinHooks0 := organizationsettingMixin[0].Hooks()
	organizationsettingMixinHooks2 := organizationsettingMixin[2].Hooks()
	organizationsetting.Hooks[0] = organizationsettingMixinHooks0[0]
	organizationsetting.Hooks[1] = organizationsettingMixinHooks2[0]
	organizationsettingMixinInters2 := organizationsettingMixin[2].Interceptors()
	organizationsetting.Interceptors[0] = organizationsettingMixinInters2[0]
	organizationsettingMixinFields0 := organizationsettingMixin[0].Fields()
	_ = organizationsettingMixinFields0
	organizationsettingMixinFields1 := organizationsettingMixin[1].Fields()
	_ = organizationsettingMixinFields1
	organizationsettingFields := schema.OrganizationSetting{}.Fields()
	_ = organizationsettingFields
	// organizationsettingDescCreatedAt is the schema descriptor for created_at field.
	organizationsettingDescCreatedAt := organizationsettingMixinFields0[0].Descriptor()
	// organizationsetting.DefaultCreatedAt holds the default value on creation for the created_at field.
	organizationsetting.DefaultCreatedAt = organizationsettingDescCreatedAt.Default.(func() time.Time)
	// organizationsettingDescUpdatedAt is the schema descriptor for updated_at field.
	organizationsettingDescUpdatedAt := organizationsettingMixinFields0[1].Descriptor()
	// organizationsetting.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	organizationsetting.DefaultUpdatedAt = organizationsettingDescUpdatedAt.Default.(func() time.Time)
	// organizationsetting.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	organizationsetting.UpdateDefaultUpdatedAt = organizationsettingDescUpdatedAt.UpdateDefault.(func() time.Time)
	// organizationsettingDescTags is the schema descriptor for tags field.
	organizationsettingDescTags := organizationsettingFields[9].Descriptor()
	// organizationsetting.DefaultTags holds the default value on creation for the tags field.
	organizationsetting.DefaultTags = organizationsettingDescTags.Default.([]string)
	// organizationsettingDescID is the schema descriptor for id field.
	organizationsettingDescID := organizationsettingMixinFields1[0].Descriptor()
	// organizationsetting.DefaultID holds the default value on creation for the id field.
	organizationsetting.DefaultID = organizationsettingDescID.Default.(func() string)
	passwordresettokenMixin := schema.PasswordResetToken{}.Mixin()
	passwordresettoken.Policy = privacy.NewPolicies(schema.PasswordResetToken{})
	passwordresettoken.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := passwordresettoken.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	passwordresettokenMixinHooks0 := passwordresettokenMixin[0].Hooks()
	passwordresettokenMixinHooks2 := passwordresettokenMixin[2].Hooks()
	passwordresettokenHooks := schema.PasswordResetToken{}.Hooks()

	passwordresettoken.Hooks[1] = passwordresettokenMixinHooks0[0]

	passwordresettoken.Hooks[2] = passwordresettokenMixinHooks2[0]

	passwordresettoken.Hooks[3] = passwordresettokenHooks[0]
	passwordresettokenMixinInters2 := passwordresettokenMixin[2].Interceptors()
	passwordresettoken.Interceptors[0] = passwordresettokenMixinInters2[0]
	passwordresettokenMixinFields0 := passwordresettokenMixin[0].Fields()
	_ = passwordresettokenMixinFields0
	passwordresettokenMixinFields1 := passwordresettokenMixin[1].Fields()
	_ = passwordresettokenMixinFields1
	passwordresettokenFields := schema.PasswordResetToken{}.Fields()
	_ = passwordresettokenFields
	// passwordresettokenDescCreatedAt is the schema descriptor for created_at field.
	passwordresettokenDescCreatedAt := passwordresettokenMixinFields0[0].Descriptor()
	// passwordresettoken.DefaultCreatedAt holds the default value on creation for the created_at field.
	passwordresettoken.DefaultCreatedAt = passwordresettokenDescCreatedAt.Default.(func() time.Time)
	// passwordresettokenDescUpdatedAt is the schema descriptor for updated_at field.
	passwordresettokenDescUpdatedAt := passwordresettokenMixinFields0[1].Descriptor()
	// passwordresettoken.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	passwordresettoken.DefaultUpdatedAt = passwordresettokenDescUpdatedAt.Default.(func() time.Time)
	// passwordresettoken.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	passwordresettoken.UpdateDefaultUpdatedAt = passwordresettokenDescUpdatedAt.UpdateDefault.(func() time.Time)
	// passwordresettokenDescToken is the schema descriptor for token field.
	passwordresettokenDescToken := passwordresettokenFields[0].Descriptor()
	// passwordresettoken.TokenValidator is a validator for the "token" field. It is called by the builders before save.
	passwordresettoken.TokenValidator = passwordresettokenDescToken.Validators[0].(func(string) error)
	// passwordresettokenDescEmail is the schema descriptor for email field.
	passwordresettokenDescEmail := passwordresettokenFields[2].Descriptor()
	// passwordresettoken.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	passwordresettoken.EmailValidator = func() func(string) error {
		validators := passwordresettokenDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// passwordresettokenDescSecret is the schema descriptor for secret field.
	passwordresettokenDescSecret := passwordresettokenFields[3].Descriptor()
	// passwordresettoken.SecretValidator is a validator for the "secret" field. It is called by the builders before save.
	passwordresettoken.SecretValidator = passwordresettokenDescSecret.Validators[0].(func([]byte) error)
	// passwordresettokenDescID is the schema descriptor for id field.
	passwordresettokenDescID := passwordresettokenMixinFields1[0].Descriptor()
	// passwordresettoken.DefaultID holds the default value on creation for the id field.
	passwordresettoken.DefaultID = passwordresettokenDescID.Default.(func() string)
	personalaccesstokenMixin := schema.PersonalAccessToken{}.Mixin()
	personalaccesstoken.Policy = privacy.NewPolicies(schema.PersonalAccessToken{})
	personalaccesstoken.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := personalaccesstoken.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	personalaccesstokenMixinHooks0 := personalaccesstokenMixin[0].Hooks()
	personalaccesstokenMixinHooks1 := personalaccesstokenMixin[1].Hooks()
	personalaccesstokenHooks := schema.PersonalAccessToken{}.Hooks()

	personalaccesstoken.Hooks[1] = personalaccesstokenMixinHooks0[0]

	personalaccesstoken.Hooks[2] = personalaccesstokenMixinHooks1[0]

	personalaccesstoken.Hooks[3] = personalaccesstokenHooks[0]

	personalaccesstoken.Hooks[4] = personalaccesstokenHooks[1]
	personalaccesstokenMixinInters1 := personalaccesstokenMixin[1].Interceptors()
	personalaccesstokenInters := schema.PersonalAccessToken{}.Interceptors()
	personalaccesstoken.Interceptors[0] = personalaccesstokenMixinInters1[0]
	personalaccesstoken.Interceptors[1] = personalaccesstokenInters[0]
	personalaccesstokenMixinFields0 := personalaccesstokenMixin[0].Fields()
	_ = personalaccesstokenMixinFields0
	personalaccesstokenMixinFields2 := personalaccesstokenMixin[2].Fields()
	_ = personalaccesstokenMixinFields2
	personalaccesstokenFields := schema.PersonalAccessToken{}.Fields()
	_ = personalaccesstokenFields
	// personalaccesstokenDescCreatedAt is the schema descriptor for created_at field.
	personalaccesstokenDescCreatedAt := personalaccesstokenMixinFields0[0].Descriptor()
	// personalaccesstoken.DefaultCreatedAt holds the default value on creation for the created_at field.
	personalaccesstoken.DefaultCreatedAt = personalaccesstokenDescCreatedAt.Default.(func() time.Time)
	// personalaccesstokenDescUpdatedAt is the schema descriptor for updated_at field.
	personalaccesstokenDescUpdatedAt := personalaccesstokenMixinFields0[1].Descriptor()
	// personalaccesstoken.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	personalaccesstoken.DefaultUpdatedAt = personalaccesstokenDescUpdatedAt.Default.(func() time.Time)
	// personalaccesstoken.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	personalaccesstoken.UpdateDefaultUpdatedAt = personalaccesstokenDescUpdatedAt.UpdateDefault.(func() time.Time)
	// personalaccesstokenDescName is the schema descriptor for name field.
	personalaccesstokenDescName := personalaccesstokenFields[0].Descriptor()
	// personalaccesstoken.NameValidator is a validator for the "name" field. It is called by the builders before save.
	personalaccesstoken.NameValidator = personalaccesstokenDescName.Validators[0].(func(string) error)
	// personalaccesstokenDescToken is the schema descriptor for token field.
	personalaccesstokenDescToken := personalaccesstokenFields[1].Descriptor()
	// personalaccesstoken.DefaultToken holds the default value on creation for the token field.
	personalaccesstoken.DefaultToken = personalaccesstokenDescToken.Default.(func() string)
	// personalaccesstokenDescID is the schema descriptor for id field.
	personalaccesstokenDescID := personalaccesstokenMixinFields2[0].Descriptor()
	// personalaccesstoken.DefaultID holds the default value on creation for the id field.
	personalaccesstoken.DefaultID = personalaccesstokenDescID.Default.(func() string)
	userMixin := schema.User{}.Mixin()
	user.Policy = privacy.NewPolicies(schema.User{})
	user.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := user.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	userMixinHooks0 := userMixin[0].Hooks()
	userMixinHooks1 := userMixin[1].Hooks()
	userHooks := schema.User{}.Hooks()

	user.Hooks[1] = userMixinHooks0[0]

	user.Hooks[2] = userMixinHooks1[0]

	user.Hooks[3] = userHooks[0]

	user.Hooks[4] = userHooks[1]
	userMixinInters1 := userMixin[1].Interceptors()
	userInters := schema.User{}.Interceptors()
	user.Interceptors[0] = userMixinInters1[0]
	user.Interceptors[1] = userInters[0]
	userMixinFields0 := userMixin[0].Fields()
	_ = userMixinFields0
	userMixinFields2 := userMixin[2].Fields()
	_ = userMixinFields2
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescCreatedAt is the schema descriptor for created_at field.
	userDescCreatedAt := userMixinFields0[0].Descriptor()
	// user.DefaultCreatedAt holds the default value on creation for the created_at field.
	user.DefaultCreatedAt = userDescCreatedAt.Default.(func() time.Time)
	// userDescUpdatedAt is the schema descriptor for updated_at field.
	userDescUpdatedAt := userMixinFields0[1].Descriptor()
	// user.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	user.DefaultUpdatedAt = userDescUpdatedAt.Default.(func() time.Time)
	// user.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	user.UpdateDefaultUpdatedAt = userDescUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[0].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = userDescEmail.Validators[0].(func(string) error)
	// userDescFirstName is the schema descriptor for first_name field.
	userDescFirstName := userFields[1].Descriptor()
	// user.FirstNameValidator is a validator for the "first_name" field. It is called by the builders before save.
	user.FirstNameValidator = func() func(string) error {
		validators := userDescFirstName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(first_name string) error {
			for _, fn := range fns {
				if err := fn(first_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescLastName is the schema descriptor for last_name field.
	userDescLastName := userFields[2].Descriptor()
	// user.LastNameValidator is a validator for the "last_name" field. It is called by the builders before save.
	user.LastNameValidator = func() func(string) error {
		validators := userDescLastName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(last_name string) error {
			for _, fn := range fns {
				if err := fn(last_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescDisplayName is the schema descriptor for display_name field.
	userDescDisplayName := userFields[3].Descriptor()
	// user.DisplayNameValidator is a validator for the "display_name" field. It is called by the builders before save.
	user.DisplayNameValidator = func() func(string) error {
		validators := userDescDisplayName.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
			validators[2].(func(string) error),
		}
		return func(display_name string) error {
			for _, fn := range fns {
				if err := fn(display_name); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescAvatarRemoteURL is the schema descriptor for avatar_remote_url field.
	userDescAvatarRemoteURL := userFields[4].Descriptor()
	// user.AvatarRemoteURLValidator is a validator for the "avatar_remote_url" field. It is called by the builders before save.
	user.AvatarRemoteURLValidator = func() func(string) error {
		validators := userDescAvatarRemoteURL.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(avatar_remote_url string) error {
			for _, fn := range fns {
				if err := fn(avatar_remote_url); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescAvatarLocalFile is the schema descriptor for avatar_local_file field.
	userDescAvatarLocalFile := userFields[5].Descriptor()
	// user.AvatarLocalFileValidator is a validator for the "avatar_local_file" field. It is called by the builders before save.
	user.AvatarLocalFileValidator = userDescAvatarLocalFile.Validators[0].(func(string) error)
	// userDescAvatarUpdatedAt is the schema descriptor for avatar_updated_at field.
	userDescAvatarUpdatedAt := userFields[6].Descriptor()
	// user.UpdateDefaultAvatarUpdatedAt holds the default value on update for the avatar_updated_at field.
	user.UpdateDefaultAvatarUpdatedAt = userDescAvatarUpdatedAt.UpdateDefault.(func() time.Time)
	// userDescLastSeen is the schema descriptor for last_seen field.
	userDescLastSeen := userFields[7].Descriptor()
	// user.UpdateDefaultLastSeen holds the default value on update for the last_seen field.
	user.UpdateDefaultLastSeen = userDescLastSeen.UpdateDefault.(func() time.Time)
	// userDescOauth is the schema descriptor for oauth field.
	userDescOauth := userFields[10].Descriptor()
	// user.DefaultOauth holds the default value on creation for the oauth field.
	user.DefaultOauth = userDescOauth.Default.(bool)
	// userDescIsPhoneOtpAllowed is the schema descriptor for is_phone_otp_allowed field.
	userDescIsPhoneOtpAllowed := userFields[13].Descriptor()
	// user.DefaultIsPhoneOtpAllowed holds the default value on creation for the is_phone_otp_allowed field.
	user.DefaultIsPhoneOtpAllowed = userDescIsPhoneOtpAllowed.Default.(bool)
	// userDescIsEmailOtpAllowed is the schema descriptor for is_email_otp_allowed field.
	userDescIsEmailOtpAllowed := userFields[14].Descriptor()
	// user.DefaultIsEmailOtpAllowed holds the default value on creation for the is_email_otp_allowed field.
	user.DefaultIsEmailOtpAllowed = userDescIsEmailOtpAllowed.Default.(bool)
	// userDescIsTotpAllowed is the schema descriptor for is_totp_allowed field.
	userDescIsTotpAllowed := userFields[15].Descriptor()
	// user.DefaultIsTotpAllowed holds the default value on creation for the is_totp_allowed field.
	user.DefaultIsTotpAllowed = userDescIsTotpAllowed.Default.(bool)
	// userDescIsWebauthnAllowed is the schema descriptor for is_webauthn_allowed field.
	userDescIsWebauthnAllowed := userFields[16].Descriptor()
	// user.DefaultIsWebauthnAllowed holds the default value on creation for the is_webauthn_allowed field.
	user.DefaultIsWebauthnAllowed = userDescIsWebauthnAllowed.Default.(bool)
	// userDescIsTfaEnabled is the schema descriptor for is_tfa_enabled field.
	userDescIsTfaEnabled := userFields[17].Descriptor()
	// user.DefaultIsTfaEnabled holds the default value on creation for the is_tfa_enabled field.
	user.DefaultIsTfaEnabled = userDescIsTfaEnabled.Default.(bool)
	// userDescID is the schema descriptor for id field.
	userDescID := userMixinFields2[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() string)
	usersettingMixin := schema.UserSetting{}.Mixin()
	usersetting.Policy = privacy.NewPolicies(schema.UserSetting{})
	usersetting.Hooks[0] = func(next ent.Mutator) ent.Mutator {
		return ent.MutateFunc(func(ctx context.Context, m ent.Mutation) (ent.Value, error) {
			if err := usersetting.Policy.EvalMutation(ctx, m); err != nil {
				return nil, err
			}
			return next.Mutate(ctx, m)
		})
	}
	usersettingMixinHooks0 := usersettingMixin[0].Hooks()
	usersettingMixinHooks2 := usersettingMixin[2].Hooks()
	usersettingHooks := schema.UserSetting{}.Hooks()

	usersetting.Hooks[1] = usersettingMixinHooks0[0]

	usersetting.Hooks[2] = usersettingMixinHooks2[0]

	usersetting.Hooks[3] = usersettingHooks[0]
	usersettingMixinInters2 := usersettingMixin[2].Interceptors()
	usersettingInters := schema.UserSetting{}.Interceptors()
	usersetting.Interceptors[0] = usersettingMixinInters2[0]
	usersetting.Interceptors[1] = usersettingInters[0]
	usersettingMixinFields0 := usersettingMixin[0].Fields()
	_ = usersettingMixinFields0
	usersettingMixinFields1 := usersettingMixin[1].Fields()
	_ = usersettingMixinFields1
	usersettingFields := schema.UserSetting{}.Fields()
	_ = usersettingFields
	// usersettingDescCreatedAt is the schema descriptor for created_at field.
	usersettingDescCreatedAt := usersettingMixinFields0[0].Descriptor()
	// usersetting.DefaultCreatedAt holds the default value on creation for the created_at field.
	usersetting.DefaultCreatedAt = usersettingDescCreatedAt.Default.(func() time.Time)
	// usersettingDescUpdatedAt is the schema descriptor for updated_at field.
	usersettingDescUpdatedAt := usersettingMixinFields0[1].Descriptor()
	// usersetting.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	usersetting.DefaultUpdatedAt = usersettingDescUpdatedAt.Default.(func() time.Time)
	// usersetting.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	usersetting.UpdateDefaultUpdatedAt = usersettingDescUpdatedAt.UpdateDefault.(func() time.Time)
	// usersettingDescLocked is the schema descriptor for locked field.
	usersettingDescLocked := usersettingFields[1].Descriptor()
	// usersetting.DefaultLocked holds the default value on creation for the locked field.
	usersetting.DefaultLocked = usersettingDescLocked.Default.(bool)
	// usersettingDescEmailConfirmed is the schema descriptor for email_confirmed field.
	usersettingDescEmailConfirmed := usersettingFields[5].Descriptor()
	// usersetting.DefaultEmailConfirmed holds the default value on creation for the email_confirmed field.
	usersetting.DefaultEmailConfirmed = usersettingDescEmailConfirmed.Default.(bool)
	// usersettingDescTags is the schema descriptor for tags field.
	usersettingDescTags := usersettingFields[6].Descriptor()
	// usersetting.DefaultTags holds the default value on creation for the tags field.
	usersetting.DefaultTags = usersettingDescTags.Default.([]string)
	// usersettingDescID is the schema descriptor for id field.
	usersettingDescID := usersettingMixinFields1[0].Descriptor()
	// usersetting.DefaultID holds the default value on creation for the id field.
	usersetting.DefaultID = usersettingDescID.Default.(func() string)
	webauthnMixin := schema.Webauthn{}.Mixin()
	webauthnMixinHooks0 := webauthnMixin[0].Hooks()
	webauthn.Hooks[0] = webauthnMixinHooks0[0]
	webauthnMixinFields0 := webauthnMixin[0].Fields()
	_ = webauthnMixinFields0
	webauthnMixinFields1 := webauthnMixin[1].Fields()
	_ = webauthnMixinFields1
	webauthnFields := schema.Webauthn{}.Fields()
	_ = webauthnFields
	// webauthnDescCreatedAt is the schema descriptor for created_at field.
	webauthnDescCreatedAt := webauthnMixinFields0[0].Descriptor()
	// webauthn.DefaultCreatedAt holds the default value on creation for the created_at field.
	webauthn.DefaultCreatedAt = webauthnDescCreatedAt.Default.(func() time.Time)
	// webauthnDescUpdatedAt is the schema descriptor for updated_at field.
	webauthnDescUpdatedAt := webauthnMixinFields0[1].Descriptor()
	// webauthn.DefaultUpdatedAt holds the default value on creation for the updated_at field.
	webauthn.DefaultUpdatedAt = webauthnDescUpdatedAt.Default.(func() time.Time)
	// webauthn.UpdateDefaultUpdatedAt holds the default value on update for the updated_at field.
	webauthn.UpdateDefaultUpdatedAt = webauthnDescUpdatedAt.UpdateDefault.(func() time.Time)
	// webauthnDescBackupEligible is the schema descriptor for backup_eligible field.
	webauthnDescBackupEligible := webauthnFields[6].Descriptor()
	// webauthn.DefaultBackupEligible holds the default value on creation for the backup_eligible field.
	webauthn.DefaultBackupEligible = webauthnDescBackupEligible.Default.(bool)
	// webauthnDescBackupState is the schema descriptor for backup_state field.
	webauthnDescBackupState := webauthnFields[7].Descriptor()
	// webauthn.DefaultBackupState holds the default value on creation for the backup_state field.
	webauthn.DefaultBackupState = webauthnDescBackupState.Default.(bool)
	// webauthnDescUserPresent is the schema descriptor for user_present field.
	webauthnDescUserPresent := webauthnFields[8].Descriptor()
	// webauthn.DefaultUserPresent holds the default value on creation for the user_present field.
	webauthn.DefaultUserPresent = webauthnDescUserPresent.Default.(bool)
	// webauthnDescUserVerified is the schema descriptor for user_verified field.
	webauthnDescUserVerified := webauthnFields[9].Descriptor()
	// webauthn.DefaultUserVerified holds the default value on creation for the user_verified field.
	webauthn.DefaultUserVerified = webauthnDescUserVerified.Default.(bool)
	// webauthnDescID is the schema descriptor for id field.
	webauthnDescID := webauthnMixinFields1[0].Descriptor()
	// webauthn.DefaultID holds the default value on creation for the id field.
	webauthn.DefaultID = webauthnDescID.Default.(func() string)
}

const (
	Version = "v0.13.1"                                         // Version of ent codegen.
	Sum     = "h1:uD8QwN1h6SNphdCCzmkMN3feSUzNnVvV/WIkHKMbzOE=" // Sum of ent codegen.
)
