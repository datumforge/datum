// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datumforge/datum/internal/ent/generated/sessionhistory"
	"github.com/flume/enthistory"
)

// SessionHistory is the model entity for the SessionHistory schema.
type SessionHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// HistoryTime holds the value of the "history_time" field.
	HistoryTime time.Time `json:"history_time,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation enthistory.OpType `json:"operation,omitempty"`
	// Ref holds the value of the "ref" field.
	Ref string `json:"ref,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// token is a string token issued to users that has a limited lifetime
	SessionToken string `json:"session_token,omitempty"`
	// IssuedAt holds the value of the "issued_at" field.
	IssuedAt time.Time `json:"issued_at,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// organization ID of the organization the user is accessing
	OrganizationID string `json:"organization_id,omitempty"`
	// the user the session is associated with
	UserID       string `json:"user_id,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SessionHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case sessionhistory.FieldID, sessionhistory.FieldOperation, sessionhistory.FieldRef, sessionhistory.FieldCreatedBy, sessionhistory.FieldUpdatedBy, sessionhistory.FieldSessionToken, sessionhistory.FieldOrganizationID, sessionhistory.FieldUserID:
			values[i] = new(sql.NullString)
		case sessionhistory.FieldHistoryTime, sessionhistory.FieldCreatedAt, sessionhistory.FieldUpdatedAt, sessionhistory.FieldIssuedAt, sessionhistory.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SessionHistory fields.
func (sh *SessionHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case sessionhistory.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				sh.ID = value.String
			}
		case sessionhistory.FieldHistoryTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field history_time", values[i])
			} else if value.Valid {
				sh.HistoryTime = value.Time
			}
		case sessionhistory.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				sh.Operation = enthistory.OpType(value.String)
			}
		case sessionhistory.FieldRef:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ref", values[i])
			} else if value.Valid {
				sh.Ref = value.String
			}
		case sessionhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sh.CreatedAt = value.Time
			}
		case sessionhistory.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				sh.UpdatedAt = value.Time
			}
		case sessionhistory.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				sh.CreatedBy = value.String
			}
		case sessionhistory.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				sh.UpdatedBy = value.String
			}
		case sessionhistory.FieldSessionToken:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field session_token", values[i])
			} else if value.Valid {
				sh.SessionToken = value.String
			}
		case sessionhistory.FieldIssuedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field issued_at", values[i])
			} else if value.Valid {
				sh.IssuedAt = value.Time
			}
		case sessionhistory.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				sh.ExpiresAt = value.Time
			}
		case sessionhistory.FieldOrganizationID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field organization_id", values[i])
			} else if value.Valid {
				sh.OrganizationID = value.String
			}
		case sessionhistory.FieldUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				sh.UserID = value.String
			}
		default:
			sh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SessionHistory.
// This includes values selected through modifiers, order, etc.
func (sh *SessionHistory) Value(name string) (ent.Value, error) {
	return sh.selectValues.Get(name)
}

// Update returns a builder for updating this SessionHistory.
// Note that you need to call SessionHistory.Unwrap() before calling this method if this SessionHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (sh *SessionHistory) Update() *SessionHistoryUpdateOne {
	return NewSessionHistoryClient(sh.config).UpdateOne(sh)
}

// Unwrap unwraps the SessionHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (sh *SessionHistory) Unwrap() *SessionHistory {
	_tx, ok := sh.config.driver.(*txDriver)
	if !ok {
		panic("generated: SessionHistory is not a transactional entity")
	}
	sh.config.driver = _tx.drv
	return sh
}

// String implements the fmt.Stringer.
func (sh *SessionHistory) String() string {
	var builder strings.Builder
	builder.WriteString("SessionHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sh.ID))
	builder.WriteString("history_time=")
	builder.WriteString(sh.HistoryTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", sh.Operation))
	builder.WriteString(", ")
	builder.WriteString("ref=")
	builder.WriteString(sh.Ref)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(sh.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(sh.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(sh.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("session_token=")
	builder.WriteString(sh.SessionToken)
	builder.WriteString(", ")
	builder.WriteString("issued_at=")
	builder.WriteString(sh.IssuedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(sh.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("organization_id=")
	builder.WriteString(sh.OrganizationID)
	builder.WriteString(", ")
	builder.WriteString("user_id=")
	builder.WriteString(sh.UserID)
	builder.WriteByte(')')
	return builder.String()
}

// SessionHistories is a parsable slice of SessionHistory.
type SessionHistories []*SessionHistory
