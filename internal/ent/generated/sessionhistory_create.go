// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/sessionhistory"
	"github.com/flume/enthistory"
)

// SessionHistoryCreate is the builder for creating a SessionHistory entity.
type SessionHistoryCreate struct {
	config
	mutation *SessionHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (shc *SessionHistoryCreate) SetHistoryTime(t time.Time) *SessionHistoryCreate {
	shc.mutation.SetHistoryTime(t)
	return shc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (shc *SessionHistoryCreate) SetNillableHistoryTime(t *time.Time) *SessionHistoryCreate {
	if t != nil {
		shc.SetHistoryTime(*t)
	}
	return shc
}

// SetOperation sets the "operation" field.
func (shc *SessionHistoryCreate) SetOperation(et enthistory.OpType) *SessionHistoryCreate {
	shc.mutation.SetOperation(et)
	return shc
}

// SetRef sets the "ref" field.
func (shc *SessionHistoryCreate) SetRef(s string) *SessionHistoryCreate {
	shc.mutation.SetRef(s)
	return shc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (shc *SessionHistoryCreate) SetNillableRef(s *string) *SessionHistoryCreate {
	if s != nil {
		shc.SetRef(*s)
	}
	return shc
}

// SetCreatedAt sets the "created_at" field.
func (shc *SessionHistoryCreate) SetCreatedAt(t time.Time) *SessionHistoryCreate {
	shc.mutation.SetCreatedAt(t)
	return shc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (shc *SessionHistoryCreate) SetNillableCreatedAt(t *time.Time) *SessionHistoryCreate {
	if t != nil {
		shc.SetCreatedAt(*t)
	}
	return shc
}

// SetUpdatedAt sets the "updated_at" field.
func (shc *SessionHistoryCreate) SetUpdatedAt(t time.Time) *SessionHistoryCreate {
	shc.mutation.SetUpdatedAt(t)
	return shc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (shc *SessionHistoryCreate) SetNillableUpdatedAt(t *time.Time) *SessionHistoryCreate {
	if t != nil {
		shc.SetUpdatedAt(*t)
	}
	return shc
}

// SetCreatedBy sets the "created_by" field.
func (shc *SessionHistoryCreate) SetCreatedBy(s string) *SessionHistoryCreate {
	shc.mutation.SetCreatedBy(s)
	return shc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (shc *SessionHistoryCreate) SetNillableCreatedBy(s *string) *SessionHistoryCreate {
	if s != nil {
		shc.SetCreatedBy(*s)
	}
	return shc
}

// SetUpdatedBy sets the "updated_by" field.
func (shc *SessionHistoryCreate) SetUpdatedBy(s string) *SessionHistoryCreate {
	shc.mutation.SetUpdatedBy(s)
	return shc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (shc *SessionHistoryCreate) SetNillableUpdatedBy(s *string) *SessionHistoryCreate {
	if s != nil {
		shc.SetUpdatedBy(*s)
	}
	return shc
}

// SetSessionToken sets the "session_token" field.
func (shc *SessionHistoryCreate) SetSessionToken(s string) *SessionHistoryCreate {
	shc.mutation.SetSessionToken(s)
	return shc
}

// SetIssuedAt sets the "issued_at" field.
func (shc *SessionHistoryCreate) SetIssuedAt(t time.Time) *SessionHistoryCreate {
	shc.mutation.SetIssuedAt(t)
	return shc
}

// SetExpiresAt sets the "expires_at" field.
func (shc *SessionHistoryCreate) SetExpiresAt(t time.Time) *SessionHistoryCreate {
	shc.mutation.SetExpiresAt(t)
	return shc
}

// SetOrganizationID sets the "organization_id" field.
func (shc *SessionHistoryCreate) SetOrganizationID(s string) *SessionHistoryCreate {
	shc.mutation.SetOrganizationID(s)
	return shc
}

// SetUserID sets the "user_id" field.
func (shc *SessionHistoryCreate) SetUserID(s string) *SessionHistoryCreate {
	shc.mutation.SetUserID(s)
	return shc
}

// Mutation returns the SessionHistoryMutation object of the builder.
func (shc *SessionHistoryCreate) Mutation() *SessionHistoryMutation {
	return shc.mutation
}

// Save creates the SessionHistory in the database.
func (shc *SessionHistoryCreate) Save(ctx context.Context) (*SessionHistory, error) {
	shc.defaults()
	return withHooks(ctx, shc.sqlSave, shc.mutation, shc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (shc *SessionHistoryCreate) SaveX(ctx context.Context) *SessionHistory {
	v, err := shc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shc *SessionHistoryCreate) Exec(ctx context.Context) error {
	_, err := shc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shc *SessionHistoryCreate) ExecX(ctx context.Context) {
	if err := shc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shc *SessionHistoryCreate) defaults() {
	if _, ok := shc.mutation.HistoryTime(); !ok {
		v := sessionhistory.DefaultHistoryTime()
		shc.mutation.SetHistoryTime(v)
	}
	if _, ok := shc.mutation.CreatedAt(); !ok {
		v := sessionhistory.DefaultCreatedAt()
		shc.mutation.SetCreatedAt(v)
	}
	if _, ok := shc.mutation.UpdatedAt(); !ok {
		v := sessionhistory.DefaultUpdatedAt()
		shc.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (shc *SessionHistoryCreate) check() error {
	if _, ok := shc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "SessionHistory.history_time"`)}
	}
	if _, ok := shc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "SessionHistory.operation"`)}
	}
	if v, ok := shc.mutation.Operation(); ok {
		if err := sessionhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "SessionHistory.operation": %w`, err)}
		}
	}
	if _, ok := shc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "SessionHistory.created_at"`)}
	}
	if _, ok := shc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "SessionHistory.updated_at"`)}
	}
	if _, ok := shc.mutation.SessionToken(); !ok {
		return &ValidationError{Name: "session_token", err: errors.New(`generated: missing required field "SessionHistory.session_token"`)}
	}
	if _, ok := shc.mutation.IssuedAt(); !ok {
		return &ValidationError{Name: "issued_at", err: errors.New(`generated: missing required field "SessionHistory.issued_at"`)}
	}
	if _, ok := shc.mutation.ExpiresAt(); !ok {
		return &ValidationError{Name: "expires_at", err: errors.New(`generated: missing required field "SessionHistory.expires_at"`)}
	}
	if _, ok := shc.mutation.OrganizationID(); !ok {
		return &ValidationError{Name: "organization_id", err: errors.New(`generated: missing required field "SessionHistory.organization_id"`)}
	}
	if _, ok := shc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`generated: missing required field "SessionHistory.user_id"`)}
	}
	return nil
}

func (shc *SessionHistoryCreate) sqlSave(ctx context.Context) (*SessionHistory, error) {
	if err := shc.check(); err != nil {
		return nil, err
	}
	_node, _spec := shc.createSpec()
	if err := sqlgraph.CreateNode(ctx, shc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected SessionHistory.ID type: %T", _spec.ID.Value)
		}
	}
	shc.mutation.id = &_node.ID
	shc.mutation.done = true
	return _node, nil
}

func (shc *SessionHistoryCreate) createSpec() (*SessionHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &SessionHistory{config: shc.config}
		_spec = sqlgraph.NewCreateSpec(sessionhistory.Table, sqlgraph.NewFieldSpec(sessionhistory.FieldID, field.TypeString))
	)
	_spec.Schema = shc.schemaConfig.SessionHistory
	if value, ok := shc.mutation.HistoryTime(); ok {
		_spec.SetField(sessionhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := shc.mutation.Operation(); ok {
		_spec.SetField(sessionhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := shc.mutation.Ref(); ok {
		_spec.SetField(sessionhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := shc.mutation.CreatedAt(); ok {
		_spec.SetField(sessionhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := shc.mutation.UpdatedAt(); ok {
		_spec.SetField(sessionhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := shc.mutation.CreatedBy(); ok {
		_spec.SetField(sessionhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := shc.mutation.UpdatedBy(); ok {
		_spec.SetField(sessionhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := shc.mutation.SessionToken(); ok {
		_spec.SetField(sessionhistory.FieldSessionToken, field.TypeString, value)
		_node.SessionToken = value
	}
	if value, ok := shc.mutation.IssuedAt(); ok {
		_spec.SetField(sessionhistory.FieldIssuedAt, field.TypeTime, value)
		_node.IssuedAt = value
	}
	if value, ok := shc.mutation.ExpiresAt(); ok {
		_spec.SetField(sessionhistory.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := shc.mutation.OrganizationID(); ok {
		_spec.SetField(sessionhistory.FieldOrganizationID, field.TypeString, value)
		_node.OrganizationID = value
	}
	if value, ok := shc.mutation.UserID(); ok {
		_spec.SetField(sessionhistory.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	return _node, _spec
}

// SessionHistoryCreateBulk is the builder for creating many SessionHistory entities in bulk.
type SessionHistoryCreateBulk struct {
	config
	err      error
	builders []*SessionHistoryCreate
}

// Save creates the SessionHistory entities in the database.
func (shcb *SessionHistoryCreateBulk) Save(ctx context.Context) ([]*SessionHistory, error) {
	if shcb.err != nil {
		return nil, shcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(shcb.builders))
	nodes := make([]*SessionHistory, len(shcb.builders))
	mutators := make([]Mutator, len(shcb.builders))
	for i := range shcb.builders {
		func(i int, root context.Context) {
			builder := shcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SessionHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, shcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, shcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, shcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (shcb *SessionHistoryCreateBulk) SaveX(ctx context.Context) []*SessionHistory {
	v, err := shcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (shcb *SessionHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := shcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shcb *SessionHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := shcb.Exec(ctx); err != nil {
		panic(err)
	}
}
