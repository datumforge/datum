// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/datumforge/datum/internal/ent/generated/sessionhistory"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// SessionHistoryUpdate is the builder for updating SessionHistory entities.
type SessionHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *SessionHistoryMutation
}

// Where appends a list predicates to the SessionHistoryUpdate builder.
func (shu *SessionHistoryUpdate) Where(ps ...predicate.SessionHistory) *SessionHistoryUpdate {
	shu.mutation.Where(ps...)
	return shu
}

// SetUpdatedAt sets the "updated_at" field.
func (shu *SessionHistoryUpdate) SetUpdatedAt(t time.Time) *SessionHistoryUpdate {
	shu.mutation.SetUpdatedAt(t)
	return shu
}

// SetUpdatedBy sets the "updated_by" field.
func (shu *SessionHistoryUpdate) SetUpdatedBy(s string) *SessionHistoryUpdate {
	shu.mutation.SetUpdatedBy(s)
	return shu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (shu *SessionHistoryUpdate) SetNillableUpdatedBy(s *string) *SessionHistoryUpdate {
	if s != nil {
		shu.SetUpdatedBy(*s)
	}
	return shu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (shu *SessionHistoryUpdate) ClearUpdatedBy() *SessionHistoryUpdate {
	shu.mutation.ClearUpdatedBy()
	return shu
}

// SetIssuedAt sets the "issued_at" field.
func (shu *SessionHistoryUpdate) SetIssuedAt(t time.Time) *SessionHistoryUpdate {
	shu.mutation.SetIssuedAt(t)
	return shu
}

// SetExpiresAt sets the "expires_at" field.
func (shu *SessionHistoryUpdate) SetExpiresAt(t time.Time) *SessionHistoryUpdate {
	shu.mutation.SetExpiresAt(t)
	return shu
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (shu *SessionHistoryUpdate) SetNillableExpiresAt(t *time.Time) *SessionHistoryUpdate {
	if t != nil {
		shu.SetExpiresAt(*t)
	}
	return shu
}

// SetOrganizationID sets the "organization_id" field.
func (shu *SessionHistoryUpdate) SetOrganizationID(s string) *SessionHistoryUpdate {
	shu.mutation.SetOrganizationID(s)
	return shu
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (shu *SessionHistoryUpdate) SetNillableOrganizationID(s *string) *SessionHistoryUpdate {
	if s != nil {
		shu.SetOrganizationID(*s)
	}
	return shu
}

// SetUserID sets the "user_id" field.
func (shu *SessionHistoryUpdate) SetUserID(s string) *SessionHistoryUpdate {
	shu.mutation.SetUserID(s)
	return shu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (shu *SessionHistoryUpdate) SetNillableUserID(s *string) *SessionHistoryUpdate {
	if s != nil {
		shu.SetUserID(*s)
	}
	return shu
}

// Mutation returns the SessionHistoryMutation object of the builder.
func (shu *SessionHistoryUpdate) Mutation() *SessionHistoryMutation {
	return shu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (shu *SessionHistoryUpdate) Save(ctx context.Context) (int, error) {
	shu.defaults()
	return withHooks(ctx, shu.sqlSave, shu.mutation, shu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (shu *SessionHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := shu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (shu *SessionHistoryUpdate) Exec(ctx context.Context) error {
	_, err := shu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shu *SessionHistoryUpdate) ExecX(ctx context.Context) {
	if err := shu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shu *SessionHistoryUpdate) defaults() {
	if _, ok := shu.mutation.UpdatedAt(); !ok {
		v := sessionhistory.UpdateDefaultUpdatedAt()
		shu.mutation.SetUpdatedAt(v)
	}
	if _, ok := shu.mutation.IssuedAt(); !ok {
		v := sessionhistory.UpdateDefaultIssuedAt()
		shu.mutation.SetIssuedAt(v)
	}
}

func (shu *SessionHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(sessionhistory.Table, sessionhistory.Columns, sqlgraph.NewFieldSpec(sessionhistory.FieldID, field.TypeString))
	if ps := shu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if shu.mutation.RefCleared() {
		_spec.ClearField(sessionhistory.FieldRef, field.TypeString)
	}
	if value, ok := shu.mutation.UpdatedAt(); ok {
		_spec.SetField(sessionhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if shu.mutation.CreatedByCleared() {
		_spec.ClearField(sessionhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := shu.mutation.UpdatedBy(); ok {
		_spec.SetField(sessionhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if shu.mutation.UpdatedByCleared() {
		_spec.ClearField(sessionhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := shu.mutation.IssuedAt(); ok {
		_spec.SetField(sessionhistory.FieldIssuedAt, field.TypeTime, value)
	}
	if value, ok := shu.mutation.ExpiresAt(); ok {
		_spec.SetField(sessionhistory.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := shu.mutation.OrganizationID(); ok {
		_spec.SetField(sessionhistory.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := shu.mutation.UserID(); ok {
		_spec.SetField(sessionhistory.FieldUserID, field.TypeString, value)
	}
	_spec.Node.Schema = shu.schemaConfig.SessionHistory
	ctx = internal.NewSchemaConfigContext(ctx, shu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, shu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sessionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	shu.mutation.done = true
	return n, nil
}

// SessionHistoryUpdateOne is the builder for updating a single SessionHistory entity.
type SessionHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SessionHistoryMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (shuo *SessionHistoryUpdateOne) SetUpdatedAt(t time.Time) *SessionHistoryUpdateOne {
	shuo.mutation.SetUpdatedAt(t)
	return shuo
}

// SetUpdatedBy sets the "updated_by" field.
func (shuo *SessionHistoryUpdateOne) SetUpdatedBy(s string) *SessionHistoryUpdateOne {
	shuo.mutation.SetUpdatedBy(s)
	return shuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (shuo *SessionHistoryUpdateOne) SetNillableUpdatedBy(s *string) *SessionHistoryUpdateOne {
	if s != nil {
		shuo.SetUpdatedBy(*s)
	}
	return shuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (shuo *SessionHistoryUpdateOne) ClearUpdatedBy() *SessionHistoryUpdateOne {
	shuo.mutation.ClearUpdatedBy()
	return shuo
}

// SetIssuedAt sets the "issued_at" field.
func (shuo *SessionHistoryUpdateOne) SetIssuedAt(t time.Time) *SessionHistoryUpdateOne {
	shuo.mutation.SetIssuedAt(t)
	return shuo
}

// SetExpiresAt sets the "expires_at" field.
func (shuo *SessionHistoryUpdateOne) SetExpiresAt(t time.Time) *SessionHistoryUpdateOne {
	shuo.mutation.SetExpiresAt(t)
	return shuo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (shuo *SessionHistoryUpdateOne) SetNillableExpiresAt(t *time.Time) *SessionHistoryUpdateOne {
	if t != nil {
		shuo.SetExpiresAt(*t)
	}
	return shuo
}

// SetOrganizationID sets the "organization_id" field.
func (shuo *SessionHistoryUpdateOne) SetOrganizationID(s string) *SessionHistoryUpdateOne {
	shuo.mutation.SetOrganizationID(s)
	return shuo
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (shuo *SessionHistoryUpdateOne) SetNillableOrganizationID(s *string) *SessionHistoryUpdateOne {
	if s != nil {
		shuo.SetOrganizationID(*s)
	}
	return shuo
}

// SetUserID sets the "user_id" field.
func (shuo *SessionHistoryUpdateOne) SetUserID(s string) *SessionHistoryUpdateOne {
	shuo.mutation.SetUserID(s)
	return shuo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (shuo *SessionHistoryUpdateOne) SetNillableUserID(s *string) *SessionHistoryUpdateOne {
	if s != nil {
		shuo.SetUserID(*s)
	}
	return shuo
}

// Mutation returns the SessionHistoryMutation object of the builder.
func (shuo *SessionHistoryUpdateOne) Mutation() *SessionHistoryMutation {
	return shuo.mutation
}

// Where appends a list predicates to the SessionHistoryUpdate builder.
func (shuo *SessionHistoryUpdateOne) Where(ps ...predicate.SessionHistory) *SessionHistoryUpdateOne {
	shuo.mutation.Where(ps...)
	return shuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (shuo *SessionHistoryUpdateOne) Select(field string, fields ...string) *SessionHistoryUpdateOne {
	shuo.fields = append([]string{field}, fields...)
	return shuo
}

// Save executes the query and returns the updated SessionHistory entity.
func (shuo *SessionHistoryUpdateOne) Save(ctx context.Context) (*SessionHistory, error) {
	shuo.defaults()
	return withHooks(ctx, shuo.sqlSave, shuo.mutation, shuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (shuo *SessionHistoryUpdateOne) SaveX(ctx context.Context) *SessionHistory {
	node, err := shuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (shuo *SessionHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := shuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (shuo *SessionHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := shuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (shuo *SessionHistoryUpdateOne) defaults() {
	if _, ok := shuo.mutation.UpdatedAt(); !ok {
		v := sessionhistory.UpdateDefaultUpdatedAt()
		shuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := shuo.mutation.IssuedAt(); !ok {
		v := sessionhistory.UpdateDefaultIssuedAt()
		shuo.mutation.SetIssuedAt(v)
	}
}

func (shuo *SessionHistoryUpdateOne) sqlSave(ctx context.Context) (_node *SessionHistory, err error) {
	_spec := sqlgraph.NewUpdateSpec(sessionhistory.Table, sessionhistory.Columns, sqlgraph.NewFieldSpec(sessionhistory.FieldID, field.TypeString))
	id, ok := shuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "SessionHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := shuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, sessionhistory.FieldID)
		for _, f := range fields {
			if !sessionhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != sessionhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := shuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if shuo.mutation.RefCleared() {
		_spec.ClearField(sessionhistory.FieldRef, field.TypeString)
	}
	if value, ok := shuo.mutation.UpdatedAt(); ok {
		_spec.SetField(sessionhistory.FieldUpdatedAt, field.TypeTime, value)
	}
	if shuo.mutation.CreatedByCleared() {
		_spec.ClearField(sessionhistory.FieldCreatedBy, field.TypeString)
	}
	if value, ok := shuo.mutation.UpdatedBy(); ok {
		_spec.SetField(sessionhistory.FieldUpdatedBy, field.TypeString, value)
	}
	if shuo.mutation.UpdatedByCleared() {
		_spec.ClearField(sessionhistory.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := shuo.mutation.IssuedAt(); ok {
		_spec.SetField(sessionhistory.FieldIssuedAt, field.TypeTime, value)
	}
	if value, ok := shuo.mutation.ExpiresAt(); ok {
		_spec.SetField(sessionhistory.FieldExpiresAt, field.TypeTime, value)
	}
	if value, ok := shuo.mutation.OrganizationID(); ok {
		_spec.SetField(sessionhistory.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := shuo.mutation.UserID(); ok {
		_spec.SetField(sessionhistory.FieldUserID, field.TypeString, value)
	}
	_spec.Node.Schema = shuo.schemaConfig.SessionHistory
	ctx = internal.NewSchemaConfigContext(ctx, shuo.schemaConfig)
	_node = &SessionHistory{config: shuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, shuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{sessionhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	shuo.mutation.done = true
	return _node, nil
}
