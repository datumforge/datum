// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/subscribers"
)

// SubscribersCreate is the builder for creating a Subscribers entity.
type SubscribersCreate struct {
	config
	mutation *SubscribersMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (sc *SubscribersCreate) SetCreatedAt(t time.Time) *SubscribersCreate {
	sc.mutation.SetCreatedAt(t)
	return sc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sc *SubscribersCreate) SetNillableCreatedAt(t *time.Time) *SubscribersCreate {
	if t != nil {
		sc.SetCreatedAt(*t)
	}
	return sc
}

// SetUpdatedAt sets the "updated_at" field.
func (sc *SubscribersCreate) SetUpdatedAt(t time.Time) *SubscribersCreate {
	sc.mutation.SetUpdatedAt(t)
	return sc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (sc *SubscribersCreate) SetNillableUpdatedAt(t *time.Time) *SubscribersCreate {
	if t != nil {
		sc.SetUpdatedAt(*t)
	}
	return sc
}

// SetCreatedBy sets the "created_by" field.
func (sc *SubscribersCreate) SetCreatedBy(s string) *SubscribersCreate {
	sc.mutation.SetCreatedBy(s)
	return sc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (sc *SubscribersCreate) SetNillableCreatedBy(s *string) *SubscribersCreate {
	if s != nil {
		sc.SetCreatedBy(*s)
	}
	return sc
}

// SetUpdatedBy sets the "updated_by" field.
func (sc *SubscribersCreate) SetUpdatedBy(s string) *SubscribersCreate {
	sc.mutation.SetUpdatedBy(s)
	return sc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (sc *SubscribersCreate) SetNillableUpdatedBy(s *string) *SubscribersCreate {
	if s != nil {
		sc.SetUpdatedBy(*s)
	}
	return sc
}

// SetDeletedAt sets the "deleted_at" field.
func (sc *SubscribersCreate) SetDeletedAt(t time.Time) *SubscribersCreate {
	sc.mutation.SetDeletedAt(t)
	return sc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (sc *SubscribersCreate) SetNillableDeletedAt(t *time.Time) *SubscribersCreate {
	if t != nil {
		sc.SetDeletedAt(*t)
	}
	return sc
}

// SetDeletedBy sets the "deleted_by" field.
func (sc *SubscribersCreate) SetDeletedBy(s string) *SubscribersCreate {
	sc.mutation.SetDeletedBy(s)
	return sc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (sc *SubscribersCreate) SetNillableDeletedBy(s *string) *SubscribersCreate {
	if s != nil {
		sc.SetDeletedBy(*s)
	}
	return sc
}

// SetOwnerID sets the "owner_id" field.
func (sc *SubscribersCreate) SetOwnerID(s string) *SubscribersCreate {
	sc.mutation.SetOwnerID(s)
	return sc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (sc *SubscribersCreate) SetNillableOwnerID(s *string) *SubscribersCreate {
	if s != nil {
		sc.SetOwnerID(*s)
	}
	return sc
}

// SetEmail sets the "email" field.
func (sc *SubscribersCreate) SetEmail(s string) *SubscribersCreate {
	sc.mutation.SetEmail(s)
	return sc
}

// SetActive sets the "active" field.
func (sc *SubscribersCreate) SetActive(b bool) *SubscribersCreate {
	sc.mutation.SetActive(b)
	return sc
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (sc *SubscribersCreate) SetNillableActive(b *bool) *SubscribersCreate {
	if b != nil {
		sc.SetActive(*b)
	}
	return sc
}

// SetIPAddress sets the "ip_address" field.
func (sc *SubscribersCreate) SetIPAddress(s string) *SubscribersCreate {
	sc.mutation.SetIPAddress(s)
	return sc
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (sc *SubscribersCreate) SetNillableIPAddress(s *string) *SubscribersCreate {
	if s != nil {
		sc.SetIPAddress(*s)
	}
	return sc
}

// SetToken sets the "token" field.
func (sc *SubscribersCreate) SetToken(s string) *SubscribersCreate {
	sc.mutation.SetToken(s)
	return sc
}

// SetSecret sets the "secret" field.
func (sc *SubscribersCreate) SetSecret(b []byte) *SubscribersCreate {
	sc.mutation.SetSecret(b)
	return sc
}

// SetID sets the "id" field.
func (sc *SubscribersCreate) SetID(s string) *SubscribersCreate {
	sc.mutation.SetID(s)
	return sc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (sc *SubscribersCreate) SetNillableID(s *string) *SubscribersCreate {
	if s != nil {
		sc.SetID(*s)
	}
	return sc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (sc *SubscribersCreate) SetOwner(o *Organization) *SubscribersCreate {
	return sc.SetOwnerID(o.ID)
}

// Mutation returns the SubscribersMutation object of the builder.
func (sc *SubscribersCreate) Mutation() *SubscribersMutation {
	return sc.mutation
}

// Save creates the Subscribers in the database.
func (sc *SubscribersCreate) Save(ctx context.Context) (*Subscribers, error) {
	if err := sc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *SubscribersCreate) SaveX(ctx context.Context) *Subscribers {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *SubscribersCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *SubscribersCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sc *SubscribersCreate) defaults() error {
	if _, ok := sc.mutation.CreatedAt(); !ok {
		if subscribers.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized subscribers.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := subscribers.DefaultCreatedAt()
		sc.mutation.SetCreatedAt(v)
	}
	if _, ok := sc.mutation.UpdatedAt(); !ok {
		if subscribers.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subscribers.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subscribers.DefaultUpdatedAt()
		sc.mutation.SetUpdatedAt(v)
	}
	if _, ok := sc.mutation.Active(); !ok {
		v := subscribers.DefaultActive
		sc.mutation.SetActive(v)
	}
	if _, ok := sc.mutation.ID(); !ok {
		if subscribers.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized subscribers.DefaultID (forgotten import generated/runtime?)")
		}
		v := subscribers.DefaultID()
		sc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (sc *SubscribersCreate) check() error {
	if _, ok := sc.mutation.Email(); !ok {
		return &ValidationError{Name: "email", err: errors.New(`generated: missing required field "Subscribers.email"`)}
	}
	if v, ok := sc.mutation.Email(); ok {
		if err := subscribers.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "Subscribers.email": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Active(); !ok {
		return &ValidationError{Name: "active", err: errors.New(`generated: missing required field "Subscribers.active"`)}
	}
	if _, ok := sc.mutation.Token(); !ok {
		return &ValidationError{Name: "token", err: errors.New(`generated: missing required field "Subscribers.token"`)}
	}
	if v, ok := sc.mutation.Token(); ok {
		if err := subscribers.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "Subscribers.token": %w`, err)}
		}
	}
	if _, ok := sc.mutation.Secret(); !ok {
		return &ValidationError{Name: "secret", err: errors.New(`generated: missing required field "Subscribers.secret"`)}
	}
	if v, ok := sc.mutation.Secret(); ok {
		if err := subscribers.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "Subscribers.secret": %w`, err)}
		}
	}
	return nil
}

func (sc *SubscribersCreate) sqlSave(ctx context.Context) (*Subscribers, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Subscribers.ID type: %T", _spec.ID.Value)
		}
	}
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *SubscribersCreate) createSpec() (*Subscribers, *sqlgraph.CreateSpec) {
	var (
		_node = &Subscribers{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(subscribers.Table, sqlgraph.NewFieldSpec(subscribers.FieldID, field.TypeString))
	)
	_spec.Schema = sc.schemaConfig.Subscribers
	if id, ok := sc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := sc.mutation.CreatedAt(); ok {
		_spec.SetField(subscribers.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := sc.mutation.UpdatedAt(); ok {
		_spec.SetField(subscribers.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := sc.mutation.CreatedBy(); ok {
		_spec.SetField(subscribers.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := sc.mutation.UpdatedBy(); ok {
		_spec.SetField(subscribers.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := sc.mutation.DeletedAt(); ok {
		_spec.SetField(subscribers.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := sc.mutation.DeletedBy(); ok {
		_spec.SetField(subscribers.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := sc.mutation.Email(); ok {
		_spec.SetField(subscribers.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := sc.mutation.Active(); ok {
		_spec.SetField(subscribers.FieldActive, field.TypeBool, value)
		_node.Active = value
	}
	if value, ok := sc.mutation.IPAddress(); ok {
		_spec.SetField(subscribers.FieldIPAddress, field.TypeString, value)
		_node.IPAddress = value
	}
	if value, ok := sc.mutation.Token(); ok {
		_spec.SetField(subscribers.FieldToken, field.TypeString, value)
		_node.Token = value
	}
	if value, ok := sc.mutation.Secret(); ok {
		_spec.SetField(subscribers.FieldSecret, field.TypeBytes, value)
		_node.Secret = &value
	}
	if nodes := sc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribers.OwnerTable,
			Columns: []string{subscribers.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = sc.schemaConfig.Subscribers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SubscribersCreateBulk is the builder for creating many Subscribers entities in bulk.
type SubscribersCreateBulk struct {
	config
	err      error
	builders []*SubscribersCreate
}

// Save creates the Subscribers entities in the database.
func (scb *SubscribersCreateBulk) Save(ctx context.Context) ([]*Subscribers, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Subscribers, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SubscribersMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *SubscribersCreateBulk) SaveX(ctx context.Context) []*Subscribers {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *SubscribersCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *SubscribersCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
