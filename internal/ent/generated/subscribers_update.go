// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/datumforge/datum/internal/ent/generated/subscribers"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// SubscribersUpdate is the builder for updating Subscribers entities.
type SubscribersUpdate struct {
	config
	hooks    []Hook
	mutation *SubscribersMutation
}

// Where appends a list predicates to the SubscribersUpdate builder.
func (su *SubscribersUpdate) Where(ps ...predicate.Subscribers) *SubscribersUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *SubscribersUpdate) SetUpdatedAt(t time.Time) *SubscribersUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (su *SubscribersUpdate) ClearUpdatedAt() *SubscribersUpdate {
	su.mutation.ClearUpdatedAt()
	return su
}

// SetUpdatedBy sets the "updated_by" field.
func (su *SubscribersUpdate) SetUpdatedBy(s string) *SubscribersUpdate {
	su.mutation.SetUpdatedBy(s)
	return su
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (su *SubscribersUpdate) SetNillableUpdatedBy(s *string) *SubscribersUpdate {
	if s != nil {
		su.SetUpdatedBy(*s)
	}
	return su
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (su *SubscribersUpdate) ClearUpdatedBy() *SubscribersUpdate {
	su.mutation.ClearUpdatedBy()
	return su
}

// SetDeletedAt sets the "deleted_at" field.
func (su *SubscribersUpdate) SetDeletedAt(t time.Time) *SubscribersUpdate {
	su.mutation.SetDeletedAt(t)
	return su
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (su *SubscribersUpdate) SetNillableDeletedAt(t *time.Time) *SubscribersUpdate {
	if t != nil {
		su.SetDeletedAt(*t)
	}
	return su
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (su *SubscribersUpdate) ClearDeletedAt() *SubscribersUpdate {
	su.mutation.ClearDeletedAt()
	return su
}

// SetDeletedBy sets the "deleted_by" field.
func (su *SubscribersUpdate) SetDeletedBy(s string) *SubscribersUpdate {
	su.mutation.SetDeletedBy(s)
	return su
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (su *SubscribersUpdate) SetNillableDeletedBy(s *string) *SubscribersUpdate {
	if s != nil {
		su.SetDeletedBy(*s)
	}
	return su
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (su *SubscribersUpdate) ClearDeletedBy() *SubscribersUpdate {
	su.mutation.ClearDeletedBy()
	return su
}

// SetOwnerID sets the "owner_id" field.
func (su *SubscribersUpdate) SetOwnerID(s string) *SubscribersUpdate {
	su.mutation.SetOwnerID(s)
	return su
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (su *SubscribersUpdate) SetNillableOwnerID(s *string) *SubscribersUpdate {
	if s != nil {
		su.SetOwnerID(*s)
	}
	return su
}

// ClearOwnerID clears the value of the "owner_id" field.
func (su *SubscribersUpdate) ClearOwnerID() *SubscribersUpdate {
	su.mutation.ClearOwnerID()
	return su
}

// SetEmail sets the "email" field.
func (su *SubscribersUpdate) SetEmail(s string) *SubscribersUpdate {
	su.mutation.SetEmail(s)
	return su
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (su *SubscribersUpdate) SetNillableEmail(s *string) *SubscribersUpdate {
	if s != nil {
		su.SetEmail(*s)
	}
	return su
}

// SetActive sets the "active" field.
func (su *SubscribersUpdate) SetActive(b bool) *SubscribersUpdate {
	su.mutation.SetActive(b)
	return su
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (su *SubscribersUpdate) SetNillableActive(b *bool) *SubscribersUpdate {
	if b != nil {
		su.SetActive(*b)
	}
	return su
}

// SetIPAddress sets the "ip_address" field.
func (su *SubscribersUpdate) SetIPAddress(s string) *SubscribersUpdate {
	su.mutation.SetIPAddress(s)
	return su
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (su *SubscribersUpdate) SetNillableIPAddress(s *string) *SubscribersUpdate {
	if s != nil {
		su.SetIPAddress(*s)
	}
	return su
}

// ClearIPAddress clears the value of the "ip_address" field.
func (su *SubscribersUpdate) ClearIPAddress() *SubscribersUpdate {
	su.mutation.ClearIPAddress()
	return su
}

// SetToken sets the "token" field.
func (su *SubscribersUpdate) SetToken(s string) *SubscribersUpdate {
	su.mutation.SetToken(s)
	return su
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (su *SubscribersUpdate) SetNillableToken(s *string) *SubscribersUpdate {
	if s != nil {
		su.SetToken(*s)
	}
	return su
}

// SetSecret sets the "secret" field.
func (su *SubscribersUpdate) SetSecret(b []byte) *SubscribersUpdate {
	su.mutation.SetSecret(b)
	return su
}

// SetOwner sets the "owner" edge to the Organization entity.
func (su *SubscribersUpdate) SetOwner(o *Organization) *SubscribersUpdate {
	return su.SetOwnerID(o.ID)
}

// Mutation returns the SubscribersMutation object of the builder.
func (su *SubscribersUpdate) Mutation() *SubscribersMutation {
	return su.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (su *SubscribersUpdate) ClearOwner() *SubscribersUpdate {
	su.mutation.ClearOwner()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscribersUpdate) Save(ctx context.Context) (int, error) {
	if err := su.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscribersUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscribersUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscribersUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SubscribersUpdate) defaults() error {
	if _, ok := su.mutation.UpdatedAt(); !ok && !su.mutation.UpdatedAtCleared() {
		if subscribers.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subscribers.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subscribers.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (su *SubscribersUpdate) check() error {
	if v, ok := su.mutation.Email(); ok {
		if err := subscribers.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "Subscribers.email": %w`, err)}
		}
	}
	if v, ok := su.mutation.Token(); ok {
		if err := subscribers.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "Subscribers.token": %w`, err)}
		}
	}
	if v, ok := su.mutation.Secret(); ok {
		if err := subscribers.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "Subscribers.secret": %w`, err)}
		}
	}
	return nil
}

func (su *SubscribersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscribers.Table, subscribers.Columns, sqlgraph.NewFieldSpec(subscribers.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if su.mutation.CreatedAtCleared() {
		_spec.ClearField(subscribers.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(subscribers.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.UpdatedAtCleared() {
		_spec.ClearField(subscribers.FieldUpdatedAt, field.TypeTime)
	}
	if su.mutation.CreatedByCleared() {
		_spec.ClearField(subscribers.FieldCreatedBy, field.TypeString)
	}
	if value, ok := su.mutation.UpdatedBy(); ok {
		_spec.SetField(subscribers.FieldUpdatedBy, field.TypeString, value)
	}
	if su.mutation.UpdatedByCleared() {
		_spec.ClearField(subscribers.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := su.mutation.DeletedAt(); ok {
		_spec.SetField(subscribers.FieldDeletedAt, field.TypeTime, value)
	}
	if su.mutation.DeletedAtCleared() {
		_spec.ClearField(subscribers.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := su.mutation.DeletedBy(); ok {
		_spec.SetField(subscribers.FieldDeletedBy, field.TypeString, value)
	}
	if su.mutation.DeletedByCleared() {
		_spec.ClearField(subscribers.FieldDeletedBy, field.TypeString)
	}
	if value, ok := su.mutation.Email(); ok {
		_spec.SetField(subscribers.FieldEmail, field.TypeString, value)
	}
	if value, ok := su.mutation.Active(); ok {
		_spec.SetField(subscribers.FieldActive, field.TypeBool, value)
	}
	if value, ok := su.mutation.IPAddress(); ok {
		_spec.SetField(subscribers.FieldIPAddress, field.TypeString, value)
	}
	if su.mutation.IPAddressCleared() {
		_spec.ClearField(subscribers.FieldIPAddress, field.TypeString)
	}
	if value, ok := su.mutation.Token(); ok {
		_spec.SetField(subscribers.FieldToken, field.TypeString, value)
	}
	if value, ok := su.mutation.Secret(); ok {
		_spec.SetField(subscribers.FieldSecret, field.TypeBytes, value)
	}
	if su.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribers.OwnerTable,
			Columns: []string{subscribers.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Subscribers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribers.OwnerTable,
			Columns: []string{subscribers.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = su.schemaConfig.Subscribers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = su.schemaConfig.Subscribers
	ctx = internal.NewSchemaConfigContext(ctx, su.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubscribersUpdateOne is the builder for updating a single Subscribers entity.
type SubscribersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscribersMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *SubscribersUpdateOne) SetUpdatedAt(t time.Time) *SubscribersUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (suo *SubscribersUpdateOne) ClearUpdatedAt() *SubscribersUpdateOne {
	suo.mutation.ClearUpdatedAt()
	return suo
}

// SetUpdatedBy sets the "updated_by" field.
func (suo *SubscribersUpdateOne) SetUpdatedBy(s string) *SubscribersUpdateOne {
	suo.mutation.SetUpdatedBy(s)
	return suo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (suo *SubscribersUpdateOne) SetNillableUpdatedBy(s *string) *SubscribersUpdateOne {
	if s != nil {
		suo.SetUpdatedBy(*s)
	}
	return suo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (suo *SubscribersUpdateOne) ClearUpdatedBy() *SubscribersUpdateOne {
	suo.mutation.ClearUpdatedBy()
	return suo
}

// SetDeletedAt sets the "deleted_at" field.
func (suo *SubscribersUpdateOne) SetDeletedAt(t time.Time) *SubscribersUpdateOne {
	suo.mutation.SetDeletedAt(t)
	return suo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (suo *SubscribersUpdateOne) SetNillableDeletedAt(t *time.Time) *SubscribersUpdateOne {
	if t != nil {
		suo.SetDeletedAt(*t)
	}
	return suo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (suo *SubscribersUpdateOne) ClearDeletedAt() *SubscribersUpdateOne {
	suo.mutation.ClearDeletedAt()
	return suo
}

// SetDeletedBy sets the "deleted_by" field.
func (suo *SubscribersUpdateOne) SetDeletedBy(s string) *SubscribersUpdateOne {
	suo.mutation.SetDeletedBy(s)
	return suo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (suo *SubscribersUpdateOne) SetNillableDeletedBy(s *string) *SubscribersUpdateOne {
	if s != nil {
		suo.SetDeletedBy(*s)
	}
	return suo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (suo *SubscribersUpdateOne) ClearDeletedBy() *SubscribersUpdateOne {
	suo.mutation.ClearDeletedBy()
	return suo
}

// SetOwnerID sets the "owner_id" field.
func (suo *SubscribersUpdateOne) SetOwnerID(s string) *SubscribersUpdateOne {
	suo.mutation.SetOwnerID(s)
	return suo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (suo *SubscribersUpdateOne) SetNillableOwnerID(s *string) *SubscribersUpdateOne {
	if s != nil {
		suo.SetOwnerID(*s)
	}
	return suo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (suo *SubscribersUpdateOne) ClearOwnerID() *SubscribersUpdateOne {
	suo.mutation.ClearOwnerID()
	return suo
}

// SetEmail sets the "email" field.
func (suo *SubscribersUpdateOne) SetEmail(s string) *SubscribersUpdateOne {
	suo.mutation.SetEmail(s)
	return suo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (suo *SubscribersUpdateOne) SetNillableEmail(s *string) *SubscribersUpdateOne {
	if s != nil {
		suo.SetEmail(*s)
	}
	return suo
}

// SetActive sets the "active" field.
func (suo *SubscribersUpdateOne) SetActive(b bool) *SubscribersUpdateOne {
	suo.mutation.SetActive(b)
	return suo
}

// SetNillableActive sets the "active" field if the given value is not nil.
func (suo *SubscribersUpdateOne) SetNillableActive(b *bool) *SubscribersUpdateOne {
	if b != nil {
		suo.SetActive(*b)
	}
	return suo
}

// SetIPAddress sets the "ip_address" field.
func (suo *SubscribersUpdateOne) SetIPAddress(s string) *SubscribersUpdateOne {
	suo.mutation.SetIPAddress(s)
	return suo
}

// SetNillableIPAddress sets the "ip_address" field if the given value is not nil.
func (suo *SubscribersUpdateOne) SetNillableIPAddress(s *string) *SubscribersUpdateOne {
	if s != nil {
		suo.SetIPAddress(*s)
	}
	return suo
}

// ClearIPAddress clears the value of the "ip_address" field.
func (suo *SubscribersUpdateOne) ClearIPAddress() *SubscribersUpdateOne {
	suo.mutation.ClearIPAddress()
	return suo
}

// SetToken sets the "token" field.
func (suo *SubscribersUpdateOne) SetToken(s string) *SubscribersUpdateOne {
	suo.mutation.SetToken(s)
	return suo
}

// SetNillableToken sets the "token" field if the given value is not nil.
func (suo *SubscribersUpdateOne) SetNillableToken(s *string) *SubscribersUpdateOne {
	if s != nil {
		suo.SetToken(*s)
	}
	return suo
}

// SetSecret sets the "secret" field.
func (suo *SubscribersUpdateOne) SetSecret(b []byte) *SubscribersUpdateOne {
	suo.mutation.SetSecret(b)
	return suo
}

// SetOwner sets the "owner" edge to the Organization entity.
func (suo *SubscribersUpdateOne) SetOwner(o *Organization) *SubscribersUpdateOne {
	return suo.SetOwnerID(o.ID)
}

// Mutation returns the SubscribersMutation object of the builder.
func (suo *SubscribersUpdateOne) Mutation() *SubscribersMutation {
	return suo.mutation
}

// ClearOwner clears the "owner" edge to the Organization entity.
func (suo *SubscribersUpdateOne) ClearOwner() *SubscribersUpdateOne {
	suo.mutation.ClearOwner()
	return suo
}

// Where appends a list predicates to the SubscribersUpdate builder.
func (suo *SubscribersUpdateOne) Where(ps ...predicate.Subscribers) *SubscribersUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscribersUpdateOne) Select(field string, fields ...string) *SubscribersUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscribers entity.
func (suo *SubscribersUpdateOne) Save(ctx context.Context) (*Subscribers, error) {
	if err := suo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscribersUpdateOne) SaveX(ctx context.Context) *Subscribers {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscribersUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscribersUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SubscribersUpdateOne) defaults() error {
	if _, ok := suo.mutation.UpdatedAt(); !ok && !suo.mutation.UpdatedAtCleared() {
		if subscribers.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized subscribers.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := subscribers.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubscribersUpdateOne) check() error {
	if v, ok := suo.mutation.Email(); ok {
		if err := subscribers.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "Subscribers.email": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Token(); ok {
		if err := subscribers.TokenValidator(v); err != nil {
			return &ValidationError{Name: "token", err: fmt.Errorf(`generated: validator failed for field "Subscribers.token": %w`, err)}
		}
	}
	if v, ok := suo.mutation.Secret(); ok {
		if err := subscribers.SecretValidator(v); err != nil {
			return &ValidationError{Name: "secret", err: fmt.Errorf(`generated: validator failed for field "Subscribers.secret": %w`, err)}
		}
	}
	return nil
}

func (suo *SubscribersUpdateOne) sqlSave(ctx context.Context) (_node *Subscribers, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscribers.Table, subscribers.Columns, sqlgraph.NewFieldSpec(subscribers.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Subscribers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscribers.FieldID)
		for _, f := range fields {
			if !subscribers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subscribers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if suo.mutation.CreatedAtCleared() {
		_spec.ClearField(subscribers.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(subscribers.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.UpdatedAtCleared() {
		_spec.ClearField(subscribers.FieldUpdatedAt, field.TypeTime)
	}
	if suo.mutation.CreatedByCleared() {
		_spec.ClearField(subscribers.FieldCreatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.UpdatedBy(); ok {
		_spec.SetField(subscribers.FieldUpdatedBy, field.TypeString, value)
	}
	if suo.mutation.UpdatedByCleared() {
		_spec.ClearField(subscribers.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := suo.mutation.DeletedAt(); ok {
		_spec.SetField(subscribers.FieldDeletedAt, field.TypeTime, value)
	}
	if suo.mutation.DeletedAtCleared() {
		_spec.ClearField(subscribers.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := suo.mutation.DeletedBy(); ok {
		_spec.SetField(subscribers.FieldDeletedBy, field.TypeString, value)
	}
	if suo.mutation.DeletedByCleared() {
		_spec.ClearField(subscribers.FieldDeletedBy, field.TypeString)
	}
	if value, ok := suo.mutation.Email(); ok {
		_spec.SetField(subscribers.FieldEmail, field.TypeString, value)
	}
	if value, ok := suo.mutation.Active(); ok {
		_spec.SetField(subscribers.FieldActive, field.TypeBool, value)
	}
	if value, ok := suo.mutation.IPAddress(); ok {
		_spec.SetField(subscribers.FieldIPAddress, field.TypeString, value)
	}
	if suo.mutation.IPAddressCleared() {
		_spec.ClearField(subscribers.FieldIPAddress, field.TypeString)
	}
	if value, ok := suo.mutation.Token(); ok {
		_spec.SetField(subscribers.FieldToken, field.TypeString, value)
	}
	if value, ok := suo.mutation.Secret(); ok {
		_spec.SetField(subscribers.FieldSecret, field.TypeBytes, value)
	}
	if suo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribers.OwnerTable,
			Columns: []string{subscribers.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Subscribers
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subscribers.OwnerTable,
			Columns: []string{subscribers.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = suo.schemaConfig.Subscribers
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = suo.schemaConfig.Subscribers
	ctx = internal.NewSchemaConfigContext(ctx, suo.schemaConfig)
	_node = &Subscribers{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscribers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
