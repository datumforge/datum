// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/datumforge/datum/internal/ent/generated/subscription"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// SubscriptionUpdate is the builder for updating Subscription entities.
type SubscriptionUpdate struct {
	config
	hooks    []Hook
	mutation *SubscriptionMutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (su *SubscriptionUpdate) Where(ps ...predicate.Subscription) *SubscriptionUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetTier sets the "tier" field.
func (su *SubscriptionUpdate) SetTier(s subscription.Tier) *SubscriptionUpdate {
	su.mutation.SetTier(s)
	return su
}

// SetNillableTier sets the "tier" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableTier(s *subscription.Tier) *SubscriptionUpdate {
	if s != nil {
		su.SetTier(*s)
	}
	return su
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (su *SubscriptionUpdate) SetStripeCustomerID(s string) *SubscriptionUpdate {
	su.mutation.SetStripeCustomerID(s)
	return su
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableStripeCustomerID(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetStripeCustomerID(*s)
	}
	return su
}

// ClearStripeCustomerID clears the value of the "stripe_customer_id" field.
func (su *SubscriptionUpdate) ClearStripeCustomerID() *SubscriptionUpdate {
	su.mutation.ClearStripeCustomerID()
	return su
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (su *SubscriptionUpdate) SetStripeSubscriptionID(s string) *SubscriptionUpdate {
	su.mutation.SetStripeSubscriptionID(s)
	return su
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableStripeSubscriptionID(s *string) *SubscriptionUpdate {
	if s != nil {
		su.SetStripeSubscriptionID(*s)
	}
	return su
}

// ClearStripeSubscriptionID clears the value of the "stripe_subscription_id" field.
func (su *SubscriptionUpdate) ClearStripeSubscriptionID() *SubscriptionUpdate {
	su.mutation.ClearStripeSubscriptionID()
	return su
}

// SetExpiresAt sets the "expires_at" field.
func (su *SubscriptionUpdate) SetExpiresAt(t time.Time) *SubscriptionUpdate {
	su.mutation.SetExpiresAt(t)
	return su
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableExpiresAt(t *time.Time) *SubscriptionUpdate {
	if t != nil {
		su.SetExpiresAt(*t)
	}
	return su
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (su *SubscriptionUpdate) ClearExpiresAt() *SubscriptionUpdate {
	su.mutation.ClearExpiresAt()
	return su
}

// SetCancelled sets the "cancelled" field.
func (su *SubscriptionUpdate) SetCancelled(b bool) *SubscriptionUpdate {
	su.mutation.SetCancelled(b)
	return su
}

// SetNillableCancelled sets the "cancelled" field if the given value is not nil.
func (su *SubscriptionUpdate) SetNillableCancelled(b *bool) *SubscriptionUpdate {
	if b != nil {
		su.SetCancelled(*b)
	}
	return su
}

// Mutation returns the SubscriptionMutation object of the builder.
func (su *SubscriptionUpdate) Mutation() *SubscriptionMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubscriptionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubscriptionUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubscriptionUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubscriptionUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubscriptionUpdate) check() error {
	if v, ok := su.mutation.Tier(); ok {
		if err := subscription.TierValidator(v); err != nil {
			return &ValidationError{Name: "tier", err: fmt.Errorf(`generated: validator failed for field "Subscription.tier": %w`, err)}
		}
	}
	return nil
}

func (su *SubscriptionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Tier(); ok {
		_spec.SetField(subscription.FieldTier, field.TypeEnum, value)
	}
	if value, ok := su.mutation.StripeCustomerID(); ok {
		_spec.SetField(subscription.FieldStripeCustomerID, field.TypeString, value)
	}
	if su.mutation.StripeCustomerIDCleared() {
		_spec.ClearField(subscription.FieldStripeCustomerID, field.TypeString)
	}
	if value, ok := su.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(subscription.FieldStripeSubscriptionID, field.TypeString, value)
	}
	if su.mutation.StripeSubscriptionIDCleared() {
		_spec.ClearField(subscription.FieldStripeSubscriptionID, field.TypeString)
	}
	if value, ok := su.mutation.ExpiresAt(); ok {
		_spec.SetField(subscription.FieldExpiresAt, field.TypeTime, value)
	}
	if su.mutation.ExpiresAtCleared() {
		_spec.ClearField(subscription.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := su.mutation.Cancelled(); ok {
		_spec.SetField(subscription.FieldCancelled, field.TypeBool, value)
	}
	_spec.Node.Schema = su.schemaConfig.Subscription
	ctx = internal.NewSchemaConfigContext(ctx, su.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubscriptionUpdateOne is the builder for updating a single Subscription entity.
type SubscriptionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubscriptionMutation
}

// SetTier sets the "tier" field.
func (suo *SubscriptionUpdateOne) SetTier(s subscription.Tier) *SubscriptionUpdateOne {
	suo.mutation.SetTier(s)
	return suo
}

// SetNillableTier sets the "tier" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableTier(s *subscription.Tier) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetTier(*s)
	}
	return suo
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (suo *SubscriptionUpdateOne) SetStripeCustomerID(s string) *SubscriptionUpdateOne {
	suo.mutation.SetStripeCustomerID(s)
	return suo
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableStripeCustomerID(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetStripeCustomerID(*s)
	}
	return suo
}

// ClearStripeCustomerID clears the value of the "stripe_customer_id" field.
func (suo *SubscriptionUpdateOne) ClearStripeCustomerID() *SubscriptionUpdateOne {
	suo.mutation.ClearStripeCustomerID()
	return suo
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (suo *SubscriptionUpdateOne) SetStripeSubscriptionID(s string) *SubscriptionUpdateOne {
	suo.mutation.SetStripeSubscriptionID(s)
	return suo
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableStripeSubscriptionID(s *string) *SubscriptionUpdateOne {
	if s != nil {
		suo.SetStripeSubscriptionID(*s)
	}
	return suo
}

// ClearStripeSubscriptionID clears the value of the "stripe_subscription_id" field.
func (suo *SubscriptionUpdateOne) ClearStripeSubscriptionID() *SubscriptionUpdateOne {
	suo.mutation.ClearStripeSubscriptionID()
	return suo
}

// SetExpiresAt sets the "expires_at" field.
func (suo *SubscriptionUpdateOne) SetExpiresAt(t time.Time) *SubscriptionUpdateOne {
	suo.mutation.SetExpiresAt(t)
	return suo
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableExpiresAt(t *time.Time) *SubscriptionUpdateOne {
	if t != nil {
		suo.SetExpiresAt(*t)
	}
	return suo
}

// ClearExpiresAt clears the value of the "expires_at" field.
func (suo *SubscriptionUpdateOne) ClearExpiresAt() *SubscriptionUpdateOne {
	suo.mutation.ClearExpiresAt()
	return suo
}

// SetCancelled sets the "cancelled" field.
func (suo *SubscriptionUpdateOne) SetCancelled(b bool) *SubscriptionUpdateOne {
	suo.mutation.SetCancelled(b)
	return suo
}

// SetNillableCancelled sets the "cancelled" field if the given value is not nil.
func (suo *SubscriptionUpdateOne) SetNillableCancelled(b *bool) *SubscriptionUpdateOne {
	if b != nil {
		suo.SetCancelled(*b)
	}
	return suo
}

// Mutation returns the SubscriptionMutation object of the builder.
func (suo *SubscriptionUpdateOne) Mutation() *SubscriptionMutation {
	return suo.mutation
}

// Where appends a list predicates to the SubscriptionUpdate builder.
func (suo *SubscriptionUpdateOne) Where(ps ...predicate.Subscription) *SubscriptionUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubscriptionUpdateOne) Select(field string, fields ...string) *SubscriptionUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subscription entity.
func (suo *SubscriptionUpdateOne) Save(ctx context.Context) (*Subscription, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) SaveX(ctx context.Context) *Subscription {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubscriptionUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubscriptionUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubscriptionUpdateOne) check() error {
	if v, ok := suo.mutation.Tier(); ok {
		if err := subscription.TierValidator(v); err != nil {
			return &ValidationError{Name: "tier", err: fmt.Errorf(`generated: validator failed for field "Subscription.tier": %w`, err)}
		}
	}
	return nil
}

func (suo *SubscriptionUpdateOne) sqlSave(ctx context.Context) (_node *Subscription, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subscription.Table, subscription.Columns, sqlgraph.NewFieldSpec(subscription.FieldID, field.TypeString))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "Subscription.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subscription.FieldID)
		for _, f := range fields {
			if !subscription.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != subscription.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Tier(); ok {
		_spec.SetField(subscription.FieldTier, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.StripeCustomerID(); ok {
		_spec.SetField(subscription.FieldStripeCustomerID, field.TypeString, value)
	}
	if suo.mutation.StripeCustomerIDCleared() {
		_spec.ClearField(subscription.FieldStripeCustomerID, field.TypeString)
	}
	if value, ok := suo.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(subscription.FieldStripeSubscriptionID, field.TypeString, value)
	}
	if suo.mutation.StripeSubscriptionIDCleared() {
		_spec.ClearField(subscription.FieldStripeSubscriptionID, field.TypeString)
	}
	if value, ok := suo.mutation.ExpiresAt(); ok {
		_spec.SetField(subscription.FieldExpiresAt, field.TypeTime, value)
	}
	if suo.mutation.ExpiresAtCleared() {
		_spec.ClearField(subscription.FieldExpiresAt, field.TypeTime)
	}
	if value, ok := suo.mutation.Cancelled(); ok {
		_spec.SetField(subscription.FieldCancelled, field.TypeBool, value)
	}
	_spec.Node.Schema = suo.schemaConfig.Subscription
	ctx = internal.NewSchemaConfigContext(ctx, suo.schemaConfig)
	_node = &Subscription{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subscription.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
