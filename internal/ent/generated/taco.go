// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datumforge/datum/internal/ent/generated/taco"
)

// Taco is the model entity for the Taco schema.
type Taco struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// Tier holds the value of the "tier" field.
	Tier taco.Tier `json:"tier,omitempty"`
	// StripeCustomerID holds the value of the "stripe_customer_id" field.
	StripeCustomerID string `json:"stripe_customer_id,omitempty"`
	// StripeSubscriptionID holds the value of the "stripe_subscription_id" field.
	StripeSubscriptionID string `json:"stripe_subscription_id,omitempty"`
	// ExpiresAt holds the value of the "expires_at" field.
	ExpiresAt time.Time `json:"expires_at,omitempty"`
	// Cancelled holds the value of the "cancelled" field.
	Cancelled    bool `json:"cancelled,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Taco) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case taco.FieldCancelled:
			values[i] = new(sql.NullBool)
		case taco.FieldID, taco.FieldCreatedBy, taco.FieldUpdatedBy, taco.FieldTier, taco.FieldStripeCustomerID, taco.FieldStripeSubscriptionID:
			values[i] = new(sql.NullString)
		case taco.FieldCreatedAt, taco.FieldUpdatedAt, taco.FieldExpiresAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Taco fields.
func (t *Taco) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case taco.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				t.ID = value.String
			}
		case taco.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				t.CreatedAt = value.Time
			}
		case taco.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				t.UpdatedAt = value.Time
			}
		case taco.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				t.CreatedBy = value.String
			}
		case taco.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				t.UpdatedBy = value.String
			}
		case taco.FieldTier:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tier", values[i])
			} else if value.Valid {
				t.Tier = taco.Tier(value.String)
			}
		case taco.FieldStripeCustomerID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_customer_id", values[i])
			} else if value.Valid {
				t.StripeCustomerID = value.String
			}
		case taco.FieldStripeSubscriptionID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field stripe_subscription_id", values[i])
			} else if value.Valid {
				t.StripeSubscriptionID = value.String
			}
		case taco.FieldExpiresAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field expires_at", values[i])
			} else if value.Valid {
				t.ExpiresAt = value.Time
			}
		case taco.FieldCancelled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field cancelled", values[i])
			} else if value.Valid {
				t.Cancelled = value.Bool
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Taco.
// This includes values selected through modifiers, order, etc.
func (t *Taco) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// Update returns a builder for updating this Taco.
// Note that you need to call Taco.Unwrap() before calling this method if this Taco
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Taco) Update() *TacoUpdateOne {
	return NewTacoClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Taco entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Taco) Unwrap() *Taco {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("generated: Taco is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Taco) String() string {
	var builder strings.Builder
	builder.WriteString("Taco(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("created_at=")
	builder.WriteString(t.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(t.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(t.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(t.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("tier=")
	builder.WriteString(fmt.Sprintf("%v", t.Tier))
	builder.WriteString(", ")
	builder.WriteString("stripe_customer_id=")
	builder.WriteString(t.StripeCustomerID)
	builder.WriteString(", ")
	builder.WriteString("stripe_subscription_id=")
	builder.WriteString(t.StripeSubscriptionID)
	builder.WriteString(", ")
	builder.WriteString("expires_at=")
	builder.WriteString(t.ExpiresAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("cancelled=")
	builder.WriteString(fmt.Sprintf("%v", t.Cancelled))
	builder.WriteByte(')')
	return builder.String()
}

// Tacos is a parsable slice of Taco.
type Tacos []*Taco
