// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/taco"
)

// TacoCreate is the builder for creating a Taco entity.
type TacoCreate struct {
	config
	mutation *TacoMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *TacoCreate) SetCreatedAt(t time.Time) *TacoCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TacoCreate) SetNillableCreatedAt(t *time.Time) *TacoCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TacoCreate) SetUpdatedAt(t time.Time) *TacoCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TacoCreate) SetNillableUpdatedAt(t *time.Time) *TacoCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TacoCreate) SetCreatedBy(s string) *TacoCreate {
	tc.mutation.SetCreatedBy(s)
	return tc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tc *TacoCreate) SetNillableCreatedBy(s *string) *TacoCreate {
	if s != nil {
		tc.SetCreatedBy(*s)
	}
	return tc
}

// SetUpdatedBy sets the "updated_by" field.
func (tc *TacoCreate) SetUpdatedBy(s string) *TacoCreate {
	tc.mutation.SetUpdatedBy(s)
	return tc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tc *TacoCreate) SetNillableUpdatedBy(s *string) *TacoCreate {
	if s != nil {
		tc.SetUpdatedBy(*s)
	}
	return tc
}

// SetTier sets the "tier" field.
func (tc *TacoCreate) SetTier(t taco.Tier) *TacoCreate {
	tc.mutation.SetTier(t)
	return tc
}

// SetNillableTier sets the "tier" field if the given value is not nil.
func (tc *TacoCreate) SetNillableTier(t *taco.Tier) *TacoCreate {
	if t != nil {
		tc.SetTier(*t)
	}
	return tc
}

// SetStripeCustomerID sets the "stripe_customer_id" field.
func (tc *TacoCreate) SetStripeCustomerID(s string) *TacoCreate {
	tc.mutation.SetStripeCustomerID(s)
	return tc
}

// SetNillableStripeCustomerID sets the "stripe_customer_id" field if the given value is not nil.
func (tc *TacoCreate) SetNillableStripeCustomerID(s *string) *TacoCreate {
	if s != nil {
		tc.SetStripeCustomerID(*s)
	}
	return tc
}

// SetStripeSubscriptionID sets the "stripe_subscription_id" field.
func (tc *TacoCreate) SetStripeSubscriptionID(s string) *TacoCreate {
	tc.mutation.SetStripeSubscriptionID(s)
	return tc
}

// SetNillableStripeSubscriptionID sets the "stripe_subscription_id" field if the given value is not nil.
func (tc *TacoCreate) SetNillableStripeSubscriptionID(s *string) *TacoCreate {
	if s != nil {
		tc.SetStripeSubscriptionID(*s)
	}
	return tc
}

// SetExpiresAt sets the "expires_at" field.
func (tc *TacoCreate) SetExpiresAt(t time.Time) *TacoCreate {
	tc.mutation.SetExpiresAt(t)
	return tc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (tc *TacoCreate) SetNillableExpiresAt(t *time.Time) *TacoCreate {
	if t != nil {
		tc.SetExpiresAt(*t)
	}
	return tc
}

// SetCancelled sets the "cancelled" field.
func (tc *TacoCreate) SetCancelled(b bool) *TacoCreate {
	tc.mutation.SetCancelled(b)
	return tc
}

// SetNillableCancelled sets the "cancelled" field if the given value is not nil.
func (tc *TacoCreate) SetNillableCancelled(b *bool) *TacoCreate {
	if b != nil {
		tc.SetCancelled(*b)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TacoCreate) SetID(s string) *TacoCreate {
	tc.mutation.SetID(s)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TacoCreate) SetNillableID(s *string) *TacoCreate {
	if s != nil {
		tc.SetID(*s)
	}
	return tc
}

// Mutation returns the TacoMutation object of the builder.
func (tc *TacoCreate) Mutation() *TacoMutation {
	return tc.mutation
}

// Save creates the Taco in the database.
func (tc *TacoCreate) Save(ctx context.Context) (*Taco, error) {
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TacoCreate) SaveX(ctx context.Context) *Taco {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TacoCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TacoCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TacoCreate) defaults() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		if taco.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized taco.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := taco.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		if taco.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized taco.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := taco.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.Tier(); !ok {
		v := taco.DefaultTier
		tc.mutation.SetTier(v)
	}
	if _, ok := tc.mutation.Cancelled(); !ok {
		v := taco.DefaultCancelled
		tc.mutation.SetCancelled(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		if taco.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized taco.DefaultID (forgotten import generated/runtime?)")
		}
		v := taco.DefaultID()
		tc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TacoCreate) check() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`generated: missing required field "Taco.created_at"`)}
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`generated: missing required field "Taco.updated_at"`)}
	}
	if _, ok := tc.mutation.Tier(); !ok {
		return &ValidationError{Name: "tier", err: errors.New(`generated: missing required field "Taco.tier"`)}
	}
	if v, ok := tc.mutation.Tier(); ok {
		if err := taco.TierValidator(v); err != nil {
			return &ValidationError{Name: "tier", err: fmt.Errorf(`generated: validator failed for field "Taco.tier": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Cancelled(); !ok {
		return &ValidationError{Name: "cancelled", err: errors.New(`generated: missing required field "Taco.cancelled"`)}
	}
	return nil
}

func (tc *TacoCreate) sqlSave(ctx context.Context) (*Taco, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Taco.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TacoCreate) createSpec() (*Taco, *sqlgraph.CreateSpec) {
	var (
		_node = &Taco{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(taco.Table, sqlgraph.NewFieldSpec(taco.FieldID, field.TypeString))
	)
	_spec.Schema = tc.schemaConfig.Taco
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(taco.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(taco.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(taco.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tc.mutation.UpdatedBy(); ok {
		_spec.SetField(taco.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tc.mutation.Tier(); ok {
		_spec.SetField(taco.FieldTier, field.TypeEnum, value)
		_node.Tier = value
	}
	if value, ok := tc.mutation.StripeCustomerID(); ok {
		_spec.SetField(taco.FieldStripeCustomerID, field.TypeString, value)
		_node.StripeCustomerID = value
	}
	if value, ok := tc.mutation.StripeSubscriptionID(); ok {
		_spec.SetField(taco.FieldStripeSubscriptionID, field.TypeString, value)
		_node.StripeSubscriptionID = value
	}
	if value, ok := tc.mutation.ExpiresAt(); ok {
		_spec.SetField(taco.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := tc.mutation.Cancelled(); ok {
		_spec.SetField(taco.FieldCancelled, field.TypeBool, value)
		_node.Cancelled = value
	}
	return _node, _spec
}

// TacoCreateBulk is the builder for creating many Taco entities in bulk.
type TacoCreateBulk struct {
	config
	err      error
	builders []*TacoCreate
}

// Save creates the Taco entities in the database.
func (tcb *TacoCreateBulk) Save(ctx context.Context) ([]*Taco, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Taco, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TacoMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TacoCreateBulk) SaveX(ctx context.Context) []*Taco {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TacoCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TacoCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
