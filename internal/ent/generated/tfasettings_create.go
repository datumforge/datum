// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/tfasettings"
	"github.com/datumforge/datum/internal/ent/generated/user"
)

// TFASettingsCreate is the builder for creating a TFASettings entity.
type TFASettingsCreate struct {
	config
	mutation *TFASettingsMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tsc *TFASettingsCreate) SetCreatedAt(t time.Time) *TFASettingsCreate {
	tsc.mutation.SetCreatedAt(t)
	return tsc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tsc *TFASettingsCreate) SetNillableCreatedAt(t *time.Time) *TFASettingsCreate {
	if t != nil {
		tsc.SetCreatedAt(*t)
	}
	return tsc
}

// SetUpdatedAt sets the "updated_at" field.
func (tsc *TFASettingsCreate) SetUpdatedAt(t time.Time) *TFASettingsCreate {
	tsc.mutation.SetUpdatedAt(t)
	return tsc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tsc *TFASettingsCreate) SetNillableUpdatedAt(t *time.Time) *TFASettingsCreate {
	if t != nil {
		tsc.SetUpdatedAt(*t)
	}
	return tsc
}

// SetCreatedBy sets the "created_by" field.
func (tsc *TFASettingsCreate) SetCreatedBy(s string) *TFASettingsCreate {
	tsc.mutation.SetCreatedBy(s)
	return tsc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tsc *TFASettingsCreate) SetNillableCreatedBy(s *string) *TFASettingsCreate {
	if s != nil {
		tsc.SetCreatedBy(*s)
	}
	return tsc
}

// SetUpdatedBy sets the "updated_by" field.
func (tsc *TFASettingsCreate) SetUpdatedBy(s string) *TFASettingsCreate {
	tsc.mutation.SetUpdatedBy(s)
	return tsc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tsc *TFASettingsCreate) SetNillableUpdatedBy(s *string) *TFASettingsCreate {
	if s != nil {
		tsc.SetUpdatedBy(*s)
	}
	return tsc
}

// SetDeletedAt sets the "deleted_at" field.
func (tsc *TFASettingsCreate) SetDeletedAt(t time.Time) *TFASettingsCreate {
	tsc.mutation.SetDeletedAt(t)
	return tsc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsc *TFASettingsCreate) SetNillableDeletedAt(t *time.Time) *TFASettingsCreate {
	if t != nil {
		tsc.SetDeletedAt(*t)
	}
	return tsc
}

// SetDeletedBy sets the "deleted_by" field.
func (tsc *TFASettingsCreate) SetDeletedBy(s string) *TFASettingsCreate {
	tsc.mutation.SetDeletedBy(s)
	return tsc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tsc *TFASettingsCreate) SetNillableDeletedBy(s *string) *TFASettingsCreate {
	if s != nil {
		tsc.SetDeletedBy(*s)
	}
	return tsc
}

// SetOwnerID sets the "owner_id" field.
func (tsc *TFASettingsCreate) SetOwnerID(s string) *TFASettingsCreate {
	tsc.mutation.SetOwnerID(s)
	return tsc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (tsc *TFASettingsCreate) SetNillableOwnerID(s *string) *TFASettingsCreate {
	if s != nil {
		tsc.SetOwnerID(*s)
	}
	return tsc
}

// SetTfaSecret sets the "tfa_secret" field.
func (tsc *TFASettingsCreate) SetTfaSecret(s string) *TFASettingsCreate {
	tsc.mutation.SetTfaSecret(s)
	return tsc
}

// SetNillableTfaSecret sets the "tfa_secret" field if the given value is not nil.
func (tsc *TFASettingsCreate) SetNillableTfaSecret(s *string) *TFASettingsCreate {
	if s != nil {
		tsc.SetTfaSecret(*s)
	}
	return tsc
}

// SetVerified sets the "verified" field.
func (tsc *TFASettingsCreate) SetVerified(b bool) *TFASettingsCreate {
	tsc.mutation.SetVerified(b)
	return tsc
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (tsc *TFASettingsCreate) SetNillableVerified(b *bool) *TFASettingsCreate {
	if b != nil {
		tsc.SetVerified(*b)
	}
	return tsc
}

// SetRecoveryCodes sets the "recovery_codes" field.
func (tsc *TFASettingsCreate) SetRecoveryCodes(s []string) *TFASettingsCreate {
	tsc.mutation.SetRecoveryCodes(s)
	return tsc
}

// SetPhoneOtpAllowed sets the "phone_otp_allowed" field.
func (tsc *TFASettingsCreate) SetPhoneOtpAllowed(b bool) *TFASettingsCreate {
	tsc.mutation.SetPhoneOtpAllowed(b)
	return tsc
}

// SetNillablePhoneOtpAllowed sets the "phone_otp_allowed" field if the given value is not nil.
func (tsc *TFASettingsCreate) SetNillablePhoneOtpAllowed(b *bool) *TFASettingsCreate {
	if b != nil {
		tsc.SetPhoneOtpAllowed(*b)
	}
	return tsc
}

// SetEmailOtpAllowed sets the "email_otp_allowed" field.
func (tsc *TFASettingsCreate) SetEmailOtpAllowed(b bool) *TFASettingsCreate {
	tsc.mutation.SetEmailOtpAllowed(b)
	return tsc
}

// SetNillableEmailOtpAllowed sets the "email_otp_allowed" field if the given value is not nil.
func (tsc *TFASettingsCreate) SetNillableEmailOtpAllowed(b *bool) *TFASettingsCreate {
	if b != nil {
		tsc.SetEmailOtpAllowed(*b)
	}
	return tsc
}

// SetTotpAllowed sets the "totp_allowed" field.
func (tsc *TFASettingsCreate) SetTotpAllowed(b bool) *TFASettingsCreate {
	tsc.mutation.SetTotpAllowed(b)
	return tsc
}

// SetNillableTotpAllowed sets the "totp_allowed" field if the given value is not nil.
func (tsc *TFASettingsCreate) SetNillableTotpAllowed(b *bool) *TFASettingsCreate {
	if b != nil {
		tsc.SetTotpAllowed(*b)
	}
	return tsc
}

// SetID sets the "id" field.
func (tsc *TFASettingsCreate) SetID(s string) *TFASettingsCreate {
	tsc.mutation.SetID(s)
	return tsc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tsc *TFASettingsCreate) SetNillableID(s *string) *TFASettingsCreate {
	if s != nil {
		tsc.SetID(*s)
	}
	return tsc
}

// SetOwner sets the "owner" edge to the User entity.
func (tsc *TFASettingsCreate) SetOwner(u *User) *TFASettingsCreate {
	return tsc.SetOwnerID(u.ID)
}

// Mutation returns the TFASettingsMutation object of the builder.
func (tsc *TFASettingsCreate) Mutation() *TFASettingsMutation {
	return tsc.mutation
}

// Save creates the TFASettings in the database.
func (tsc *TFASettingsCreate) Save(ctx context.Context) (*TFASettings, error) {
	if err := tsc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tsc.sqlSave, tsc.mutation, tsc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tsc *TFASettingsCreate) SaveX(ctx context.Context) *TFASettings {
	v, err := tsc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tsc *TFASettingsCreate) Exec(ctx context.Context) error {
	_, err := tsc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsc *TFASettingsCreate) ExecX(ctx context.Context) {
	if err := tsc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsc *TFASettingsCreate) defaults() error {
	if _, ok := tsc.mutation.CreatedAt(); !ok {
		if tfasettings.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized tfasettings.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := tfasettings.DefaultCreatedAt()
		tsc.mutation.SetCreatedAt(v)
	}
	if _, ok := tsc.mutation.UpdatedAt(); !ok {
		if tfasettings.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized tfasettings.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := tfasettings.DefaultUpdatedAt()
		tsc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tsc.mutation.Verified(); !ok {
		v := tfasettings.DefaultVerified
		tsc.mutation.SetVerified(v)
	}
	if _, ok := tsc.mutation.PhoneOtpAllowed(); !ok {
		v := tfasettings.DefaultPhoneOtpAllowed
		tsc.mutation.SetPhoneOtpAllowed(v)
	}
	if _, ok := tsc.mutation.EmailOtpAllowed(); !ok {
		v := tfasettings.DefaultEmailOtpAllowed
		tsc.mutation.SetEmailOtpAllowed(v)
	}
	if _, ok := tsc.mutation.TotpAllowed(); !ok {
		v := tfasettings.DefaultTotpAllowed
		tsc.mutation.SetTotpAllowed(v)
	}
	if _, ok := tsc.mutation.ID(); !ok {
		if tfasettings.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized tfasettings.DefaultID (forgotten import generated/runtime?)")
		}
		v := tfasettings.DefaultID()
		tsc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tsc *TFASettingsCreate) check() error {
	if _, ok := tsc.mutation.Verified(); !ok {
		return &ValidationError{Name: "verified", err: errors.New(`generated: missing required field "TFASettings.verified"`)}
	}
	return nil
}

func (tsc *TFASettingsCreate) sqlSave(ctx context.Context) (*TFASettings, error) {
	if err := tsc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tsc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tsc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TFASettings.ID type: %T", _spec.ID.Value)
		}
	}
	tsc.mutation.id = &_node.ID
	tsc.mutation.done = true
	return _node, nil
}

func (tsc *TFASettingsCreate) createSpec() (*TFASettings, *sqlgraph.CreateSpec) {
	var (
		_node = &TFASettings{config: tsc.config}
		_spec = sqlgraph.NewCreateSpec(tfasettings.Table, sqlgraph.NewFieldSpec(tfasettings.FieldID, field.TypeString))
	)
	_spec.Schema = tsc.schemaConfig.TFASettings
	if id, ok := tsc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tsc.mutation.CreatedAt(); ok {
		_spec.SetField(tfasettings.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tsc.mutation.UpdatedAt(); ok {
		_spec.SetField(tfasettings.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tsc.mutation.CreatedBy(); ok {
		_spec.SetField(tfasettings.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tsc.mutation.UpdatedBy(); ok {
		_spec.SetField(tfasettings.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tsc.mutation.DeletedAt(); ok {
		_spec.SetField(tfasettings.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tsc.mutation.DeletedBy(); ok {
		_spec.SetField(tfasettings.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := tsc.mutation.TfaSecret(); ok {
		_spec.SetField(tfasettings.FieldTfaSecret, field.TypeString, value)
		_node.TfaSecret = &value
	}
	if value, ok := tsc.mutation.Verified(); ok {
		_spec.SetField(tfasettings.FieldVerified, field.TypeBool, value)
		_node.Verified = value
	}
	if value, ok := tsc.mutation.RecoveryCodes(); ok {
		_spec.SetField(tfasettings.FieldRecoveryCodes, field.TypeJSON, value)
		_node.RecoveryCodes = value
	}
	if value, ok := tsc.mutation.PhoneOtpAllowed(); ok {
		_spec.SetField(tfasettings.FieldPhoneOtpAllowed, field.TypeBool, value)
		_node.PhoneOtpAllowed = value
	}
	if value, ok := tsc.mutation.EmailOtpAllowed(); ok {
		_spec.SetField(tfasettings.FieldEmailOtpAllowed, field.TypeBool, value)
		_node.EmailOtpAllowed = value
	}
	if value, ok := tsc.mutation.TotpAllowed(); ok {
		_spec.SetField(tfasettings.FieldTotpAllowed, field.TypeBool, value)
		_node.TotpAllowed = value
	}
	if nodes := tsc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tfasettings.OwnerTable,
			Columns: []string{tfasettings.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tsc.schemaConfig.TFASettings
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TFASettingsCreateBulk is the builder for creating many TFASettings entities in bulk.
type TFASettingsCreateBulk struct {
	config
	err      error
	builders []*TFASettingsCreate
}

// Save creates the TFASettings entities in the database.
func (tscb *TFASettingsCreateBulk) Save(ctx context.Context) ([]*TFASettings, error) {
	if tscb.err != nil {
		return nil, tscb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tscb.builders))
	nodes := make([]*TFASettings, len(tscb.builders))
	mutators := make([]Mutator, len(tscb.builders))
	for i := range tscb.builders {
		func(i int, root context.Context) {
			builder := tscb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TFASettingsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tscb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tscb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tscb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tscb *TFASettingsCreateBulk) SaveX(ctx context.Context) []*TFASettings {
	v, err := tscb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tscb *TFASettingsCreateBulk) Exec(ctx context.Context) error {
	_, err := tscb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tscb *TFASettingsCreateBulk) ExecX(ctx context.Context) {
	if err := tscb.Exec(ctx); err != nil {
		panic(err)
	}
}
