// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/datumforge/datum/internal/ent/generated/tfasettings"
	"github.com/datumforge/datum/internal/ent/generated/user"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// TFASettingsUpdate is the builder for updating TFASettings entities.
type TFASettingsUpdate struct {
	config
	hooks    []Hook
	mutation *TFASettingsMutation
}

// Where appends a list predicates to the TFASettingsUpdate builder.
func (tsu *TFASettingsUpdate) Where(ps ...predicate.TFASettings) *TFASettingsUpdate {
	tsu.mutation.Where(ps...)
	return tsu
}

// SetUpdatedAt sets the "updated_at" field.
func (tsu *TFASettingsUpdate) SetUpdatedAt(t time.Time) *TFASettingsUpdate {
	tsu.mutation.SetUpdatedAt(t)
	return tsu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tsu *TFASettingsUpdate) ClearUpdatedAt() *TFASettingsUpdate {
	tsu.mutation.ClearUpdatedAt()
	return tsu
}

// SetUpdatedBy sets the "updated_by" field.
func (tsu *TFASettingsUpdate) SetUpdatedBy(s string) *TFASettingsUpdate {
	tsu.mutation.SetUpdatedBy(s)
	return tsu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tsu *TFASettingsUpdate) SetNillableUpdatedBy(s *string) *TFASettingsUpdate {
	if s != nil {
		tsu.SetUpdatedBy(*s)
	}
	return tsu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tsu *TFASettingsUpdate) ClearUpdatedBy() *TFASettingsUpdate {
	tsu.mutation.ClearUpdatedBy()
	return tsu
}

// SetDeletedAt sets the "deleted_at" field.
func (tsu *TFASettingsUpdate) SetDeletedAt(t time.Time) *TFASettingsUpdate {
	tsu.mutation.SetDeletedAt(t)
	return tsu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsu *TFASettingsUpdate) SetNillableDeletedAt(t *time.Time) *TFASettingsUpdate {
	if t != nil {
		tsu.SetDeletedAt(*t)
	}
	return tsu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tsu *TFASettingsUpdate) ClearDeletedAt() *TFASettingsUpdate {
	tsu.mutation.ClearDeletedAt()
	return tsu
}

// SetDeletedBy sets the "deleted_by" field.
func (tsu *TFASettingsUpdate) SetDeletedBy(s string) *TFASettingsUpdate {
	tsu.mutation.SetDeletedBy(s)
	return tsu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tsu *TFASettingsUpdate) SetNillableDeletedBy(s *string) *TFASettingsUpdate {
	if s != nil {
		tsu.SetDeletedBy(*s)
	}
	return tsu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tsu *TFASettingsUpdate) ClearDeletedBy() *TFASettingsUpdate {
	tsu.mutation.ClearDeletedBy()
	return tsu
}

// SetOwnerID sets the "owner_id" field.
func (tsu *TFASettingsUpdate) SetOwnerID(s string) *TFASettingsUpdate {
	tsu.mutation.SetOwnerID(s)
	return tsu
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (tsu *TFASettingsUpdate) SetNillableOwnerID(s *string) *TFASettingsUpdate {
	if s != nil {
		tsu.SetOwnerID(*s)
	}
	return tsu
}

// ClearOwnerID clears the value of the "owner_id" field.
func (tsu *TFASettingsUpdate) ClearOwnerID() *TFASettingsUpdate {
	tsu.mutation.ClearOwnerID()
	return tsu
}

// SetTfaSecret sets the "tfa_secret" field.
func (tsu *TFASettingsUpdate) SetTfaSecret(s string) *TFASettingsUpdate {
	tsu.mutation.SetTfaSecret(s)
	return tsu
}

// SetNillableTfaSecret sets the "tfa_secret" field if the given value is not nil.
func (tsu *TFASettingsUpdate) SetNillableTfaSecret(s *string) *TFASettingsUpdate {
	if s != nil {
		tsu.SetTfaSecret(*s)
	}
	return tsu
}

// ClearTfaSecret clears the value of the "tfa_secret" field.
func (tsu *TFASettingsUpdate) ClearTfaSecret() *TFASettingsUpdate {
	tsu.mutation.ClearTfaSecret()
	return tsu
}

// SetVerified sets the "verified" field.
func (tsu *TFASettingsUpdate) SetVerified(b bool) *TFASettingsUpdate {
	tsu.mutation.SetVerified(b)
	return tsu
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (tsu *TFASettingsUpdate) SetNillableVerified(b *bool) *TFASettingsUpdate {
	if b != nil {
		tsu.SetVerified(*b)
	}
	return tsu
}

// SetRecoveryCodes sets the "recovery_codes" field.
func (tsu *TFASettingsUpdate) SetRecoveryCodes(s []string) *TFASettingsUpdate {
	tsu.mutation.SetRecoveryCodes(s)
	return tsu
}

// AppendRecoveryCodes appends s to the "recovery_codes" field.
func (tsu *TFASettingsUpdate) AppendRecoveryCodes(s []string) *TFASettingsUpdate {
	tsu.mutation.AppendRecoveryCodes(s)
	return tsu
}

// ClearRecoveryCodes clears the value of the "recovery_codes" field.
func (tsu *TFASettingsUpdate) ClearRecoveryCodes() *TFASettingsUpdate {
	tsu.mutation.ClearRecoveryCodes()
	return tsu
}

// SetPhoneOtpAllowed sets the "phone_otp_allowed" field.
func (tsu *TFASettingsUpdate) SetPhoneOtpAllowed(b bool) *TFASettingsUpdate {
	tsu.mutation.SetPhoneOtpAllowed(b)
	return tsu
}

// SetNillablePhoneOtpAllowed sets the "phone_otp_allowed" field if the given value is not nil.
func (tsu *TFASettingsUpdate) SetNillablePhoneOtpAllowed(b *bool) *TFASettingsUpdate {
	if b != nil {
		tsu.SetPhoneOtpAllowed(*b)
	}
	return tsu
}

// ClearPhoneOtpAllowed clears the value of the "phone_otp_allowed" field.
func (tsu *TFASettingsUpdate) ClearPhoneOtpAllowed() *TFASettingsUpdate {
	tsu.mutation.ClearPhoneOtpAllowed()
	return tsu
}

// SetEmailOtpAllowed sets the "email_otp_allowed" field.
func (tsu *TFASettingsUpdate) SetEmailOtpAllowed(b bool) *TFASettingsUpdate {
	tsu.mutation.SetEmailOtpAllowed(b)
	return tsu
}

// SetNillableEmailOtpAllowed sets the "email_otp_allowed" field if the given value is not nil.
func (tsu *TFASettingsUpdate) SetNillableEmailOtpAllowed(b *bool) *TFASettingsUpdate {
	if b != nil {
		tsu.SetEmailOtpAllowed(*b)
	}
	return tsu
}

// ClearEmailOtpAllowed clears the value of the "email_otp_allowed" field.
func (tsu *TFASettingsUpdate) ClearEmailOtpAllowed() *TFASettingsUpdate {
	tsu.mutation.ClearEmailOtpAllowed()
	return tsu
}

// SetTotpAllowed sets the "totp_allowed" field.
func (tsu *TFASettingsUpdate) SetTotpAllowed(b bool) *TFASettingsUpdate {
	tsu.mutation.SetTotpAllowed(b)
	return tsu
}

// SetNillableTotpAllowed sets the "totp_allowed" field if the given value is not nil.
func (tsu *TFASettingsUpdate) SetNillableTotpAllowed(b *bool) *TFASettingsUpdate {
	if b != nil {
		tsu.SetTotpAllowed(*b)
	}
	return tsu
}

// ClearTotpAllowed clears the value of the "totp_allowed" field.
func (tsu *TFASettingsUpdate) ClearTotpAllowed() *TFASettingsUpdate {
	tsu.mutation.ClearTotpAllowed()
	return tsu
}

// SetOwner sets the "owner" edge to the User entity.
func (tsu *TFASettingsUpdate) SetOwner(u *User) *TFASettingsUpdate {
	return tsu.SetOwnerID(u.ID)
}

// Mutation returns the TFASettingsMutation object of the builder.
func (tsu *TFASettingsUpdate) Mutation() *TFASettingsMutation {
	return tsu.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (tsu *TFASettingsUpdate) ClearOwner() *TFASettingsUpdate {
	tsu.mutation.ClearOwner()
	return tsu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tsu *TFASettingsUpdate) Save(ctx context.Context) (int, error) {
	if err := tsu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, tsu.sqlSave, tsu.mutation, tsu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsu *TFASettingsUpdate) SaveX(ctx context.Context) int {
	affected, err := tsu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tsu *TFASettingsUpdate) Exec(ctx context.Context) error {
	_, err := tsu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsu *TFASettingsUpdate) ExecX(ctx context.Context) {
	if err := tsu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsu *TFASettingsUpdate) defaults() error {
	if _, ok := tsu.mutation.UpdatedAt(); !ok && !tsu.mutation.UpdatedAtCleared() {
		if tfasettings.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized tfasettings.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := tfasettings.UpdateDefaultUpdatedAt()
		tsu.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (tsu *TFASettingsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tfasettings.Table, tfasettings.Columns, sqlgraph.NewFieldSpec(tfasettings.FieldID, field.TypeString))
	if ps := tsu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tsu.mutation.CreatedAtCleared() {
		_spec.ClearField(tfasettings.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tsu.mutation.UpdatedAt(); ok {
		_spec.SetField(tfasettings.FieldUpdatedAt, field.TypeTime, value)
	}
	if tsu.mutation.UpdatedAtCleared() {
		_spec.ClearField(tfasettings.FieldUpdatedAt, field.TypeTime)
	}
	if tsu.mutation.CreatedByCleared() {
		_spec.ClearField(tfasettings.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tsu.mutation.UpdatedBy(); ok {
		_spec.SetField(tfasettings.FieldUpdatedBy, field.TypeString, value)
	}
	if tsu.mutation.UpdatedByCleared() {
		_spec.ClearField(tfasettings.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tsu.mutation.DeletedAt(); ok {
		_spec.SetField(tfasettings.FieldDeletedAt, field.TypeTime, value)
	}
	if tsu.mutation.DeletedAtCleared() {
		_spec.ClearField(tfasettings.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tsu.mutation.DeletedBy(); ok {
		_spec.SetField(tfasettings.FieldDeletedBy, field.TypeString, value)
	}
	if tsu.mutation.DeletedByCleared() {
		_spec.ClearField(tfasettings.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tsu.mutation.TfaSecret(); ok {
		_spec.SetField(tfasettings.FieldTfaSecret, field.TypeString, value)
	}
	if tsu.mutation.TfaSecretCleared() {
		_spec.ClearField(tfasettings.FieldTfaSecret, field.TypeString)
	}
	if value, ok := tsu.mutation.Verified(); ok {
		_spec.SetField(tfasettings.FieldVerified, field.TypeBool, value)
	}
	if value, ok := tsu.mutation.RecoveryCodes(); ok {
		_spec.SetField(tfasettings.FieldRecoveryCodes, field.TypeJSON, value)
	}
	if value, ok := tsu.mutation.AppendedRecoveryCodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tfasettings.FieldRecoveryCodes, value)
		})
	}
	if tsu.mutation.RecoveryCodesCleared() {
		_spec.ClearField(tfasettings.FieldRecoveryCodes, field.TypeJSON)
	}
	if value, ok := tsu.mutation.PhoneOtpAllowed(); ok {
		_spec.SetField(tfasettings.FieldPhoneOtpAllowed, field.TypeBool, value)
	}
	if tsu.mutation.PhoneOtpAllowedCleared() {
		_spec.ClearField(tfasettings.FieldPhoneOtpAllowed, field.TypeBool)
	}
	if value, ok := tsu.mutation.EmailOtpAllowed(); ok {
		_spec.SetField(tfasettings.FieldEmailOtpAllowed, field.TypeBool, value)
	}
	if tsu.mutation.EmailOtpAllowedCleared() {
		_spec.ClearField(tfasettings.FieldEmailOtpAllowed, field.TypeBool)
	}
	if value, ok := tsu.mutation.TotpAllowed(); ok {
		_spec.SetField(tfasettings.FieldTotpAllowed, field.TypeBool, value)
	}
	if tsu.mutation.TotpAllowedCleared() {
		_spec.ClearField(tfasettings.FieldTotpAllowed, field.TypeBool)
	}
	if tsu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tfasettings.OwnerTable,
			Columns: []string{tfasettings.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tsu.schemaConfig.TFASettings
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tfasettings.OwnerTable,
			Columns: []string{tfasettings.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tsu.schemaConfig.TFASettings
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tsu.schemaConfig.TFASettings
	ctx = internal.NewSchemaConfigContext(ctx, tsu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, tsu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tfasettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tsu.mutation.done = true
	return n, nil
}

// TFASettingsUpdateOne is the builder for updating a single TFASettings entity.
type TFASettingsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TFASettingsMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (tsuo *TFASettingsUpdateOne) SetUpdatedAt(t time.Time) *TFASettingsUpdateOne {
	tsuo.mutation.SetUpdatedAt(t)
	return tsuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (tsuo *TFASettingsUpdateOne) ClearUpdatedAt() *TFASettingsUpdateOne {
	tsuo.mutation.ClearUpdatedAt()
	return tsuo
}

// SetUpdatedBy sets the "updated_by" field.
func (tsuo *TFASettingsUpdateOne) SetUpdatedBy(s string) *TFASettingsUpdateOne {
	tsuo.mutation.SetUpdatedBy(s)
	return tsuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tsuo *TFASettingsUpdateOne) SetNillableUpdatedBy(s *string) *TFASettingsUpdateOne {
	if s != nil {
		tsuo.SetUpdatedBy(*s)
	}
	return tsuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (tsuo *TFASettingsUpdateOne) ClearUpdatedBy() *TFASettingsUpdateOne {
	tsuo.mutation.ClearUpdatedBy()
	return tsuo
}

// SetDeletedAt sets the "deleted_at" field.
func (tsuo *TFASettingsUpdateOne) SetDeletedAt(t time.Time) *TFASettingsUpdateOne {
	tsuo.mutation.SetDeletedAt(t)
	return tsuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tsuo *TFASettingsUpdateOne) SetNillableDeletedAt(t *time.Time) *TFASettingsUpdateOne {
	if t != nil {
		tsuo.SetDeletedAt(*t)
	}
	return tsuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (tsuo *TFASettingsUpdateOne) ClearDeletedAt() *TFASettingsUpdateOne {
	tsuo.mutation.ClearDeletedAt()
	return tsuo
}

// SetDeletedBy sets the "deleted_by" field.
func (tsuo *TFASettingsUpdateOne) SetDeletedBy(s string) *TFASettingsUpdateOne {
	tsuo.mutation.SetDeletedBy(s)
	return tsuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tsuo *TFASettingsUpdateOne) SetNillableDeletedBy(s *string) *TFASettingsUpdateOne {
	if s != nil {
		tsuo.SetDeletedBy(*s)
	}
	return tsuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (tsuo *TFASettingsUpdateOne) ClearDeletedBy() *TFASettingsUpdateOne {
	tsuo.mutation.ClearDeletedBy()
	return tsuo
}

// SetOwnerID sets the "owner_id" field.
func (tsuo *TFASettingsUpdateOne) SetOwnerID(s string) *TFASettingsUpdateOne {
	tsuo.mutation.SetOwnerID(s)
	return tsuo
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (tsuo *TFASettingsUpdateOne) SetNillableOwnerID(s *string) *TFASettingsUpdateOne {
	if s != nil {
		tsuo.SetOwnerID(*s)
	}
	return tsuo
}

// ClearOwnerID clears the value of the "owner_id" field.
func (tsuo *TFASettingsUpdateOne) ClearOwnerID() *TFASettingsUpdateOne {
	tsuo.mutation.ClearOwnerID()
	return tsuo
}

// SetTfaSecret sets the "tfa_secret" field.
func (tsuo *TFASettingsUpdateOne) SetTfaSecret(s string) *TFASettingsUpdateOne {
	tsuo.mutation.SetTfaSecret(s)
	return tsuo
}

// SetNillableTfaSecret sets the "tfa_secret" field if the given value is not nil.
func (tsuo *TFASettingsUpdateOne) SetNillableTfaSecret(s *string) *TFASettingsUpdateOne {
	if s != nil {
		tsuo.SetTfaSecret(*s)
	}
	return tsuo
}

// ClearTfaSecret clears the value of the "tfa_secret" field.
func (tsuo *TFASettingsUpdateOne) ClearTfaSecret() *TFASettingsUpdateOne {
	tsuo.mutation.ClearTfaSecret()
	return tsuo
}

// SetVerified sets the "verified" field.
func (tsuo *TFASettingsUpdateOne) SetVerified(b bool) *TFASettingsUpdateOne {
	tsuo.mutation.SetVerified(b)
	return tsuo
}

// SetNillableVerified sets the "verified" field if the given value is not nil.
func (tsuo *TFASettingsUpdateOne) SetNillableVerified(b *bool) *TFASettingsUpdateOne {
	if b != nil {
		tsuo.SetVerified(*b)
	}
	return tsuo
}

// SetRecoveryCodes sets the "recovery_codes" field.
func (tsuo *TFASettingsUpdateOne) SetRecoveryCodes(s []string) *TFASettingsUpdateOne {
	tsuo.mutation.SetRecoveryCodes(s)
	return tsuo
}

// AppendRecoveryCodes appends s to the "recovery_codes" field.
func (tsuo *TFASettingsUpdateOne) AppendRecoveryCodes(s []string) *TFASettingsUpdateOne {
	tsuo.mutation.AppendRecoveryCodes(s)
	return tsuo
}

// ClearRecoveryCodes clears the value of the "recovery_codes" field.
func (tsuo *TFASettingsUpdateOne) ClearRecoveryCodes() *TFASettingsUpdateOne {
	tsuo.mutation.ClearRecoveryCodes()
	return tsuo
}

// SetPhoneOtpAllowed sets the "phone_otp_allowed" field.
func (tsuo *TFASettingsUpdateOne) SetPhoneOtpAllowed(b bool) *TFASettingsUpdateOne {
	tsuo.mutation.SetPhoneOtpAllowed(b)
	return tsuo
}

// SetNillablePhoneOtpAllowed sets the "phone_otp_allowed" field if the given value is not nil.
func (tsuo *TFASettingsUpdateOne) SetNillablePhoneOtpAllowed(b *bool) *TFASettingsUpdateOne {
	if b != nil {
		tsuo.SetPhoneOtpAllowed(*b)
	}
	return tsuo
}

// ClearPhoneOtpAllowed clears the value of the "phone_otp_allowed" field.
func (tsuo *TFASettingsUpdateOne) ClearPhoneOtpAllowed() *TFASettingsUpdateOne {
	tsuo.mutation.ClearPhoneOtpAllowed()
	return tsuo
}

// SetEmailOtpAllowed sets the "email_otp_allowed" field.
func (tsuo *TFASettingsUpdateOne) SetEmailOtpAllowed(b bool) *TFASettingsUpdateOne {
	tsuo.mutation.SetEmailOtpAllowed(b)
	return tsuo
}

// SetNillableEmailOtpAllowed sets the "email_otp_allowed" field if the given value is not nil.
func (tsuo *TFASettingsUpdateOne) SetNillableEmailOtpAllowed(b *bool) *TFASettingsUpdateOne {
	if b != nil {
		tsuo.SetEmailOtpAllowed(*b)
	}
	return tsuo
}

// ClearEmailOtpAllowed clears the value of the "email_otp_allowed" field.
func (tsuo *TFASettingsUpdateOne) ClearEmailOtpAllowed() *TFASettingsUpdateOne {
	tsuo.mutation.ClearEmailOtpAllowed()
	return tsuo
}

// SetTotpAllowed sets the "totp_allowed" field.
func (tsuo *TFASettingsUpdateOne) SetTotpAllowed(b bool) *TFASettingsUpdateOne {
	tsuo.mutation.SetTotpAllowed(b)
	return tsuo
}

// SetNillableTotpAllowed sets the "totp_allowed" field if the given value is not nil.
func (tsuo *TFASettingsUpdateOne) SetNillableTotpAllowed(b *bool) *TFASettingsUpdateOne {
	if b != nil {
		tsuo.SetTotpAllowed(*b)
	}
	return tsuo
}

// ClearTotpAllowed clears the value of the "totp_allowed" field.
func (tsuo *TFASettingsUpdateOne) ClearTotpAllowed() *TFASettingsUpdateOne {
	tsuo.mutation.ClearTotpAllowed()
	return tsuo
}

// SetOwner sets the "owner" edge to the User entity.
func (tsuo *TFASettingsUpdateOne) SetOwner(u *User) *TFASettingsUpdateOne {
	return tsuo.SetOwnerID(u.ID)
}

// Mutation returns the TFASettingsMutation object of the builder.
func (tsuo *TFASettingsUpdateOne) Mutation() *TFASettingsMutation {
	return tsuo.mutation
}

// ClearOwner clears the "owner" edge to the User entity.
func (tsuo *TFASettingsUpdateOne) ClearOwner() *TFASettingsUpdateOne {
	tsuo.mutation.ClearOwner()
	return tsuo
}

// Where appends a list predicates to the TFASettingsUpdate builder.
func (tsuo *TFASettingsUpdateOne) Where(ps ...predicate.TFASettings) *TFASettingsUpdateOne {
	tsuo.mutation.Where(ps...)
	return tsuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tsuo *TFASettingsUpdateOne) Select(field string, fields ...string) *TFASettingsUpdateOne {
	tsuo.fields = append([]string{field}, fields...)
	return tsuo
}

// Save executes the query and returns the updated TFASettings entity.
func (tsuo *TFASettingsUpdateOne) Save(ctx context.Context) (*TFASettings, error) {
	if err := tsuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tsuo.sqlSave, tsuo.mutation, tsuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tsuo *TFASettingsUpdateOne) SaveX(ctx context.Context) *TFASettings {
	node, err := tsuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tsuo *TFASettingsUpdateOne) Exec(ctx context.Context) error {
	_, err := tsuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tsuo *TFASettingsUpdateOne) ExecX(ctx context.Context) {
	if err := tsuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tsuo *TFASettingsUpdateOne) defaults() error {
	if _, ok := tsuo.mutation.UpdatedAt(); !ok && !tsuo.mutation.UpdatedAtCleared() {
		if tfasettings.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized tfasettings.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := tfasettings.UpdateDefaultUpdatedAt()
		tsuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

func (tsuo *TFASettingsUpdateOne) sqlSave(ctx context.Context) (_node *TFASettings, err error) {
	_spec := sqlgraph.NewUpdateSpec(tfasettings.Table, tfasettings.Columns, sqlgraph.NewFieldSpec(tfasettings.FieldID, field.TypeString))
	id, ok := tsuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "TFASettings.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tsuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tfasettings.FieldID)
		for _, f := range fields {
			if !tfasettings.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != tfasettings.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tsuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if tsuo.mutation.CreatedAtCleared() {
		_spec.ClearField(tfasettings.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := tsuo.mutation.UpdatedAt(); ok {
		_spec.SetField(tfasettings.FieldUpdatedAt, field.TypeTime, value)
	}
	if tsuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(tfasettings.FieldUpdatedAt, field.TypeTime)
	}
	if tsuo.mutation.CreatedByCleared() {
		_spec.ClearField(tfasettings.FieldCreatedBy, field.TypeString)
	}
	if value, ok := tsuo.mutation.UpdatedBy(); ok {
		_spec.SetField(tfasettings.FieldUpdatedBy, field.TypeString, value)
	}
	if tsuo.mutation.UpdatedByCleared() {
		_spec.ClearField(tfasettings.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := tsuo.mutation.DeletedAt(); ok {
		_spec.SetField(tfasettings.FieldDeletedAt, field.TypeTime, value)
	}
	if tsuo.mutation.DeletedAtCleared() {
		_spec.ClearField(tfasettings.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := tsuo.mutation.DeletedBy(); ok {
		_spec.SetField(tfasettings.FieldDeletedBy, field.TypeString, value)
	}
	if tsuo.mutation.DeletedByCleared() {
		_spec.ClearField(tfasettings.FieldDeletedBy, field.TypeString)
	}
	if value, ok := tsuo.mutation.TfaSecret(); ok {
		_spec.SetField(tfasettings.FieldTfaSecret, field.TypeString, value)
	}
	if tsuo.mutation.TfaSecretCleared() {
		_spec.ClearField(tfasettings.FieldTfaSecret, field.TypeString)
	}
	if value, ok := tsuo.mutation.Verified(); ok {
		_spec.SetField(tfasettings.FieldVerified, field.TypeBool, value)
	}
	if value, ok := tsuo.mutation.RecoveryCodes(); ok {
		_spec.SetField(tfasettings.FieldRecoveryCodes, field.TypeJSON, value)
	}
	if value, ok := tsuo.mutation.AppendedRecoveryCodes(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, tfasettings.FieldRecoveryCodes, value)
		})
	}
	if tsuo.mutation.RecoveryCodesCleared() {
		_spec.ClearField(tfasettings.FieldRecoveryCodes, field.TypeJSON)
	}
	if value, ok := tsuo.mutation.PhoneOtpAllowed(); ok {
		_spec.SetField(tfasettings.FieldPhoneOtpAllowed, field.TypeBool, value)
	}
	if tsuo.mutation.PhoneOtpAllowedCleared() {
		_spec.ClearField(tfasettings.FieldPhoneOtpAllowed, field.TypeBool)
	}
	if value, ok := tsuo.mutation.EmailOtpAllowed(); ok {
		_spec.SetField(tfasettings.FieldEmailOtpAllowed, field.TypeBool, value)
	}
	if tsuo.mutation.EmailOtpAllowedCleared() {
		_spec.ClearField(tfasettings.FieldEmailOtpAllowed, field.TypeBool)
	}
	if value, ok := tsuo.mutation.TotpAllowed(); ok {
		_spec.SetField(tfasettings.FieldTotpAllowed, field.TypeBool, value)
	}
	if tsuo.mutation.TotpAllowedCleared() {
		_spec.ClearField(tfasettings.FieldTotpAllowed, field.TypeBool)
	}
	if tsuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tfasettings.OwnerTable,
			Columns: []string{tfasettings.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tsuo.schemaConfig.TFASettings
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tsuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   tfasettings.OwnerTable,
			Columns: []string{tfasettings.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = tsuo.schemaConfig.TFASettings
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = tsuo.schemaConfig.TFASettings
	ctx = internal.NewSchemaConfigContext(ctx, tsuo.schemaConfig)
	_node = &TFASettings{config: tsuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tsuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tfasettings.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tsuo.mutation.done = true
	return _node, nil
}
