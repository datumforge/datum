// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/tier"
)

// TierCreate is the builder for creating a Tier entity.
type TierCreate struct {
	config
	mutation *TierMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (tc *TierCreate) SetCreatedAt(t time.Time) *TierCreate {
	tc.mutation.SetCreatedAt(t)
	return tc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tc *TierCreate) SetNillableCreatedAt(t *time.Time) *TierCreate {
	if t != nil {
		tc.SetCreatedAt(*t)
	}
	return tc
}

// SetUpdatedAt sets the "updated_at" field.
func (tc *TierCreate) SetUpdatedAt(t time.Time) *TierCreate {
	tc.mutation.SetUpdatedAt(t)
	return tc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tc *TierCreate) SetNillableUpdatedAt(t *time.Time) *TierCreate {
	if t != nil {
		tc.SetUpdatedAt(*t)
	}
	return tc
}

// SetCreatedBy sets the "created_by" field.
func (tc *TierCreate) SetCreatedBy(s string) *TierCreate {
	tc.mutation.SetCreatedBy(s)
	return tc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (tc *TierCreate) SetNillableCreatedBy(s *string) *TierCreate {
	if s != nil {
		tc.SetCreatedBy(*s)
	}
	return tc
}

// SetUpdatedBy sets the "updated_by" field.
func (tc *TierCreate) SetUpdatedBy(s string) *TierCreate {
	tc.mutation.SetUpdatedBy(s)
	return tc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (tc *TierCreate) SetNillableUpdatedBy(s *string) *TierCreate {
	if s != nil {
		tc.SetUpdatedBy(*s)
	}
	return tc
}

// SetDeletedAt sets the "deleted_at" field.
func (tc *TierCreate) SetDeletedAt(t time.Time) *TierCreate {
	tc.mutation.SetDeletedAt(t)
	return tc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (tc *TierCreate) SetNillableDeletedAt(t *time.Time) *TierCreate {
	if t != nil {
		tc.SetDeletedAt(*t)
	}
	return tc
}

// SetDeletedBy sets the "deleted_by" field.
func (tc *TierCreate) SetDeletedBy(s string) *TierCreate {
	tc.mutation.SetDeletedBy(s)
	return tc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (tc *TierCreate) SetNillableDeletedBy(s *string) *TierCreate {
	if s != nil {
		tc.SetDeletedBy(*s)
	}
	return tc
}

// SetOwnerID sets the "owner_id" field.
func (tc *TierCreate) SetOwnerID(s string) *TierCreate {
	tc.mutation.SetOwnerID(s)
	return tc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (tc *TierCreate) SetNillableOwnerID(s *string) *TierCreate {
	if s != nil {
		tc.SetOwnerID(*s)
	}
	return tc
}

// SetName sets the "name" field.
func (tc *TierCreate) SetName(s string) *TierCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TierCreate) SetDescription(s string) *TierCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tc *TierCreate) SetNillableDescription(s *string) *TierCreate {
	if s != nil {
		tc.SetDescription(*s)
	}
	return tc
}

// SetOrganizationID sets the "organization_id" field.
func (tc *TierCreate) SetOrganizationID(s string) *TierCreate {
	tc.mutation.SetOrganizationID(s)
	return tc
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (tc *TierCreate) SetNillableOrganizationID(s *string) *TierCreate {
	if s != nil {
		tc.SetOrganizationID(*s)
	}
	return tc
}

// SetID sets the "id" field.
func (tc *TierCreate) SetID(s string) *TierCreate {
	tc.mutation.SetID(s)
	return tc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (tc *TierCreate) SetNillableID(s *string) *TierCreate {
	if s != nil {
		tc.SetID(*s)
	}
	return tc
}

// SetOwner sets the "owner" edge to the Organization entity.
func (tc *TierCreate) SetOwner(o *Organization) *TierCreate {
	return tc.SetOwnerID(o.ID)
}

// Mutation returns the TierMutation object of the builder.
func (tc *TierCreate) Mutation() *TierMutation {
	return tc.mutation
}

// Save creates the Tier in the database.
func (tc *TierCreate) Save(ctx context.Context) (*Tier, error) {
	if err := tc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TierCreate) SaveX(ctx context.Context) *Tier {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TierCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TierCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TierCreate) defaults() error {
	if _, ok := tc.mutation.CreatedAt(); !ok {
		if tier.DefaultCreatedAt == nil {
			return fmt.Errorf("generated: uninitialized tier.DefaultCreatedAt (forgotten import generated/runtime?)")
		}
		v := tier.DefaultCreatedAt()
		tc.mutation.SetCreatedAt(v)
	}
	if _, ok := tc.mutation.UpdatedAt(); !ok {
		if tier.DefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized tier.DefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := tier.DefaultUpdatedAt()
		tc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tc.mutation.ID(); !ok {
		if tier.DefaultID == nil {
			return fmt.Errorf("generated: uninitialized tier.DefaultID (forgotten import generated/runtime?)")
		}
		v := tier.DefaultID()
		tc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (tc *TierCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "Tier.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := tier.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`generated: validator failed for field "Tier.name": %w`, err)}
		}
	}
	return nil
}

func (tc *TierCreate) sqlSave(ctx context.Context) (*Tier, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Tier.ID type: %T", _spec.ID.Value)
		}
	}
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TierCreate) createSpec() (*Tier, *sqlgraph.CreateSpec) {
	var (
		_node = &Tier{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(tier.Table, sqlgraph.NewFieldSpec(tier.FieldID, field.TypeString))
	)
	_spec.Schema = tc.schemaConfig.Tier
	if id, ok := tc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tc.mutation.CreatedAt(); ok {
		_spec.SetField(tier.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := tc.mutation.UpdatedAt(); ok {
		_spec.SetField(tier.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tc.mutation.CreatedBy(); ok {
		_spec.SetField(tier.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := tc.mutation.UpdatedBy(); ok {
		_spec.SetField(tier.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := tc.mutation.DeletedAt(); ok {
		_spec.SetField(tier.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := tc.mutation.DeletedBy(); ok {
		_spec.SetField(tier.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(tier.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(tier.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.OrganizationID(); ok {
		_spec.SetField(tier.FieldOrganizationID, field.TypeString, value)
		_node.OrganizationID = value
	}
	if nodes := tc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   tier.OwnerTable,
			Columns: []string{tier.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = tc.schemaConfig.Tier
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.OwnerID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TierCreateBulk is the builder for creating many Tier entities in bulk.
type TierCreateBulk struct {
	config
	err      error
	builders []*TierCreate
}

// Save creates the Tier entities in the database.
func (tcb *TierCreateBulk) Save(ctx context.Context) ([]*Tier, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Tier, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TierMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TierCreateBulk) SaveX(ctx context.Context) []*Tier {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TierCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TierCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
