// Code generated by ent, DO NOT EDIT.

package generated

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/datumforge/datum/internal/ent/generated/user"
	"github.com/datumforge/datum/internal/ent/generated/usersetting"
)

// User is the model entity for the User schema.
type User struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// UpdatedBy holds the value of the "updated_by" field.
	UpdatedBy string `json:"updated_by,omitempty"`
	// DeletedAt holds the value of the "deleted_at" field.
	DeletedAt time.Time `json:"deleted_at,omitempty"`
	// DeletedBy holds the value of the "deleted_by" field.
	DeletedBy string `json:"deleted_by,omitempty"`
	// Email holds the value of the "email" field.
	Email string `json:"email,omitempty"`
	// FirstName holds the value of the "first_name" field.
	FirstName string `json:"first_name,omitempty"`
	// LastName holds the value of the "last_name" field.
	LastName string `json:"last_name,omitempty"`
	// The user's displayed 'friendly' name
	DisplayName string `json:"display_name,omitempty"`
	// URL of the user's remote avatar
	AvatarRemoteURL *string `json:"avatar_remote_url,omitempty"`
	// The user's local avatar file
	AvatarLocalFile *string `json:"avatar_local_file,omitempty"`
	// The time the user's (local) avatar was last updated
	AvatarUpdatedAt *time.Time `json:"avatar_updated_at,omitempty"`
	// the time the user was last seen
	LastSeen *time.Time `json:"last_seen,omitempty"`
	// user password hash
	Password *string `json:"password,omitempty"`
	// the Subject of the user JWT
	Sub string `json:"sub,omitempty"`
	// whether the user uses oauth for login or not
	Oauth bool `json:"oauth,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the UserQuery when eager-loading is set.
	Edges        UserEdges `json:"edges"`
	selectValues sql.SelectValues
}

// UserEdges holds the relations/edges for other nodes in the graph.
type UserEdges struct {
	// Organizations holds the value of the organizations edge.
	Organizations []*Organization `json:"organizations,omitempty"`
	// Sessions holds the value of the sessions edge.
	Sessions []*Session `json:"sessions,omitempty"`
	// Groups holds the value of the groups edge.
	Groups []*Group `json:"groups,omitempty"`
	// PersonalAccessTokens holds the value of the personal_access_tokens edge.
	PersonalAccessTokens []*PersonalAccessToken `json:"personal_access_tokens,omitempty"`
	// Setting holds the value of the setting edge.
	Setting *UserSetting `json:"setting,omitempty"`
	// Roles holds the value of the roles edge.
	Roles []*Role `json:"roles,omitempty"`
	// UserRole holds the value of the user_role edge.
	UserRole []*UserRole `json:"user_role,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [7]bool
	// totalCount holds the count of the edges above.
	totalCount [7]map[string]int

	namedOrganizations        map[string][]*Organization
	namedSessions             map[string][]*Session
	namedGroups               map[string][]*Group
	namedPersonalAccessTokens map[string][]*PersonalAccessToken
	namedRoles                map[string][]*Role
	namedUserRole             map[string][]*UserRole
}

// OrganizationsOrErr returns the Organizations value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) OrganizationsOrErr() ([]*Organization, error) {
	if e.loadedTypes[0] {
		return e.Organizations, nil
	}
	return nil, &NotLoadedError{edge: "organizations"}
}

// SessionsOrErr returns the Sessions value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) SessionsOrErr() ([]*Session, error) {
	if e.loadedTypes[1] {
		return e.Sessions, nil
	}
	return nil, &NotLoadedError{edge: "sessions"}
}

// GroupsOrErr returns the Groups value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) GroupsOrErr() ([]*Group, error) {
	if e.loadedTypes[2] {
		return e.Groups, nil
	}
	return nil, &NotLoadedError{edge: "groups"}
}

// PersonalAccessTokensOrErr returns the PersonalAccessTokens value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) PersonalAccessTokensOrErr() ([]*PersonalAccessToken, error) {
	if e.loadedTypes[3] {
		return e.PersonalAccessTokens, nil
	}
	return nil, &NotLoadedError{edge: "personal_access_tokens"}
}

// SettingOrErr returns the Setting value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e UserEdges) SettingOrErr() (*UserSetting, error) {
	if e.loadedTypes[4] {
		if e.Setting == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: usersetting.Label}
		}
		return e.Setting, nil
	}
	return nil, &NotLoadedError{edge: "setting"}
}

// RolesOrErr returns the Roles value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) RolesOrErr() ([]*Role, error) {
	if e.loadedTypes[5] {
		return e.Roles, nil
	}
	return nil, &NotLoadedError{edge: "roles"}
}

// UserRoleOrErr returns the UserRole value or an error if the edge
// was not loaded in eager-loading.
func (e UserEdges) UserRoleOrErr() ([]*UserRole, error) {
	if e.loadedTypes[6] {
		return e.UserRole, nil
	}
	return nil, &NotLoadedError{edge: "user_role"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*User) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case user.FieldOauth:
			values[i] = new(sql.NullBool)
		case user.FieldID, user.FieldCreatedBy, user.FieldUpdatedBy, user.FieldDeletedBy, user.FieldEmail, user.FieldFirstName, user.FieldLastName, user.FieldDisplayName, user.FieldAvatarRemoteURL, user.FieldAvatarLocalFile, user.FieldPassword, user.FieldSub:
			values[i] = new(sql.NullString)
		case user.FieldCreatedAt, user.FieldUpdatedAt, user.FieldDeletedAt, user.FieldAvatarUpdatedAt, user.FieldLastSeen:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the User fields.
func (u *User) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case user.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				u.ID = value.String
			}
		case user.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				u.CreatedAt = value.Time
			}
		case user.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				u.UpdatedAt = value.Time
			}
		case user.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				u.CreatedBy = value.String
			}
		case user.FieldUpdatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field updated_by", values[i])
			} else if value.Valid {
				u.UpdatedBy = value.String
			}
		case user.FieldDeletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_at", values[i])
			} else if value.Valid {
				u.DeletedAt = value.Time
			}
		case user.FieldDeletedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field deleted_by", values[i])
			} else if value.Valid {
				u.DeletedBy = value.String
			}
		case user.FieldEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field email", values[i])
			} else if value.Valid {
				u.Email = value.String
			}
		case user.FieldFirstName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field first_name", values[i])
			} else if value.Valid {
				u.FirstName = value.String
			}
		case user.FieldLastName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field last_name", values[i])
			} else if value.Valid {
				u.LastName = value.String
			}
		case user.FieldDisplayName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field display_name", values[i])
			} else if value.Valid {
				u.DisplayName = value.String
			}
		case user.FieldAvatarRemoteURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_remote_url", values[i])
			} else if value.Valid {
				u.AvatarRemoteURL = new(string)
				*u.AvatarRemoteURL = value.String
			}
		case user.FieldAvatarLocalFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_local_file", values[i])
			} else if value.Valid {
				u.AvatarLocalFile = new(string)
				*u.AvatarLocalFile = value.String
			}
		case user.FieldAvatarUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field avatar_updated_at", values[i])
			} else if value.Valid {
				u.AvatarUpdatedAt = new(time.Time)
				*u.AvatarUpdatedAt = value.Time
			}
		case user.FieldLastSeen:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_seen", values[i])
			} else if value.Valid {
				u.LastSeen = new(time.Time)
				*u.LastSeen = value.Time
			}
		case user.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				u.Password = new(string)
				*u.Password = value.String
			}
		case user.FieldSub:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sub", values[i])
			} else if value.Valid {
				u.Sub = value.String
			}
		case user.FieldOauth:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field oauth", values[i])
			} else if value.Valid {
				u.Oauth = value.Bool
			}
		default:
			u.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the User.
// This includes values selected through modifiers, order, etc.
func (u *User) Value(name string) (ent.Value, error) {
	return u.selectValues.Get(name)
}

// QueryOrganizations queries the "organizations" edge of the User entity.
func (u *User) QueryOrganizations() *OrganizationQuery {
	return NewUserClient(u.config).QueryOrganizations(u)
}

// QuerySessions queries the "sessions" edge of the User entity.
func (u *User) QuerySessions() *SessionQuery {
	return NewUserClient(u.config).QuerySessions(u)
}

// QueryGroups queries the "groups" edge of the User entity.
func (u *User) QueryGroups() *GroupQuery {
	return NewUserClient(u.config).QueryGroups(u)
}

// QueryPersonalAccessTokens queries the "personal_access_tokens" edge of the User entity.
func (u *User) QueryPersonalAccessTokens() *PersonalAccessTokenQuery {
	return NewUserClient(u.config).QueryPersonalAccessTokens(u)
}

// QuerySetting queries the "setting" edge of the User entity.
func (u *User) QuerySetting() *UserSettingQuery {
	return NewUserClient(u.config).QuerySetting(u)
}

// QueryRoles queries the "roles" edge of the User entity.
func (u *User) QueryRoles() *RoleQuery {
	return NewUserClient(u.config).QueryRoles(u)
}

// QueryUserRole queries the "user_role" edge of the User entity.
func (u *User) QueryUserRole() *UserRoleQuery {
	return NewUserClient(u.config).QueryUserRole(u)
}

// Update returns a builder for updating this User.
// Note that you need to call User.Unwrap() before calling this method if this User
// was returned from a transaction, and the transaction was committed or rolled back.
func (u *User) Update() *UserUpdateOne {
	return NewUserClient(u.config).UpdateOne(u)
}

// Unwrap unwraps the User entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (u *User) Unwrap() *User {
	_tx, ok := u.config.driver.(*txDriver)
	if !ok {
		panic("generated: User is not a transactional entity")
	}
	u.config.driver = _tx.drv
	return u
}

// String implements the fmt.Stringer.
func (u *User) String() string {
	var builder strings.Builder
	builder.WriteString("User(")
	builder.WriteString(fmt.Sprintf("id=%v, ", u.ID))
	builder.WriteString("created_at=")
	builder.WriteString(u.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(u.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(u.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("updated_by=")
	builder.WriteString(u.UpdatedBy)
	builder.WriteString(", ")
	builder.WriteString("deleted_at=")
	builder.WriteString(u.DeletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("deleted_by=")
	builder.WriteString(u.DeletedBy)
	builder.WriteString(", ")
	builder.WriteString("email=")
	builder.WriteString(u.Email)
	builder.WriteString(", ")
	builder.WriteString("first_name=")
	builder.WriteString(u.FirstName)
	builder.WriteString(", ")
	builder.WriteString("last_name=")
	builder.WriteString(u.LastName)
	builder.WriteString(", ")
	builder.WriteString("display_name=")
	builder.WriteString(u.DisplayName)
	builder.WriteString(", ")
	if v := u.AvatarRemoteURL; v != nil {
		builder.WriteString("avatar_remote_url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.AvatarLocalFile; v != nil {
		builder.WriteString("avatar_local_file=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := u.AvatarUpdatedAt; v != nil {
		builder.WriteString("avatar_updated_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.LastSeen; v != nil {
		builder.WriteString("last_seen=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := u.Password; v != nil {
		builder.WriteString("password=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	builder.WriteString("sub=")
	builder.WriteString(u.Sub)
	builder.WriteString(", ")
	builder.WriteString("oauth=")
	builder.WriteString(fmt.Sprintf("%v", u.Oauth))
	builder.WriteByte(')')
	return builder.String()
}

// NamedOrganizations returns the Organizations named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedOrganizations(name string) ([]*Organization, error) {
	if u.Edges.namedOrganizations == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedOrganizations[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedOrganizations(name string, edges ...*Organization) {
	if u.Edges.namedOrganizations == nil {
		u.Edges.namedOrganizations = make(map[string][]*Organization)
	}
	if len(edges) == 0 {
		u.Edges.namedOrganizations[name] = []*Organization{}
	} else {
		u.Edges.namedOrganizations[name] = append(u.Edges.namedOrganizations[name], edges...)
	}
}

// NamedSessions returns the Sessions named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedSessions(name string) ([]*Session, error) {
	if u.Edges.namedSessions == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedSessions[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedSessions(name string, edges ...*Session) {
	if u.Edges.namedSessions == nil {
		u.Edges.namedSessions = make(map[string][]*Session)
	}
	if len(edges) == 0 {
		u.Edges.namedSessions[name] = []*Session{}
	} else {
		u.Edges.namedSessions[name] = append(u.Edges.namedSessions[name], edges...)
	}
}

// NamedGroups returns the Groups named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedGroups(name string) ([]*Group, error) {
	if u.Edges.namedGroups == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedGroups[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedGroups(name string, edges ...*Group) {
	if u.Edges.namedGroups == nil {
		u.Edges.namedGroups = make(map[string][]*Group)
	}
	if len(edges) == 0 {
		u.Edges.namedGroups[name] = []*Group{}
	} else {
		u.Edges.namedGroups[name] = append(u.Edges.namedGroups[name], edges...)
	}
}

// NamedPersonalAccessTokens returns the PersonalAccessTokens named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedPersonalAccessTokens(name string) ([]*PersonalAccessToken, error) {
	if u.Edges.namedPersonalAccessTokens == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedPersonalAccessTokens[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedPersonalAccessTokens(name string, edges ...*PersonalAccessToken) {
	if u.Edges.namedPersonalAccessTokens == nil {
		u.Edges.namedPersonalAccessTokens = make(map[string][]*PersonalAccessToken)
	}
	if len(edges) == 0 {
		u.Edges.namedPersonalAccessTokens[name] = []*PersonalAccessToken{}
	} else {
		u.Edges.namedPersonalAccessTokens[name] = append(u.Edges.namedPersonalAccessTokens[name], edges...)
	}
}

// NamedRoles returns the Roles named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedRoles(name string) ([]*Role, error) {
	if u.Edges.namedRoles == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedRoles[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedRoles(name string, edges ...*Role) {
	if u.Edges.namedRoles == nil {
		u.Edges.namedRoles = make(map[string][]*Role)
	}
	if len(edges) == 0 {
		u.Edges.namedRoles[name] = []*Role{}
	} else {
		u.Edges.namedRoles[name] = append(u.Edges.namedRoles[name], edges...)
	}
}

// NamedUserRole returns the UserRole named value or an error if the edge was not
// loaded in eager-loading with this name.
func (u *User) NamedUserRole(name string) ([]*UserRole, error) {
	if u.Edges.namedUserRole == nil {
		return nil, &NotLoadedError{edge: name}
	}
	nodes, ok := u.Edges.namedUserRole[name]
	if !ok {
		return nil, &NotLoadedError{edge: name}
	}
	return nodes, nil
}

func (u *User) appendNamedUserRole(name string, edges ...*UserRole) {
	if u.Edges.namedUserRole == nil {
		u.Edges.namedUserRole = make(map[string][]*UserRole)
	}
	if len(edges) == 0 {
		u.Edges.namedUserRole[name] = []*UserRole{}
	} else {
		u.Edges.namedUserRole[name] = append(u.Edges.namedUserRole[name], edges...)
	}
}

// Users is a parsable slice of User.
type Users []*User
