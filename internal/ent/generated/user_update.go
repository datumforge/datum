// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/enums"
	"github.com/datumforge/datum/internal/ent/generated/emailverificationtoken"
	"github.com/datumforge/datum/internal/ent/generated/group"
	"github.com/datumforge/datum/internal/ent/generated/groupmembership"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/orgmembership"
	"github.com/datumforge/datum/internal/ent/generated/passwordresettoken"
	"github.com/datumforge/datum/internal/ent/generated/personalaccesstoken"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/datumforge/datum/internal/ent/generated/user"
	"github.com/datumforge/datum/internal/ent/generated/usersetting"
	"github.com/datumforge/datum/internal/ent/generated/webauthn"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (uu *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	uu.mutation.Where(ps...)
	return uu
}

// SetUpdatedAt sets the "updated_at" field.
func (uu *UserUpdate) SetUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetUpdatedAt(t)
	return uu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uu *UserUpdate) ClearUpdatedAt() *UserUpdate {
	uu.mutation.ClearUpdatedAt()
	return uu
}

// SetUpdatedBy sets the "updated_by" field.
func (uu *UserUpdate) SetUpdatedBy(s string) *UserUpdate {
	uu.mutation.SetUpdatedBy(s)
	return uu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uu *UserUpdate) SetNillableUpdatedBy(s *string) *UserUpdate {
	if s != nil {
		uu.SetUpdatedBy(*s)
	}
	return uu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uu *UserUpdate) ClearUpdatedBy() *UserUpdate {
	uu.mutation.ClearUpdatedBy()
	return uu
}

// SetDeletedAt sets the "deleted_at" field.
func (uu *UserUpdate) SetDeletedAt(t time.Time) *UserUpdate {
	uu.mutation.SetDeletedAt(t)
	return uu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedAt(t *time.Time) *UserUpdate {
	if t != nil {
		uu.SetDeletedAt(*t)
	}
	return uu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uu *UserUpdate) ClearDeletedAt() *UserUpdate {
	uu.mutation.ClearDeletedAt()
	return uu
}

// SetDeletedBy sets the "deleted_by" field.
func (uu *UserUpdate) SetDeletedBy(s string) *UserUpdate {
	uu.mutation.SetDeletedBy(s)
	return uu
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDeletedBy(s *string) *UserUpdate {
	if s != nil {
		uu.SetDeletedBy(*s)
	}
	return uu
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (uu *UserUpdate) ClearDeletedBy() *UserUpdate {
	uu.mutation.ClearDeletedBy()
	return uu
}

// SetEmail sets the "email" field.
func (uu *UserUpdate) SetEmail(s string) *UserUpdate {
	uu.mutation.SetEmail(s)
	return uu
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uu *UserUpdate) SetNillableEmail(s *string) *UserUpdate {
	if s != nil {
		uu.SetEmail(*s)
	}
	return uu
}

// SetFirstName sets the "first_name" field.
func (uu *UserUpdate) SetFirstName(s string) *UserUpdate {
	uu.mutation.SetFirstName(s)
	return uu
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableFirstName(s *string) *UserUpdate {
	if s != nil {
		uu.SetFirstName(*s)
	}
	return uu
}

// SetLastName sets the "last_name" field.
func (uu *UserUpdate) SetLastName(s string) *UserUpdate {
	uu.mutation.SetLastName(s)
	return uu
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableLastName(s *string) *UserUpdate {
	if s != nil {
		uu.SetLastName(*s)
	}
	return uu
}

// SetDisplayName sets the "display_name" field.
func (uu *UserUpdate) SetDisplayName(s string) *UserUpdate {
	uu.mutation.SetDisplayName(s)
	return uu
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (uu *UserUpdate) SetNillableDisplayName(s *string) *UserUpdate {
	if s != nil {
		uu.SetDisplayName(*s)
	}
	return uu
}

// SetAvatarRemoteURL sets the "avatar_remote_url" field.
func (uu *UserUpdate) SetAvatarRemoteURL(s string) *UserUpdate {
	uu.mutation.SetAvatarRemoteURL(s)
	return uu
}

// SetNillableAvatarRemoteURL sets the "avatar_remote_url" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatarRemoteURL(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatarRemoteURL(*s)
	}
	return uu
}

// ClearAvatarRemoteURL clears the value of the "avatar_remote_url" field.
func (uu *UserUpdate) ClearAvatarRemoteURL() *UserUpdate {
	uu.mutation.ClearAvatarRemoteURL()
	return uu
}

// SetAvatarLocalFile sets the "avatar_local_file" field.
func (uu *UserUpdate) SetAvatarLocalFile(s string) *UserUpdate {
	uu.mutation.SetAvatarLocalFile(s)
	return uu
}

// SetNillableAvatarLocalFile sets the "avatar_local_file" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAvatarLocalFile(s *string) *UserUpdate {
	if s != nil {
		uu.SetAvatarLocalFile(*s)
	}
	return uu
}

// ClearAvatarLocalFile clears the value of the "avatar_local_file" field.
func (uu *UserUpdate) ClearAvatarLocalFile() *UserUpdate {
	uu.mutation.ClearAvatarLocalFile()
	return uu
}

// SetAvatarUpdatedAt sets the "avatar_updated_at" field.
func (uu *UserUpdate) SetAvatarUpdatedAt(t time.Time) *UserUpdate {
	uu.mutation.SetAvatarUpdatedAt(t)
	return uu
}

// ClearAvatarUpdatedAt clears the value of the "avatar_updated_at" field.
func (uu *UserUpdate) ClearAvatarUpdatedAt() *UserUpdate {
	uu.mutation.ClearAvatarUpdatedAt()
	return uu
}

// SetLastSeen sets the "last_seen" field.
func (uu *UserUpdate) SetLastSeen(t time.Time) *UserUpdate {
	uu.mutation.SetLastSeen(t)
	return uu
}

// ClearLastSeen clears the value of the "last_seen" field.
func (uu *UserUpdate) ClearLastSeen() *UserUpdate {
	uu.mutation.ClearLastSeen()
	return uu
}

// SetPassword sets the "password" field.
func (uu *UserUpdate) SetPassword(s string) *UserUpdate {
	uu.mutation.SetPassword(s)
	return uu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uu *UserUpdate) SetNillablePassword(s *string) *UserUpdate {
	if s != nil {
		uu.SetPassword(*s)
	}
	return uu
}

// ClearPassword clears the value of the "password" field.
func (uu *UserUpdate) ClearPassword() *UserUpdate {
	uu.mutation.ClearPassword()
	return uu
}

// SetSub sets the "sub" field.
func (uu *UserUpdate) SetSub(s string) *UserUpdate {
	uu.mutation.SetSub(s)
	return uu
}

// SetNillableSub sets the "sub" field if the given value is not nil.
func (uu *UserUpdate) SetNillableSub(s *string) *UserUpdate {
	if s != nil {
		uu.SetSub(*s)
	}
	return uu
}

// ClearSub clears the value of the "sub" field.
func (uu *UserUpdate) ClearSub() *UserUpdate {
	uu.mutation.ClearSub()
	return uu
}

// SetOauth sets the "oauth" field.
func (uu *UserUpdate) SetOauth(b bool) *UserUpdate {
	uu.mutation.SetOauth(b)
	return uu
}

// SetNillableOauth sets the "oauth" field if the given value is not nil.
func (uu *UserUpdate) SetNillableOauth(b *bool) *UserUpdate {
	if b != nil {
		uu.SetOauth(*b)
	}
	return uu
}

// SetAuthProvider sets the "auth_provider" field.
func (uu *UserUpdate) SetAuthProvider(ep enums.AuthProvider) *UserUpdate {
	uu.mutation.SetAuthProvider(ep)
	return uu
}

// SetNillableAuthProvider sets the "auth_provider" field if the given value is not nil.
func (uu *UserUpdate) SetNillableAuthProvider(ep *enums.AuthProvider) *UserUpdate {
	if ep != nil {
		uu.SetAuthProvider(*ep)
	}
	return uu
}

// SetTfaSecret sets the "tfa_secret" field.
func (uu *UserUpdate) SetTfaSecret(s string) *UserUpdate {
	uu.mutation.SetTfaSecret(s)
	return uu
}

// SetNillableTfaSecret sets the "tfa_secret" field if the given value is not nil.
func (uu *UserUpdate) SetNillableTfaSecret(s *string) *UserUpdate {
	if s != nil {
		uu.SetTfaSecret(*s)
	}
	return uu
}

// ClearTfaSecret clears the value of the "tfa_secret" field.
func (uu *UserUpdate) ClearTfaSecret() *UserUpdate {
	uu.mutation.ClearTfaSecret()
	return uu
}

// SetIsPhoneOtpAllowed sets the "is_phone_otp_allowed" field.
func (uu *UserUpdate) SetIsPhoneOtpAllowed(b bool) *UserUpdate {
	uu.mutation.SetIsPhoneOtpAllowed(b)
	return uu
}

// SetNillableIsPhoneOtpAllowed sets the "is_phone_otp_allowed" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsPhoneOtpAllowed(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsPhoneOtpAllowed(*b)
	}
	return uu
}

// ClearIsPhoneOtpAllowed clears the value of the "is_phone_otp_allowed" field.
func (uu *UserUpdate) ClearIsPhoneOtpAllowed() *UserUpdate {
	uu.mutation.ClearIsPhoneOtpAllowed()
	return uu
}

// SetIsEmailOtpAllowed sets the "is_email_otp_allowed" field.
func (uu *UserUpdate) SetIsEmailOtpAllowed(b bool) *UserUpdate {
	uu.mutation.SetIsEmailOtpAllowed(b)
	return uu
}

// SetNillableIsEmailOtpAllowed sets the "is_email_otp_allowed" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsEmailOtpAllowed(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsEmailOtpAllowed(*b)
	}
	return uu
}

// ClearIsEmailOtpAllowed clears the value of the "is_email_otp_allowed" field.
func (uu *UserUpdate) ClearIsEmailOtpAllowed() *UserUpdate {
	uu.mutation.ClearIsEmailOtpAllowed()
	return uu
}

// SetIsTotpAllowed sets the "is_totp_allowed" field.
func (uu *UserUpdate) SetIsTotpAllowed(b bool) *UserUpdate {
	uu.mutation.SetIsTotpAllowed(b)
	return uu
}

// SetNillableIsTotpAllowed sets the "is_totp_allowed" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsTotpAllowed(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsTotpAllowed(*b)
	}
	return uu
}

// ClearIsTotpAllowed clears the value of the "is_totp_allowed" field.
func (uu *UserUpdate) ClearIsTotpAllowed() *UserUpdate {
	uu.mutation.ClearIsTotpAllowed()
	return uu
}

// SetIsWebauthnAllowed sets the "is_webauthn_allowed" field.
func (uu *UserUpdate) SetIsWebauthnAllowed(b bool) *UserUpdate {
	uu.mutation.SetIsWebauthnAllowed(b)
	return uu
}

// SetNillableIsWebauthnAllowed sets the "is_webauthn_allowed" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsWebauthnAllowed(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsWebauthnAllowed(*b)
	}
	return uu
}

// ClearIsWebauthnAllowed clears the value of the "is_webauthn_allowed" field.
func (uu *UserUpdate) ClearIsWebauthnAllowed() *UserUpdate {
	uu.mutation.ClearIsWebauthnAllowed()
	return uu
}

// SetIsTfaEnabled sets the "is_tfa_enabled" field.
func (uu *UserUpdate) SetIsTfaEnabled(b bool) *UserUpdate {
	uu.mutation.SetIsTfaEnabled(b)
	return uu
}

// SetNillableIsTfaEnabled sets the "is_tfa_enabled" field if the given value is not nil.
func (uu *UserUpdate) SetNillableIsTfaEnabled(b *bool) *UserUpdate {
	if b != nil {
		uu.SetIsTfaEnabled(*b)
	}
	return uu
}

// ClearIsTfaEnabled clears the value of the "is_tfa_enabled" field.
func (uu *UserUpdate) ClearIsTfaEnabled() *UserUpdate {
	uu.mutation.ClearIsTfaEnabled()
	return uu
}

// AddPersonalAccessTokenIDs adds the "personal_access_tokens" edge to the PersonalAccessToken entity by IDs.
func (uu *UserUpdate) AddPersonalAccessTokenIDs(ids ...string) *UserUpdate {
	uu.mutation.AddPersonalAccessTokenIDs(ids...)
	return uu
}

// AddPersonalAccessTokens adds the "personal_access_tokens" edges to the PersonalAccessToken entity.
func (uu *UserUpdate) AddPersonalAccessTokens(p ...*PersonalAccessToken) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPersonalAccessTokenIDs(ids...)
}

// SetSettingID sets the "setting" edge to the UserSetting entity by ID.
func (uu *UserUpdate) SetSettingID(id string) *UserUpdate {
	uu.mutation.SetSettingID(id)
	return uu
}

// SetSetting sets the "setting" edge to the UserSetting entity.
func (uu *UserUpdate) SetSetting(u *UserSetting) *UserUpdate {
	return uu.SetSettingID(u.ID)
}

// AddEmailVerificationTokenIDs adds the "email_verification_tokens" edge to the EmailVerificationToken entity by IDs.
func (uu *UserUpdate) AddEmailVerificationTokenIDs(ids ...string) *UserUpdate {
	uu.mutation.AddEmailVerificationTokenIDs(ids...)
	return uu
}

// AddEmailVerificationTokens adds the "email_verification_tokens" edges to the EmailVerificationToken entity.
func (uu *UserUpdate) AddEmailVerificationTokens(e ...*EmailVerificationToken) *UserUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.AddEmailVerificationTokenIDs(ids...)
}

// AddPasswordResetTokenIDs adds the "password_reset_tokens" edge to the PasswordResetToken entity by IDs.
func (uu *UserUpdate) AddPasswordResetTokenIDs(ids ...string) *UserUpdate {
	uu.mutation.AddPasswordResetTokenIDs(ids...)
	return uu
}

// AddPasswordResetTokens adds the "password_reset_tokens" edges to the PasswordResetToken entity.
func (uu *UserUpdate) AddPasswordResetTokens(p ...*PasswordResetToken) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.AddPasswordResetTokenIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (uu *UserUpdate) AddGroupIDs(ids ...string) *UserUpdate {
	uu.mutation.AddGroupIDs(ids...)
	return uu
}

// AddGroups adds the "groups" edges to the Group entity.
func (uu *UserUpdate) AddGroups(g ...*Group) *UserUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGroupIDs(ids...)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (uu *UserUpdate) AddOrganizationIDs(ids ...string) *UserUpdate {
	uu.mutation.AddOrganizationIDs(ids...)
	return uu
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (uu *UserUpdate) AddOrganizations(o ...*Organization) *UserUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOrganizationIDs(ids...)
}

// AddWebauthnIDs adds the "webauthn" edge to the Webauthn entity by IDs.
func (uu *UserUpdate) AddWebauthnIDs(ids ...string) *UserUpdate {
	uu.mutation.AddWebauthnIDs(ids...)
	return uu
}

// AddWebauthn adds the "webauthn" edges to the Webauthn entity.
func (uu *UserUpdate) AddWebauthn(w ...*Webauthn) *UserUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.AddWebauthnIDs(ids...)
}

// AddGroupMembershipIDs adds the "group_memberships" edge to the GroupMembership entity by IDs.
func (uu *UserUpdate) AddGroupMembershipIDs(ids ...string) *UserUpdate {
	uu.mutation.AddGroupMembershipIDs(ids...)
	return uu
}

// AddGroupMemberships adds the "group_memberships" edges to the GroupMembership entity.
func (uu *UserUpdate) AddGroupMemberships(g ...*GroupMembership) *UserUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.AddGroupMembershipIDs(ids...)
}

// AddOrgMembershipIDs adds the "org_memberships" edge to the OrgMembership entity by IDs.
func (uu *UserUpdate) AddOrgMembershipIDs(ids ...string) *UserUpdate {
	uu.mutation.AddOrgMembershipIDs(ids...)
	return uu
}

// AddOrgMemberships adds the "org_memberships" edges to the OrgMembership entity.
func (uu *UserUpdate) AddOrgMemberships(o ...*OrgMembership) *UserUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.AddOrgMembershipIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uu *UserUpdate) Mutation() *UserMutation {
	return uu.mutation
}

// ClearPersonalAccessTokens clears all "personal_access_tokens" edges to the PersonalAccessToken entity.
func (uu *UserUpdate) ClearPersonalAccessTokens() *UserUpdate {
	uu.mutation.ClearPersonalAccessTokens()
	return uu
}

// RemovePersonalAccessTokenIDs removes the "personal_access_tokens" edge to PersonalAccessToken entities by IDs.
func (uu *UserUpdate) RemovePersonalAccessTokenIDs(ids ...string) *UserUpdate {
	uu.mutation.RemovePersonalAccessTokenIDs(ids...)
	return uu
}

// RemovePersonalAccessTokens removes "personal_access_tokens" edges to PersonalAccessToken entities.
func (uu *UserUpdate) RemovePersonalAccessTokens(p ...*PersonalAccessToken) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePersonalAccessTokenIDs(ids...)
}

// ClearSetting clears the "setting" edge to the UserSetting entity.
func (uu *UserUpdate) ClearSetting() *UserUpdate {
	uu.mutation.ClearSetting()
	return uu
}

// ClearEmailVerificationTokens clears all "email_verification_tokens" edges to the EmailVerificationToken entity.
func (uu *UserUpdate) ClearEmailVerificationTokens() *UserUpdate {
	uu.mutation.ClearEmailVerificationTokens()
	return uu
}

// RemoveEmailVerificationTokenIDs removes the "email_verification_tokens" edge to EmailVerificationToken entities by IDs.
func (uu *UserUpdate) RemoveEmailVerificationTokenIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveEmailVerificationTokenIDs(ids...)
	return uu
}

// RemoveEmailVerificationTokens removes "email_verification_tokens" edges to EmailVerificationToken entities.
func (uu *UserUpdate) RemoveEmailVerificationTokens(e ...*EmailVerificationToken) *UserUpdate {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uu.RemoveEmailVerificationTokenIDs(ids...)
}

// ClearPasswordResetTokens clears all "password_reset_tokens" edges to the PasswordResetToken entity.
func (uu *UserUpdate) ClearPasswordResetTokens() *UserUpdate {
	uu.mutation.ClearPasswordResetTokens()
	return uu
}

// RemovePasswordResetTokenIDs removes the "password_reset_tokens" edge to PasswordResetToken entities by IDs.
func (uu *UserUpdate) RemovePasswordResetTokenIDs(ids ...string) *UserUpdate {
	uu.mutation.RemovePasswordResetTokenIDs(ids...)
	return uu
}

// RemovePasswordResetTokens removes "password_reset_tokens" edges to PasswordResetToken entities.
func (uu *UserUpdate) RemovePasswordResetTokens(p ...*PasswordResetToken) *UserUpdate {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uu.RemovePasswordResetTokenIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (uu *UserUpdate) ClearGroups() *UserUpdate {
	uu.mutation.ClearGroups()
	return uu
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (uu *UserUpdate) RemoveGroupIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveGroupIDs(ids...)
	return uu
}

// RemoveGroups removes "groups" edges to Group entities.
func (uu *UserUpdate) RemoveGroups(g ...*Group) *UserUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGroupIDs(ids...)
}

// ClearOrganizations clears all "organizations" edges to the Organization entity.
func (uu *UserUpdate) ClearOrganizations() *UserUpdate {
	uu.mutation.ClearOrganizations()
	return uu
}

// RemoveOrganizationIDs removes the "organizations" edge to Organization entities by IDs.
func (uu *UserUpdate) RemoveOrganizationIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveOrganizationIDs(ids...)
	return uu
}

// RemoveOrganizations removes "organizations" edges to Organization entities.
func (uu *UserUpdate) RemoveOrganizations(o ...*Organization) *UserUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOrganizationIDs(ids...)
}

// ClearWebauthn clears all "webauthn" edges to the Webauthn entity.
func (uu *UserUpdate) ClearWebauthn() *UserUpdate {
	uu.mutation.ClearWebauthn()
	return uu
}

// RemoveWebauthnIDs removes the "webauthn" edge to Webauthn entities by IDs.
func (uu *UserUpdate) RemoveWebauthnIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveWebauthnIDs(ids...)
	return uu
}

// RemoveWebauthn removes "webauthn" edges to Webauthn entities.
func (uu *UserUpdate) RemoveWebauthn(w ...*Webauthn) *UserUpdate {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uu.RemoveWebauthnIDs(ids...)
}

// ClearGroupMemberships clears all "group_memberships" edges to the GroupMembership entity.
func (uu *UserUpdate) ClearGroupMemberships() *UserUpdate {
	uu.mutation.ClearGroupMemberships()
	return uu
}

// RemoveGroupMembershipIDs removes the "group_memberships" edge to GroupMembership entities by IDs.
func (uu *UserUpdate) RemoveGroupMembershipIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveGroupMembershipIDs(ids...)
	return uu
}

// RemoveGroupMemberships removes "group_memberships" edges to GroupMembership entities.
func (uu *UserUpdate) RemoveGroupMemberships(g ...*GroupMembership) *UserUpdate {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uu.RemoveGroupMembershipIDs(ids...)
}

// ClearOrgMemberships clears all "org_memberships" edges to the OrgMembership entity.
func (uu *UserUpdate) ClearOrgMemberships() *UserUpdate {
	uu.mutation.ClearOrgMemberships()
	return uu
}

// RemoveOrgMembershipIDs removes the "org_memberships" edge to OrgMembership entities by IDs.
func (uu *UserUpdate) RemoveOrgMembershipIDs(ids ...string) *UserUpdate {
	uu.mutation.RemoveOrgMembershipIDs(ids...)
	return uu
}

// RemoveOrgMemberships removes "org_memberships" edges to OrgMembership entities.
func (uu *UserUpdate) RemoveOrgMemberships(o ...*OrgMembership) *UserUpdate {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uu.RemoveOrgMembershipIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (uu *UserUpdate) Save(ctx context.Context) (int, error) {
	if err := uu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, uu.sqlSave, uu.mutation, uu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uu *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := uu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (uu *UserUpdate) Exec(ctx context.Context) error {
	_, err := uu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uu *UserUpdate) ExecX(ctx context.Context) {
	if err := uu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uu *UserUpdate) defaults() error {
	if _, ok := uu.mutation.UpdatedAt(); !ok && !uu.mutation.UpdatedAtCleared() {
		if user.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized user.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := user.UpdateDefaultUpdatedAt()
		uu.mutation.SetUpdatedAt(v)
	}
	if _, ok := uu.mutation.AvatarUpdatedAt(); !ok && !uu.mutation.AvatarUpdatedAtCleared() {
		if user.UpdateDefaultAvatarUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized user.UpdateDefaultAvatarUpdatedAt (forgotten import generated/runtime?)")
		}
		v := user.UpdateDefaultAvatarUpdatedAt()
		uu.mutation.SetAvatarUpdatedAt(v)
	}
	if _, ok := uu.mutation.LastSeen(); !ok && !uu.mutation.LastSeenCleared() {
		if user.UpdateDefaultLastSeen == nil {
			return fmt.Errorf("generated: uninitialized user.UpdateDefaultLastSeen (forgotten import generated/runtime?)")
		}
		v := user.UpdateDefaultLastSeen()
		uu.mutation.SetLastSeen(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uu *UserUpdate) check() error {
	if v, ok := uu.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uu.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`generated: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`generated: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.DisplayName(); ok {
		if err := user.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "User.display_name": %w`, err)}
		}
	}
	if v, ok := uu.mutation.AvatarRemoteURL(); ok {
		if err := user.AvatarRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_remote_url", err: fmt.Errorf(`generated: validator failed for field "User.avatar_remote_url": %w`, err)}
		}
	}
	if v, ok := uu.mutation.AvatarLocalFile(); ok {
		if err := user.AvatarLocalFileValidator(v); err != nil {
			return &ValidationError{Name: "avatar_local_file", err: fmt.Errorf(`generated: validator failed for field "User.avatar_local_file": %w`, err)}
		}
	}
	if v, ok := uu.mutation.AuthProvider(); ok {
		if err := user.AuthProviderValidator(v); err != nil {
			return &ValidationError{Name: "auth_provider", err: fmt.Errorf(`generated: validator failed for field "User.auth_provider": %w`, err)}
		}
	}
	if _, ok := uu.mutation.SettingID(); uu.mutation.SettingCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "User.setting"`)
	}
	return nil
}

func (uu *UserUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := uu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	if ps := uu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uu.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if uu.mutation.CreatedByCleared() {
		_spec.ClearField(user.FieldCreatedBy, field.TypeString)
	}
	if value, ok := uu.mutation.UpdatedBy(); ok {
		_spec.SetField(user.FieldUpdatedBy, field.TypeString, value)
	}
	if uu.mutation.UpdatedByCleared() {
		_spec.ClearField(user.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := uu.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uu.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.DeletedBy(); ok {
		_spec.SetField(user.FieldDeletedBy, field.TypeString, value)
	}
	if uu.mutation.DeletedByCleared() {
		_spec.ClearField(user.FieldDeletedBy, field.TypeString)
	}
	if value, ok := uu.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uu.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uu.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uu.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := uu.mutation.AvatarRemoteURL(); ok {
		_spec.SetField(user.FieldAvatarRemoteURL, field.TypeString, value)
	}
	if uu.mutation.AvatarRemoteURLCleared() {
		_spec.ClearField(user.FieldAvatarRemoteURL, field.TypeString)
	}
	if value, ok := uu.mutation.AvatarLocalFile(); ok {
		_spec.SetField(user.FieldAvatarLocalFile, field.TypeString, value)
	}
	if uu.mutation.AvatarLocalFileCleared() {
		_spec.ClearField(user.FieldAvatarLocalFile, field.TypeString)
	}
	if value, ok := uu.mutation.AvatarUpdatedAt(); ok {
		_spec.SetField(user.FieldAvatarUpdatedAt, field.TypeTime, value)
	}
	if uu.mutation.AvatarUpdatedAtCleared() {
		_spec.ClearField(user.FieldAvatarUpdatedAt, field.TypeTime)
	}
	if value, ok := uu.mutation.LastSeen(); ok {
		_spec.SetField(user.FieldLastSeen, field.TypeTime, value)
	}
	if uu.mutation.LastSeenCleared() {
		_spec.ClearField(user.FieldLastSeen, field.TypeTime)
	}
	if value, ok := uu.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uu.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uu.mutation.Sub(); ok {
		_spec.SetField(user.FieldSub, field.TypeString, value)
	}
	if uu.mutation.SubCleared() {
		_spec.ClearField(user.FieldSub, field.TypeString)
	}
	if value, ok := uu.mutation.Oauth(); ok {
		_spec.SetField(user.FieldOauth, field.TypeBool, value)
	}
	if value, ok := uu.mutation.AuthProvider(); ok {
		_spec.SetField(user.FieldAuthProvider, field.TypeEnum, value)
	}
	if value, ok := uu.mutation.TfaSecret(); ok {
		_spec.SetField(user.FieldTfaSecret, field.TypeString, value)
	}
	if uu.mutation.TfaSecretCleared() {
		_spec.ClearField(user.FieldTfaSecret, field.TypeString)
	}
	if value, ok := uu.mutation.IsPhoneOtpAllowed(); ok {
		_spec.SetField(user.FieldIsPhoneOtpAllowed, field.TypeBool, value)
	}
	if uu.mutation.IsPhoneOtpAllowedCleared() {
		_spec.ClearField(user.FieldIsPhoneOtpAllowed, field.TypeBool)
	}
	if value, ok := uu.mutation.IsEmailOtpAllowed(); ok {
		_spec.SetField(user.FieldIsEmailOtpAllowed, field.TypeBool, value)
	}
	if uu.mutation.IsEmailOtpAllowedCleared() {
		_spec.ClearField(user.FieldIsEmailOtpAllowed, field.TypeBool)
	}
	if value, ok := uu.mutation.IsTotpAllowed(); ok {
		_spec.SetField(user.FieldIsTotpAllowed, field.TypeBool, value)
	}
	if uu.mutation.IsTotpAllowedCleared() {
		_spec.ClearField(user.FieldIsTotpAllowed, field.TypeBool)
	}
	if value, ok := uu.mutation.IsWebauthnAllowed(); ok {
		_spec.SetField(user.FieldIsWebauthnAllowed, field.TypeBool, value)
	}
	if uu.mutation.IsWebauthnAllowedCleared() {
		_spec.ClearField(user.FieldIsWebauthnAllowed, field.TypeBool)
	}
	if value, ok := uu.mutation.IsTfaEnabled(); ok {
		_spec.SetField(user.FieldIsTfaEnabled, field.TypeBool, value)
	}
	if uu.mutation.IsTfaEnabledCleared() {
		_spec.ClearField(user.FieldIsTfaEnabled, field.TypeBool)
	}
	if uu.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PersonalAccessTokensTable,
			Columns: []string{user.PersonalAccessTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.PersonalAccessToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPersonalAccessTokensIDs(); len(nodes) > 0 && !uu.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PersonalAccessTokensTable,
			Columns: []string{user.PersonalAccessTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.PersonalAccessToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PersonalAccessTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PersonalAccessTokensTable,
			Columns: []string{user.PersonalAccessTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.PersonalAccessToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SettingTable,
			Columns: []string{user.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.UserSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SettingTable,
			Columns: []string{user.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.UserSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.EmailVerificationTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailVerificationTokensTable,
			Columns: []string{user.EmailVerificationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailverificationtoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.EmailVerificationToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedEmailVerificationTokensIDs(); len(nodes) > 0 && !uu.mutation.EmailVerificationTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailVerificationTokensTable,
			Columns: []string{user.EmailVerificationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailverificationtoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.EmailVerificationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.EmailVerificationTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailVerificationTokensTable,
			Columns: []string{user.EmailVerificationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailverificationtoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.EmailVerificationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.PasswordResetTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordResetTokensTable,
			Columns: []string{user.PasswordResetTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordresettoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.PasswordResetToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedPasswordResetTokensIDs(); len(nodes) > 0 && !uu.mutation.PasswordResetTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordResetTokensTable,
			Columns: []string{user.PasswordResetTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordresettoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.PasswordResetToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.PasswordResetTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordResetTokensTable,
			Columns: []string{user.PasswordResetTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordresettoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.PasswordResetToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.GroupMembership
		createE := &GroupMembershipCreate{config: uu.config, mutation: newGroupMembershipMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !uu.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: uu.config, mutation: newGroupMembershipMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: uu.config, mutation: newGroupMembershipMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.OrgMembership
		createE := &OrgMembershipCreate{config: uu.config, mutation: newOrgMembershipMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOrganizationsIDs(); len(nodes) > 0 && !uu.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: uu.config, mutation: newOrgMembershipMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: uu.config, mutation: newOrgMembershipMutation(uu.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.WebauthnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnTable,
			Columns: []string{user.WebauthnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webauthn.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.Webauthn
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedWebauthnIDs(); len(nodes) > 0 && !uu.mutation.WebauthnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnTable,
			Columns: []string{user.WebauthnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webauthn.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.Webauthn
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.WebauthnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnTable,
			Columns: []string{user.WebauthnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webauthn.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.Webauthn
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.GroupMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.GroupMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedGroupMembershipsIDs(); len(nodes) > 0 && !uu.mutation.GroupMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.GroupMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uu.mutation.OrgMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgMembershipsTable,
			Columns: []string{user.OrgMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.OrgMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.RemovedOrgMembershipsIDs(); len(nodes) > 0 && !uu.mutation.OrgMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgMembershipsTable,
			Columns: []string{user.OrgMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uu.mutation.OrgMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgMembershipsTable,
			Columns: []string{user.OrgMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = uu.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = uu.schemaConfig.User
	ctx = internal.NewSchemaConfigContext(ctx, uu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, uu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	uu.mutation.done = true
	return n, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (uuo *UserUpdateOne) SetUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetUpdatedAt(t)
	return uuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (uuo *UserUpdateOne) ClearUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearUpdatedAt()
	return uuo
}

// SetUpdatedBy sets the "updated_by" field.
func (uuo *UserUpdateOne) SetUpdatedBy(s string) *UserUpdateOne {
	uuo.mutation.SetUpdatedBy(s)
	return uuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableUpdatedBy(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetUpdatedBy(*s)
	}
	return uuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (uuo *UserUpdateOne) ClearUpdatedBy() *UserUpdateOne {
	uuo.mutation.ClearUpdatedBy()
	return uuo
}

// SetDeletedAt sets the "deleted_at" field.
func (uuo *UserUpdateOne) SetDeletedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetDeletedAt(t)
	return uuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedAt(t *time.Time) *UserUpdateOne {
	if t != nil {
		uuo.SetDeletedAt(*t)
	}
	return uuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (uuo *UserUpdateOne) ClearDeletedAt() *UserUpdateOne {
	uuo.mutation.ClearDeletedAt()
	return uuo
}

// SetDeletedBy sets the "deleted_by" field.
func (uuo *UserUpdateOne) SetDeletedBy(s string) *UserUpdateOne {
	uuo.mutation.SetDeletedBy(s)
	return uuo
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDeletedBy(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDeletedBy(*s)
	}
	return uuo
}

// ClearDeletedBy clears the value of the "deleted_by" field.
func (uuo *UserUpdateOne) ClearDeletedBy() *UserUpdateOne {
	uuo.mutation.ClearDeletedBy()
	return uuo
}

// SetEmail sets the "email" field.
func (uuo *UserUpdateOne) SetEmail(s string) *UserUpdateOne {
	uuo.mutation.SetEmail(s)
	return uuo
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableEmail(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetEmail(*s)
	}
	return uuo
}

// SetFirstName sets the "first_name" field.
func (uuo *UserUpdateOne) SetFirstName(s string) *UserUpdateOne {
	uuo.mutation.SetFirstName(s)
	return uuo
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableFirstName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetFirstName(*s)
	}
	return uuo
}

// SetLastName sets the "last_name" field.
func (uuo *UserUpdateOne) SetLastName(s string) *UserUpdateOne {
	uuo.mutation.SetLastName(s)
	return uuo
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableLastName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetLastName(*s)
	}
	return uuo
}

// SetDisplayName sets the "display_name" field.
func (uuo *UserUpdateOne) SetDisplayName(s string) *UserUpdateOne {
	uuo.mutation.SetDisplayName(s)
	return uuo
}

// SetNillableDisplayName sets the "display_name" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableDisplayName(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetDisplayName(*s)
	}
	return uuo
}

// SetAvatarRemoteURL sets the "avatar_remote_url" field.
func (uuo *UserUpdateOne) SetAvatarRemoteURL(s string) *UserUpdateOne {
	uuo.mutation.SetAvatarRemoteURL(s)
	return uuo
}

// SetNillableAvatarRemoteURL sets the "avatar_remote_url" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatarRemoteURL(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatarRemoteURL(*s)
	}
	return uuo
}

// ClearAvatarRemoteURL clears the value of the "avatar_remote_url" field.
func (uuo *UserUpdateOne) ClearAvatarRemoteURL() *UserUpdateOne {
	uuo.mutation.ClearAvatarRemoteURL()
	return uuo
}

// SetAvatarLocalFile sets the "avatar_local_file" field.
func (uuo *UserUpdateOne) SetAvatarLocalFile(s string) *UserUpdateOne {
	uuo.mutation.SetAvatarLocalFile(s)
	return uuo
}

// SetNillableAvatarLocalFile sets the "avatar_local_file" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAvatarLocalFile(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetAvatarLocalFile(*s)
	}
	return uuo
}

// ClearAvatarLocalFile clears the value of the "avatar_local_file" field.
func (uuo *UserUpdateOne) ClearAvatarLocalFile() *UserUpdateOne {
	uuo.mutation.ClearAvatarLocalFile()
	return uuo
}

// SetAvatarUpdatedAt sets the "avatar_updated_at" field.
func (uuo *UserUpdateOne) SetAvatarUpdatedAt(t time.Time) *UserUpdateOne {
	uuo.mutation.SetAvatarUpdatedAt(t)
	return uuo
}

// ClearAvatarUpdatedAt clears the value of the "avatar_updated_at" field.
func (uuo *UserUpdateOne) ClearAvatarUpdatedAt() *UserUpdateOne {
	uuo.mutation.ClearAvatarUpdatedAt()
	return uuo
}

// SetLastSeen sets the "last_seen" field.
func (uuo *UserUpdateOne) SetLastSeen(t time.Time) *UserUpdateOne {
	uuo.mutation.SetLastSeen(t)
	return uuo
}

// ClearLastSeen clears the value of the "last_seen" field.
func (uuo *UserUpdateOne) ClearLastSeen() *UserUpdateOne {
	uuo.mutation.ClearLastSeen()
	return uuo
}

// SetPassword sets the "password" field.
func (uuo *UserUpdateOne) SetPassword(s string) *UserUpdateOne {
	uuo.mutation.SetPassword(s)
	return uuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillablePassword(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetPassword(*s)
	}
	return uuo
}

// ClearPassword clears the value of the "password" field.
func (uuo *UserUpdateOne) ClearPassword() *UserUpdateOne {
	uuo.mutation.ClearPassword()
	return uuo
}

// SetSub sets the "sub" field.
func (uuo *UserUpdateOne) SetSub(s string) *UserUpdateOne {
	uuo.mutation.SetSub(s)
	return uuo
}

// SetNillableSub sets the "sub" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableSub(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetSub(*s)
	}
	return uuo
}

// ClearSub clears the value of the "sub" field.
func (uuo *UserUpdateOne) ClearSub() *UserUpdateOne {
	uuo.mutation.ClearSub()
	return uuo
}

// SetOauth sets the "oauth" field.
func (uuo *UserUpdateOne) SetOauth(b bool) *UserUpdateOne {
	uuo.mutation.SetOauth(b)
	return uuo
}

// SetNillableOauth sets the "oauth" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableOauth(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetOauth(*b)
	}
	return uuo
}

// SetAuthProvider sets the "auth_provider" field.
func (uuo *UserUpdateOne) SetAuthProvider(ep enums.AuthProvider) *UserUpdateOne {
	uuo.mutation.SetAuthProvider(ep)
	return uuo
}

// SetNillableAuthProvider sets the "auth_provider" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableAuthProvider(ep *enums.AuthProvider) *UserUpdateOne {
	if ep != nil {
		uuo.SetAuthProvider(*ep)
	}
	return uuo
}

// SetTfaSecret sets the "tfa_secret" field.
func (uuo *UserUpdateOne) SetTfaSecret(s string) *UserUpdateOne {
	uuo.mutation.SetTfaSecret(s)
	return uuo
}

// SetNillableTfaSecret sets the "tfa_secret" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableTfaSecret(s *string) *UserUpdateOne {
	if s != nil {
		uuo.SetTfaSecret(*s)
	}
	return uuo
}

// ClearTfaSecret clears the value of the "tfa_secret" field.
func (uuo *UserUpdateOne) ClearTfaSecret() *UserUpdateOne {
	uuo.mutation.ClearTfaSecret()
	return uuo
}

// SetIsPhoneOtpAllowed sets the "is_phone_otp_allowed" field.
func (uuo *UserUpdateOne) SetIsPhoneOtpAllowed(b bool) *UserUpdateOne {
	uuo.mutation.SetIsPhoneOtpAllowed(b)
	return uuo
}

// SetNillableIsPhoneOtpAllowed sets the "is_phone_otp_allowed" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsPhoneOtpAllowed(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsPhoneOtpAllowed(*b)
	}
	return uuo
}

// ClearIsPhoneOtpAllowed clears the value of the "is_phone_otp_allowed" field.
func (uuo *UserUpdateOne) ClearIsPhoneOtpAllowed() *UserUpdateOne {
	uuo.mutation.ClearIsPhoneOtpAllowed()
	return uuo
}

// SetIsEmailOtpAllowed sets the "is_email_otp_allowed" field.
func (uuo *UserUpdateOne) SetIsEmailOtpAllowed(b bool) *UserUpdateOne {
	uuo.mutation.SetIsEmailOtpAllowed(b)
	return uuo
}

// SetNillableIsEmailOtpAllowed sets the "is_email_otp_allowed" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsEmailOtpAllowed(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsEmailOtpAllowed(*b)
	}
	return uuo
}

// ClearIsEmailOtpAllowed clears the value of the "is_email_otp_allowed" field.
func (uuo *UserUpdateOne) ClearIsEmailOtpAllowed() *UserUpdateOne {
	uuo.mutation.ClearIsEmailOtpAllowed()
	return uuo
}

// SetIsTotpAllowed sets the "is_totp_allowed" field.
func (uuo *UserUpdateOne) SetIsTotpAllowed(b bool) *UserUpdateOne {
	uuo.mutation.SetIsTotpAllowed(b)
	return uuo
}

// SetNillableIsTotpAllowed sets the "is_totp_allowed" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsTotpAllowed(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsTotpAllowed(*b)
	}
	return uuo
}

// ClearIsTotpAllowed clears the value of the "is_totp_allowed" field.
func (uuo *UserUpdateOne) ClearIsTotpAllowed() *UserUpdateOne {
	uuo.mutation.ClearIsTotpAllowed()
	return uuo
}

// SetIsWebauthnAllowed sets the "is_webauthn_allowed" field.
func (uuo *UserUpdateOne) SetIsWebauthnAllowed(b bool) *UserUpdateOne {
	uuo.mutation.SetIsWebauthnAllowed(b)
	return uuo
}

// SetNillableIsWebauthnAllowed sets the "is_webauthn_allowed" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsWebauthnAllowed(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsWebauthnAllowed(*b)
	}
	return uuo
}

// ClearIsWebauthnAllowed clears the value of the "is_webauthn_allowed" field.
func (uuo *UserUpdateOne) ClearIsWebauthnAllowed() *UserUpdateOne {
	uuo.mutation.ClearIsWebauthnAllowed()
	return uuo
}

// SetIsTfaEnabled sets the "is_tfa_enabled" field.
func (uuo *UserUpdateOne) SetIsTfaEnabled(b bool) *UserUpdateOne {
	uuo.mutation.SetIsTfaEnabled(b)
	return uuo
}

// SetNillableIsTfaEnabled sets the "is_tfa_enabled" field if the given value is not nil.
func (uuo *UserUpdateOne) SetNillableIsTfaEnabled(b *bool) *UserUpdateOne {
	if b != nil {
		uuo.SetIsTfaEnabled(*b)
	}
	return uuo
}

// ClearIsTfaEnabled clears the value of the "is_tfa_enabled" field.
func (uuo *UserUpdateOne) ClearIsTfaEnabled() *UserUpdateOne {
	uuo.mutation.ClearIsTfaEnabled()
	return uuo
}

// AddPersonalAccessTokenIDs adds the "personal_access_tokens" edge to the PersonalAccessToken entity by IDs.
func (uuo *UserUpdateOne) AddPersonalAccessTokenIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddPersonalAccessTokenIDs(ids...)
	return uuo
}

// AddPersonalAccessTokens adds the "personal_access_tokens" edges to the PersonalAccessToken entity.
func (uuo *UserUpdateOne) AddPersonalAccessTokens(p ...*PersonalAccessToken) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPersonalAccessTokenIDs(ids...)
}

// SetSettingID sets the "setting" edge to the UserSetting entity by ID.
func (uuo *UserUpdateOne) SetSettingID(id string) *UserUpdateOne {
	uuo.mutation.SetSettingID(id)
	return uuo
}

// SetSetting sets the "setting" edge to the UserSetting entity.
func (uuo *UserUpdateOne) SetSetting(u *UserSetting) *UserUpdateOne {
	return uuo.SetSettingID(u.ID)
}

// AddEmailVerificationTokenIDs adds the "email_verification_tokens" edge to the EmailVerificationToken entity by IDs.
func (uuo *UserUpdateOne) AddEmailVerificationTokenIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddEmailVerificationTokenIDs(ids...)
	return uuo
}

// AddEmailVerificationTokens adds the "email_verification_tokens" edges to the EmailVerificationToken entity.
func (uuo *UserUpdateOne) AddEmailVerificationTokens(e ...*EmailVerificationToken) *UserUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.AddEmailVerificationTokenIDs(ids...)
}

// AddPasswordResetTokenIDs adds the "password_reset_tokens" edge to the PasswordResetToken entity by IDs.
func (uuo *UserUpdateOne) AddPasswordResetTokenIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddPasswordResetTokenIDs(ids...)
	return uuo
}

// AddPasswordResetTokens adds the "password_reset_tokens" edges to the PasswordResetToken entity.
func (uuo *UserUpdateOne) AddPasswordResetTokens(p ...*PasswordResetToken) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.AddPasswordResetTokenIDs(ids...)
}

// AddGroupIDs adds the "groups" edge to the Group entity by IDs.
func (uuo *UserUpdateOne) AddGroupIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddGroupIDs(ids...)
	return uuo
}

// AddGroups adds the "groups" edges to the Group entity.
func (uuo *UserUpdateOne) AddGroups(g ...*Group) *UserUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGroupIDs(ids...)
}

// AddOrganizationIDs adds the "organizations" edge to the Organization entity by IDs.
func (uuo *UserUpdateOne) AddOrganizationIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddOrganizationIDs(ids...)
	return uuo
}

// AddOrganizations adds the "organizations" edges to the Organization entity.
func (uuo *UserUpdateOne) AddOrganizations(o ...*Organization) *UserUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOrganizationIDs(ids...)
}

// AddWebauthnIDs adds the "webauthn" edge to the Webauthn entity by IDs.
func (uuo *UserUpdateOne) AddWebauthnIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddWebauthnIDs(ids...)
	return uuo
}

// AddWebauthn adds the "webauthn" edges to the Webauthn entity.
func (uuo *UserUpdateOne) AddWebauthn(w ...*Webauthn) *UserUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.AddWebauthnIDs(ids...)
}

// AddGroupMembershipIDs adds the "group_memberships" edge to the GroupMembership entity by IDs.
func (uuo *UserUpdateOne) AddGroupMembershipIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddGroupMembershipIDs(ids...)
	return uuo
}

// AddGroupMemberships adds the "group_memberships" edges to the GroupMembership entity.
func (uuo *UserUpdateOne) AddGroupMemberships(g ...*GroupMembership) *UserUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.AddGroupMembershipIDs(ids...)
}

// AddOrgMembershipIDs adds the "org_memberships" edge to the OrgMembership entity by IDs.
func (uuo *UserUpdateOne) AddOrgMembershipIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.AddOrgMembershipIDs(ids...)
	return uuo
}

// AddOrgMemberships adds the "org_memberships" edges to the OrgMembership entity.
func (uuo *UserUpdateOne) AddOrgMemberships(o ...*OrgMembership) *UserUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.AddOrgMembershipIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (uuo *UserUpdateOne) Mutation() *UserMutation {
	return uuo.mutation
}

// ClearPersonalAccessTokens clears all "personal_access_tokens" edges to the PersonalAccessToken entity.
func (uuo *UserUpdateOne) ClearPersonalAccessTokens() *UserUpdateOne {
	uuo.mutation.ClearPersonalAccessTokens()
	return uuo
}

// RemovePersonalAccessTokenIDs removes the "personal_access_tokens" edge to PersonalAccessToken entities by IDs.
func (uuo *UserUpdateOne) RemovePersonalAccessTokenIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemovePersonalAccessTokenIDs(ids...)
	return uuo
}

// RemovePersonalAccessTokens removes "personal_access_tokens" edges to PersonalAccessToken entities.
func (uuo *UserUpdateOne) RemovePersonalAccessTokens(p ...*PersonalAccessToken) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePersonalAccessTokenIDs(ids...)
}

// ClearSetting clears the "setting" edge to the UserSetting entity.
func (uuo *UserUpdateOne) ClearSetting() *UserUpdateOne {
	uuo.mutation.ClearSetting()
	return uuo
}

// ClearEmailVerificationTokens clears all "email_verification_tokens" edges to the EmailVerificationToken entity.
func (uuo *UserUpdateOne) ClearEmailVerificationTokens() *UserUpdateOne {
	uuo.mutation.ClearEmailVerificationTokens()
	return uuo
}

// RemoveEmailVerificationTokenIDs removes the "email_verification_tokens" edge to EmailVerificationToken entities by IDs.
func (uuo *UserUpdateOne) RemoveEmailVerificationTokenIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveEmailVerificationTokenIDs(ids...)
	return uuo
}

// RemoveEmailVerificationTokens removes "email_verification_tokens" edges to EmailVerificationToken entities.
func (uuo *UserUpdateOne) RemoveEmailVerificationTokens(e ...*EmailVerificationToken) *UserUpdateOne {
	ids := make([]string, len(e))
	for i := range e {
		ids[i] = e[i].ID
	}
	return uuo.RemoveEmailVerificationTokenIDs(ids...)
}

// ClearPasswordResetTokens clears all "password_reset_tokens" edges to the PasswordResetToken entity.
func (uuo *UserUpdateOne) ClearPasswordResetTokens() *UserUpdateOne {
	uuo.mutation.ClearPasswordResetTokens()
	return uuo
}

// RemovePasswordResetTokenIDs removes the "password_reset_tokens" edge to PasswordResetToken entities by IDs.
func (uuo *UserUpdateOne) RemovePasswordResetTokenIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemovePasswordResetTokenIDs(ids...)
	return uuo
}

// RemovePasswordResetTokens removes "password_reset_tokens" edges to PasswordResetToken entities.
func (uuo *UserUpdateOne) RemovePasswordResetTokens(p ...*PasswordResetToken) *UserUpdateOne {
	ids := make([]string, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return uuo.RemovePasswordResetTokenIDs(ids...)
}

// ClearGroups clears all "groups" edges to the Group entity.
func (uuo *UserUpdateOne) ClearGroups() *UserUpdateOne {
	uuo.mutation.ClearGroups()
	return uuo
}

// RemoveGroupIDs removes the "groups" edge to Group entities by IDs.
func (uuo *UserUpdateOne) RemoveGroupIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveGroupIDs(ids...)
	return uuo
}

// RemoveGroups removes "groups" edges to Group entities.
func (uuo *UserUpdateOne) RemoveGroups(g ...*Group) *UserUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGroupIDs(ids...)
}

// ClearOrganizations clears all "organizations" edges to the Organization entity.
func (uuo *UserUpdateOne) ClearOrganizations() *UserUpdateOne {
	uuo.mutation.ClearOrganizations()
	return uuo
}

// RemoveOrganizationIDs removes the "organizations" edge to Organization entities by IDs.
func (uuo *UserUpdateOne) RemoveOrganizationIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveOrganizationIDs(ids...)
	return uuo
}

// RemoveOrganizations removes "organizations" edges to Organization entities.
func (uuo *UserUpdateOne) RemoveOrganizations(o ...*Organization) *UserUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOrganizationIDs(ids...)
}

// ClearWebauthn clears all "webauthn" edges to the Webauthn entity.
func (uuo *UserUpdateOne) ClearWebauthn() *UserUpdateOne {
	uuo.mutation.ClearWebauthn()
	return uuo
}

// RemoveWebauthnIDs removes the "webauthn" edge to Webauthn entities by IDs.
func (uuo *UserUpdateOne) RemoveWebauthnIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveWebauthnIDs(ids...)
	return uuo
}

// RemoveWebauthn removes "webauthn" edges to Webauthn entities.
func (uuo *UserUpdateOne) RemoveWebauthn(w ...*Webauthn) *UserUpdateOne {
	ids := make([]string, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return uuo.RemoveWebauthnIDs(ids...)
}

// ClearGroupMemberships clears all "group_memberships" edges to the GroupMembership entity.
func (uuo *UserUpdateOne) ClearGroupMemberships() *UserUpdateOne {
	uuo.mutation.ClearGroupMemberships()
	return uuo
}

// RemoveGroupMembershipIDs removes the "group_memberships" edge to GroupMembership entities by IDs.
func (uuo *UserUpdateOne) RemoveGroupMembershipIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveGroupMembershipIDs(ids...)
	return uuo
}

// RemoveGroupMemberships removes "group_memberships" edges to GroupMembership entities.
func (uuo *UserUpdateOne) RemoveGroupMemberships(g ...*GroupMembership) *UserUpdateOne {
	ids := make([]string, len(g))
	for i := range g {
		ids[i] = g[i].ID
	}
	return uuo.RemoveGroupMembershipIDs(ids...)
}

// ClearOrgMemberships clears all "org_memberships" edges to the OrgMembership entity.
func (uuo *UserUpdateOne) ClearOrgMemberships() *UserUpdateOne {
	uuo.mutation.ClearOrgMemberships()
	return uuo
}

// RemoveOrgMembershipIDs removes the "org_memberships" edge to OrgMembership entities by IDs.
func (uuo *UserUpdateOne) RemoveOrgMembershipIDs(ids ...string) *UserUpdateOne {
	uuo.mutation.RemoveOrgMembershipIDs(ids...)
	return uuo
}

// RemoveOrgMemberships removes "org_memberships" edges to OrgMembership entities.
func (uuo *UserUpdateOne) RemoveOrgMemberships(o ...*OrgMembership) *UserUpdateOne {
	ids := make([]string, len(o))
	for i := range o {
		ids[i] = o[i].ID
	}
	return uuo.RemoveOrgMembershipIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (uuo *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	uuo.mutation.Where(ps...)
	return uuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (uuo *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	uuo.fields = append([]string{field}, fields...)
	return uuo
}

// Save executes the query and returns the updated User entity.
func (uuo *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	if err := uuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, uuo.sqlSave, uuo.mutation, uuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (uuo *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := uuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (uuo *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := uuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (uuo *UserUpdateOne) ExecX(ctx context.Context) {
	if err := uuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (uuo *UserUpdateOne) defaults() error {
	if _, ok := uuo.mutation.UpdatedAt(); !ok && !uuo.mutation.UpdatedAtCleared() {
		if user.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized user.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := user.UpdateDefaultUpdatedAt()
		uuo.mutation.SetUpdatedAt(v)
	}
	if _, ok := uuo.mutation.AvatarUpdatedAt(); !ok && !uuo.mutation.AvatarUpdatedAtCleared() {
		if user.UpdateDefaultAvatarUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized user.UpdateDefaultAvatarUpdatedAt (forgotten import generated/runtime?)")
		}
		v := user.UpdateDefaultAvatarUpdatedAt()
		uuo.mutation.SetAvatarUpdatedAt(v)
	}
	if _, ok := uuo.mutation.LastSeen(); !ok && !uuo.mutation.LastSeenCleared() {
		if user.UpdateDefaultLastSeen == nil {
			return fmt.Errorf("generated: uninitialized user.UpdateDefaultLastSeen (forgotten import generated/runtime?)")
		}
		v := user.UpdateDefaultLastSeen()
		uuo.mutation.SetLastSeen(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (uuo *UserUpdateOne) check() error {
	if v, ok := uuo.mutation.Email(); ok {
		if err := user.EmailValidator(v); err != nil {
			return &ValidationError{Name: "email", err: fmt.Errorf(`generated: validator failed for field "User.email": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.FirstName(); ok {
		if err := user.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`generated: validator failed for field "User.first_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.LastName(); ok {
		if err := user.LastNameValidator(v); err != nil {
			return &ValidationError{Name: "last_name", err: fmt.Errorf(`generated: validator failed for field "User.last_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.DisplayName(); ok {
		if err := user.DisplayNameValidator(v); err != nil {
			return &ValidationError{Name: "display_name", err: fmt.Errorf(`generated: validator failed for field "User.display_name": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.AvatarRemoteURL(); ok {
		if err := user.AvatarRemoteURLValidator(v); err != nil {
			return &ValidationError{Name: "avatar_remote_url", err: fmt.Errorf(`generated: validator failed for field "User.avatar_remote_url": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.AvatarLocalFile(); ok {
		if err := user.AvatarLocalFileValidator(v); err != nil {
			return &ValidationError{Name: "avatar_local_file", err: fmt.Errorf(`generated: validator failed for field "User.avatar_local_file": %w`, err)}
		}
	}
	if v, ok := uuo.mutation.AuthProvider(); ok {
		if err := user.AuthProviderValidator(v); err != nil {
			return &ValidationError{Name: "auth_provider", err: fmt.Errorf(`generated: validator failed for field "User.auth_provider": %w`, err)}
		}
	}
	if _, ok := uuo.mutation.SettingID(); uuo.mutation.SettingCleared() && !ok {
		return errors.New(`generated: clearing a required unique edge "User.setting"`)
	}
	return nil
}

func (uuo *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	if err := uuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeString))
	id, ok := uuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := uuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := uuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if uuo.mutation.CreatedAtCleared() {
		_spec.ClearField(user.FieldCreatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.UpdatedAtCleared() {
		_spec.ClearField(user.FieldUpdatedAt, field.TypeTime)
	}
	if uuo.mutation.CreatedByCleared() {
		_spec.ClearField(user.FieldCreatedBy, field.TypeString)
	}
	if value, ok := uuo.mutation.UpdatedBy(); ok {
		_spec.SetField(user.FieldUpdatedBy, field.TypeString, value)
	}
	if uuo.mutation.UpdatedByCleared() {
		_spec.ClearField(user.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := uuo.mutation.DeletedAt(); ok {
		_spec.SetField(user.FieldDeletedAt, field.TypeTime, value)
	}
	if uuo.mutation.DeletedAtCleared() {
		_spec.ClearField(user.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.DeletedBy(); ok {
		_spec.SetField(user.FieldDeletedBy, field.TypeString, value)
	}
	if uuo.mutation.DeletedByCleared() {
		_spec.ClearField(user.FieldDeletedBy, field.TypeString)
	}
	if value, ok := uuo.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := uuo.mutation.FirstName(); ok {
		_spec.SetField(user.FieldFirstName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.LastName(); ok {
		_spec.SetField(user.FieldLastName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.DisplayName(); ok {
		_spec.SetField(user.FieldDisplayName, field.TypeString, value)
	}
	if value, ok := uuo.mutation.AvatarRemoteURL(); ok {
		_spec.SetField(user.FieldAvatarRemoteURL, field.TypeString, value)
	}
	if uuo.mutation.AvatarRemoteURLCleared() {
		_spec.ClearField(user.FieldAvatarRemoteURL, field.TypeString)
	}
	if value, ok := uuo.mutation.AvatarLocalFile(); ok {
		_spec.SetField(user.FieldAvatarLocalFile, field.TypeString, value)
	}
	if uuo.mutation.AvatarLocalFileCleared() {
		_spec.ClearField(user.FieldAvatarLocalFile, field.TypeString)
	}
	if value, ok := uuo.mutation.AvatarUpdatedAt(); ok {
		_spec.SetField(user.FieldAvatarUpdatedAt, field.TypeTime, value)
	}
	if uuo.mutation.AvatarUpdatedAtCleared() {
		_spec.ClearField(user.FieldAvatarUpdatedAt, field.TypeTime)
	}
	if value, ok := uuo.mutation.LastSeen(); ok {
		_spec.SetField(user.FieldLastSeen, field.TypeTime, value)
	}
	if uuo.mutation.LastSeenCleared() {
		_spec.ClearField(user.FieldLastSeen, field.TypeTime)
	}
	if value, ok := uuo.mutation.Password(); ok {
		_spec.SetField(user.FieldPassword, field.TypeString, value)
	}
	if uuo.mutation.PasswordCleared() {
		_spec.ClearField(user.FieldPassword, field.TypeString)
	}
	if value, ok := uuo.mutation.Sub(); ok {
		_spec.SetField(user.FieldSub, field.TypeString, value)
	}
	if uuo.mutation.SubCleared() {
		_spec.ClearField(user.FieldSub, field.TypeString)
	}
	if value, ok := uuo.mutation.Oauth(); ok {
		_spec.SetField(user.FieldOauth, field.TypeBool, value)
	}
	if value, ok := uuo.mutation.AuthProvider(); ok {
		_spec.SetField(user.FieldAuthProvider, field.TypeEnum, value)
	}
	if value, ok := uuo.mutation.TfaSecret(); ok {
		_spec.SetField(user.FieldTfaSecret, field.TypeString, value)
	}
	if uuo.mutation.TfaSecretCleared() {
		_spec.ClearField(user.FieldTfaSecret, field.TypeString)
	}
	if value, ok := uuo.mutation.IsPhoneOtpAllowed(); ok {
		_spec.SetField(user.FieldIsPhoneOtpAllowed, field.TypeBool, value)
	}
	if uuo.mutation.IsPhoneOtpAllowedCleared() {
		_spec.ClearField(user.FieldIsPhoneOtpAllowed, field.TypeBool)
	}
	if value, ok := uuo.mutation.IsEmailOtpAllowed(); ok {
		_spec.SetField(user.FieldIsEmailOtpAllowed, field.TypeBool, value)
	}
	if uuo.mutation.IsEmailOtpAllowedCleared() {
		_spec.ClearField(user.FieldIsEmailOtpAllowed, field.TypeBool)
	}
	if value, ok := uuo.mutation.IsTotpAllowed(); ok {
		_spec.SetField(user.FieldIsTotpAllowed, field.TypeBool, value)
	}
	if uuo.mutation.IsTotpAllowedCleared() {
		_spec.ClearField(user.FieldIsTotpAllowed, field.TypeBool)
	}
	if value, ok := uuo.mutation.IsWebauthnAllowed(); ok {
		_spec.SetField(user.FieldIsWebauthnAllowed, field.TypeBool, value)
	}
	if uuo.mutation.IsWebauthnAllowedCleared() {
		_spec.ClearField(user.FieldIsWebauthnAllowed, field.TypeBool)
	}
	if value, ok := uuo.mutation.IsTfaEnabled(); ok {
		_spec.SetField(user.FieldIsTfaEnabled, field.TypeBool, value)
	}
	if uuo.mutation.IsTfaEnabledCleared() {
		_spec.ClearField(user.FieldIsTfaEnabled, field.TypeBool)
	}
	if uuo.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PersonalAccessTokensTable,
			Columns: []string{user.PersonalAccessTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.PersonalAccessToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPersonalAccessTokensIDs(); len(nodes) > 0 && !uuo.mutation.PersonalAccessTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PersonalAccessTokensTable,
			Columns: []string{user.PersonalAccessTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.PersonalAccessToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PersonalAccessTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PersonalAccessTokensTable,
			Columns: []string{user.PersonalAccessTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(personalaccesstoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.PersonalAccessToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.SettingCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SettingTable,
			Columns: []string{user.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.UserSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.SettingIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   user.SettingTable,
			Columns: []string{user.SettingColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.UserSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.EmailVerificationTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailVerificationTokensTable,
			Columns: []string{user.EmailVerificationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailverificationtoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.EmailVerificationToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedEmailVerificationTokensIDs(); len(nodes) > 0 && !uuo.mutation.EmailVerificationTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailVerificationTokensTable,
			Columns: []string{user.EmailVerificationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailverificationtoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.EmailVerificationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.EmailVerificationTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.EmailVerificationTokensTable,
			Columns: []string{user.EmailVerificationTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(emailverificationtoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.EmailVerificationToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.PasswordResetTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordResetTokensTable,
			Columns: []string{user.PasswordResetTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordresettoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.PasswordResetToken
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedPasswordResetTokensIDs(); len(nodes) > 0 && !uuo.mutation.PasswordResetTokensCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordResetTokensTable,
			Columns: []string{user.PasswordResetTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordresettoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.PasswordResetToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.PasswordResetTokensIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.PasswordResetTokensTable,
			Columns: []string{user.PasswordResetTokensColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(passwordresettoken.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.PasswordResetToken
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.GroupMembership
		createE := &GroupMembershipCreate{config: uuo.config, mutation: newGroupMembershipMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGroupsIDs(); len(nodes) > 0 && !uuo.mutation.GroupsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: uuo.config, mutation: newGroupMembershipMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroupsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.GroupsTable,
			Columns: user.GroupsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(group.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &GroupMembershipCreate{config: uuo.config, mutation: newGroupMembershipMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.OrgMembership
		createE := &OrgMembershipCreate{config: uuo.config, mutation: newOrgMembershipMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOrganizationsIDs(); len(nodes) > 0 && !uuo.mutation.OrganizationsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: uuo.config, mutation: newOrgMembershipMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OrganizationsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   user.OrganizationsTable,
			Columns: user.OrganizationsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		createE := &OrgMembershipCreate{config: uuo.config, mutation: newOrgMembershipMutation(uuo.config, OpCreate)}
		_ = createE.defaults()
		_, specE := createE.createSpec()
		edge.Target.Fields = specE.Fields
		if specE.ID.Value != nil {
			edge.Target.Fields = append(edge.Target.Fields, specE.ID)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.WebauthnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnTable,
			Columns: []string{user.WebauthnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webauthn.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.Webauthn
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedWebauthnIDs(); len(nodes) > 0 && !uuo.mutation.WebauthnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnTable,
			Columns: []string{user.WebauthnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webauthn.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.Webauthn
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.WebauthnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.WebauthnTable,
			Columns: []string{user.WebauthnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webauthn.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.Webauthn
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.GroupMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.GroupMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedGroupMembershipsIDs(); len(nodes) > 0 && !uuo.mutation.GroupMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.GroupMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.GroupMembershipsTable,
			Columns: []string{user.GroupMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(groupmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.GroupMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if uuo.mutation.OrgMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgMembershipsTable,
			Columns: []string{user.OrgMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.OrgMembership
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.RemovedOrgMembershipsIDs(); len(nodes) > 0 && !uuo.mutation.OrgMembershipsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgMembershipsTable,
			Columns: []string{user.OrgMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := uuo.mutation.OrgMembershipsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   user.OrgMembershipsTable,
			Columns: []string{user.OrgMembershipsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(orgmembership.FieldID, field.TypeString),
			},
		}
		edge.Schema = uuo.schemaConfig.OrgMembership
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = uuo.schemaConfig.User
	ctx = internal.NewSchemaConfigContext(ctx, uuo.schemaConfig)
	_node = &User{config: uuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, uuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	uuo.mutation.done = true
	return _node, nil
}
