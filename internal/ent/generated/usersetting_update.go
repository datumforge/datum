// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/predicate"
	"github.com/datumforge/datum/internal/ent/generated/user"
	"github.com/datumforge/datum/internal/ent/generated/usersetting"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// UserSettingUpdate is the builder for updating UserSetting entities.
type UserSettingUpdate struct {
	config
	hooks    []Hook
	mutation *UserSettingMutation
}

// Where appends a list predicates to the UserSettingUpdate builder.
func (usu *UserSettingUpdate) Where(ps ...predicate.UserSetting) *UserSettingUpdate {
	usu.mutation.Where(ps...)
	return usu
}

// SetUpdatedAt sets the "updated_at" field.
func (usu *UserSettingUpdate) SetUpdatedAt(t time.Time) *UserSettingUpdate {
	usu.mutation.SetUpdatedAt(t)
	return usu
}

// SetUpdatedBy sets the "updated_by" field.
func (usu *UserSettingUpdate) SetUpdatedBy(s string) *UserSettingUpdate {
	usu.mutation.SetUpdatedBy(s)
	return usu
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (usu *UserSettingUpdate) SetNillableUpdatedBy(s *string) *UserSettingUpdate {
	if s != nil {
		usu.SetUpdatedBy(*s)
	}
	return usu
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (usu *UserSettingUpdate) ClearUpdatedBy() *UserSettingUpdate {
	usu.mutation.ClearUpdatedBy()
	return usu
}

// SetLocked sets the "locked" field.
func (usu *UserSettingUpdate) SetLocked(b bool) *UserSettingUpdate {
	usu.mutation.SetLocked(b)
	return usu
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (usu *UserSettingUpdate) SetNillableLocked(b *bool) *UserSettingUpdate {
	if b != nil {
		usu.SetLocked(*b)
	}
	return usu
}

// SetSilencedAt sets the "silenced_at" field.
func (usu *UserSettingUpdate) SetSilencedAt(t time.Time) *UserSettingUpdate {
	usu.mutation.SetSilencedAt(t)
	return usu
}

// SetNillableSilencedAt sets the "silenced_at" field if the given value is not nil.
func (usu *UserSettingUpdate) SetNillableSilencedAt(t *time.Time) *UserSettingUpdate {
	if t != nil {
		usu.SetSilencedAt(*t)
	}
	return usu
}

// ClearSilencedAt clears the value of the "silenced_at" field.
func (usu *UserSettingUpdate) ClearSilencedAt() *UserSettingUpdate {
	usu.mutation.ClearSilencedAt()
	return usu
}

// SetSuspendedAt sets the "suspended_at" field.
func (usu *UserSettingUpdate) SetSuspendedAt(t time.Time) *UserSettingUpdate {
	usu.mutation.SetSuspendedAt(t)
	return usu
}

// SetNillableSuspendedAt sets the "suspended_at" field if the given value is not nil.
func (usu *UserSettingUpdate) SetNillableSuspendedAt(t *time.Time) *UserSettingUpdate {
	if t != nil {
		usu.SetSuspendedAt(*t)
	}
	return usu
}

// ClearSuspendedAt clears the value of the "suspended_at" field.
func (usu *UserSettingUpdate) ClearSuspendedAt() *UserSettingUpdate {
	usu.mutation.ClearSuspendedAt()
	return usu
}

// SetRecoveryCode sets the "recovery_code" field.
func (usu *UserSettingUpdate) SetRecoveryCode(s string) *UserSettingUpdate {
	usu.mutation.SetRecoveryCode(s)
	return usu
}

// SetNillableRecoveryCode sets the "recovery_code" field if the given value is not nil.
func (usu *UserSettingUpdate) SetNillableRecoveryCode(s *string) *UserSettingUpdate {
	if s != nil {
		usu.SetRecoveryCode(*s)
	}
	return usu
}

// ClearRecoveryCode clears the value of the "recovery_code" field.
func (usu *UserSettingUpdate) ClearRecoveryCode() *UserSettingUpdate {
	usu.mutation.ClearRecoveryCode()
	return usu
}

// SetStatus sets the "status" field.
func (usu *UserSettingUpdate) SetStatus(u usersetting.Status) *UserSettingUpdate {
	usu.mutation.SetStatus(u)
	return usu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (usu *UserSettingUpdate) SetNillableStatus(u *usersetting.Status) *UserSettingUpdate {
	if u != nil {
		usu.SetStatus(*u)
	}
	return usu
}

// SetRole sets the "role" field.
func (usu *UserSettingUpdate) SetRole(u usersetting.Role) *UserSettingUpdate {
	usu.mutation.SetRole(u)
	return usu
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (usu *UserSettingUpdate) SetNillableRole(u *usersetting.Role) *UserSettingUpdate {
	if u != nil {
		usu.SetRole(*u)
	}
	return usu
}

// SetPermissions sets the "permissions" field.
func (usu *UserSettingUpdate) SetPermissions(s []string) *UserSettingUpdate {
	usu.mutation.SetPermissions(s)
	return usu
}

// AppendPermissions appends s to the "permissions" field.
func (usu *UserSettingUpdate) AppendPermissions(s []string) *UserSettingUpdate {
	usu.mutation.AppendPermissions(s)
	return usu
}

// SetEmailConfirmed sets the "email_confirmed" field.
func (usu *UserSettingUpdate) SetEmailConfirmed(b bool) *UserSettingUpdate {
	usu.mutation.SetEmailConfirmed(b)
	return usu
}

// SetNillableEmailConfirmed sets the "email_confirmed" field if the given value is not nil.
func (usu *UserSettingUpdate) SetNillableEmailConfirmed(b *bool) *UserSettingUpdate {
	if b != nil {
		usu.SetEmailConfirmed(*b)
	}
	return usu
}

// SetTags sets the "tags" field.
func (usu *UserSettingUpdate) SetTags(s []string) *UserSettingUpdate {
	usu.mutation.SetTags(s)
	return usu
}

// AppendTags appends s to the "tags" field.
func (usu *UserSettingUpdate) AppendTags(s []string) *UserSettingUpdate {
	usu.mutation.AppendTags(s)
	return usu
}

// SetUserID sets the "user" edge to the User entity by ID.
func (usu *UserSettingUpdate) SetUserID(id string) *UserSettingUpdate {
	usu.mutation.SetUserID(id)
	return usu
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (usu *UserSettingUpdate) SetNillableUserID(id *string) *UserSettingUpdate {
	if id != nil {
		usu = usu.SetUserID(*id)
	}
	return usu
}

// SetUser sets the "user" edge to the User entity.
func (usu *UserSettingUpdate) SetUser(u *User) *UserSettingUpdate {
	return usu.SetUserID(u.ID)
}

// Mutation returns the UserSettingMutation object of the builder.
func (usu *UserSettingUpdate) Mutation() *UserSettingMutation {
	return usu.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (usu *UserSettingUpdate) ClearUser() *UserSettingUpdate {
	usu.mutation.ClearUser()
	return usu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (usu *UserSettingUpdate) Save(ctx context.Context) (int, error) {
	if err := usu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, usu.sqlSave, usu.mutation, usu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usu *UserSettingUpdate) SaveX(ctx context.Context) int {
	affected, err := usu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (usu *UserSettingUpdate) Exec(ctx context.Context) error {
	_, err := usu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usu *UserSettingUpdate) ExecX(ctx context.Context) {
	if err := usu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usu *UserSettingUpdate) defaults() error {
	if _, ok := usu.mutation.UpdatedAt(); !ok {
		if usersetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized usersetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := usersetting.UpdateDefaultUpdatedAt()
		usu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (usu *UserSettingUpdate) check() error {
	if v, ok := usu.mutation.Status(); ok {
		if err := usersetting.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "UserSetting.status": %w`, err)}
		}
	}
	if v, ok := usu.mutation.Role(); ok {
		if err := usersetting.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "UserSetting.role": %w`, err)}
		}
	}
	return nil
}

func (usu *UserSettingUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := usu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(usersetting.Table, usersetting.Columns, sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString))
	if ps := usu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usu.mutation.UpdatedAt(); ok {
		_spec.SetField(usersetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if usu.mutation.CreatedByCleared() {
		_spec.ClearField(usersetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := usu.mutation.UpdatedBy(); ok {
		_spec.SetField(usersetting.FieldUpdatedBy, field.TypeString, value)
	}
	if usu.mutation.UpdatedByCleared() {
		_spec.ClearField(usersetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := usu.mutation.Locked(); ok {
		_spec.SetField(usersetting.FieldLocked, field.TypeBool, value)
	}
	if value, ok := usu.mutation.SilencedAt(); ok {
		_spec.SetField(usersetting.FieldSilencedAt, field.TypeTime, value)
	}
	if usu.mutation.SilencedAtCleared() {
		_spec.ClearField(usersetting.FieldSilencedAt, field.TypeTime)
	}
	if value, ok := usu.mutation.SuspendedAt(); ok {
		_spec.SetField(usersetting.FieldSuspendedAt, field.TypeTime, value)
	}
	if usu.mutation.SuspendedAtCleared() {
		_spec.ClearField(usersetting.FieldSuspendedAt, field.TypeTime)
	}
	if value, ok := usu.mutation.RecoveryCode(); ok {
		_spec.SetField(usersetting.FieldRecoveryCode, field.TypeString, value)
	}
	if usu.mutation.RecoveryCodeCleared() {
		_spec.ClearField(usersetting.FieldRecoveryCode, field.TypeString)
	}
	if value, ok := usu.mutation.Status(); ok {
		_spec.SetField(usersetting.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := usu.mutation.Role(); ok {
		_spec.SetField(usersetting.FieldRole, field.TypeEnum, value)
	}
	if value, ok := usu.mutation.Permissions(); ok {
		_spec.SetField(usersetting.FieldPermissions, field.TypeJSON, value)
	}
	if value, ok := usu.mutation.AppendedPermissions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, usersetting.FieldPermissions, value)
		})
	}
	if value, ok := usu.mutation.EmailConfirmed(); ok {
		_spec.SetField(usersetting.FieldEmailConfirmed, field.TypeBool, value)
	}
	if value, ok := usu.mutation.Tags(); ok {
		_spec.SetField(usersetting.FieldTags, field.TypeJSON, value)
	}
	if value, ok := usu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, usersetting.FieldTags, value)
		})
	}
	if usu.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersetting.UserTable,
			Columns: []string{usersetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = usu.schemaConfig.UserSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usu.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersetting.UserTable,
			Columns: []string{usersetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = usu.schemaConfig.UserSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = usu.schemaConfig.UserSetting
	ctx = internal.NewSchemaConfigContext(ctx, usu.schemaConfig)
	if n, err = sqlgraph.UpdateNodes(ctx, usu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	usu.mutation.done = true
	return n, nil
}

// UserSettingUpdateOne is the builder for updating a single UserSetting entity.
type UserSettingUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserSettingMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (usuo *UserSettingUpdateOne) SetUpdatedAt(t time.Time) *UserSettingUpdateOne {
	usuo.mutation.SetUpdatedAt(t)
	return usuo
}

// SetUpdatedBy sets the "updated_by" field.
func (usuo *UserSettingUpdateOne) SetUpdatedBy(s string) *UserSettingUpdateOne {
	usuo.mutation.SetUpdatedBy(s)
	return usuo
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (usuo *UserSettingUpdateOne) SetNillableUpdatedBy(s *string) *UserSettingUpdateOne {
	if s != nil {
		usuo.SetUpdatedBy(*s)
	}
	return usuo
}

// ClearUpdatedBy clears the value of the "updated_by" field.
func (usuo *UserSettingUpdateOne) ClearUpdatedBy() *UserSettingUpdateOne {
	usuo.mutation.ClearUpdatedBy()
	return usuo
}

// SetLocked sets the "locked" field.
func (usuo *UserSettingUpdateOne) SetLocked(b bool) *UserSettingUpdateOne {
	usuo.mutation.SetLocked(b)
	return usuo
}

// SetNillableLocked sets the "locked" field if the given value is not nil.
func (usuo *UserSettingUpdateOne) SetNillableLocked(b *bool) *UserSettingUpdateOne {
	if b != nil {
		usuo.SetLocked(*b)
	}
	return usuo
}

// SetSilencedAt sets the "silenced_at" field.
func (usuo *UserSettingUpdateOne) SetSilencedAt(t time.Time) *UserSettingUpdateOne {
	usuo.mutation.SetSilencedAt(t)
	return usuo
}

// SetNillableSilencedAt sets the "silenced_at" field if the given value is not nil.
func (usuo *UserSettingUpdateOne) SetNillableSilencedAt(t *time.Time) *UserSettingUpdateOne {
	if t != nil {
		usuo.SetSilencedAt(*t)
	}
	return usuo
}

// ClearSilencedAt clears the value of the "silenced_at" field.
func (usuo *UserSettingUpdateOne) ClearSilencedAt() *UserSettingUpdateOne {
	usuo.mutation.ClearSilencedAt()
	return usuo
}

// SetSuspendedAt sets the "suspended_at" field.
func (usuo *UserSettingUpdateOne) SetSuspendedAt(t time.Time) *UserSettingUpdateOne {
	usuo.mutation.SetSuspendedAt(t)
	return usuo
}

// SetNillableSuspendedAt sets the "suspended_at" field if the given value is not nil.
func (usuo *UserSettingUpdateOne) SetNillableSuspendedAt(t *time.Time) *UserSettingUpdateOne {
	if t != nil {
		usuo.SetSuspendedAt(*t)
	}
	return usuo
}

// ClearSuspendedAt clears the value of the "suspended_at" field.
func (usuo *UserSettingUpdateOne) ClearSuspendedAt() *UserSettingUpdateOne {
	usuo.mutation.ClearSuspendedAt()
	return usuo
}

// SetRecoveryCode sets the "recovery_code" field.
func (usuo *UserSettingUpdateOne) SetRecoveryCode(s string) *UserSettingUpdateOne {
	usuo.mutation.SetRecoveryCode(s)
	return usuo
}

// SetNillableRecoveryCode sets the "recovery_code" field if the given value is not nil.
func (usuo *UserSettingUpdateOne) SetNillableRecoveryCode(s *string) *UserSettingUpdateOne {
	if s != nil {
		usuo.SetRecoveryCode(*s)
	}
	return usuo
}

// ClearRecoveryCode clears the value of the "recovery_code" field.
func (usuo *UserSettingUpdateOne) ClearRecoveryCode() *UserSettingUpdateOne {
	usuo.mutation.ClearRecoveryCode()
	return usuo
}

// SetStatus sets the "status" field.
func (usuo *UserSettingUpdateOne) SetStatus(u usersetting.Status) *UserSettingUpdateOne {
	usuo.mutation.SetStatus(u)
	return usuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (usuo *UserSettingUpdateOne) SetNillableStatus(u *usersetting.Status) *UserSettingUpdateOne {
	if u != nil {
		usuo.SetStatus(*u)
	}
	return usuo
}

// SetRole sets the "role" field.
func (usuo *UserSettingUpdateOne) SetRole(u usersetting.Role) *UserSettingUpdateOne {
	usuo.mutation.SetRole(u)
	return usuo
}

// SetNillableRole sets the "role" field if the given value is not nil.
func (usuo *UserSettingUpdateOne) SetNillableRole(u *usersetting.Role) *UserSettingUpdateOne {
	if u != nil {
		usuo.SetRole(*u)
	}
	return usuo
}

// SetPermissions sets the "permissions" field.
func (usuo *UserSettingUpdateOne) SetPermissions(s []string) *UserSettingUpdateOne {
	usuo.mutation.SetPermissions(s)
	return usuo
}

// AppendPermissions appends s to the "permissions" field.
func (usuo *UserSettingUpdateOne) AppendPermissions(s []string) *UserSettingUpdateOne {
	usuo.mutation.AppendPermissions(s)
	return usuo
}

// SetEmailConfirmed sets the "email_confirmed" field.
func (usuo *UserSettingUpdateOne) SetEmailConfirmed(b bool) *UserSettingUpdateOne {
	usuo.mutation.SetEmailConfirmed(b)
	return usuo
}

// SetNillableEmailConfirmed sets the "email_confirmed" field if the given value is not nil.
func (usuo *UserSettingUpdateOne) SetNillableEmailConfirmed(b *bool) *UserSettingUpdateOne {
	if b != nil {
		usuo.SetEmailConfirmed(*b)
	}
	return usuo
}

// SetTags sets the "tags" field.
func (usuo *UserSettingUpdateOne) SetTags(s []string) *UserSettingUpdateOne {
	usuo.mutation.SetTags(s)
	return usuo
}

// AppendTags appends s to the "tags" field.
func (usuo *UserSettingUpdateOne) AppendTags(s []string) *UserSettingUpdateOne {
	usuo.mutation.AppendTags(s)
	return usuo
}

// SetUserID sets the "user" edge to the User entity by ID.
func (usuo *UserSettingUpdateOne) SetUserID(id string) *UserSettingUpdateOne {
	usuo.mutation.SetUserID(id)
	return usuo
}

// SetNillableUserID sets the "user" edge to the User entity by ID if the given value is not nil.
func (usuo *UserSettingUpdateOne) SetNillableUserID(id *string) *UserSettingUpdateOne {
	if id != nil {
		usuo = usuo.SetUserID(*id)
	}
	return usuo
}

// SetUser sets the "user" edge to the User entity.
func (usuo *UserSettingUpdateOne) SetUser(u *User) *UserSettingUpdateOne {
	return usuo.SetUserID(u.ID)
}

// Mutation returns the UserSettingMutation object of the builder.
func (usuo *UserSettingUpdateOne) Mutation() *UserSettingMutation {
	return usuo.mutation
}

// ClearUser clears the "user" edge to the User entity.
func (usuo *UserSettingUpdateOne) ClearUser() *UserSettingUpdateOne {
	usuo.mutation.ClearUser()
	return usuo
}

// Where appends a list predicates to the UserSettingUpdate builder.
func (usuo *UserSettingUpdateOne) Where(ps ...predicate.UserSetting) *UserSettingUpdateOne {
	usuo.mutation.Where(ps...)
	return usuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (usuo *UserSettingUpdateOne) Select(field string, fields ...string) *UserSettingUpdateOne {
	usuo.fields = append([]string{field}, fields...)
	return usuo
}

// Save executes the query and returns the updated UserSetting entity.
func (usuo *UserSettingUpdateOne) Save(ctx context.Context) (*UserSetting, error) {
	if err := usuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, usuo.sqlSave, usuo.mutation, usuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (usuo *UserSettingUpdateOne) SaveX(ctx context.Context) *UserSetting {
	node, err := usuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (usuo *UserSettingUpdateOne) Exec(ctx context.Context) error {
	_, err := usuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (usuo *UserSettingUpdateOne) ExecX(ctx context.Context) {
	if err := usuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (usuo *UserSettingUpdateOne) defaults() error {
	if _, ok := usuo.mutation.UpdatedAt(); !ok {
		if usersetting.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("generated: uninitialized usersetting.UpdateDefaultUpdatedAt (forgotten import generated/runtime?)")
		}
		v := usersetting.UpdateDefaultUpdatedAt()
		usuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (usuo *UserSettingUpdateOne) check() error {
	if v, ok := usuo.mutation.Status(); ok {
		if err := usersetting.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`generated: validator failed for field "UserSetting.status": %w`, err)}
		}
	}
	if v, ok := usuo.mutation.Role(); ok {
		if err := usersetting.RoleValidator(v); err != nil {
			return &ValidationError{Name: "role", err: fmt.Errorf(`generated: validator failed for field "UserSetting.role": %w`, err)}
		}
	}
	return nil
}

func (usuo *UserSettingUpdateOne) sqlSave(ctx context.Context) (_node *UserSetting, err error) {
	if err := usuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(usersetting.Table, usersetting.Columns, sqlgraph.NewFieldSpec(usersetting.FieldID, field.TypeString))
	id, ok := usuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`generated: missing "UserSetting.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := usuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, usersetting.FieldID)
		for _, f := range fields {
			if !usersetting.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("generated: invalid field %q for query", f)}
			}
			if f != usersetting.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := usuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := usuo.mutation.UpdatedAt(); ok {
		_spec.SetField(usersetting.FieldUpdatedAt, field.TypeTime, value)
	}
	if usuo.mutation.CreatedByCleared() {
		_spec.ClearField(usersetting.FieldCreatedBy, field.TypeString)
	}
	if value, ok := usuo.mutation.UpdatedBy(); ok {
		_spec.SetField(usersetting.FieldUpdatedBy, field.TypeString, value)
	}
	if usuo.mutation.UpdatedByCleared() {
		_spec.ClearField(usersetting.FieldUpdatedBy, field.TypeString)
	}
	if value, ok := usuo.mutation.Locked(); ok {
		_spec.SetField(usersetting.FieldLocked, field.TypeBool, value)
	}
	if value, ok := usuo.mutation.SilencedAt(); ok {
		_spec.SetField(usersetting.FieldSilencedAt, field.TypeTime, value)
	}
	if usuo.mutation.SilencedAtCleared() {
		_spec.ClearField(usersetting.FieldSilencedAt, field.TypeTime)
	}
	if value, ok := usuo.mutation.SuspendedAt(); ok {
		_spec.SetField(usersetting.FieldSuspendedAt, field.TypeTime, value)
	}
	if usuo.mutation.SuspendedAtCleared() {
		_spec.ClearField(usersetting.FieldSuspendedAt, field.TypeTime)
	}
	if value, ok := usuo.mutation.RecoveryCode(); ok {
		_spec.SetField(usersetting.FieldRecoveryCode, field.TypeString, value)
	}
	if usuo.mutation.RecoveryCodeCleared() {
		_spec.ClearField(usersetting.FieldRecoveryCode, field.TypeString)
	}
	if value, ok := usuo.mutation.Status(); ok {
		_spec.SetField(usersetting.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := usuo.mutation.Role(); ok {
		_spec.SetField(usersetting.FieldRole, field.TypeEnum, value)
	}
	if value, ok := usuo.mutation.Permissions(); ok {
		_spec.SetField(usersetting.FieldPermissions, field.TypeJSON, value)
	}
	if value, ok := usuo.mutation.AppendedPermissions(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, usersetting.FieldPermissions, value)
		})
	}
	if value, ok := usuo.mutation.EmailConfirmed(); ok {
		_spec.SetField(usersetting.FieldEmailConfirmed, field.TypeBool, value)
	}
	if value, ok := usuo.mutation.Tags(); ok {
		_spec.SetField(usersetting.FieldTags, field.TypeJSON, value)
	}
	if value, ok := usuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, usersetting.FieldTags, value)
		})
	}
	if usuo.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersetting.UserTable,
			Columns: []string{usersetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = usuo.schemaConfig.UserSetting
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := usuo.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   usersetting.UserTable,
			Columns: []string{usersetting.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeString),
			},
		}
		edge.Schema = usuo.schemaConfig.UserSetting
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.Node.Schema = usuo.schemaConfig.UserSetting
	ctx = internal.NewSchemaConfigContext(ctx, usuo.schemaConfig)
	_node = &UserSetting{config: usuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, usuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{usersetting.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	usuo.mutation.done = true
	return _node, nil
}
