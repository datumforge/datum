// Code generated by ent, DO NOT EDIT.

package usersettings

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/datumforge/datum/internal/ent/generated/predicate"

	"github.com/datumforge/datum/internal/ent/generated/internal"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldContainsFold(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedBy applies equality check predicate on the "created_by" field. It's identical to CreatedByEQ.
func CreatedBy(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldCreatedBy, v))
}

// UpdatedBy applies equality check predicate on the "updated_by" field. It's identical to UpdatedByEQ.
func UpdatedBy(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldUpdatedBy, v))
}

// Locked applies equality check predicate on the "locked" field. It's identical to LockedEQ.
func Locked(v bool) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldLocked, v))
}

// SilencedAt applies equality check predicate on the "silenced_at" field. It's identical to SilencedAtEQ.
func SilencedAt(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldSilencedAt, v))
}

// SuspendedAt applies equality check predicate on the "suspended_at" field. It's identical to SuspendedAtEQ.
func SuspendedAt(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldSuspendedAt, v))
}

// RecoveryCode applies equality check predicate on the "recovery_code" field. It's identical to RecoveryCodeEQ.
func RecoveryCode(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldRecoveryCode, v))
}

// EmailConfirmed applies equality check predicate on the "email_confirmed" field. It's identical to EmailConfirmedEQ.
func EmailConfirmed(v bool) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldEmailConfirmed, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedByEQ applies the EQ predicate on the "created_by" field.
func CreatedByEQ(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldCreatedBy, v))
}

// CreatedByNEQ applies the NEQ predicate on the "created_by" field.
func CreatedByNEQ(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldCreatedBy, v))
}

// CreatedByIn applies the In predicate on the "created_by" field.
func CreatedByIn(vs ...string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldCreatedBy, vs...))
}

// CreatedByNotIn applies the NotIn predicate on the "created_by" field.
func CreatedByNotIn(vs ...string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldCreatedBy, vs...))
}

// CreatedByGT applies the GT predicate on the "created_by" field.
func CreatedByGT(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldCreatedBy, v))
}

// CreatedByGTE applies the GTE predicate on the "created_by" field.
func CreatedByGTE(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldCreatedBy, v))
}

// CreatedByLT applies the LT predicate on the "created_by" field.
func CreatedByLT(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldCreatedBy, v))
}

// CreatedByLTE applies the LTE predicate on the "created_by" field.
func CreatedByLTE(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldCreatedBy, v))
}

// CreatedByContains applies the Contains predicate on the "created_by" field.
func CreatedByContains(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldContains(FieldCreatedBy, v))
}

// CreatedByHasPrefix applies the HasPrefix predicate on the "created_by" field.
func CreatedByHasPrefix(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldHasPrefix(FieldCreatedBy, v))
}

// CreatedByHasSuffix applies the HasSuffix predicate on the "created_by" field.
func CreatedByHasSuffix(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldHasSuffix(FieldCreatedBy, v))
}

// CreatedByIsNil applies the IsNil predicate on the "created_by" field.
func CreatedByIsNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIsNull(FieldCreatedBy))
}

// CreatedByNotNil applies the NotNil predicate on the "created_by" field.
func CreatedByNotNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotNull(FieldCreatedBy))
}

// CreatedByEqualFold applies the EqualFold predicate on the "created_by" field.
func CreatedByEqualFold(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEqualFold(FieldCreatedBy, v))
}

// CreatedByContainsFold applies the ContainsFold predicate on the "created_by" field.
func CreatedByContainsFold(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldContainsFold(FieldCreatedBy, v))
}

// UpdatedByEQ applies the EQ predicate on the "updated_by" field.
func UpdatedByEQ(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldUpdatedBy, v))
}

// UpdatedByNEQ applies the NEQ predicate on the "updated_by" field.
func UpdatedByNEQ(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldUpdatedBy, v))
}

// UpdatedByIn applies the In predicate on the "updated_by" field.
func UpdatedByIn(vs ...string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldUpdatedBy, vs...))
}

// UpdatedByNotIn applies the NotIn predicate on the "updated_by" field.
func UpdatedByNotIn(vs ...string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldUpdatedBy, vs...))
}

// UpdatedByGT applies the GT predicate on the "updated_by" field.
func UpdatedByGT(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldUpdatedBy, v))
}

// UpdatedByGTE applies the GTE predicate on the "updated_by" field.
func UpdatedByGTE(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldUpdatedBy, v))
}

// UpdatedByLT applies the LT predicate on the "updated_by" field.
func UpdatedByLT(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldUpdatedBy, v))
}

// UpdatedByLTE applies the LTE predicate on the "updated_by" field.
func UpdatedByLTE(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldUpdatedBy, v))
}

// UpdatedByContains applies the Contains predicate on the "updated_by" field.
func UpdatedByContains(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldContains(FieldUpdatedBy, v))
}

// UpdatedByHasPrefix applies the HasPrefix predicate on the "updated_by" field.
func UpdatedByHasPrefix(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldHasPrefix(FieldUpdatedBy, v))
}

// UpdatedByHasSuffix applies the HasSuffix predicate on the "updated_by" field.
func UpdatedByHasSuffix(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldHasSuffix(FieldUpdatedBy, v))
}

// UpdatedByIsNil applies the IsNil predicate on the "updated_by" field.
func UpdatedByIsNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIsNull(FieldUpdatedBy))
}

// UpdatedByNotNil applies the NotNil predicate on the "updated_by" field.
func UpdatedByNotNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotNull(FieldUpdatedBy))
}

// UpdatedByEqualFold applies the EqualFold predicate on the "updated_by" field.
func UpdatedByEqualFold(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEqualFold(FieldUpdatedBy, v))
}

// UpdatedByContainsFold applies the ContainsFold predicate on the "updated_by" field.
func UpdatedByContainsFold(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldContainsFold(FieldUpdatedBy, v))
}

// LockedEQ applies the EQ predicate on the "locked" field.
func LockedEQ(v bool) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldLocked, v))
}

// LockedNEQ applies the NEQ predicate on the "locked" field.
func LockedNEQ(v bool) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldLocked, v))
}

// SilencedAtEQ applies the EQ predicate on the "silenced_at" field.
func SilencedAtEQ(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldSilencedAt, v))
}

// SilencedAtNEQ applies the NEQ predicate on the "silenced_at" field.
func SilencedAtNEQ(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldSilencedAt, v))
}

// SilencedAtIn applies the In predicate on the "silenced_at" field.
func SilencedAtIn(vs ...time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldSilencedAt, vs...))
}

// SilencedAtNotIn applies the NotIn predicate on the "silenced_at" field.
func SilencedAtNotIn(vs ...time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldSilencedAt, vs...))
}

// SilencedAtGT applies the GT predicate on the "silenced_at" field.
func SilencedAtGT(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldSilencedAt, v))
}

// SilencedAtGTE applies the GTE predicate on the "silenced_at" field.
func SilencedAtGTE(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldSilencedAt, v))
}

// SilencedAtLT applies the LT predicate on the "silenced_at" field.
func SilencedAtLT(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldSilencedAt, v))
}

// SilencedAtLTE applies the LTE predicate on the "silenced_at" field.
func SilencedAtLTE(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldSilencedAt, v))
}

// SilencedAtIsNil applies the IsNil predicate on the "silenced_at" field.
func SilencedAtIsNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIsNull(FieldSilencedAt))
}

// SilencedAtNotNil applies the NotNil predicate on the "silenced_at" field.
func SilencedAtNotNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotNull(FieldSilencedAt))
}

// SuspendedAtEQ applies the EQ predicate on the "suspended_at" field.
func SuspendedAtEQ(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldSuspendedAt, v))
}

// SuspendedAtNEQ applies the NEQ predicate on the "suspended_at" field.
func SuspendedAtNEQ(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldSuspendedAt, v))
}

// SuspendedAtIn applies the In predicate on the "suspended_at" field.
func SuspendedAtIn(vs ...time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldSuspendedAt, vs...))
}

// SuspendedAtNotIn applies the NotIn predicate on the "suspended_at" field.
func SuspendedAtNotIn(vs ...time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldSuspendedAt, vs...))
}

// SuspendedAtGT applies the GT predicate on the "suspended_at" field.
func SuspendedAtGT(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldSuspendedAt, v))
}

// SuspendedAtGTE applies the GTE predicate on the "suspended_at" field.
func SuspendedAtGTE(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldSuspendedAt, v))
}

// SuspendedAtLT applies the LT predicate on the "suspended_at" field.
func SuspendedAtLT(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldSuspendedAt, v))
}

// SuspendedAtLTE applies the LTE predicate on the "suspended_at" field.
func SuspendedAtLTE(v time.Time) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldSuspendedAt, v))
}

// SuspendedAtIsNil applies the IsNil predicate on the "suspended_at" field.
func SuspendedAtIsNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIsNull(FieldSuspendedAt))
}

// SuspendedAtNotNil applies the NotNil predicate on the "suspended_at" field.
func SuspendedAtNotNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotNull(FieldSuspendedAt))
}

// RecoveryCodeEQ applies the EQ predicate on the "recovery_code" field.
func RecoveryCodeEQ(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldRecoveryCode, v))
}

// RecoveryCodeNEQ applies the NEQ predicate on the "recovery_code" field.
func RecoveryCodeNEQ(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldRecoveryCode, v))
}

// RecoveryCodeIn applies the In predicate on the "recovery_code" field.
func RecoveryCodeIn(vs ...string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldRecoveryCode, vs...))
}

// RecoveryCodeNotIn applies the NotIn predicate on the "recovery_code" field.
func RecoveryCodeNotIn(vs ...string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldRecoveryCode, vs...))
}

// RecoveryCodeGT applies the GT predicate on the "recovery_code" field.
func RecoveryCodeGT(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGT(FieldRecoveryCode, v))
}

// RecoveryCodeGTE applies the GTE predicate on the "recovery_code" field.
func RecoveryCodeGTE(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldGTE(FieldRecoveryCode, v))
}

// RecoveryCodeLT applies the LT predicate on the "recovery_code" field.
func RecoveryCodeLT(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLT(FieldRecoveryCode, v))
}

// RecoveryCodeLTE applies the LTE predicate on the "recovery_code" field.
func RecoveryCodeLTE(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldLTE(FieldRecoveryCode, v))
}

// RecoveryCodeContains applies the Contains predicate on the "recovery_code" field.
func RecoveryCodeContains(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldContains(FieldRecoveryCode, v))
}

// RecoveryCodeHasPrefix applies the HasPrefix predicate on the "recovery_code" field.
func RecoveryCodeHasPrefix(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldHasPrefix(FieldRecoveryCode, v))
}

// RecoveryCodeHasSuffix applies the HasSuffix predicate on the "recovery_code" field.
func RecoveryCodeHasSuffix(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldHasSuffix(FieldRecoveryCode, v))
}

// RecoveryCodeIsNil applies the IsNil predicate on the "recovery_code" field.
func RecoveryCodeIsNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIsNull(FieldRecoveryCode))
}

// RecoveryCodeNotNil applies the NotNil predicate on the "recovery_code" field.
func RecoveryCodeNotNil() predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotNull(FieldRecoveryCode))
}

// RecoveryCodeEqualFold applies the EqualFold predicate on the "recovery_code" field.
func RecoveryCodeEqualFold(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEqualFold(FieldRecoveryCode, v))
}

// RecoveryCodeContainsFold applies the ContainsFold predicate on the "recovery_code" field.
func RecoveryCodeContainsFold(v string) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldContainsFold(FieldRecoveryCode, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v Status) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v Status) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...Status) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...Status) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldStatus, vs...))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v Role) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldRole, v))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v Role) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldRole, v))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...Role) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldIn(FieldRole, vs...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...Role) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNotIn(FieldRole, vs...))
}

// EmailConfirmedEQ applies the EQ predicate on the "email_confirmed" field.
func EmailConfirmedEQ(v bool) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldEQ(FieldEmailConfirmed, v))
}

// EmailConfirmedNEQ applies the NEQ predicate on the "email_confirmed" field.
func EmailConfirmedNEQ(v bool) predicate.UserSettings {
	return predicate.UserSettings(sql.FieldNEQ(FieldEmailConfirmed, v))
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.UserSettings {
	return predicate.UserSettings(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserSettings
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.UserSettings {
	return predicate.UserSettings(func(s *sql.Selector) {
		step := newUserStep()
		schemaConfig := internal.SchemaConfigFromContext(s.Context())
		step.To.Schema = schemaConfig.User
		step.Edge.Schema = schemaConfig.UserSettings
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.UserSettings) predicate.UserSettings {
	return predicate.UserSettings(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.UserSettings) predicate.UserSettings {
	return predicate.UserSettings(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.UserSettings) predicate.UserSettings {
	return predicate.UserSettings(sql.NotPredicates(p))
}
