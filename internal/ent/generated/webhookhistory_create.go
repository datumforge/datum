// Code generated by ent, DO NOT EDIT.

package generated

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/datumforge/datum/internal/ent/generated/webhookhistory"
	"github.com/datumforge/enthistory"
)

// WebhookHistoryCreate is the builder for creating a WebhookHistory entity.
type WebhookHistoryCreate struct {
	config
	mutation *WebhookHistoryMutation
	hooks    []Hook
}

// SetHistoryTime sets the "history_time" field.
func (whc *WebhookHistoryCreate) SetHistoryTime(t time.Time) *WebhookHistoryCreate {
	whc.mutation.SetHistoryTime(t)
	return whc
}

// SetNillableHistoryTime sets the "history_time" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableHistoryTime(t *time.Time) *WebhookHistoryCreate {
	if t != nil {
		whc.SetHistoryTime(*t)
	}
	return whc
}

// SetOperation sets the "operation" field.
func (whc *WebhookHistoryCreate) SetOperation(et enthistory.OpType) *WebhookHistoryCreate {
	whc.mutation.SetOperation(et)
	return whc
}

// SetRef sets the "ref" field.
func (whc *WebhookHistoryCreate) SetRef(s string) *WebhookHistoryCreate {
	whc.mutation.SetRef(s)
	return whc
}

// SetNillableRef sets the "ref" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableRef(s *string) *WebhookHistoryCreate {
	if s != nil {
		whc.SetRef(*s)
	}
	return whc
}

// SetCreatedAt sets the "created_at" field.
func (whc *WebhookHistoryCreate) SetCreatedAt(t time.Time) *WebhookHistoryCreate {
	whc.mutation.SetCreatedAt(t)
	return whc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableCreatedAt(t *time.Time) *WebhookHistoryCreate {
	if t != nil {
		whc.SetCreatedAt(*t)
	}
	return whc
}

// SetUpdatedAt sets the "updated_at" field.
func (whc *WebhookHistoryCreate) SetUpdatedAt(t time.Time) *WebhookHistoryCreate {
	whc.mutation.SetUpdatedAt(t)
	return whc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableUpdatedAt(t *time.Time) *WebhookHistoryCreate {
	if t != nil {
		whc.SetUpdatedAt(*t)
	}
	return whc
}

// SetCreatedBy sets the "created_by" field.
func (whc *WebhookHistoryCreate) SetCreatedBy(s string) *WebhookHistoryCreate {
	whc.mutation.SetCreatedBy(s)
	return whc
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableCreatedBy(s *string) *WebhookHistoryCreate {
	if s != nil {
		whc.SetCreatedBy(*s)
	}
	return whc
}

// SetUpdatedBy sets the "updated_by" field.
func (whc *WebhookHistoryCreate) SetUpdatedBy(s string) *WebhookHistoryCreate {
	whc.mutation.SetUpdatedBy(s)
	return whc
}

// SetNillableUpdatedBy sets the "updated_by" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableUpdatedBy(s *string) *WebhookHistoryCreate {
	if s != nil {
		whc.SetUpdatedBy(*s)
	}
	return whc
}

// SetDeletedAt sets the "deleted_at" field.
func (whc *WebhookHistoryCreate) SetDeletedAt(t time.Time) *WebhookHistoryCreate {
	whc.mutation.SetDeletedAt(t)
	return whc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableDeletedAt(t *time.Time) *WebhookHistoryCreate {
	if t != nil {
		whc.SetDeletedAt(*t)
	}
	return whc
}

// SetDeletedBy sets the "deleted_by" field.
func (whc *WebhookHistoryCreate) SetDeletedBy(s string) *WebhookHistoryCreate {
	whc.mutation.SetDeletedBy(s)
	return whc
}

// SetNillableDeletedBy sets the "deleted_by" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableDeletedBy(s *string) *WebhookHistoryCreate {
	if s != nil {
		whc.SetDeletedBy(*s)
	}
	return whc
}

// SetOwnerID sets the "owner_id" field.
func (whc *WebhookHistoryCreate) SetOwnerID(s string) *WebhookHistoryCreate {
	whc.mutation.SetOwnerID(s)
	return whc
}

// SetNillableOwnerID sets the "owner_id" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableOwnerID(s *string) *WebhookHistoryCreate {
	if s != nil {
		whc.SetOwnerID(*s)
	}
	return whc
}

// SetName sets the "name" field.
func (whc *WebhookHistoryCreate) SetName(s string) *WebhookHistoryCreate {
	whc.mutation.SetName(s)
	return whc
}

// SetDescription sets the "description" field.
func (whc *WebhookHistoryCreate) SetDescription(s string) *WebhookHistoryCreate {
	whc.mutation.SetDescription(s)
	return whc
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableDescription(s *string) *WebhookHistoryCreate {
	if s != nil {
		whc.SetDescription(*s)
	}
	return whc
}

// SetDestinationURL sets the "destination_url" field.
func (whc *WebhookHistoryCreate) SetDestinationURL(s string) *WebhookHistoryCreate {
	whc.mutation.SetDestinationURL(s)
	return whc
}

// SetEnabled sets the "enabled" field.
func (whc *WebhookHistoryCreate) SetEnabled(b bool) *WebhookHistoryCreate {
	whc.mutation.SetEnabled(b)
	return whc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableEnabled(b *bool) *WebhookHistoryCreate {
	if b != nil {
		whc.SetEnabled(*b)
	}
	return whc
}

// SetCallback sets the "callback" field.
func (whc *WebhookHistoryCreate) SetCallback(s string) *WebhookHistoryCreate {
	whc.mutation.SetCallback(s)
	return whc
}

// SetNillableCallback sets the "callback" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableCallback(s *string) *WebhookHistoryCreate {
	if s != nil {
		whc.SetCallback(*s)
	}
	return whc
}

// SetExpiresAt sets the "expires_at" field.
func (whc *WebhookHistoryCreate) SetExpiresAt(t time.Time) *WebhookHistoryCreate {
	whc.mutation.SetExpiresAt(t)
	return whc
}

// SetNillableExpiresAt sets the "expires_at" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableExpiresAt(t *time.Time) *WebhookHistoryCreate {
	if t != nil {
		whc.SetExpiresAt(*t)
	}
	return whc
}

// SetSecret sets the "secret" field.
func (whc *WebhookHistoryCreate) SetSecret(b []byte) *WebhookHistoryCreate {
	whc.mutation.SetSecret(b)
	return whc
}

// SetFailures sets the "failures" field.
func (whc *WebhookHistoryCreate) SetFailures(i int) *WebhookHistoryCreate {
	whc.mutation.SetFailures(i)
	return whc
}

// SetNillableFailures sets the "failures" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableFailures(i *int) *WebhookHistoryCreate {
	if i != nil {
		whc.SetFailures(*i)
	}
	return whc
}

// SetLastError sets the "last_error" field.
func (whc *WebhookHistoryCreate) SetLastError(s string) *WebhookHistoryCreate {
	whc.mutation.SetLastError(s)
	return whc
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableLastError(s *string) *WebhookHistoryCreate {
	if s != nil {
		whc.SetLastError(*s)
	}
	return whc
}

// SetLastResponse sets the "last_response" field.
func (whc *WebhookHistoryCreate) SetLastResponse(s string) *WebhookHistoryCreate {
	whc.mutation.SetLastResponse(s)
	return whc
}

// SetNillableLastResponse sets the "last_response" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableLastResponse(s *string) *WebhookHistoryCreate {
	if s != nil {
		whc.SetLastResponse(*s)
	}
	return whc
}

// SetID sets the "id" field.
func (whc *WebhookHistoryCreate) SetID(s string) *WebhookHistoryCreate {
	whc.mutation.SetID(s)
	return whc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (whc *WebhookHistoryCreate) SetNillableID(s *string) *WebhookHistoryCreate {
	if s != nil {
		whc.SetID(*s)
	}
	return whc
}

// Mutation returns the WebhookHistoryMutation object of the builder.
func (whc *WebhookHistoryCreate) Mutation() *WebhookHistoryMutation {
	return whc.mutation
}

// Save creates the WebhookHistory in the database.
func (whc *WebhookHistoryCreate) Save(ctx context.Context) (*WebhookHistory, error) {
	whc.defaults()
	return withHooks(ctx, whc.sqlSave, whc.mutation, whc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (whc *WebhookHistoryCreate) SaveX(ctx context.Context) *WebhookHistory {
	v, err := whc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (whc *WebhookHistoryCreate) Exec(ctx context.Context) error {
	_, err := whc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (whc *WebhookHistoryCreate) ExecX(ctx context.Context) {
	if err := whc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (whc *WebhookHistoryCreate) defaults() {
	if _, ok := whc.mutation.HistoryTime(); !ok {
		v := webhookhistory.DefaultHistoryTime()
		whc.mutation.SetHistoryTime(v)
	}
	if _, ok := whc.mutation.CreatedAt(); !ok {
		v := webhookhistory.DefaultCreatedAt()
		whc.mutation.SetCreatedAt(v)
	}
	if _, ok := whc.mutation.UpdatedAt(); !ok {
		v := webhookhistory.DefaultUpdatedAt()
		whc.mutation.SetUpdatedAt(v)
	}
	if _, ok := whc.mutation.Enabled(); !ok {
		v := webhookhistory.DefaultEnabled
		whc.mutation.SetEnabled(v)
	}
	if _, ok := whc.mutation.Failures(); !ok {
		v := webhookhistory.DefaultFailures
		whc.mutation.SetFailures(v)
	}
	if _, ok := whc.mutation.ID(); !ok {
		v := webhookhistory.DefaultID()
		whc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (whc *WebhookHistoryCreate) check() error {
	if _, ok := whc.mutation.HistoryTime(); !ok {
		return &ValidationError{Name: "history_time", err: errors.New(`generated: missing required field "WebhookHistory.history_time"`)}
	}
	if _, ok := whc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`generated: missing required field "WebhookHistory.operation"`)}
	}
	if v, ok := whc.mutation.Operation(); ok {
		if err := webhookhistory.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`generated: validator failed for field "WebhookHistory.operation": %w`, err)}
		}
	}
	if _, ok := whc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`generated: missing required field "WebhookHistory.name"`)}
	}
	if _, ok := whc.mutation.DestinationURL(); !ok {
		return &ValidationError{Name: "destination_url", err: errors.New(`generated: missing required field "WebhookHistory.destination_url"`)}
	}
	if _, ok := whc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`generated: missing required field "WebhookHistory.enabled"`)}
	}
	return nil
}

func (whc *WebhookHistoryCreate) sqlSave(ctx context.Context) (*WebhookHistory, error) {
	if err := whc.check(); err != nil {
		return nil, err
	}
	_node, _spec := whc.createSpec()
	if err := sqlgraph.CreateNode(ctx, whc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected WebhookHistory.ID type: %T", _spec.ID.Value)
		}
	}
	whc.mutation.id = &_node.ID
	whc.mutation.done = true
	return _node, nil
}

func (whc *WebhookHistoryCreate) createSpec() (*WebhookHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &WebhookHistory{config: whc.config}
		_spec = sqlgraph.NewCreateSpec(webhookhistory.Table, sqlgraph.NewFieldSpec(webhookhistory.FieldID, field.TypeString))
	)
	_spec.Schema = whc.schemaConfig.WebhookHistory
	if id, ok := whc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := whc.mutation.HistoryTime(); ok {
		_spec.SetField(webhookhistory.FieldHistoryTime, field.TypeTime, value)
		_node.HistoryTime = value
	}
	if value, ok := whc.mutation.Operation(); ok {
		_spec.SetField(webhookhistory.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := whc.mutation.Ref(); ok {
		_spec.SetField(webhookhistory.FieldRef, field.TypeString, value)
		_node.Ref = value
	}
	if value, ok := whc.mutation.CreatedAt(); ok {
		_spec.SetField(webhookhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := whc.mutation.UpdatedAt(); ok {
		_spec.SetField(webhookhistory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := whc.mutation.CreatedBy(); ok {
		_spec.SetField(webhookhistory.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := whc.mutation.UpdatedBy(); ok {
		_spec.SetField(webhookhistory.FieldUpdatedBy, field.TypeString, value)
		_node.UpdatedBy = value
	}
	if value, ok := whc.mutation.DeletedAt(); ok {
		_spec.SetField(webhookhistory.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := whc.mutation.DeletedBy(); ok {
		_spec.SetField(webhookhistory.FieldDeletedBy, field.TypeString, value)
		_node.DeletedBy = value
	}
	if value, ok := whc.mutation.OwnerID(); ok {
		_spec.SetField(webhookhistory.FieldOwnerID, field.TypeString, value)
		_node.OwnerID = value
	}
	if value, ok := whc.mutation.Name(); ok {
		_spec.SetField(webhookhistory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := whc.mutation.Description(); ok {
		_spec.SetField(webhookhistory.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := whc.mutation.DestinationURL(); ok {
		_spec.SetField(webhookhistory.FieldDestinationURL, field.TypeString, value)
		_node.DestinationURL = value
	}
	if value, ok := whc.mutation.Enabled(); ok {
		_spec.SetField(webhookhistory.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := whc.mutation.Callback(); ok {
		_spec.SetField(webhookhistory.FieldCallback, field.TypeString, value)
		_node.Callback = value
	}
	if value, ok := whc.mutation.ExpiresAt(); ok {
		_spec.SetField(webhookhistory.FieldExpiresAt, field.TypeTime, value)
		_node.ExpiresAt = value
	}
	if value, ok := whc.mutation.Secret(); ok {
		_spec.SetField(webhookhistory.FieldSecret, field.TypeBytes, value)
		_node.Secret = value
	}
	if value, ok := whc.mutation.Failures(); ok {
		_spec.SetField(webhookhistory.FieldFailures, field.TypeInt, value)
		_node.Failures = value
	}
	if value, ok := whc.mutation.LastError(); ok {
		_spec.SetField(webhookhistory.FieldLastError, field.TypeString, value)
		_node.LastError = value
	}
	if value, ok := whc.mutation.LastResponse(); ok {
		_spec.SetField(webhookhistory.FieldLastResponse, field.TypeString, value)
		_node.LastResponse = value
	}
	return _node, _spec
}

// WebhookHistoryCreateBulk is the builder for creating many WebhookHistory entities in bulk.
type WebhookHistoryCreateBulk struct {
	config
	err      error
	builders []*WebhookHistoryCreate
}

// Save creates the WebhookHistory entities in the database.
func (whcb *WebhookHistoryCreateBulk) Save(ctx context.Context) ([]*WebhookHistory, error) {
	if whcb.err != nil {
		return nil, whcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(whcb.builders))
	nodes := make([]*WebhookHistory, len(whcb.builders))
	mutators := make([]Mutator, len(whcb.builders))
	for i := range whcb.builders {
		func(i int, root context.Context) {
			builder := whcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebhookHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, whcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, whcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, whcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (whcb *WebhookHistoryCreateBulk) SaveX(ctx context.Context) []*WebhookHistory {
	v, err := whcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (whcb *WebhookHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := whcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (whcb *WebhookHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := whcb.Exec(ctx); err != nil {
		panic(err)
	}
}
