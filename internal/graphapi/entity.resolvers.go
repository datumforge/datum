package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/datumforge/datum/internal/ent/generated"
)

// CreateEntity is the resolver for the createEntity field.
func (r *mutationResolver) CreateEntity(ctx context.Context, input generated.CreateEntityInput) (*EntityCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).Entity.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "entity"}, r.logger)
	}

	return &EntityCreatePayload{
		Entity: res,
	}, nil
}

// CreateBulkEntity is the resolver for the createBulkEntity field.
func (r *mutationResolver) CreateBulkEntity(ctx context.Context, input []*generated.CreateEntityInput) (*EntityBulkCreatePayload, error) {
	return r.bulkCreateEntity(ctx, input)
}

// CreateBulkCSVEntity is the resolver for the createBulkCSVEntity field.
func (r *mutationResolver) CreateBulkCSVEntity(ctx context.Context, input graphql.Upload) (*EntityBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateEntityInput](input)
	if err != nil {
		r.logger.Errorw("failed to unmarshal bulk data", "error", err)

		return nil, err
	}

	return r.bulkCreateEntity(ctx, data)
}

// UpdateEntity is the resolver for the updateEntity field.
func (r *mutationResolver) UpdateEntity(ctx context.Context, id string, input generated.UpdateEntityInput) (*EntityUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).Entity.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "entity"}, r.logger)
	}

	res, err = res.Update().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "entity"}, r.logger)
	}

	return &EntityUpdatePayload{
		Entity: res,
	}, nil
}

// DeleteEntity is the resolver for the deleteEntity field.
func (r *mutationResolver) DeleteEntity(ctx context.Context, id string) (*EntityDeletePayload, error) {
	if err := withTransactionalMutation(ctx).Entity.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "entity"}, r.logger)
	}

	if err := generated.EntityEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &EntityDeletePayload{
		DeletedID: id,
	}, nil
}

// Entity is the resolver for the entity field.
func (r *queryResolver) Entity(ctx context.Context, id string) (*generated.Entity, error) {
	res, err := withTransactionalMutation(ctx).Entity.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "entity"}, r.logger)
	}

	return res, nil
}
