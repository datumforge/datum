package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/pkg/rout"
)

// CreateFeature is the resolver for the createFeature field.
func (r *mutationResolver) CreateFeature(ctx context.Context, input generated.CreateFeatureInput) (*FeatureCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		r.logger.Errorw("failed to set organization in auth context", "error", err)

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	res, err := withTransactionalMutation(ctx).Feature.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "feature"}, r.logger)
	}

	return &FeatureCreatePayload{
		Feature: res,
	}, nil
}

// CreateBulkFeature is the resolver for the createBulkFeature field.
func (r *mutationResolver) CreateBulkFeature(ctx context.Context, input []*generated.CreateFeatureInput) (*FeatureBulkCreatePayload, error) {
	return r.bulkCreateFeature(ctx, input)
}

// CreateBulkCSVFeature is the resolver for the createBulkCSVFeature field.
func (r *mutationResolver) CreateBulkCSVFeature(ctx context.Context, input graphql.Upload) (*FeatureBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateFeatureInput](input)
	if err != nil {
		r.logger.Errorw("failed to unmarshal bulk data", "error", err)

		return nil, err
	}

	return r.bulkCreateFeature(ctx, data)
}

// UpdateFeature is the resolver for the updateFeature field.
func (r *mutationResolver) UpdateFeature(ctx context.Context, id string, input generated.UpdateFeatureInput) (*FeatureUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).Feature.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "feature"}, r.logger)
	}
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, &res.OwnerID); err != nil {
		r.logger.Errorw("failed to set organization in auth context", "error", err)

		return nil, ErrPermissionDenied
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "feature"}, r.logger)
	}

	return &FeatureUpdatePayload{
		Feature: res,
	}, nil
}

// DeleteFeature is the resolver for the deleteFeature field.
func (r *mutationResolver) DeleteFeature(ctx context.Context, id string) (*FeatureDeletePayload, error) {
	if err := withTransactionalMutation(ctx).Feature.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "feature"}, r.logger)
	}

	if err := generated.FeatureEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &FeatureDeletePayload{
		DeletedID: id,
	}, nil
}

// Feature is the resolver for the feature field.
func (r *queryResolver) Feature(ctx context.Context, id string) (*generated.Feature, error) {
	res, err := withTransactionalMutation(ctx).Feature.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "feature"}, r.logger)
	}

	return res, nil
}
