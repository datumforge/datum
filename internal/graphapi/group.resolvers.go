package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"

	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/internal/ent/generated/privacy"
)

// CreateGroup is the resolver for the createGroup field.
func (r *mutationResolver) CreateGroup(ctx context.Context, input generated.CreateGroupInput) (*GroupCreatePayload, error) {
	if r.authDisabled {
		ctx = privacy.DecisionContext(ctx, privacy.Allow)
	}

	group, err := r.client.Group.Create().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			return nil, err
		}

		if generated.IsConstraintError(err) {
			return nil, err
		}

		r.logger.Errorw("failed to create group", "error", err)
		return nil, ErrInternalServerError
	}

	return &GroupCreatePayload{Group: group}, err
}

// UpdateGroup is the resolver for the updateGroup field.
func (r *mutationResolver) UpdateGroup(ctx context.Context, id string, input generated.UpdateGroupInput) (*GroupUpdatePayload, error) {
	// TODO - add permissions checks

	group, err := r.client.Group.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		r.logger.Errorw("failed to get group", "error", err)
		return nil, ErrInternalServerError
	}

	group, err = group.Update().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			return nil, err
		}

		r.logger.Errorw("failed to update group", "error", err)
		return nil, ErrInternalServerError
	}

	return &GroupUpdatePayload{Group: group}, nil
}

// DeleteGroup is the resolver for the deleteGroup field.
func (r *mutationResolver) DeleteGroup(ctx context.Context, id string) (*GroupDeletePayload, error) {
	// TODO - add permissions checks

	if err := r.client.Group.DeleteOneID(id).Exec(ctx); err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		r.logger.Errorw("failed to delete group", "error", err)
		return nil, err
	}

	return &GroupDeletePayload{DeletedID: id}, nil
}

// Group is the resolver for the group field.
func (r *queryResolver) Group(ctx context.Context, id string) (*generated.Group, error) {
	group, err := r.client.Group.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		r.logger.Errorw("failed to get group", "error", err)
		return nil, ErrInternalServerError
	}

	return group, nil
}
