package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.41

import (
	"context"
	"errors"

	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/internal/ent/generated/privacy"
)

// CreateInvite is the resolver for the createInvite field.
func (r *mutationResolver) CreateInvite(ctx context.Context, input generated.CreateInviteInput) (*InviteCreatePayload, error) {
	om, err := withTransactionalMutation(ctx).Invite.Create().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			validationError := err.(*generated.ValidationError)

			r.logger.Debugw("validation error", "field", validationError.Name, "error", validationError.Error())

			return nil, validationError
		}

		if generated.IsConstraintError(err) {
			constraintError := err.(*generated.ConstraintError)

			r.logger.Debugw("constraint error", "error", constraintError.Error())

			return nil, constraintError
		}

		if errors.Is(err, privacy.Deny) {
			return nil, newPermissionDeniedError(ActionCreate, "invite")
		}

		r.logger.Errorw("failed to create invitation", "error", err)

		return nil, err
	}

	return &InviteCreatePayload{Invite: om}, nil
}

// UpdateInvite is the resolver for the updateInvite field.
func (r *mutationResolver) UpdateInvite(ctx context.Context, id string, input generated.UpdateInviteInput) (*InviteUpdatePayload, error) {
	invite, err := withTransactionalMutation(ctx).Invite.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		if errors.Is(err, privacy.Deny) {
			r.logger.Errorw("failed to get invite on update", "error", err)

			return nil, newPermissionDeniedError(ActionGet, "invite")
		}

		r.logger.Errorw("failed to get invite", "error", err)
		return nil, ErrInternalServerError
	}

	invite, err = invite.Update().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			return nil, err
		}

		if errors.Is(err, privacy.Deny) {
			r.logger.Errorw("failed to update invitation", "error", err)

			return nil, newPermissionDeniedError(ActionUpdate, "invite")
		}

		r.logger.Errorw("failed to update invitation", "error", err)
		return nil, ErrInternalServerError
	}

	return &InviteUpdatePayload{Invite: invite}, nil
}

// DeleteInvite is the resolver for the deleteInvite field.
func (r *mutationResolver) DeleteInvite(ctx context.Context, id string) (*InviteDeletePayload, error) {
	if err := withTransactionalMutation(ctx).Invite.DeleteOneID(id).Exec(ctx); err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		if errors.Is(err, privacy.Deny) {
			return nil, newPermissionDeniedError(ActionDelete, "invite")
		}

		r.logger.Errorw("failed to delete invitation", "error", err)
		return nil, err
	}

	if err := generated.InviteEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &InviteDeletePayload{DeletedID: id}, nil
}

// Invite is the resolver for the invite field.
func (r *queryResolver) Invite(ctx context.Context, id string) (*generated.Invite, error) {
	inv, err := withTransactionalMutation(ctx).Invite.Get(ctx, id)
	if err != nil {
		r.logger.Errorw("failed to get invitation", "error", err)

		if generated.IsNotFound(err) {
			return nil, err
		}

		if errors.Is(err, privacy.Deny) {
			return nil, newPermissionDeniedError(ActionGet, "invite")
		}

		return nil, ErrInternalServerError
	}

	return inv, nil
}
