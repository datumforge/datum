package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/datumforge/datum/internal/ent/generated"
)

// CreateOrganizationSetting is the resolver for the createOrganizationSetting field.
func (r *mutationResolver) CreateOrganizationSetting(ctx context.Context, input generated.CreateOrganizationSettingInput) (*OrganizationSettingCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).OrganizationSetting.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "organizationsetting"}, r.logger)
	}

	return &OrganizationSettingCreatePayload{
		OrganizationSetting: res,
	}, nil
}

// CreateBulkOrganizationSetting is the resolver for the createBulkOrganizationSetting field.
func (r *mutationResolver) CreateBulkOrganizationSetting(ctx context.Context, input []*generated.CreateOrganizationSettingInput) (*OrganizationSettingBulkCreatePayload, error) {
	return r.bulkCreateOrganizationSetting(ctx, input)
}

// CreateBulkCSVOrganizationSetting is the resolver for the createBulkCSVOrganizationSetting field.
func (r *mutationResolver) CreateBulkCSVOrganizationSetting(ctx context.Context, input graphql.Upload) (*OrganizationSettingBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateOrganizationSettingInput](input)
	if err != nil {
		r.logger.Errorw("failed to unmarshal bulk data", "error", err)

		return nil, err
	}

	return r.bulkCreateOrganizationSetting(ctx, data)
}

// UpdateOrganizationSetting is the resolver for the updateOrganizationSetting field.
func (r *mutationResolver) UpdateOrganizationSetting(ctx context.Context, id string, input generated.UpdateOrganizationSettingInput) (*OrganizationSettingUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).OrganizationSetting.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "organizationsetting"}, r.logger)
	}

	// setup update request
	req := res.Update().SetInput(input).AppendTags(input.AppendTags).AppendDomains(input.AppendDomains)

	res, err = req.Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "organizationsetting"}, r.logger)
	}

	return &OrganizationSettingUpdatePayload{
		OrganizationSetting: res,
	}, nil
}

// DeleteOrganizationSetting is the resolver for the deleteOrganizationSetting field.
func (r *mutationResolver) DeleteOrganizationSetting(ctx context.Context, id string) (*OrganizationSettingDeletePayload, error) {
	if err := withTransactionalMutation(ctx).OrganizationSetting.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "organizationsetting"}, r.logger)
	}

	if err := generated.OrganizationSettingEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &OrganizationSettingDeletePayload{
		DeletedID: id,
	}, nil
}

// OrganizationSetting is the resolver for the organizationSetting field.
func (r *queryResolver) OrganizationSetting(ctx context.Context, id string) (*generated.OrganizationSetting, error) {
	res, err := withTransactionalMutation(ctx).OrganizationSetting.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "organizationsetting"}, r.logger)
	}

	return res, nil
}
