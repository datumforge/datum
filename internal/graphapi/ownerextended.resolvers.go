package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/pkg/auth"
	"github.com/datumforge/datum/pkg/middleware/echocontext"
)

// SetOrganizationID is the resolver for the setOrganizationID field.
func (r *createSubscriberInputResolver) SetOrganizationID(ctx context.Context, obj *generated.CreateSubscriberInput, data *string) error {
	orgID, err := auth.GetOrganizationIDFromContext(ctx)
	if err == nil && orgID != "" {
		return nil
	}

	// this would happen on a PAT authenticated request because the org id is not set
	if data == nil {
		return fmt.Errorf("unable to determine organization id")
	}

	// ensure this org is authenticated
	orgIDs, err := auth.GetOrganizationIDsFromContext(ctx)
	if err != nil {
		return err
	}

	if !orgContains(orgIDs, *data) {
		return fmt.Errorf("organization id %s not found in the authenticated organizations", orgID)
	}

	au, err := auth.GetAuthenticatedUserContext(ctx)
	au.OrganizationID = *data

	ec, err:= echocontext.EchoContextFromContext(ctx)
	if err != nil {
		return err
	}

	auth.SetAuthenticatedUserContext(ec, au)

	return nil
}

func orgContains(orgIDs []string, orgID string) bool {
	for _, id := range orgIDs {
		if id == orgID {
			return true
		}
	}

	return false
}
