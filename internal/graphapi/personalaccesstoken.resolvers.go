package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/datumforge/datum/internal/ent/generated"
)

// CreatePersonalAccessToken is the resolver for the createPersonalAccessToken field.
func (r *mutationResolver) CreatePersonalAccessToken(ctx context.Context, input generated.CreatePersonalAccessTokenInput) (*PersonalAccessTokenCreatePayload, error) {
	res, err := withTransactionalMutation(ctx).PersonalAccessToken.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "personalaccesstoken"}, r.logger)
	}

	return &PersonalAccessTokenCreatePayload{
		PersonalAccessToken: res,
	}, nil
}

// CreateBulkPersonalAccessToken is the resolver for the createBulkPersonalAccessToken field.
func (r *mutationResolver) CreateBulkPersonalAccessToken(ctx context.Context, input []*generated.CreatePersonalAccessTokenInput) (*PersonalAccessTokenBulkCreatePayload, error) {
	return r.bulkCreatePersonalAccessToken(ctx, input)
}

// CreateBulkCSVPersonalAccessToken is the resolver for the createBulkCSVPersonalAccessToken field.
func (r *mutationResolver) CreateBulkCSVPersonalAccessToken(ctx context.Context, input graphql.Upload) (*PersonalAccessTokenBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreatePersonalAccessTokenInput](input)
	if err != nil {
		r.logger.Errorw("failed to unmarshal bulk data", "error", err)

		return nil, err
	}

	return r.bulkCreatePersonalAccessToken(ctx, data)
}

// UpdatePersonalAccessToken is the resolver for the updatePersonalAccessToken field.
func (r *mutationResolver) UpdatePersonalAccessToken(ctx context.Context, id string, input generated.UpdatePersonalAccessTokenInput) (*PersonalAccessTokenUpdatePayload, error) {
	res, err := withTransactionalMutation(ctx).PersonalAccessToken.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "personalaccesstoken"}, r.logger)
	}

	res, err = res.Update().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "personalaccesstoken"}, r.logger)
	}

	return &PersonalAccessTokenUpdatePayload{
		PersonalAccessToken: res,
	}, nil
}

// DeletePersonalAccessToken is the resolver for the deletePersonalAccessToken field.
func (r *mutationResolver) DeletePersonalAccessToken(ctx context.Context, id string) (*PersonalAccessTokenDeletePayload, error) {
	if err := withTransactionalMutation(ctx).PersonalAccessToken.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "personalaccesstoken"}, r.logger)
	}

	if err := generated.PersonalAccessTokenEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &PersonalAccessTokenDeletePayload{
		DeletedID: id,
	}, nil
}

// PersonalAccessToken is the resolver for the personalAccessToken field.
func (r *queryResolver) PersonalAccessToken(ctx context.Context, id string) (*generated.PersonalAccessToken, error) {
	res, err := withTransactionalMutation(ctx).PersonalAccessToken.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "personalaccesstoken"}, r.logger)
	}

	return res, nil
}
