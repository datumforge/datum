package graphapi

// THIS CODE IS REGENERATED BY github.com/datumforge/datum/pkg/gqlplugin. DO NOT EDIT.

import (
	"context"
	"time"

	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/internal/ent/generated/contact"
	"github.com/datumforge/datum/internal/ent/generated/entity"
	"github.com/datumforge/datum/internal/ent/generated/feature"
	"github.com/datumforge/datum/internal/ent/generated/file"
	"github.com/datumforge/datum/internal/ent/generated/group"
	"github.com/datumforge/datum/internal/ent/generated/invite"
	"github.com/datumforge/datum/internal/ent/generated/organization"
	"github.com/datumforge/datum/internal/ent/generated/subscriber"
	"github.com/datumforge/datum/internal/ent/generated/template"
	"github.com/datumforge/datum/internal/ent/generated/user"
)

var (
	maxSearchTime = time.Duration(30 * time.Second)
)

// searchResult is a generic struct to hold the result of a search operation
type searchResult[T any] struct {
	result T
	err    error
}

// searchContact searches for Contact based on the query string looking for matches
func searchContacts(ctx context.Context, query string) ([]*generated.Contact, error) {
	return withTransactionalMutation(ctx).Contact.Query().Where(
		contact.Or(
			contact.FullNameContains(query), // search by FullName
			contact.EmailContains(query),    // search by Email
		),
	).All(ctx)
}

// searchOrganization searches for Organization based on the query string looking for matches
func searchOrganizations(ctx context.Context, query string) ([]*generated.Organization, error) {
	return withTransactionalMutation(ctx).Organization.Query().Where(
		organization.Or(
			organization.NameContains(query),        // search by Name
			organization.DisplayNameContains(query), // search by DisplayName
		),
	).All(ctx)
}

// searchInvite searches for Invite based on the query string looking for matches
func searchInvites(ctx context.Context, query string) ([]*generated.Invite, error) {
	return withTransactionalMutation(ctx).Invite.Query().Where(
		invite.Or(
			invite.RecipientContains(query), // search by Recipient
		),
	).All(ctx)
}

// searchFile searches for File based on the query string looking for matches
func searchFiles(ctx context.Context, query string) ([]*generated.File, error) {
	return withTransactionalMutation(ctx).File.Query().Where(
		file.Or(
			file.FileNameContains(query),   // search by FileName
			file.AnnotationContains(query), // search by Annotation
		),
	).All(ctx)
}

// searchUser searches for User based on the query string looking for matches
func searchUsers(ctx context.Context, query string) ([]*generated.User, error) {
	return withTransactionalMutation(ctx).User.Query().Where(
		user.Or(
			user.EmailContains(query),       // search by Email
			user.FirstNameContains(query),   // search by FirstName
			user.LastNameContains(query),    // search by LastName
			user.DisplayNameContains(query), // search by DisplayName
		),
	).All(ctx)
}

// searchGroup searches for Group based on the query string looking for matches
func searchGroups(ctx context.Context, query string) ([]*generated.Group, error) {
	return withTransactionalMutation(ctx).Group.Query().Where(
		group.Or(
			group.NameContains(query),        // search by Name
			group.DisplayNameContains(query), // search by DisplayName
		),
	).All(ctx)
}

// searchSubscriber searches for Subscriber based on the query string looking for matches
func searchSubscribers(ctx context.Context, query string) ([]*generated.Subscriber, error) {
	return withTransactionalMutation(ctx).Subscriber.Query().Where(
		subscriber.Or(
			subscriber.EmailContains(query), // search by Email
		),
	).All(ctx)
}

// searchFeature searches for Feature based on the query string looking for matches
func searchFeatures(ctx context.Context, query string) ([]*generated.Feature, error) {
	return withTransactionalMutation(ctx).Feature.Query().Where(
		feature.Or(
			feature.NameContains(query),        // search by Name
			feature.DisplayNameContains(query), // search by DisplayName
		),
	).All(ctx)
}

// searchEntity searches for Entity based on the query string looking for matches
func searchEntities(ctx context.Context, query string) ([]*generated.Entity, error) {
	return withTransactionalMutation(ctx).Entity.Query().Where(
		entity.Or(
			entity.NameContains(query),        // search by Name
			entity.DisplayNameContains(query), // search by DisplayName
		),
	).All(ctx)
}

// searchTemplate searches for Template based on the query string looking for matches
func searchTemplates(ctx context.Context, query string) ([]*generated.Template, error) {
	return withTransactionalMutation(ctx).Template.Query().Where(
		template.Or(
			template.NameContains(query), // search by Name
		),
	).All(ctx)
}
