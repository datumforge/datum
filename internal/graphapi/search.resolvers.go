package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/pkg/events/soiree"
)

// Search is the resolver for the search field.
func (r *queryResolver) Search(ctx context.Context, query string) (*GlobalSearchResultConnection, error) {
	// Initialize a goroutine pool with 5 workers and a maximum capacity of 10 tasks
	pool := soiree.NewPondPool(5, 10)

	var (
		orgResults []*generated.Organization
		orgErr     error

		groupResults      []*generated.Group
		groupErr          error
		userResults       []*generated.User
		userErr           error
		subscriberResults []*generated.Subscriber
		subscriberErr     error
	)

	pool.Submit(func() {
		orgResults, orgErr = searchOrganizations(ctx, query)
	})

	pool.Submit(func() {
		groupResults, groupErr = searchGroups(ctx, query)
	})

	pool.Submit(func() {
		userResults, userErr = searchUsers(ctx, query)
	})

	pool.Submit(func() {
		subscriberResults, subscriberErr = searchSubscriber(ctx, query)
	})

	pool.StopAndWaitFor(maxSearchTime)

	pool.Release()

	// Check all errors and return a single error if any of the searches failed
	if orgErr != nil || groupErr != nil || userErr != nil || subscriberErr != nil {
		r.logger.Errorw("search failed", "error",
			"org", orgErr,
			"group", groupErr,
			"user", userErr,
			"subscriber", subscriberErr,
		)

		return nil, ErrSearchFailed
	}

	// return the results
	return &GlobalSearchResultConnection{
		Nodes: []GlobalSearchResult{
			OrganizationSearchResult{
				Organizations: orgResults,
			},
			GroupSearchResult{
				Groups: groupResults,
			},
			UserSearchResult{
				Users: userResults,
			},
			SubscriberSearchResult{
				Subscribers: subscriberResults,
			},
		},
	}, nil
}
