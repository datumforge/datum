package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"errors"

	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/internal/ent/generated/privacy"
	"github.com/datumforge/datum/internal/ent/generated/subscriber"
	"github.com/datumforge/datum/pkg/rout"
)

// CreateSubscriber is the resolver for the createSubscriber field.
func (r *mutationResolver) CreateSubscriber(ctx context.Context, input generated.CreateSubscriberInput) (*SubscriberCreatePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, input.OwnerID); err != nil {
		r.logger.Errorw("failed to set organization in auth context", "error", err)

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	sub, err := withTransactionalMutation(ctx).Subscriber.Create().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			validationError := err.(*generated.ValidationError)

			r.logger.Debugw("validation error", "field", validationError.Name, "error", validationError.Error())

			return nil, validationError
		}

		if generated.IsConstraintError(err) {
			constraintError := err.(*generated.ConstraintError)

			r.logger.Debugw("constraint error", "error", constraintError.Error())

			return nil, newAlreadyExistsError("subscriber", input.Email)
		}

		r.logger.Errorw("failed to create subscriber", "error", err)

		return nil, err
	}

	return &SubscriberCreatePayload{Subscriber: sub}, nil
}

// UpdateSubscriber is the resolver for the updateSubscriber field.
func (r *mutationResolver) UpdateSubscriber(ctx context.Context, email string, input generated.UpdateSubscriberInput) (*SubscriberUpdatePayload, error) {
	subscriber, err := withTransactionalMutation(ctx).Subscriber.Query().
		Where(
			subscriber.EmailEQ(email),
		).Only(ctx)
	if err != nil {
		if errors.Is(err, privacy.Deny) {
			r.logger.Errorw("failed to get subscriber on update", "error", err)

			return nil, newPermissionDeniedError(ActionGet, "subscriber")
		}

		r.logger.Errorw("failed to get subscriber", "error", err)
		return nil, err
	}

	if err := setOrganizationInAuthContext(ctx, &subscriber.OwnerID); err != nil {
		r.logger.Errorw("failed to set organization in auth context", "error", err)

		return nil, ErrPermissionDenied
	}

	subscriber, err = subscriber.Update().SetInput(input).Save(ctx)
	if err != nil {
		if errors.Is(err, privacy.Deny) {
			r.logger.Errorw("failed to update subscriber", "error", err)

			return nil, newPermissionDeniedError(ActionUpdate, "group")
		}

		r.logger.Errorw("failed to update subscriber", "error", err)
		return nil, err
	}

	return &SubscriberUpdatePayload{Subscriber: subscriber}, nil
}

// DeleteSubscriber is the resolver for the deleteSubscriber field.
func (r *mutationResolver) DeleteSubscriber(ctx context.Context, email string, ownerID *string) (*SubscriberDeletePayload, error) {
	// set the organization in the auth context if its not done for us
	if err := setOrganizationInAuthContext(ctx, ownerID); err != nil {
		r.logger.Errorw("failed to set organization in auth context", "error", err)

		return nil, rout.NewMissingRequiredFieldError("owner_id")
	}

	num, err := withTransactionalMutation(ctx).Subscriber.Delete().
		Where(
			subscriber.EmailEQ(email),
		).Exec(ctx)
	if err != nil {
		r.logger.Errorw("failed to delete subscriber", "error", err)

		return nil, err
	}

	if num == 0 {
		return nil, ErrSubscriberNotFound
	}

	return &SubscriberDeletePayload{Email: email}, nil
}

// Subscriber is the resolver for the subscriber field.
func (r *queryResolver) Subscriber(ctx context.Context, email string) (*generated.Subscriber, error) {
	subscriber, err := withTransactionalMutation(ctx).Subscriber.Query().
		Where(
			subscriber.EmailEQ(email),
		).Only(ctx)
	if err != nil {
		if errors.Is(err, privacy.Deny) {
			r.logger.Errorw("failed to get subscriber on update", "error", err)

			return nil, newPermissionDeniedError(ActionGet, "subscriber")
		}

		r.logger.Errorw("failed to get subscriber", "error", err)
		return nil, err
	}

	return subscriber, nil
}
