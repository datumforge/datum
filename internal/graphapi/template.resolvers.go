package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/datumforge/datum/internal/ent/generated"
)

// CreateTemplate is the resolver for the createTemplate field.
func (r *mutationResolver) CreateTemplate(ctx context.Context, input generated.CreateTemplateInput) (*TemplateCreatePayload, error) {
	t, err := withTransactionalMutation(ctx).Template.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionCreate, object: "template"}, r.logger)
	}

	return &TemplateCreatePayload{Template: t}, nil
}

// CreateBulkTemplate is the resolver for the createBulkTemplate field.
func (r *mutationResolver) CreateBulkTemplate(ctx context.Context, input []*generated.CreateTemplateInput) (*TemplateBulkCreatePayload, error) {
	return r.bulkCreateTemplate(ctx, input)
}

// CreateBulkCSVTemplate is the resolver for the createBulkCSVTemplate field.
func (r *mutationResolver) CreateBulkCSVTemplate(ctx context.Context, input graphql.Upload) (*TemplateBulkCreatePayload, error) {
	data, err := unmarshalBulkData[generated.CreateTemplateInput](input)
	if err != nil {
		r.logger.Errorw("failed to unmarshal bulk data", "error", err)

		return nil, err
	}

	return r.bulkCreateTemplate(ctx, data)
}

// UpdateTemplate is the resolver for the updateTemplate field.
func (r *mutationResolver) UpdateTemplate(ctx context.Context, id string, input generated.UpdateTemplateInput) (*TemplateUpdatePayload, error) {
	template, err := withTransactionalMutation(ctx).Template.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "template"}, r.logger)
	}

	template, err = template.Update().SetInput(input).Save(ctx)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionUpdate, object: "template"}, r.logger)
	}

	return &TemplateUpdatePayload{Template: template}, nil
}

// DeleteTemplate is the resolver for the deleteTemplate field.
func (r *mutationResolver) DeleteTemplate(ctx context.Context, id string) (*TemplateDeletePayload, error) {
	if err := withTransactionalMutation(ctx).Template.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, parseRequestError(err, action{action: ActionDelete, object: "template"}, r.logger)
	}

	if err := generated.TemplateEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &TemplateDeletePayload{DeletedID: id}, nil
}

// Template is the resolver for the template field.
func (r *queryResolver) Template(ctx context.Context, id string) (*generated.Template, error) {
	template, err := withTransactionalMutation(ctx).Template.Get(ctx, id)
	if err != nil {
		return nil, parseRequestError(err, action{action: ActionGet, object: "template"}, r.logger)
	}

	return template, nil
}
