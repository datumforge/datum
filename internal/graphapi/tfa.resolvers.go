package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"errors"

	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/internal/ent/generated/privacy"
	"github.com/datumforge/datum/internal/ent/generated/usersetting"
	"github.com/datumforge/datum/internal/ent/privacy/viewer"
)

// CreateTFASetting is the resolver for the createTFASetting field.
func (r *mutationResolver) CreateTFASetting(ctx context.Context, id string, input CreateTFAInput) (*TFASettingCreatePayload, error) {
	// setup view context
	ctx = viewer.NewContext(ctx, viewer.NewUserViewerFromSubject(ctx))

	userSetting, err := withTransactionalMutation(ctx).UserSetting.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		if errors.Is(err, privacy.Deny) {
			return nil, ErrPermissionDenied
		}

		r.logger.Errorw("failed to get user setting", "error", err)
		return nil, ErrInternalServerError
	}

	settings, err := userSetting.Update().Where(usersetting.ID(id)).
		SetIsTfaEnabled(true).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &TFASettingCreatePayload{
		TfaSetting: &TfaSetting{
			RecoveryCodes:     settings.RecoveryCodes,
			IsTfaEnabled:      &settings.IsTfaEnabled,
			IsPhoneOtpAllowed: &settings.IsPhoneOtpAllowed,
			IsEmailOtpAllowed: &settings.IsEmailOtpAllowed,
			IsTotpAllowed:     &settings.IsTotpAllowed,
		},
	}, nil
}
