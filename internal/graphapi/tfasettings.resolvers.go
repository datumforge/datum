package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"fmt"

	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/internal/ent/generated/tfasettings"
	"github.com/datumforge/datum/internal/ent/privacy/viewer"
	"github.com/datumforge/datum/pkg/auth"
)

// CreateTFASettings is the resolver for the createTFASettings field.
func (r *mutationResolver) CreateTFASettings(ctx context.Context, input generated.CreateTFASettingsInput) (*TFASettingsCreatePayload, error) {
	// setup view context
	ctx = viewer.NewContext(ctx, viewer.NewUserViewerFromSubject(ctx))

	userID, err := auth.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}

	input.OwnerID = &userID

	settings, err := withTransactionalMutation(ctx).TFASettings.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &TFASettingsCreatePayload{TfaSettings: settings}, nil
}

// UpdateTFASettings is the resolver for the updateTFASettings field.
func (r *mutationResolver) UpdateTFASettings(ctx context.Context, id string, input generated.UpdateTFASettingsInput) (*TFASettingsUpdatePayload, error) {
	panic(fmt.Errorf("not implemented: UpdateTFASettings - updateTFASettings"))
}

// DeleteTFASettings is the resolver for the deleteTFASettings field.
func (r *mutationResolver) DeleteTFASettings(ctx context.Context, id string) (*TFASettingsDeletePayload, error) {
	// setup view context
	ctx = viewer.NewContext(ctx, viewer.NewUserViewerFromSubject(ctx))

	if err := withTransactionalMutation(ctx).TFASettings.DeleteOneID(id).Exec(ctx); err != nil {
		return nil, err
	}

	return &TFASettingsDeletePayload{DeletedID: id}, nil
}

// TfaSettings is the resolver for the tfaSettings field.
func (r *queryResolver) TfaSettings(ctx context.Context, id string) (*generated.TFASettings, error) {
	// setup view context
	ctx = viewer.NewContext(ctx, viewer.NewUserViewerFromSubject(ctx))

	userID, err := auth.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}

	var (
		settings *generated.TFASettings
	)

	if id != "" {
		settings, err = withTransactionalMutation(ctx).TFASettings.Get(ctx, id)
		if err != nil {
			return nil, err
		}
	} else {
		settings, err = withTransactionalMutation(ctx).TFASettings.Query().Where(tfasettings.OwnerID(userID)).Only(ctx)
		if err != nil {
			return nil, err
		}
	}

	return settings, nil
}
