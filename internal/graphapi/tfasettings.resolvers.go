package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"errors"

	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/internal/ent/generated/privacy"
	"github.com/datumforge/datum/internal/ent/generated/tfasettings"
	"github.com/datumforge/datum/internal/ent/privacy/viewer"
	"github.com/datumforge/datum/pkg/auth"
	"github.com/datumforge/datum/pkg/rout"
)

// CreateTFASettings is the resolver for the createTFASettings field.
func (r *mutationResolver) CreateTFASettings(ctx context.Context, input generated.CreateTFASettingsInput) (*TFASettingsCreatePayload, error) {
	// setup view context
	ctx = viewer.NewContext(ctx, viewer.NewUserViewerFromSubject(ctx))

	userID, err := auth.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}

	input.OwnerID = &userID

	settings, err := withTransactionalMutation(ctx).TFASettings.Create().SetInput(input).Save(ctx)
	if err != nil {
		return nil, err
	}

	return &TFASettingsCreatePayload{TfaSettings: settings}, nil
}

// UpdateTFASettings is the resolver for the updateTFASettings field.
func (r *mutationResolver) UpdateTFASettings(ctx context.Context, input generated.UpdateTFASettingsInput) (*TFASettingsUpdatePayload, error) {
	// setup view context
	ctx = viewer.NewContext(ctx, viewer.NewUserViewerFromSubject(ctx))

	userID, err := auth.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}

	settings, err := withTransactionalMutation(ctx).TFASettings.Query().Where(tfasettings.OwnerID(userID)).Only(ctx)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		if errors.Is(err, privacy.Deny) {
			return nil, ErrPermissionDenied
		}

		r.logger.Errorw("failed to get tfa settings", "error", err)
		return nil, ErrInternalServerError
	}

	settings, err = settings.Update().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			ve := err.(*generated.ValidationError)

			return nil, rout.InvalidField(ve.Name)
		}

		r.logger.Errorw("failed to update tfa settings", "error", err)
		return nil, err
	}

	return &TFASettingsUpdatePayload{TfaSettings: settings}, nil
}

// TfaSettings is the resolver for the tfaSettings field.
func (r *queryResolver) TfaSettings(ctx context.Context, id string) (*generated.TFASettings, error) {
	// setup view context
	ctx = viewer.NewContext(ctx, viewer.NewUserViewerFromSubject(ctx))

	userID, err := auth.GetUserIDFromContext(ctx)
	if err != nil {
		return nil, err
	}

	var (
		settings *generated.TFASettings
	)

	if id != "" {
		settings, err = withTransactionalMutation(ctx).TFASettings.Get(ctx, id)
		if err != nil {
			return nil, err
		}
	} else {
		settings, err = withTransactionalMutation(ctx).TFASettings.Query().Where(tfasettings.OwnerID(userID)).Only(ctx)
		if err != nil {
			return nil, err
		}
	}

	return settings, nil
}

// RegenBackupCodes is the resolver for the regenBackupCodes field.
func (r *updateTFASettingsInputResolver) RegenBackupCodes(ctx context.Context, obj *generated.UpdateTFASettingsInput, data *bool) error {
	ctx = viewer.NewContext(ctx, viewer.NewUserViewerFromSubject(ctx))

	if data != nil && *data == true {
		obj.ClearRecoveryCodes = true
	}

	return nil
}
