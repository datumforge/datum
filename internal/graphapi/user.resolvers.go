package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"errors"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/internal/ent/generated/privacy"
	_ "github.com/datumforge/datum/internal/ent/generated/runtime"
	"github.com/datumforge/datum/pkg/auth"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input generated.CreateUserInput) (*UserCreatePayload, error) {
	// TODO: look at allowing this resolver to invite the user instead of creating them directly
	// for now, return permission denied
	return nil, ErrPermissionDenied
}

// CreateBulkUser is the resolver for the createBulkUser field.
func (r *mutationResolver) CreateBulkUser(ctx context.Context, input []*generated.CreateUserInput) (*UserBulkCreatePayload, error) {
	panic(fmt.Errorf("not implemented: CreateBulkUser - createBulkUser"))
}

// CreateBulkCSVUser is the resolver for the createBulkCSVUser field.
func (r *mutationResolver) CreateBulkCSVUser(ctx context.Context, input graphql.Upload) (*UserBulkCreatePayload, error) {
	panic(fmt.Errorf("not implemented: CreateBulkCSVUser - createBulkCSVUser"))
}

// UpdateUser is the resolver for the updateUser field.
func (r *mutationResolver) UpdateUser(ctx context.Context, id string, input generated.UpdateUserInput) (*UserUpdatePayload, error) {
	user, err := withTransactionalMutation(ctx).User.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		if errors.Is(err, privacy.Deny) {
			return nil, ErrPermissionDenied

		}

		r.logger.Errorw("failed to get user", "error", err)
		return nil, ErrInternalServerError
	}

	user, err = user.Update().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			return nil, err
		}

		// the password field is encrypted so we cannot use the
		// built in validation function/validation error
		if errors.Is(err, auth.ErrPasswordTooWeak) {
			return nil, err
		}

		r.logger.Errorw("failed to update user", "error", err)
		return nil, ErrInternalServerError
	}

	return &UserUpdatePayload{User: user}, nil
}

// DeleteUser is the resolver for the deleteUser field.
func (r *mutationResolver) DeleteUser(ctx context.Context, id string) (*UserDeletePayload, error) {
	if err := withTransactionalMutation(ctx).User.DeleteOneID(id).Exec(ctx); err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		if errors.Is(err, privacy.Deny) {
			return nil, ErrPermissionDenied

		}

		r.logger.Errorw("failed to delete user", "error", err)
		return nil, err
	}

	if err := generated.UserEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return &UserDeletePayload{DeletedID: id}, nil
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id string) (*generated.User, error) {
	user, err := withTransactionalMutation(ctx).User.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		if errors.Is(err, privacy.Deny) {
			return nil, ErrPermissionDenied

		}

		r.logger.Errorw("failed to get user", "error", err)
		return nil, ErrInternalServerError
	}

	return user, nil
}
