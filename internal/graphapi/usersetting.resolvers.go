package graphapi

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"
	"errors"
	"fmt"

	"github.com/datumforge/datum/internal/ent/generated"
	"github.com/datumforge/datum/internal/ent/generated/privacy"
	"github.com/datumforge/datum/pkg/rout"
)

// CreateUserSetting is the resolver for the createUserSetting field.
func (r *mutationResolver) CreateUserSetting(ctx context.Context, input generated.CreateUserSettingInput) (*UserSettingCreatePayload, error) {
	panic(fmt.Errorf("not implemented: CreateUserSetting - createUserSetting"))
}

// CreateBulkUserSetting is the resolver for the createBulkUserSetting field.
func (r *mutationResolver) CreateBulkUserSetting(ctx context.Context, input []*generated.CreateUserSettingInput) (*UserSettingBulkCreatePayload, error) {
	panic(fmt.Errorf("not implemented: CreateBulkUserSetting - createBulkUserSetting"))
}

// UpdateUserSetting is the resolver for the updateUserSetting field.
func (r *mutationResolver) UpdateUserSetting(ctx context.Context, id string, input generated.UpdateUserSettingInput) (*UserSettingUpdatePayload, error) {
	userSetting, err := withTransactionalMutation(ctx).UserSetting.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		if errors.Is(err, privacy.Deny) {
			return nil, ErrPermissionDenied
		}

		r.logger.Errorw("failed to get user setting", "error", err)
		return nil, ErrInternalServerError
	}

	userSetting, err = userSetting.Update().SetInput(input).Save(ctx)
	if err != nil {
		if generated.IsValidationError(err) {
			ve := err.(*generated.ValidationError)

			return nil, rout.InvalidField(ve.Name)
		}

		r.logger.Errorw("failed to update user setting", "error", err)
		return nil, err
	}

	return &UserSettingUpdatePayload{UserSetting: userSetting}, nil
}

// DeleteUserSetting is the resolver for the deleteUserSetting field.
func (r *mutationResolver) DeleteUserSetting(ctx context.Context, id string) (*UserSettingDeletePayload, error) {
	panic(fmt.Errorf("not implemented: DeleteUserSetting - deleteUserSetting"))
}

// UserSetting is the resolver for the UserSetting field.
func (r *queryResolver) UserSetting(ctx context.Context, id string) (*generated.UserSetting, error) {
	userSetting, err := withTransactionalMutation(ctx).UserSetting.Get(ctx, id)
	if err != nil {
		if generated.IsNotFound(err) {
			return nil, err
		}

		r.logger.Errorw("failed to get user setting", "error", err)
		return nil, ErrInternalServerError
	}

	if err := generated.UserSettingEdgeCleanup(ctx, id); err != nil {
		return nil, newCascadeDeleteError(err)
	}

	return userSetting, nil
}
