{
  "$schema": "https://json-schema.org/draft/2020-12/schema",
  "$id": "https://github.com/datumforge/datum/config/config.-config",
  "$defs": {
    "[]string": {
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "cache.Config": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled to enable redis client in the server"
        },
        "address": {
          "type": "string",
          "description": "Address is the host:port to connect to redis"
        },
        "name": {
          "type": "string",
          "description": "Name of the connecting client"
        },
        "username": {
          "type": "string",
          "description": "Username to connect to redis"
        },
        "password": {
          "type": "string",
          "description": "Password, must match the password specified in the server configuration"
        },
        "db": {
          "type": "integer",
          "description": "DB to be selected after connecting to the server, 0 uses the default"
        },
        "dial_timeout": {
          "type": "integer",
          "description": "Dial timeout for establishing new connections, defaults to 5s"
        },
        "read_timeout": {
          "type": "integer",
          "description": "Timeout for socket reads. If reached, commands will fail\nwith a timeout instead of blocking. Supported values:\n  - `0` - default timeout (3 seconds).\n  - `-1` - no timeout (block indefinitely).\n  - `-2` - disables SetReadDeadline calls completely."
        },
        "write_timeout": {
          "type": "integer",
          "description": "Timeout for socket writes. If reached, commands will fail\nwith a timeout instead of blocking.  Supported values:\n  - `0` - default timeout (3 seconds).\n  - `-1` - no timeout (block indefinitely).\n  - `-2` - disables SetWriteDeadline calls completely."
        },
        "max_retries": {
          "type": "integer",
          "description": "MaxRetries before giving up.\nDefault is 3 retries; -1 (not 0) disables retries."
        },
        "min_idle_conns": {
          "type": "integer",
          "description": "MinIdleConns is useful when establishing new connection is slow.\nDefault is 0. the idle connections are not closed by default."
        },
        "max_idle_conns": {
          "type": "integer",
          "description": "Maximum number of idle connections.\nDefault is 0. the idle connections are not closed by default."
        },
        "max_active_conns": {
          "type": "integer",
          "description": "Maximum number of connections allocated by the pool at a given time.\nWhen zero, there is no limit on the number of connections in the pool."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Config for the redis client used to store key-value pairs"
    },
    "config.Auth": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled authentication on the server, not recommended to disable"
        },
        "token": {
          "$ref": "#/$defs/tokens.Config",
          "description": "Token contains the token config settings for Datum issued tokens"
        },
        "supported_providers": {
          "$ref": "#/$defs/[]string",
          "description": "SupportedProviders are the supported oauth providers that have been configured"
        },
        "providers": {
          "$ref": "#/$defs/handlers.OauthProviderConfig",
          "description": "Providers contains supported oauth2 providers configuration"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "token"
      ],
      "description": "Auth settings including oauth2 providers and datum token configuration"
    },
    "config.CORS": {
      "properties": {
        "allow_origins": {
          "$ref": "#/$defs/[]string",
          "description": "AllowOrigins is a list of allowed origin to indicate whether the response can be shared with\nrequesting code from the given origin"
        },
        "cookie_insecure": {
          "type": "boolean",
          "description": "CookieInsecure allows CSRF cookie to be sent to servers that the browser considers\nunsecured. Useful for cases where the connection is secured via VPN rather than\nHTTPS directly."
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "CORS settings for the server to allow cross origin requests"
    },
    "config.Server": {
      "properties": {
        "debug": {
          "type": "boolean",
          "description": "Debug enables debug mode for the server"
        },
        "dev": {
          "type": "boolean",
          "description": "Dev enables echo's dev mode options"
        },
        "listen": {
          "type": "string",
          "description": "Listen sets the listen address to serve the echo server on"
        },
        "shutdown_grace_period": {
          "type": "integer",
          "description": "ShutdownGracePeriod sets the grace period for in flight requests before shutting down"
        },
        "read_timeout": {
          "type": "integer",
          "description": "ReadTimeout sets the maximum duration for reading the entire request including the body"
        },
        "write_timeout": {
          "type": "integer",
          "description": "WriteTimeout sets the maximum duration before timing out writes of the response"
        },
        "idle_timeout": {
          "type": "integer",
          "description": "IdleTimeout sets the maximum amount of time to wait for the next request when keep-alives are enabled"
        },
        "read_header_timeout": {
          "type": "integer",
          "description": "ReadHeaderTimeout sets the amount of time allowed to read request headers"
        },
        "tls": {
          "$ref": "#/$defs/config.TLS",
          "description": "TLS contains the tls configuration settings"
        },
        "cors": {
          "$ref": "#/$defs/config.CORS",
          "description": "CORS contains settings to allow cross origin settings and insecure cookies"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "listen"
      ],
      "description": "Server settings for the echo server"
    },
    "config.TLS": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled turns on TLS settings for the server"
        },
        "cert_file": {
          "type": "string",
          "description": "CertFile location for the TLS server"
        },
        "cert_key": {
          "type": "string",
          "description": "CertKey file location for the TLS server"
        },
        "auto_cert": {
          "type": "boolean",
          "description": "AutoCert generates the cert with letsencrypt, this does not work on localhost"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "TLS settings for the server for secure connections"
    },
    "emails.Config": {
      "properties": {
        "send_grid_api_key": {
          "type": "string",
          "description": "SendGridAPIKey is the SendGrid API key to authenticate with the service"
        },
        "from_email": {
          "type": "string",
          "description": "FromEmail is the default email to send from"
        },
        "testing": {
          "type": "boolean",
          "description": "Testing is a bool flag to indicate we shouldn't be sending live emails, and instead should be writing out fixtures"
        },
        "archive": {
          "type": "string",
          "description": "Archive is only supported in testing mode and is what is tied through the mock to write out fixtures"
        },
        "datum_list_id": {
          "type": "string",
          "description": "DatumListID is the UUID SendGrid spits out when you create marketing lists"
        },
        "admin_email": {
          "type": "string",
          "description": "AdminEmail is an internal group email configured within datum for email testing and visibility"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Config for sending emails via SendGrid and managing marketing contacts"
    },
    "entdb.Config": {
      "properties": {
        "debug": {
          "type": "boolean",
          "description": "Debug to print debug database logs"
        },
        "driver_name": {
          "type": "string",
          "description": "SQL Driver name from dialect.Driver"
        },
        "multi_write": {
          "type": "boolean",
          "description": "MultiWrite enabled writing to two databases simultaneously"
        },
        "primary_db_source": {
          "type": "string",
          "description": "Primary write database source"
        },
        "secondary_db_source": {
          "type": "string",
          "description": "Secondary write database source, if multi write is enabled"
        },
        "cache_ttl": {
          "type": "integer",
          "description": "CacheTTL to have results cached for subsequent requests"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "primary_db_source"
      ],
      "description": "Config Settings for the ent database client"
    },
    "fgax.Config": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "enables authorization checks with openFGA"
        },
        "store_name": {
          "type": "string",
          "description": "name of openFGA store"
        },
        "host_url": {
          "type": "string",
          "description": "host url with scheme of the openFGA API"
        },
        "store_id": {
          "type": "string",
          "description": "id of openFGA store"
        },
        "model_id": {
          "type": "string",
          "description": "id of openFGA model"
        },
        "create_new_model": {
          "type": "boolean",
          "description": "force create a new model"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "host_url"
      ]
    },
    "github.ProviderConfig": {
      "properties": {
        "client_id": {
          "type": "string",
          "description": "ClientID is the public identifier for the GitHub oauth2 client"
        },
        "client_secret": {
          "type": "string",
          "description": "ClientSecret is the secret for the GitHub oauth2 client"
        },
        "client_endpoint": {
          "type": "string",
          "description": "ClientEndpoint is the endpoint for the GitHub oauth2 client"
        },
        "scopes": {
          "$ref": "#/$defs/[]string",
          "description": "Scopes are the scopes that the GitHub oauth2 client will request"
        },
        "redirect_url": {
          "type": "string",
          "description": "RedirectURL is the URL that the GitHub oauth2 client will redirect to after authentication with Github"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "client_id",
        "client_secret",
        "scopes",
        "redirect_url"
      ],
      "description": "ProviderConfig represents the configuration settings for a Github Oauth Provider"
    },
    "google.ProviderConfig": {
      "properties": {
        "client_id": {
          "type": "string",
          "description": "ClientID is the public identifier for the Google oauth2 client"
        },
        "client_secret": {
          "type": "string",
          "description": "ClientSecret is the secret for the Google oauth2 client"
        },
        "client_endpoint": {
          "type": "string",
          "description": "ClientEndpoint is the endpoint for the Google oauth2 client"
        },
        "scopes": {
          "$ref": "#/$defs/[]string",
          "description": "Scopes are the scopes that the Google oauth2 client will request"
        },
        "redirect_url": {
          "type": "string",
          "description": "RedirectURL is the URL that the Google oauth2 client will redirect to after authentication with Google"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "client_id",
        "client_secret",
        "scopes",
        "redirect_url"
      ],
      "description": "ProviderConfig represents the configuration settings for a Google Oauth Provider"
    },
    "handlers.OauthProviderConfig": {
      "properties": {
        "redirect_url": {
          "type": "string",
          "description": "RedirectURL is the URL that the OAuth2 client will redirect to after authentication with datum"
        },
        "github": {
          "$ref": "#/$defs/github.ProviderConfig",
          "description": "Github contains the configuration settings for the Github Oauth Provider"
        },
        "google": {
          "$ref": "#/$defs/google.ProviderConfig",
          "description": "Google contains the configuration settings for the Google Oauth Provider"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "OauthProviderConfig represents the configuration for OAuth providers such as Github and Google"
    },
    "map[string]string": {
      "additionalProperties": {
        "type": "string"
      },
      "type": "object"
    },
    "otelx.Config": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled to enable tracing"
        },
        "provider": {
          "type": "string",
          "description": "Provider to use for tracing"
        },
        "environment": {
          "type": "string",
          "description": "Environment to set for the service"
        },
        "stdout": {
          "$ref": "#/$defs/otelx.StdOut",
          "description": "StdOut settings for the stdout provider"
        },
        "otlp": {
          "$ref": "#/$defs/otelx.OTLP",
          "description": "OTLP settings for the otlp provider"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Config defines the configuration settings for opentelemetry tracing"
    },
    "otelx.OTLP": {
      "properties": {
        "endpoint": {
          "type": "string",
          "description": "Endpoint to send the traces to"
        },
        "insecure": {
          "type": "boolean",
          "description": "Insecure to disable TLS"
        },
        "certificate": {
          "type": "string",
          "description": "Certificate to use for TLS"
        },
        "headers": {
          "$ref": "#/$defs/[]string",
          "description": "Headers to send with the request"
        },
        "compression": {
          "type": "string",
          "description": "Compression to use for the request"
        },
        "timeout": {
          "type": "integer",
          "description": "Timeout for the request"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "OTLP settings for the otlp provider"
    },
    "otelx.StdOut": {
      "properties": {
        "pretty": {
          "type": "boolean",
          "description": "Pretty enables pretty printing of the output"
        },
        "disable_timestamp": {
          "type": "boolean",
          "description": "DisableTimestamp disables the timestamp in the output"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "StdOut settings for the stdout provider"
    },
    "sentry.Config": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Enabled indicates whether the Sentry client is enabled"
        },
        "dsn": {
          "type": "string",
          "description": "DSN is the Data Source Name for the Sentry client"
        },
        "environment": {
          "type": "string",
          "description": "Environment is the environment in which the Sentry client is running"
        },
        "enable_tracing": {
          "type": "boolean",
          "description": "EnableTracing indicates whether tracing is enabled for the Sentry client"
        },
        "trace_sampler": {
          "type": "number",
          "description": "TracesSampler is the sampling rate for tracing in the Sentry client"
        },
        "attach_stacktrace": {
          "type": "boolean",
          "description": "AttachStacktrace indicates whether to attach stack traces to events in the Sentry client"
        },
        "sample_rate": {
          "type": "number",
          "description": "SampleRate is the sampling rate for events in the Sentry client"
        },
        "trace_sample_rate": {
          "type": "number",
          "description": "TracesSampleRate is the sampling rate for tracing events in the Sentry client"
        },
        "profile_sample_rate": {
          "type": "number",
          "description": "ProfilesSampleRate is the sampling rate for profiling events in the Sentry client"
        },
        "repanic": {
          "type": "boolean",
          "description": "Repanic indicates whether to repanic after capturing an event in the Sentry client"
        },
        "debug": {
          "type": "boolean",
          "description": "Debug indicates whether debug mode is enabled for the Sentry client"
        },
        "server_name": {
          "type": "string",
          "description": "ServerName is the name of the server running the Sentry client"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Config settings for the Sentry client"
    },
    "sessions.Config": {
      "properties": {
        "signing_key": {
          "type": "string",
          "description": "SigningKey must be a 16, 32, or 64 character string used to encode the cookie"
        },
        "encryption_key": {
          "type": "string",
          "description": "EncryptionKey must be a 16, 32, or 64 character string used to encode the cookie"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "description": "Config contains the configuration for the session store"
    },
    "tokens.Config": {
      "properties": {
        "kid": {
          "type": "string",
          "description": "KID represents the Key ID used in the configuration."
        },
        "audience": {
          "type": "string",
          "description": "Audience represents the target audience for the tokens."
        },
        "refresh_audience": {
          "type": "string",
          "description": "RefreshAudience represents the audience for refreshing tokens."
        },
        "issuer": {
          "type": "string",
          "description": "Issuer represents the issuer of the tokens"
        },
        "access_duration": {
          "type": "integer",
          "description": "AccessDuration represents the duration of the access token is valid for"
        },
        "refresh_duration": {
          "type": "integer",
          "description": "RefreshDuration represents the duration of the refresh token is valid for"
        },
        "refresh_overlap": {
          "type": "integer",
          "description": "RefreshOverlap represents the overlap time for a refresh and access token"
        },
        "jwks_endpoint": {
          "type": "string",
          "description": "JWKSEndpoint represents the endpoint for the JSON Web Key Set"
        },
        "keys": {
          "$ref": "#/$defs/map[string]string",
          "description": "Keys represents the key pairs used for signing the tokens"
        }
      },
      "additionalProperties": false,
      "type": "object",
      "required": [
        "kid",
        "audience",
        "issuer",
        "keys"
      ],
      "description": "Config defines the configuration settings for authentication tokens used in the server"
    }
  },
  "properties": {
    "refresh_interval": {
      "type": "integer",
      "description": "RefreshInterval determines how often to reload the config"
    },
    "server": {
      "$ref": "#/$defs/config.Server",
      "description": "Server contains the echo server settings"
    },
    "auth": {
      "$ref": "#/$defs/config.Auth",
      "description": "Auth contains the authentication token settings and provider(s)"
    },
    "authz": {
      "$ref": "#/$defs/fgax.Config",
      "description": "Authz contains the authorization settings for fine grained access control"
    },
    "db": {
      "$ref": "#/$defs/entdb.Config",
      "description": "DB contains the database configuration for the ent client"
    },
    "redis": {
      "$ref": "#/$defs/cache.Config",
      "description": "Redis contains the redis configuration for the key-value store"
    },
    "tracer": {
      "$ref": "#/$defs/otelx.Config",
      "description": "Tracer contains the tracing config for opentelemetry"
    },
    "email": {
      "$ref": "#/$defs/emails.Config",
      "description": "Email contains email sending configuration for the server"
    },
    "sessions": {
      "$ref": "#/$defs/sessions.Config",
      "description": "Sessions config for user sessions and cookies"
    },
    "sentry": {
      "$ref": "#/$defs/sentry.Config",
      "description": "Sentry contains the sentry configuration for error tracking"
    }
  },
  "additionalProperties": false,
  "type": "object",
  "description": "Config contains the configuration for the datum server"
}