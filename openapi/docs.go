// Package openapi Code generated by swaggo/swag. DO NOT EDIT
package openapi

import "github.com/swaggo/swag"

const docTemplate = `{
    "openapi": "3.1.0",
    "info": {
      "title": "Datum OpenAPI 3.1.0 Specifications",
      "description": "Documentation for Datum's API services",
      "termsOfService": "https://datum.net/terms",
      "contact": {
        "name": "Datum Support",
        "url": "https://datum.net/support",
        "email": "support@datum.net"
      },
      "license": {
        "name": "Apache 2.0",
        "url": "https://www.apache.org/licenses/LICENSE-2.0.html"
      },
      "version": "1.0.1"
    },
    "servers": [
      {
        "url": "http://localhost:17608/v1"
      },
      {
        "url": "https://api.datum.net/v1"
      }
    ],
    "paths": {
        "/forgot-password": {
            "get": {
                "description": "Allows the user to request a password reset email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Forgot Password"
                ],
                "summary": "Forgot Password",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.ForgotPasswordReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/invite": {
            "post": {
                "description": "Registers the invite handler used by the UI to accept an invitation",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Invite"
                ],
                "summary": "Register Invite Handler",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.InviteReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/login": {
            "post": {
                "description": "Verifies the password submitted for the user is correct by looking up the user by email and using the argon2 derived key verification process to confirm the password matches",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Login"
                ],
                "summary": "Login",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.LoginReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/metrics": {
            "get": {
                "description": "Handles metrics request",
                "produces": [
                    "application/json"
                ],
                "summary": "Metrics Handler",
                "operationId": "metrics-handler",
                "responses": {}
            }
        },
        "/ready": {
            "get": {
                "description": "Handles readiness check",
                "produces": [
                    "application/json"
                ],
                "summary": "Readiness Handler",
                "operationId": "readiness-handler",
                "responses": {}
            }
        },
        "/refresh": {
            "post": {
                "description": "Re-authenticates users and API keys using a refresh token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Refresh"
                ],
                "summary": "Refresh authentication tokens",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.RefreshReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/register": {
            "post": {
                "description": "Creates a new user in the database with the specified password, allowing the user to login to Datum",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Register"
                ],
                "summary": "Register a new user",
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.RegisterReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    },
                    "409": {
                        "description": "Conflict",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/resend": {
            "post": {
                "description": "Resends the verification email or invite email",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Resend"
                ],
                "summary": "Resend email",
                "responses": {
                    "204": {
                        "description": "No Content",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/verify": {
            "get": {
                "description": "Verifies a user's email address by validating the token in the request",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Verify"
                ],
                "summary": "Verify Email",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/handlers.VerifyReply"
                        }
                    },
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/handlers.VerifyReply"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/route.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "handlers.ForgotPasswordReply": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "reply": {
                    "$ref": "#/definitions/rout.Reply"
                }
            }
        },
        "handlers.InviteReply": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "joined_org_id": {
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "reply": {
                    "$ref": "#/definitions/rout.Reply"
                },
                "role": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "handlers.LoginReply": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "reply": {
                    "$ref": "#/definitions/rout.Reply"
                },
                "token_type": {
                    "type": "string"
                }
            }
        },
        "handlers.RefreshReply": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "reply": {
                    "$ref": "#/definitions/rout.Reply"
                }
            }
        },
        "handlers.RegisterReply": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                },
                "error": {
                    "description": "error message if the request was not successful",
                    "type": "string"
                },
                "message": {
                    "type": "string"
                },
                "success": {
                    "description": "indicates if the request was successful",
                    "type": "boolean"
                },
                "token": {
                    "type": "string"
                },
                "unverified": {
                    "description": "indicates if the user has not verified their email address",
                    "type": "boolean"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "handlers.VerifyReply": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "expires_in": {
                    "type": "integer"
                },
                "message": {
                    "type": "string"
                },
                "refresh_token": {
                    "type": "string"
                },
                "reply": {
                    "$ref": "#/definitions/rout.Reply"
                },
                "token": {
                    "type": "string"
                },
                "token_type": {
                    "type": "string"
                },
                "user_id": {
                    "type": "string"
                }
            }
        },
        "rout.Reply": {
            "description": "Fields used in construction of API responses",
            "type": "object",
            "properties": {
                "error": {
                    "description": "error message if the request was not successful",
                    "type": "string"
                },
                "success": {
                    "description": "indicates if the request was successful",
                    "type": "boolean"
                },
                "unverified": {
                    "description": "indicates if the user has not verified their email address",
                    "type": "boolean"
                }
            }
        },
        "route.ErrorResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "the HTTP status code",
                    "type": "integer"
                },
                "reply": {
                    "description": "an object containing whether the request was successful or not, and if not the error message",
                    "allOf": [
                        {
                            "$ref": "#/definitions/rout.Reply"
                        }
                    ]
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
