// Code generated by github.com/Yamashou/gqlgenc, DO NOT EDIT.

package datumclient

import (
	"context"
	"encoding/json"
	"net/http"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/Yamashou/gqlgenc/clientv2"
	"github.com/datumforge/datum/pkg/enums"
	"github.com/datumforge/enthistory"
)

type DatumGraphClient interface {
	CreateAPIToken(ctx context.Context, input CreateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateAPIToken, error)
	UpdateAPIToken(ctx context.Context, updateAPITokenID string, input UpdateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdateAPIToken, error)
	GetAllAPITokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllAPITokens, error)
	GetAPITokenByID(ctx context.Context, apiTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetAPITokenByID, error)
	DeleteAPIToken(ctx context.Context, deleteAPITokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteAPIToken, error)
	GetDocumentDataByID(ctx context.Context, documentDataID string, interceptors ...clientv2.RequestInterceptor) (*GetDocumentDataByID, error)
	CreateDocumentData(ctx context.Context, input CreateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*CreateDocumentData, error)
	UpdateDocumentData(ctx context.Context, updateDocumentDataID string, input UpdateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*UpdateDocumentData, error)
	DeleteDocumentData(ctx context.Context, deleteDocumentDataID string, interceptors ...clientv2.RequestInterceptor) (*DeleteDocumentData, error)
	CreateBulkCSVEntitlement(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntitlement, error)
	CreateBulkEntitlement(ctx context.Context, input []*CreateEntitlementInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntitlement, error)
	CreateEntitlement(ctx context.Context, input CreateEntitlementInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntitlement, error)
	DeleteEntitlement(ctx context.Context, deleteEntitlementID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntitlement, error)
	GetAllEntitlements(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlements, error)
	GetEntitlementByID(ctx context.Context, entitlementID string, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementByID, error)
	GetEntitlements(ctx context.Context, where *EntitlementWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlements, error)
	UpdateEntitlement(ctx context.Context, updateEntitlementID string, input UpdateEntitlementInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntitlement, error)
	CreateBulkCSVEntitlementPlan(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntitlementPlan, error)
	CreateBulkEntitlementPlan(ctx context.Context, input []*CreateEntitlementPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntitlementPlan, error)
	CreateEntitlementPlan(ctx context.Context, input CreateEntitlementPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntitlementPlan, error)
	DeleteEntitlementPlan(ctx context.Context, deleteEntitlementPlanID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntitlementPlan, error)
	GetAllEntitlementPlans(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlementPlans, error)
	GetEntitlementPlanByID(ctx context.Context, entitlementPlanID string, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanByID, error)
	GetEntitlementPlans(ctx context.Context, where *EntitlementPlanWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlans, error)
	UpdateEntitlementPlan(ctx context.Context, updateEntitlementPlanID string, input UpdateEntitlementPlanInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntitlementPlan, error)
	GetAllEntitlementPlanFeatures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlementPlanFeatures, error)
	GetEntitlementPlanFeatureByID(ctx context.Context, entitlementPlanFeatureID string, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanFeatureByID, error)
	GetEntitlementPlanFeatures(ctx context.Context, where *EntitlementPlanFeatureWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanFeatures, error)
	CreateEntitlementPlanFeature(ctx context.Context, input CreateEntitlementPlanFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntitlementPlanFeature, error)
	CreateBulkCSVEntitlementPlanFeature(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntitlementPlanFeature, error)
	CreateBulkEntitlementPlanFeature(ctx context.Context, input []*CreateEntitlementPlanFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntitlementPlanFeature, error)
	UpdateEntitlementPlanFeature(ctx context.Context, updateEntitlementPlanFeatureID string, input UpdateEntitlementPlanFeatureInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntitlementPlanFeature, error)
	DeleteEntitlementPlanFeature(ctx context.Context, deleteEntitlementPlanFeatureID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntitlementPlanFeature, error)
	GetEvents(ctx context.Context, where *EventWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvents, error)
	GetEventByID(ctx context.Context, eventID string, interceptors ...clientv2.RequestInterceptor) (*GetEventByID, error)
	GetAllEvents(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvents, error)
	CreateEvent(ctx context.Context, input CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateEvent, error)
	CreateBulkEvent(ctx context.Context, input []*CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEvent, error)
	CreateBulkCSVEvent(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEvent, error)
	UpdateEvent(ctx context.Context, updateEventID string, input UpdateEventInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEvent, error)
	DeleteEvent(ctx context.Context, deleteEventID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEvent, error)
	CreateBulkCSVFeature(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVFeature, error)
	CreateBulkFeature(ctx context.Context, input []*CreateFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkFeature, error)
	CreateFeature(ctx context.Context, input CreateFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateFeature, error)
	DeleteFeature(ctx context.Context, deleteFeatureID string, interceptors ...clientv2.RequestInterceptor) (*DeleteFeature, error)
	GetFeatureByID(ctx context.Context, featureID string, interceptors ...clientv2.RequestInterceptor) (*GetFeatureByID, error)
	GetAllFeatures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFeatures, error)
	GetFeatures(ctx context.Context, where *FeatureWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFeatures, error)
	UpdateFeature(ctx context.Context, updateFeatureID string, input UpdateFeatureInput, interceptors ...clientv2.RequestInterceptor) (*UpdateFeature, error)
	CreateBulkCSVFile(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVFile, error)
	CreateBulkFile(ctx context.Context, input []*CreateFileInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkFile, error)
	CreateFile(ctx context.Context, input CreateFileInput, interceptors ...clientv2.RequestInterceptor) (*CreateFile, error)
	DeleteFile(ctx context.Context, deleteFileID string, interceptors ...clientv2.RequestInterceptor) (*DeleteFile, error)
	GetFiles(ctx context.Context, where *FileWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFiles, error)
	GetAllFiles(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFiles, error)
	UpdateFile(ctx context.Context, updateFileID string, input UpdateFileInput, interceptors ...clientv2.RequestInterceptor) (*UpdateFile, error)
	GetAllFileHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFileHistories, error)
	GetFileHistories(ctx context.Context, where *FileHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFileHistories, error)
	CreateBulkCSVGroup(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroup, error)
	CreateBulkGroup(ctx context.Context, input []*CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroup, error)
	CreateGroup(ctx context.Context, input CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroup, error)
	DeleteGroup(ctx context.Context, deleteGroupID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroup, error)
	GetAllGroups(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroups, error)
	GetGroupByID(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupByID, error)
	GetGroups(ctx context.Context, where *GroupWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroups, error)
	UpdateGroup(ctx context.Context, updateGroupID string, input UpdateGroupInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroup, error)
	GetAllGroupHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupHistories, error)
	GetGroupHistories(ctx context.Context, where *GroupHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupHistories, error)
	GetGroupMembersByGroupID(ctx context.Context, where *GroupMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupMembersByGroupID, error)
	AddUserToGroupWithRole(ctx context.Context, input CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*AddUserToGroupWithRole, error)
	CreateBulkGroupMembers(ctx context.Context, input []*CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroupMembers, error)
	CreateBulkCSVGroupMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroupMembers, error)
	UpdateUserRoleInGroup(ctx context.Context, updateGroupMemberID string, input UpdateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserRoleInGroup, error)
	RemoveUserFromGroup(ctx context.Context, deleteGroupMembershipID string, interceptors ...clientv2.RequestInterceptor) (*RemoveUserFromGroup, error)
	GetAllGroupSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupSettings, error)
	GetGroupSettingByID(ctx context.Context, groupSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettingByID, error)
	GetGroupSettings(ctx context.Context, where GroupSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettings, error)
	UpdateGroupSetting(ctx context.Context, updateGroupSettingID string, input UpdateGroupSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroupSetting, error)
	CreateBulkCSVHush(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVHush, error)
	CreateBulkHush(ctx context.Context, input []*CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkHush, error)
	CreateHush(ctx context.Context, input CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateHush, error)
	GetAllHushes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushes, error)
	GetHushByID(ctx context.Context, hushID string, interceptors ...clientv2.RequestInterceptor) (*GetHushByID, error)
	GetHushes(ctx context.Context, where *HushWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushes, error)
	UpdateHush(ctx context.Context, updateHushID string, input UpdateHushInput, interceptors ...clientv2.RequestInterceptor) (*UpdateHush, error)
	GetAllHushHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushHistories, error)
	GetHushHistories(ctx context.Context, where *HushHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushHistories, error)
	CreateBulkCSVIntegration(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVIntegration, error)
	CreateBulkIntegration(ctx context.Context, input []*CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkIntegration, error)
	CreateIntegration(ctx context.Context, input CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*CreateIntegration, error)
	DeleteIntegration(ctx context.Context, deleteIntegrationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteIntegration, error)
	GetAllIntegrations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrations, error)
	GetIntegrationByID(ctx context.Context, integrationID string, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationByID, error)
	GetIntegrations(ctx context.Context, where *IntegrationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrations, error)
	UpdateIntegration(ctx context.Context, updateIntegrationID string, input UpdateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateIntegration, error)
	GetAllIntegrationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrationHistories, error)
	GetIntegrationHistories(ctx context.Context, where *IntegrationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationHistories, error)
	CreateBulkCSVInvite(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVInvite, error)
	CreateBulkInvite(ctx context.Context, input []*CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkInvite, error)
	CreateInvite(ctx context.Context, input CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateInvite, error)
	DeleteInvite(ctx context.Context, deleteInviteID string, interceptors ...clientv2.RequestInterceptor) (*DeleteInvite, error)
	GetInviteByID(ctx context.Context, inviteID string, interceptors ...clientv2.RequestInterceptor) (*GetInviteByID, error)
	GetAllInvites(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInvites, error)
	InvitesByOrgID(ctx context.Context, where *InviteWhereInput, interceptors ...clientv2.RequestInterceptor) (*InvitesByOrgID, error)
	GetAllOauthProviderHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOauthProviderHistories, error)
	GetOauthProviderHistories(ctx context.Context, where *OauthProviderHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOauthProviderHistories, error)
	CreateBulkCSVOhAuthTooToken(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOhAuthTooToken, error)
	CreateBulkOhAuthTooToken(ctx context.Context, input []*CreateOhAuthTooTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOhAuthTooToken, error)
	CreateOhAuthTooToken(ctx context.Context, input CreateOhAuthTooTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateOhAuthTooToken, error)
	DeleteOhAuthTooToken(ctx context.Context, deleteOhAuthTooTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOhAuthTooToken, error)
	GetOhAuthTooTokens(ctx context.Context, where *OhAuthTooTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOhAuthTooTokens, error)
	UpdateOhAuthTooToken(ctx context.Context, updateOhAuthTooTokenID string, input UpdateOhAuthTooTokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOhAuthTooToken, error)
	CreateBulkCSVOrganization(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOrganization, error)
	CreateBulkOrganization(ctx context.Context, input []*CreateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOrganization, error)
	CreateOrganization(ctx context.Context, input CreateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*CreateOrganization, error)
	DeleteOrganization(ctx context.Context, deleteOrganizationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOrganization, error)
	GetAllOrganizations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizations, error)
	GetOrganizationByID(ctx context.Context, organizationID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationByID, error)
	GetOrganizations(ctx context.Context, where *OrganizationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizations, error)
	UpdateOrganization(ctx context.Context, updateOrganizationID string, input UpdateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganization, error)
	GetOrganizationSettingByID(ctx context.Context, organizationSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingByID, error)
	GetAllOrganizationSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettings, error)
	GetOrganizationSettings(ctx context.Context, where OrganizationSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettings, error)
	UpdateOrganizationSetting(ctx context.Context, updateOrganizationSettingID string, input UpdateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganizationSetting, error)
	GetAllOrganizationSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettingHistories, error)
	GetOrganizationSettingHistories(ctx context.Context, where *OrganizationSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingHistories, error)
	AddUserToOrgWithRole(ctx context.Context, input CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*AddUserToOrgWithRole, error)
	CreateBulkCSVOrgMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOrgMembers, error)
	CreateBulkOrgMembers(ctx context.Context, input []*CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOrgMembers, error)
	GetOrgMembersByOrgID(ctx context.Context, where *OrgMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembersByOrgID, error)
	RemoveUserFromOrg(ctx context.Context, deleteOrgMembershipID string, interceptors ...clientv2.RequestInterceptor) (*RemoveUserFromOrg, error)
	UpdateUserRoleInOrg(ctx context.Context, updateOrgMemberID string, input UpdateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserRoleInOrg, error)
	GetAllOrgMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgMembershipHistories, error)
	GetOrgMembershipHistories(ctx context.Context, where *OrgMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembershipHistories, error)
	CreateBulkCSVPersonalAccessToken(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVPersonalAccessToken, error)
	CreateBulkPersonalAccessToken(ctx context.Context, input []*CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkPersonalAccessToken, error)
	CreatePersonalAccessToken(ctx context.Context, input CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreatePersonalAccessToken, error)
	DeletePersonalAccessToken(ctx context.Context, deletePersonalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeletePersonalAccessToken, error)
	GetAllPersonalAccessTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllPersonalAccessTokens, error)
	GetPersonalAccessTokenByID(ctx context.Context, personalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetPersonalAccessTokenByID, error)
	UpdatePersonalAccessToken(ctx context.Context, updatePersonalAccessTokenID string, input UpdatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdatePersonalAccessToken, error)
	Search(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*Search, error)
	CreateBulkCSVSubscriber(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVSubscriber, error)
	CreateBulkSubscriber(ctx context.Context, input []*CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkSubscriber, error)
	CreateSubscriber(ctx context.Context, input CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubscriber, error)
	DeleteSubscriber(ctx context.Context, deleteSubscriberEmail string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubscriber, error)
	GetAllSubscribers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubscribers, error)
	GetSubscriberByEmail(ctx context.Context, email string, interceptors ...clientv2.RequestInterceptor) (*GetSubscriberByEmail, error)
	GetSubscribers(ctx context.Context, where *SubscriberWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubscribers, error)
	UpdateSubscriber(ctx context.Context, email string, input UpdateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubscriber, error)
	CreateTemplate(ctx context.Context, input CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateTemplate, error)
	CreateBulkTemplate(ctx context.Context, input []*CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTemplate, error)
	CreateBulkCSVTemplate(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTemplate, error)
	UpdateTemplate(ctx context.Context, updateTemplateID string, input UpdateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTemplate, error)
	GetAllTemplates(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplates, error)
	GetTemplateByID(ctx context.Context, getTemplateID string, interceptors ...clientv2.RequestInterceptor) (*GetTemplateByID, error)
	CreateTFASetting(ctx context.Context, input CreateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateTFASetting, error)
	GetTFASetting(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetTFASetting, error)
	GetAllTFASettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTFASettings, error)
	UpdateTFASetting(ctx context.Context, input UpdateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTFASetting, error)
	CreateUser(ctx context.Context, input CreateUserInput, interceptors ...clientv2.RequestInterceptor) (*CreateUser, error)
	DeleteUser(ctx context.Context, deleteUserID string, interceptors ...clientv2.RequestInterceptor) (*DeleteUser, error)
	GetAllUsers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUsers, error)
	GetUserByID(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByID, error)
	GetUserByIDWithOrgs(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByIDWithOrgs, error)
	UpdateUser(ctx context.Context, updateUserID string, input UpdateUserInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUser, error)
	GetAllUserHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserHistories, error)
	GetUserHistories(ctx context.Context, where *UserHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserHistories, error)
	GetUserSettingByID(ctx context.Context, userSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingByID, error)
	GetAllUserSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettings, error)
	GetUserSettings(ctx context.Context, where UserSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettings, error)
	UpdateUserSetting(ctx context.Context, updateUserSettingID string, input UpdateUserSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserSetting, error)
	GetAllUserSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettingHistories, error)
	GetUserSettingHistories(ctx context.Context, where *UserSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingHistories, error)
	GetWebhookByID(ctx context.Context, webhookID string, interceptors ...clientv2.RequestInterceptor) (*GetWebhookByID, error)
	GetAllWebhooks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllWebhooks, error)
	CreateWebhook(ctx context.Context, input CreateWebhookInput, interceptors ...clientv2.RequestInterceptor) (*CreateWebhook, error)
	CreateBulkWebhook(ctx context.Context, input []*CreateWebhookInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkWebhook, error)
	CreateBulkCSVWebhook(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVWebhook, error)
	UpdateWebhook(ctx context.Context, updateWebhookID string, input UpdateWebhookInput, interceptors ...clientv2.RequestInterceptor) (*UpdateWebhook, error)
	DeleteWebhook(ctx context.Context, deleteWebhookID string, interceptors ...clientv2.RequestInterceptor) (*DeleteWebhook, error)
	GetAllWebhookHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllWebhookHistories, error)
	GetWebhookHistories(ctx context.Context, where *WebhookHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetWebhookHistories, error)
}

type Client struct {
	Client *clientv2.Client
}

func NewClient(cli *http.Client, baseURL string, options *clientv2.Options, interceptors ...clientv2.RequestInterceptor) DatumGraphClient {
	return &Client{Client: clientv2.NewClient(cli, baseURL, options, interceptors...)}
}

type CreateAPIToken_CreateAPIToken_APIToken_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateAPIToken_CreateAPIToken_APIToken_Owner) GetID() string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken_Owner{}
	}
	return t.ID
}

type CreateAPIToken_CreateAPIToken_APIToken struct {
	ID          string                                        "json:\"id\" graphql:\"id\""
	Token       string                                        "json:\"token\" graphql:\"token\""
	Scopes      []string                                      "json:\"scopes,omitempty\" graphql:\"scopes\""
	Owner       *CreateAPIToken_CreateAPIToken_APIToken_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	CreatedAt   *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt   *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy   *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy   *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Name        string                                        "json:\"name\" graphql:\"name\""
	ExpiresAt   *time.Time                                    "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Description *string                                       "json:\"description,omitempty\" graphql:\"description\""
	LastUsedAt  *time.Time                                    "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
}

func (t *CreateAPIToken_CreateAPIToken_APIToken) GetID() string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.ID
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetToken() string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Token
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetScopes() []string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Scopes
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetOwner() *CreateAPIToken_CreateAPIToken_APIToken_Owner {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Owner
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.CreatedAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.UpdatedAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetCreatedBy() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.CreatedBy
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.UpdatedBy
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetName() string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Name
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.ExpiresAt
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetDescription() *string {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.Description
}
func (t *CreateAPIToken_CreateAPIToken_APIToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken_APIToken{}
	}
	return t.LastUsedAt
}

type CreateAPIToken_CreateAPIToken struct {
	APIToken CreateAPIToken_CreateAPIToken_APIToken "json:\"apiToken\" graphql:\"apiToken\""
}

func (t *CreateAPIToken_CreateAPIToken) GetAPIToken() *CreateAPIToken_CreateAPIToken_APIToken {
	if t == nil {
		t = &CreateAPIToken_CreateAPIToken{}
	}
	return &t.APIToken
}

type UpdateAPIToken_UpdateAPIToken_APIToken_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateAPIToken_UpdateAPIToken_APIToken_Owner) GetID() string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken_Owner{}
	}
	return t.ID
}

type UpdateAPIToken_UpdateAPIToken_APIToken struct {
	ID          string                                        "json:\"id\" graphql:\"id\""
	Token       string                                        "json:\"token\" graphql:\"token\""
	Scopes      []string                                      "json:\"scopes,omitempty\" graphql:\"scopes\""
	Owner       *UpdateAPIToken_UpdateAPIToken_APIToken_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	CreatedAt   *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt   *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy   *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy   *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Name        string                                        "json:\"name\" graphql:\"name\""
	ExpiresAt   *time.Time                                    "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Description *string                                       "json:\"description,omitempty\" graphql:\"description\""
	LastUsedAt  *time.Time                                    "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
}

func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetID() string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.ID
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetToken() string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Token
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetScopes() []string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Scopes
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetOwner() *UpdateAPIToken_UpdateAPIToken_APIToken_Owner {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Owner
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.CreatedAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.UpdatedAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.CreatedBy
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.UpdatedBy
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetName() string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Name
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.ExpiresAt
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetDescription() *string {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.Description
}
func (t *UpdateAPIToken_UpdateAPIToken_APIToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken_APIToken{}
	}
	return t.LastUsedAt
}

type UpdateAPIToken_UpdateAPIToken struct {
	APIToken UpdateAPIToken_UpdateAPIToken_APIToken "json:\"apiToken\" graphql:\"apiToken\""
}

func (t *UpdateAPIToken_UpdateAPIToken) GetAPIToken() *UpdateAPIToken_UpdateAPIToken_APIToken {
	if t == nil {
		t = &UpdateAPIToken_UpdateAPIToken{}
	}
	return &t.APIToken
}

type GetAllAPITokens_APITokens_Edges_Node_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllAPITokens_APITokens_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node_Owner{}
	}
	return t.ID
}

type GetAllAPITokens_APITokens_Edges_Node struct {
	ID          string                                      "json:\"id\" graphql:\"id\""
	Token       string                                      "json:\"token\" graphql:\"token\""
	Scopes      []string                                    "json:\"scopes,omitempty\" graphql:\"scopes\""
	Owner       *GetAllAPITokens_APITokens_Edges_Node_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	CreatedAt   *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt   *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy   *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy   *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Name        string                                      "json:\"name\" graphql:\"name\""
	ExpiresAt   *time.Time                                  "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Description *string                                     "json:\"description,omitempty\" graphql:\"description\""
	LastUsedAt  *time.Time                                  "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
}

func (t *GetAllAPITokens_APITokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetOwner() *GetAllAPITokens_APITokens_Edges_Node_Owner {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Owner
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllAPITokens_APITokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges_Node{}
	}
	return t.LastUsedAt
}

type GetAllAPITokens_APITokens_Edges struct {
	Node *GetAllAPITokens_APITokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllAPITokens_APITokens_Edges) GetNode() *GetAllAPITokens_APITokens_Edges_Node {
	if t == nil {
		t = &GetAllAPITokens_APITokens_Edges{}
	}
	return t.Node
}

type GetAllAPITokens_APITokens struct {
	Edges []*GetAllAPITokens_APITokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllAPITokens_APITokens) GetEdges() []*GetAllAPITokens_APITokens_Edges {
	if t == nil {
		t = &GetAllAPITokens_APITokens{}
	}
	return t.Edges
}

type GetAPITokenByID_APIToken_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAPITokenByID_APIToken_Owner) GetID() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken_Owner{}
	}
	return t.ID
}

type GetAPITokenByID_APIToken struct {
	ID          string                          "json:\"id\" graphql:\"id\""
	Token       string                          "json:\"token\" graphql:\"token\""
	Scopes      []string                        "json:\"scopes,omitempty\" graphql:\"scopes\""
	Owner       *GetAPITokenByID_APIToken_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	CreatedAt   *time.Time                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt   *time.Time                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy   *string                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy   *string                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Name        string                          "json:\"name\" graphql:\"name\""
	ExpiresAt   *time.Time                      "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Description *string                         "json:\"description,omitempty\" graphql:\"description\""
	LastUsedAt  *time.Time                      "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
}

func (t *GetAPITokenByID_APIToken) GetID() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.ID
}
func (t *GetAPITokenByID_APIToken) GetToken() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Token
}
func (t *GetAPITokenByID_APIToken) GetScopes() []string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Scopes
}
func (t *GetAPITokenByID_APIToken) GetOwner() *GetAPITokenByID_APIToken_Owner {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Owner
}
func (t *GetAPITokenByID_APIToken) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.CreatedAt
}
func (t *GetAPITokenByID_APIToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.UpdatedAt
}
func (t *GetAPITokenByID_APIToken) GetCreatedBy() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.CreatedBy
}
func (t *GetAPITokenByID_APIToken) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.UpdatedBy
}
func (t *GetAPITokenByID_APIToken) GetName() string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Name
}
func (t *GetAPITokenByID_APIToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.ExpiresAt
}
func (t *GetAPITokenByID_APIToken) GetDescription() *string {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.Description
}
func (t *GetAPITokenByID_APIToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAPITokenByID_APIToken{}
	}
	return t.LastUsedAt
}

type DeleteAPIToken_DeleteAPIToken struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteAPIToken_DeleteAPIToken) GetDeletedID() string {
	if t == nil {
		t = &DeleteAPIToken_DeleteAPIToken{}
	}
	return t.DeletedID
}

type GetDocumentDataByID_DocumentData struct {
	ID         string          "json:\"id\" graphql:\"id\""
	TemplateID string          "json:\"templateID\" graphql:\"templateID\""
	Data       json.RawMessage "json:\"data\" graphql:\"data\""
	CreatedAt  *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt  *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetDocumentDataByID_DocumentData) GetID() string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.ID
}
func (t *GetDocumentDataByID_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.TemplateID
}
func (t *GetDocumentDataByID_DocumentData) GetData() *json.RawMessage {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return &t.Data
}
func (t *GetDocumentDataByID_DocumentData) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.CreatedAt
}
func (t *GetDocumentDataByID_DocumentData) GetCreatedBy() *string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.CreatedBy
}
func (t *GetDocumentDataByID_DocumentData) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.UpdatedAt
}
func (t *GetDocumentDataByID_DocumentData) GetUpdatedBy() *string {
	if t == nil {
		t = &GetDocumentDataByID_DocumentData{}
	}
	return t.UpdatedBy
}

type CreateDocumentData_CreateDocumentData_DocumentData struct {
	ID         string          "json:\"id\" graphql:\"id\""
	TemplateID string          "json:\"templateID\" graphql:\"templateID\""
	Data       json.RawMessage "json:\"data\" graphql:\"data\""
	CreatedAt  *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt  *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetID() string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.ID
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.TemplateID
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetData() *json.RawMessage {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return &t.Data
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.CreatedAt
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetCreatedBy() *string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.CreatedBy
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.UpdatedAt
}
func (t *CreateDocumentData_CreateDocumentData_DocumentData) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData_DocumentData{}
	}
	return t.UpdatedBy
}

type CreateDocumentData_CreateDocumentData struct {
	DocumentData CreateDocumentData_CreateDocumentData_DocumentData "json:\"documentData\" graphql:\"documentData\""
}

func (t *CreateDocumentData_CreateDocumentData) GetDocumentData() *CreateDocumentData_CreateDocumentData_DocumentData {
	if t == nil {
		t = &CreateDocumentData_CreateDocumentData{}
	}
	return &t.DocumentData
}

type UpdateDocumentData_UpdateDocumentData_DocumentData struct {
	ID         string          "json:\"id\" graphql:\"id\""
	TemplateID string          "json:\"templateID\" graphql:\"templateID\""
	Data       json.RawMessage "json:\"data\" graphql:\"data\""
	CreatedAt  *time.Time      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy  *string         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt  *time.Time      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy  *string         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetID() string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.ID
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetTemplateID() string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.TemplateID
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetData() *json.RawMessage {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return &t.Data
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.CreatedAt
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.CreatedBy
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.UpdatedAt
}
func (t *UpdateDocumentData_UpdateDocumentData_DocumentData) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData_DocumentData{}
	}
	return t.UpdatedBy
}

type UpdateDocumentData_UpdateDocumentData struct {
	DocumentData UpdateDocumentData_UpdateDocumentData_DocumentData "json:\"documentData\" graphql:\"documentData\""
}

func (t *UpdateDocumentData_UpdateDocumentData) GetDocumentData() *UpdateDocumentData_UpdateDocumentData_DocumentData {
	if t == nil {
		t = &UpdateDocumentData_UpdateDocumentData{}
	}
	return &t.DocumentData
}

type DeleteDocumentData_DeleteDocumentData struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteDocumentData_DeleteDocumentData) GetDeletedID() string {
	if t == nil {
		t = &DeleteDocumentData_DeleteDocumentData{}
	}
	return t.DeletedID
}

type CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Plan) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Plan{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Plan) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Plan{}
	}
	return t.Name
}

type CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Organization) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Organization{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Organization) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Organization{}
	}
	return t.Name
}

type CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements struct {
	ID                     string                                                                      "json:\"id\" graphql:\"id\""
	Plan                   CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Plan         "json:\"plan\" graphql:\"plan\""
	Expires                bool                                                                        "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time                                                                  "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Cancelled              bool                                                                        "json:\"cancelled\" graphql:\"cancelled\""
	ExternalCustomerID     *string                                                                     "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string                                                                     "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
	Organization           CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetPlan() *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Plan {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return &t.Plan
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetExpires() bool {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return t.Expires
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return t.ExpiresAt
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetCancelled() bool {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return t.Cancelled
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetExternalCustomerID() *string {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return t.ExternalCustomerID
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return t.ExternalSubscriptionID
}
func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements) GetOrganization() *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements_Organization {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements{}
	}
	return &t.Organization
}

type CreateBulkCSVEntitlement_CreateBulkCSVEntitlement struct {
	Entitlements []*CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements "json:\"entitlements,omitempty\" graphql:\"entitlements\""
}

func (t *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement) GetEntitlements() []*CreateBulkCSVEntitlement_CreateBulkCSVEntitlement_Entitlements {
	if t == nil {
		t = &CreateBulkCSVEntitlement_CreateBulkCSVEntitlement{}
	}
	return t.Entitlements
}

type CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Plan) GetID() string {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Plan{}
	}
	return t.ID
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Plan) GetName() string {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Plan{}
	}
	return t.Name
}

type CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Organization) GetID() string {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Organization{}
	}
	return t.ID
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Organization) GetName() string {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Organization{}
	}
	return t.Name
}

type CreateBulkEntitlement_CreateBulkEntitlement_Entitlements struct {
	ID                     string                                                                "json:\"id\" graphql:\"id\""
	Plan                   CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Plan         "json:\"plan\" graphql:\"plan\""
	Organization           CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Organization "json:\"organization\" graphql:\"organization\""
	Expires                bool                                                                  "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time                                                            "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Cancelled              bool                                                                  "json:\"cancelled\" graphql:\"cancelled\""
	ExternalCustomerID     *string                                                               "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string                                                               "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
}

func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetID() string {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return t.ID
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetPlan() *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Plan {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return &t.Plan
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetOrganization() *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements_Organization {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return &t.Organization
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetExpires() bool {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return t.Expires
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return t.ExpiresAt
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetCancelled() bool {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return t.Cancelled
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetExternalCustomerID() *string {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return t.ExternalCustomerID
}
func (t *CreateBulkEntitlement_CreateBulkEntitlement_Entitlements) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement_Entitlements{}
	}
	return t.ExternalSubscriptionID
}

type CreateBulkEntitlement_CreateBulkEntitlement struct {
	Entitlements []*CreateBulkEntitlement_CreateBulkEntitlement_Entitlements "json:\"entitlements,omitempty\" graphql:\"entitlements\""
}

func (t *CreateBulkEntitlement_CreateBulkEntitlement) GetEntitlements() []*CreateBulkEntitlement_CreateBulkEntitlement_Entitlements {
	if t == nil {
		t = &CreateBulkEntitlement_CreateBulkEntitlement{}
	}
	return t.Entitlements
}

type CreateEntitlement_CreateEntitlement_Entitlement_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateEntitlement_CreateEntitlement_Entitlement_Plan) GetID() string {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement_Plan{}
	}
	return t.ID
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement_Plan) GetName() string {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement_Plan{}
	}
	return t.Name
}

type CreateEntitlement_CreateEntitlement_Entitlement_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateEntitlement_CreateEntitlement_Entitlement_Organization) GetID() string {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement_Organization{}
	}
	return t.ID
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement_Organization) GetName() string {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement_Organization{}
	}
	return t.Name
}

type CreateEntitlement_CreateEntitlement_Entitlement struct {
	ID                     string                                                       "json:\"id\" graphql:\"id\""
	Plan                   CreateEntitlement_CreateEntitlement_Entitlement_Plan         "json:\"plan\" graphql:\"plan\""
	Organization           CreateEntitlement_CreateEntitlement_Entitlement_Organization "json:\"organization\" graphql:\"organization\""
	Expires                bool                                                         "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time                                                   "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Cancelled              bool                                                         "json:\"cancelled\" graphql:\"cancelled\""
	ExternalCustomerID     *string                                                      "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string                                                      "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
}

func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetID() string {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return t.ID
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetPlan() *CreateEntitlement_CreateEntitlement_Entitlement_Plan {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return &t.Plan
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetOrganization() *CreateEntitlement_CreateEntitlement_Entitlement_Organization {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return &t.Organization
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetExpires() bool {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return t.Expires
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return t.ExpiresAt
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetCancelled() bool {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return t.Cancelled
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetExternalCustomerID() *string {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return t.ExternalCustomerID
}
func (t *CreateEntitlement_CreateEntitlement_Entitlement) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement_Entitlement{}
	}
	return t.ExternalSubscriptionID
}

type CreateEntitlement_CreateEntitlement struct {
	Entitlement CreateEntitlement_CreateEntitlement_Entitlement "json:\"entitlement\" graphql:\"entitlement\""
}

func (t *CreateEntitlement_CreateEntitlement) GetEntitlement() *CreateEntitlement_CreateEntitlement_Entitlement {
	if t == nil {
		t = &CreateEntitlement_CreateEntitlement{}
	}
	return &t.Entitlement
}

type DeleteEntitlement_DeleteEntitlement struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEntitlement_DeleteEntitlement) GetDeletedID() string {
	if t == nil {
		t = &DeleteEntitlement_DeleteEntitlement{}
	}
	return t.DeletedID
}

type GetAllEntitlements_Entitlements_Edges_Node_Plan_Features_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllEntitlements_Entitlements_Edges_Node_Plan_Features_Feature) GetID() string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Plan_Features_Feature{}
	}
	return t.ID
}
func (t *GetAllEntitlements_Entitlements_Edges_Node_Plan_Features_Feature) GetName() string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Plan_Features_Feature{}
	}
	return t.Name
}

type GetAllEntitlements_Entitlements_Edges_Node_Plan_Features struct {
	Metadata map[string]interface{}                                           "json:\"metadata,omitempty\" graphql:\"metadata\""
	Feature  GetAllEntitlements_Entitlements_Edges_Node_Plan_Features_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *GetAllEntitlements_Entitlements_Edges_Node_Plan_Features) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Plan_Features{}
	}
	return t.Metadata
}
func (t *GetAllEntitlements_Entitlements_Edges_Node_Plan_Features) GetFeature() *GetAllEntitlements_Entitlements_Edges_Node_Plan_Features_Feature {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Plan_Features{}
	}
	return &t.Feature
}

type GetAllEntitlements_Entitlements_Edges_Node_Plan struct {
	ID       string                                                      "json:\"id\" graphql:\"id\""
	Name     string                                                      "json:\"name\" graphql:\"name\""
	Features []*GetAllEntitlements_Entitlements_Edges_Node_Plan_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *GetAllEntitlements_Entitlements_Edges_Node_Plan) GetID() string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Plan{}
	}
	return t.ID
}
func (t *GetAllEntitlements_Entitlements_Edges_Node_Plan) GetName() string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Plan{}
	}
	return t.Name
}
func (t *GetAllEntitlements_Entitlements_Edges_Node_Plan) GetFeatures() []*GetAllEntitlements_Entitlements_Edges_Node_Plan_Features {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Plan{}
	}
	return t.Features
}

type GetAllEntitlements_Entitlements_Edges_Node_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllEntitlements_Entitlements_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Organization{}
	}
	return t.ID
}
func (t *GetAllEntitlements_Entitlements_Edges_Node_Organization) GetName() string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node_Organization{}
	}
	return t.Name
}

type GetAllEntitlements_Entitlements_Edges_Node struct {
	ID                     string                                                  "json:\"id\" graphql:\"id\""
	Plan                   GetAllEntitlements_Entitlements_Edges_Node_Plan         "json:\"plan\" graphql:\"plan\""
	Organization           GetAllEntitlements_Entitlements_Edges_Node_Organization "json:\"organization\" graphql:\"organization\""
	Expires                bool                                                    "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time                                              "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Cancelled              bool                                                    "json:\"cancelled\" graphql:\"cancelled\""
	ExternalCustomerID     *string                                                 "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string                                                 "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
}

func (t *GetAllEntitlements_Entitlements_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntitlements_Entitlements_Edges_Node) GetPlan() *GetAllEntitlements_Entitlements_Edges_Node_Plan {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return &t.Plan
}
func (t *GetAllEntitlements_Entitlements_Edges_Node) GetOrganization() *GetAllEntitlements_Entitlements_Edges_Node_Organization {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return &t.Organization
}
func (t *GetAllEntitlements_Entitlements_Edges_Node) GetExpires() bool {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return t.Expires
}
func (t *GetAllEntitlements_Entitlements_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetAllEntitlements_Entitlements_Edges_Node) GetCancelled() bool {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return t.Cancelled
}
func (t *GetAllEntitlements_Entitlements_Edges_Node) GetExternalCustomerID() *string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return t.ExternalCustomerID
}
func (t *GetAllEntitlements_Entitlements_Edges_Node) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges_Node{}
	}
	return t.ExternalSubscriptionID
}

type GetAllEntitlements_Entitlements_Edges struct {
	Node *GetAllEntitlements_Entitlements_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntitlements_Entitlements_Edges) GetNode() *GetAllEntitlements_Entitlements_Edges_Node {
	if t == nil {
		t = &GetAllEntitlements_Entitlements_Edges{}
	}
	return t.Node
}

type GetAllEntitlements_Entitlements struct {
	Edges []*GetAllEntitlements_Entitlements_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntitlements_Entitlements) GetEdges() []*GetAllEntitlements_Entitlements_Edges {
	if t == nil {
		t = &GetAllEntitlements_Entitlements{}
	}
	return t.Edges
}

type GetEntitlementByID_Entitlement_Plan_Features_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementByID_Entitlement_Plan_Features_Feature) GetID() string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Plan_Features_Feature{}
	}
	return t.ID
}
func (t *GetEntitlementByID_Entitlement_Plan_Features_Feature) GetName() string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Plan_Features_Feature{}
	}
	return t.Name
}

type GetEntitlementByID_Entitlement_Plan_Features struct {
	Metadata map[string]interface{}                               "json:\"metadata,omitempty\" graphql:\"metadata\""
	Feature  GetEntitlementByID_Entitlement_Plan_Features_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *GetEntitlementByID_Entitlement_Plan_Features) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Plan_Features{}
	}
	return t.Metadata
}
func (t *GetEntitlementByID_Entitlement_Plan_Features) GetFeature() *GetEntitlementByID_Entitlement_Plan_Features_Feature {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Plan_Features{}
	}
	return &t.Feature
}

type GetEntitlementByID_Entitlement_Plan struct {
	ID       string                                          "json:\"id\" graphql:\"id\""
	Name     string                                          "json:\"name\" graphql:\"name\""
	Features []*GetEntitlementByID_Entitlement_Plan_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *GetEntitlementByID_Entitlement_Plan) GetID() string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Plan{}
	}
	return t.ID
}
func (t *GetEntitlementByID_Entitlement_Plan) GetName() string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Plan{}
	}
	return t.Name
}
func (t *GetEntitlementByID_Entitlement_Plan) GetFeatures() []*GetEntitlementByID_Entitlement_Plan_Features {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Plan{}
	}
	return t.Features
}

type GetEntitlementByID_Entitlement_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementByID_Entitlement_Organization) GetID() string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Organization{}
	}
	return t.ID
}
func (t *GetEntitlementByID_Entitlement_Organization) GetName() string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement_Organization{}
	}
	return t.Name
}

type GetEntitlementByID_Entitlement struct {
	ID                     string                                      "json:\"id\" graphql:\"id\""
	Plan                   GetEntitlementByID_Entitlement_Plan         "json:\"plan\" graphql:\"plan\""
	Organization           GetEntitlementByID_Entitlement_Organization "json:\"organization\" graphql:\"organization\""
	Expires                bool                                        "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time                                  "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Cancelled              bool                                        "json:\"cancelled\" graphql:\"cancelled\""
	ExternalCustomerID     *string                                     "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string                                     "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
}

func (t *GetEntitlementByID_Entitlement) GetID() string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return t.ID
}
func (t *GetEntitlementByID_Entitlement) GetPlan() *GetEntitlementByID_Entitlement_Plan {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return &t.Plan
}
func (t *GetEntitlementByID_Entitlement) GetOrganization() *GetEntitlementByID_Entitlement_Organization {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return &t.Organization
}
func (t *GetEntitlementByID_Entitlement) GetExpires() bool {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return t.Expires
}
func (t *GetEntitlementByID_Entitlement) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return t.ExpiresAt
}
func (t *GetEntitlementByID_Entitlement) GetCancelled() bool {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return t.Cancelled
}
func (t *GetEntitlementByID_Entitlement) GetExternalCustomerID() *string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return t.ExternalCustomerID
}
func (t *GetEntitlementByID_Entitlement) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &GetEntitlementByID_Entitlement{}
	}
	return t.ExternalSubscriptionID
}

type GetEntitlements_Entitlements_Edges_Node_Plan_Features_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlements_Entitlements_Edges_Node_Plan_Features_Feature) GetID() string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Plan_Features_Feature{}
	}
	return t.ID
}
func (t *GetEntitlements_Entitlements_Edges_Node_Plan_Features_Feature) GetName() string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Plan_Features_Feature{}
	}
	return t.Name
}

type GetEntitlements_Entitlements_Edges_Node_Plan_Features struct {
	Metadata map[string]interface{}                                        "json:\"metadata,omitempty\" graphql:\"metadata\""
	Feature  GetEntitlements_Entitlements_Edges_Node_Plan_Features_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *GetEntitlements_Entitlements_Edges_Node_Plan_Features) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Plan_Features{}
	}
	return t.Metadata
}
func (t *GetEntitlements_Entitlements_Edges_Node_Plan_Features) GetFeature() *GetEntitlements_Entitlements_Edges_Node_Plan_Features_Feature {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Plan_Features{}
	}
	return &t.Feature
}

type GetEntitlements_Entitlements_Edges_Node_Plan struct {
	ID       string                                                   "json:\"id\" graphql:\"id\""
	Name     string                                                   "json:\"name\" graphql:\"name\""
	Features []*GetEntitlements_Entitlements_Edges_Node_Plan_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *GetEntitlements_Entitlements_Edges_Node_Plan) GetID() string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Plan{}
	}
	return t.ID
}
func (t *GetEntitlements_Entitlements_Edges_Node_Plan) GetName() string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Plan{}
	}
	return t.Name
}
func (t *GetEntitlements_Entitlements_Edges_Node_Plan) GetFeatures() []*GetEntitlements_Entitlements_Edges_Node_Plan_Features {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Plan{}
	}
	return t.Features
}

type GetEntitlements_Entitlements_Edges_Node_Organization struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlements_Entitlements_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Organization{}
	}
	return t.ID
}
func (t *GetEntitlements_Entitlements_Edges_Node_Organization) GetName() string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node_Organization{}
	}
	return t.Name
}

type GetEntitlements_Entitlements_Edges_Node struct {
	ID                     string                                               "json:\"id\" graphql:\"id\""
	Plan                   GetEntitlements_Entitlements_Edges_Node_Plan         "json:\"plan\" graphql:\"plan\""
	Organization           GetEntitlements_Entitlements_Edges_Node_Organization "json:\"organization\" graphql:\"organization\""
	Expires                bool                                                 "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time                                           "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Cancelled              bool                                                 "json:\"cancelled\" graphql:\"cancelled\""
	ExternalCustomerID     *string                                              "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string                                              "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
}

func (t *GetEntitlements_Entitlements_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntitlements_Entitlements_Edges_Node) GetPlan() *GetEntitlements_Entitlements_Edges_Node_Plan {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return &t.Plan
}
func (t *GetEntitlements_Entitlements_Edges_Node) GetOrganization() *GetEntitlements_Entitlements_Edges_Node_Organization {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return &t.Organization
}
func (t *GetEntitlements_Entitlements_Edges_Node) GetExpires() bool {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return t.Expires
}
func (t *GetEntitlements_Entitlements_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return t.ExpiresAt
}
func (t *GetEntitlements_Entitlements_Edges_Node) GetCancelled() bool {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return t.Cancelled
}
func (t *GetEntitlements_Entitlements_Edges_Node) GetExternalCustomerID() *string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return t.ExternalCustomerID
}
func (t *GetEntitlements_Entitlements_Edges_Node) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges_Node{}
	}
	return t.ExternalSubscriptionID
}

type GetEntitlements_Entitlements_Edges struct {
	Node *GetEntitlements_Entitlements_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntitlements_Entitlements_Edges) GetNode() *GetEntitlements_Entitlements_Edges_Node {
	if t == nil {
		t = &GetEntitlements_Entitlements_Edges{}
	}
	return t.Node
}

type GetEntitlements_Entitlements struct {
	Edges []*GetEntitlements_Entitlements_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntitlements_Entitlements) GetEdges() []*GetEntitlements_Entitlements_Edges {
	if t == nil {
		t = &GetEntitlements_Entitlements{}
	}
	return t.Edges
}

type UpdateEntitlement_UpdateEntitlement_Entitlement_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateEntitlement_UpdateEntitlement_Entitlement_Plan) GetID() string {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement_Plan{}
	}
	return t.ID
}
func (t *UpdateEntitlement_UpdateEntitlement_Entitlement_Plan) GetName() string {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement_Plan{}
	}
	return t.Name
}

type UpdateEntitlement_UpdateEntitlement_Entitlement struct {
	ID                     string                                               "json:\"id\" graphql:\"id\""
	Plan                   UpdateEntitlement_UpdateEntitlement_Entitlement_Plan "json:\"plan\" graphql:\"plan\""
	Expires                bool                                                 "json:\"expires\" graphql:\"expires\""
	ExpiresAt              *time.Time                                           "json:\"expiresAt,omitempty\" graphql:\"expiresAt\""
	Cancelled              bool                                                 "json:\"cancelled\" graphql:\"cancelled\""
	ExternalCustomerID     *string                                              "json:\"externalCustomerID,omitempty\" graphql:\"externalCustomerID\""
	ExternalSubscriptionID *string                                              "json:\"externalSubscriptionID,omitempty\" graphql:\"externalSubscriptionID\""
}

func (t *UpdateEntitlement_UpdateEntitlement_Entitlement) GetID() string {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement{}
	}
	return t.ID
}
func (t *UpdateEntitlement_UpdateEntitlement_Entitlement) GetPlan() *UpdateEntitlement_UpdateEntitlement_Entitlement_Plan {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement{}
	}
	return &t.Plan
}
func (t *UpdateEntitlement_UpdateEntitlement_Entitlement) GetExpires() bool {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement{}
	}
	return t.Expires
}
func (t *UpdateEntitlement_UpdateEntitlement_Entitlement) GetExpiresAt() *time.Time {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement{}
	}
	return t.ExpiresAt
}
func (t *UpdateEntitlement_UpdateEntitlement_Entitlement) GetCancelled() bool {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement{}
	}
	return t.Cancelled
}
func (t *UpdateEntitlement_UpdateEntitlement_Entitlement) GetExternalCustomerID() *string {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement{}
	}
	return t.ExternalCustomerID
}
func (t *UpdateEntitlement_UpdateEntitlement_Entitlement) GetExternalSubscriptionID() *string {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement_Entitlement{}
	}
	return t.ExternalSubscriptionID
}

type UpdateEntitlement_UpdateEntitlement struct {
	Entitlement UpdateEntitlement_UpdateEntitlement_Entitlement "json:\"entitlement\" graphql:\"entitlement\""
}

func (t *UpdateEntitlement_UpdateEntitlement) GetEntitlement() *UpdateEntitlement_UpdateEntitlement_Entitlement {
	if t == nil {
		t = &UpdateEntitlement_UpdateEntitlement{}
	}
	return &t.Entitlement
}

type CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans struct {
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	DisplayName *string                "json:\"displayName,omitempty\" graphql:\"displayName\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Version     string                 "json:\"version\" graphql:\"version\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
}

func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans{}
	}
	return t.Name
}
func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans) GetDisplayName() *string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans{}
	}
	return t.Metadata
}
func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans{}
	}
	return t.Tags
}
func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans) GetVersion() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans{}
	}
	return t.Version
}
func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans{}
	}
	return t.Description
}

type CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan struct {
	EntitlementPlans []*CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans "json:\"entitlementPlans,omitempty\" graphql:\"entitlementPlans\""
}

func (t *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan) GetEntitlementPlans() []*CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan_EntitlementPlans {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan{}
	}
	return t.EntitlementPlans
}

type CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans struct {
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	DisplayName *string                "json:\"displayName,omitempty\" graphql:\"displayName\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Version     string                 "json:\"version\" graphql:\"version\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
}

func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans) GetID() string {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans{}
	}
	return t.ID
}
func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans) GetName() string {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans{}
	}
	return t.Name
}
func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans) GetDisplayName() *string {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans{}
	}
	return t.DisplayName
}
func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans{}
	}
	return t.Metadata
}
func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans) GetTags() []string {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans{}
	}
	return t.Tags
}
func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans) GetVersion() string {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans{}
	}
	return t.Version
}
func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans) GetDescription() *string {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans{}
	}
	return t.Description
}

type CreateBulkEntitlementPlan_CreateBulkEntitlementPlan struct {
	EntitlementPlans []*CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans "json:\"entitlementPlans,omitempty\" graphql:\"entitlementPlans\""
}

func (t *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan) GetEntitlementPlans() []*CreateBulkEntitlementPlan_CreateBulkEntitlementPlan_EntitlementPlans {
	if t == nil {
		t = &CreateBulkEntitlementPlan_CreateBulkEntitlementPlan{}
	}
	return t.EntitlementPlans
}

type CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan struct {
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	DisplayName *string                "json:\"displayName,omitempty\" graphql:\"displayName\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Version     string                 "json:\"version\" graphql:\"version\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
}

func (t *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan) GetID() string {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan{}
	}
	return t.ID
}
func (t *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan) GetName() string {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan{}
	}
	return t.Name
}
func (t *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan) GetDisplayName() *string {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan{}
	}
	return t.DisplayName
}
func (t *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan{}
	}
	return t.Metadata
}
func (t *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan) GetTags() []string {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan{}
	}
	return t.Tags
}
func (t *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan) GetVersion() string {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan{}
	}
	return t.Version
}
func (t *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan) GetDescription() *string {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan{}
	}
	return t.Description
}

type CreateEntitlementPlan_CreateEntitlementPlan struct {
	EntitlementPlan CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan "json:\"entitlementPlan\" graphql:\"entitlementPlan\""
}

func (t *CreateEntitlementPlan_CreateEntitlementPlan) GetEntitlementPlan() *CreateEntitlementPlan_CreateEntitlementPlan_EntitlementPlan {
	if t == nil {
		t = &CreateEntitlementPlan_CreateEntitlementPlan{}
	}
	return &t.EntitlementPlan
}

type DeleteEntitlementPlan_DeleteEntitlementPlan struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEntitlementPlan_DeleteEntitlementPlan) GetDeletedID() string {
	if t == nil {
		t = &DeleteEntitlementPlan_DeleteEntitlementPlan{}
	}
	return t.DeletedID
}

type GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature struct {
	ID       string                 "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Name     string                 "json:\"name\" graphql:\"name\""
}

func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature) GetID() string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature{}
	}
	return t.ID
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature{}
	}
	return t.Metadata
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature) GetName() string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature{}
	}
	return t.Name
}

type GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features struct {
	Feature  GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature "json:\"feature\" graphql:\"feature\""
	Metadata map[string]interface{}                                              "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags     []string                                                            "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features) GetFeature() *GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features{}
	}
	return &t.Feature
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features{}
	}
	return t.Metadata
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features) GetTags() []string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features{}
	}
	return t.Tags
}

type GetAllEntitlementPlans_EntitlementPlans_Edges_Node struct {
	ID          string                                                         "json:\"id\" graphql:\"id\""
	Name        string                                                         "json:\"name\" graphql:\"name\""
	DisplayName *string                                                        "json:\"displayName,omitempty\" graphql:\"displayName\""
	Metadata    map[string]interface{}                                         "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags        []string                                                       "json:\"tags,omitempty\" graphql:\"tags\""
	Version     string                                                         "json:\"version\" graphql:\"version\""
	Description *string                                                        "json:\"description,omitempty\" graphql:\"description\""
	Features    []*GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetVersion() string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Version
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllEntitlementPlans_EntitlementPlans_Edges_Node) GetFeatures() []*GetAllEntitlementPlans_EntitlementPlans_Edges_Node_Features {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Features
}

type GetAllEntitlementPlans_EntitlementPlans_Edges struct {
	Node *GetAllEntitlementPlans_EntitlementPlans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntitlementPlans_EntitlementPlans_Edges) GetNode() *GetAllEntitlementPlans_EntitlementPlans_Edges_Node {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans_Edges{}
	}
	return t.Node
}

type GetAllEntitlementPlans_EntitlementPlans struct {
	Edges []*GetAllEntitlementPlans_EntitlementPlans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntitlementPlans_EntitlementPlans) GetEdges() []*GetAllEntitlementPlans_EntitlementPlans_Edges {
	if t == nil {
		t = &GetAllEntitlementPlans_EntitlementPlans{}
	}
	return t.Edges
}

type GetEntitlementPlanByID_EntitlementPlan_Features_Feature struct {
	ID       string                 "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Name     string                 "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementPlanByID_EntitlementPlan_Features_Feature) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan_Features_Feature{}
	}
	return t.ID
}
func (t *GetEntitlementPlanByID_EntitlementPlan_Features_Feature) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan_Features_Feature{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlanByID_EntitlementPlan_Features_Feature) GetName() string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan_Features_Feature{}
	}
	return t.Name
}

type GetEntitlementPlanByID_EntitlementPlan_Features struct {
	Feature  GetEntitlementPlanByID_EntitlementPlan_Features_Feature "json:\"feature\" graphql:\"feature\""
	Metadata map[string]interface{}                                  "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags     []string                                                "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetEntitlementPlanByID_EntitlementPlan_Features) GetFeature() *GetEntitlementPlanByID_EntitlementPlan_Features_Feature {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan_Features{}
	}
	return &t.Feature
}
func (t *GetEntitlementPlanByID_EntitlementPlan_Features) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan_Features{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlanByID_EntitlementPlan_Features) GetTags() []string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan_Features{}
	}
	return t.Tags
}

type GetEntitlementPlanByID_EntitlementPlan struct {
	ID          string                                             "json:\"id\" graphql:\"id\""
	Name        string                                             "json:\"name\" graphql:\"name\""
	DisplayName *string                                            "json:\"displayName,omitempty\" graphql:\"displayName\""
	Metadata    map[string]interface{}                             "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags        []string                                           "json:\"tags,omitempty\" graphql:\"tags\""
	Version     string                                             "json:\"version\" graphql:\"version\""
	Description *string                                            "json:\"description,omitempty\" graphql:\"description\""
	Features    []*GetEntitlementPlanByID_EntitlementPlan_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *GetEntitlementPlanByID_EntitlementPlan) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.ID
}
func (t *GetEntitlementPlanByID_EntitlementPlan) GetName() string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.Name
}
func (t *GetEntitlementPlanByID_EntitlementPlan) GetDisplayName() *string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.DisplayName
}
func (t *GetEntitlementPlanByID_EntitlementPlan) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlanByID_EntitlementPlan) GetTags() []string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.Tags
}
func (t *GetEntitlementPlanByID_EntitlementPlan) GetVersion() string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.Version
}
func (t *GetEntitlementPlanByID_EntitlementPlan) GetDescription() *string {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.Description
}
func (t *GetEntitlementPlanByID_EntitlementPlan) GetFeatures() []*GetEntitlementPlanByID_EntitlementPlan_Features {
	if t == nil {
		t = &GetEntitlementPlanByID_EntitlementPlan{}
	}
	return t.Features
}

type GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature struct {
	ID       string                 "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Name     string                 "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature) GetID() string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature{}
	}
	return t.ID
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature) GetName() string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature{}
	}
	return t.Name
}

type GetEntitlementPlans_EntitlementPlans_Edges_Node_Features struct {
	Feature  GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature "json:\"feature\" graphql:\"feature\""
	Metadata map[string]interface{}                                           "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags     []string                                                         "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node_Features) GetFeature() *GetEntitlementPlans_EntitlementPlans_Edges_Node_Features_Feature {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node_Features{}
	}
	return &t.Feature
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node_Features) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node_Features{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node_Features) GetTags() []string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node_Features{}
	}
	return t.Tags
}

type GetEntitlementPlans_EntitlementPlans_Edges_Node struct {
	ID          string                                                      "json:\"id\" graphql:\"id\""
	Name        string                                                      "json:\"name\" graphql:\"name\""
	DisplayName *string                                                     "json:\"displayName,omitempty\" graphql:\"displayName\""
	Metadata    map[string]interface{}                                      "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags        []string                                                    "json:\"tags,omitempty\" graphql:\"tags\""
	Version     string                                                      "json:\"version\" graphql:\"version\""
	Description *string                                                     "json:\"description,omitempty\" graphql:\"description\""
	Features    []*GetEntitlementPlans_EntitlementPlans_Edges_Node_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetName() string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Name
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Tags
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetVersion() string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Version
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Description
}
func (t *GetEntitlementPlans_EntitlementPlans_Edges_Node) GetFeatures() []*GetEntitlementPlans_EntitlementPlans_Edges_Node_Features {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges_Node{}
	}
	return t.Features
}

type GetEntitlementPlans_EntitlementPlans_Edges struct {
	Node *GetEntitlementPlans_EntitlementPlans_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntitlementPlans_EntitlementPlans_Edges) GetNode() *GetEntitlementPlans_EntitlementPlans_Edges_Node {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans_Edges{}
	}
	return t.Node
}

type GetEntitlementPlans_EntitlementPlans struct {
	Edges []*GetEntitlementPlans_EntitlementPlans_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntitlementPlans_EntitlementPlans) GetEdges() []*GetEntitlementPlans_EntitlementPlans_Edges {
	if t == nil {
		t = &GetEntitlementPlans_EntitlementPlans{}
	}
	return t.Edges
}

type UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan struct {
	ID          string                 "json:\"id\" graphql:\"id\""
	Name        string                 "json:\"name\" graphql:\"name\""
	DisplayName *string                "json:\"displayName,omitempty\" graphql:\"displayName\""
	Metadata    map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
	Tags        []string               "json:\"tags,omitempty\" graphql:\"tags\""
	Version     string                 "json:\"version\" graphql:\"version\""
	Description *string                "json:\"description,omitempty\" graphql:\"description\""
}

func (t *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan) GetID() string {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan{}
	}
	return t.ID
}
func (t *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan) GetName() string {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan{}
	}
	return t.Name
}
func (t *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan) GetDisplayName() *string {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan{}
	}
	return t.DisplayName
}
func (t *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan{}
	}
	return t.Metadata
}
func (t *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan) GetTags() []string {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan{}
	}
	return t.Tags
}
func (t *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan) GetVersion() string {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan{}
	}
	return t.Version
}
func (t *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan) GetDescription() *string {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan{}
	}
	return t.Description
}

type UpdateEntitlementPlan_UpdateEntitlementPlan struct {
	EntitlementPlan UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan "json:\"entitlementPlan\" graphql:\"entitlementPlan\""
}

func (t *UpdateEntitlementPlan_UpdateEntitlementPlan) GetEntitlementPlan() *UpdateEntitlementPlan_UpdateEntitlementPlan_EntitlementPlan {
	if t == nil {
		t = &UpdateEntitlementPlan_UpdateEntitlementPlan{}
	}
	return &t.EntitlementPlan
}

type GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature) GetID() string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature{}
	}
	return t.ID
}
func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature) GetName() string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature{}
	}
	return t.Name
}

type GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan) GetID() string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan{}
	}
	return t.ID
}
func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan) GetName() string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan{}
	}
	return t.Name
}

type GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node struct {
	ID       string                                                                   "json:\"id\" graphql:\"id\""
	Feature  GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature "json:\"feature\" graphql:\"feature\""
	Metadata map[string]interface{}                                                   "json:\"metadata,omitempty\" graphql:\"metadata\""
	Plan     GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan    "json:\"plan\" graphql:\"plan\""
}

func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetFeature() *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return &t.Feature
}
func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetPlan() *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return &t.Plan
}

type GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges struct {
	Node *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges) GetNode() *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges{}
	}
	return t.Node
}

type GetAllEntitlementPlanFeatures_EntitlementPlanFeatures struct {
	Edges []*GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures) GetEdges() []*GetAllEntitlementPlanFeatures_EntitlementPlanFeatures_Edges {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures_EntitlementPlanFeatures{}
	}
	return t.Edges
}

type GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Plan) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Plan{}
	}
	return t.ID
}
func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Plan) GetName() string {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Plan{}
	}
	return t.Name
}

type GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Feature) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Feature{}
	}
	return t.ID
}
func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Feature) GetName() string {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Feature{}
	}
	return t.Name
}

type GetEntitlementPlanFeatureByID_EntitlementPlanFeature struct {
	ID       string                                                       "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{}                                       "json:\"metadata,omitempty\" graphql:\"metadata\""
	Plan     GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Plan    "json:\"plan\" graphql:\"plan\""
	Feature  GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature{}
	}
	return t.ID
}
func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature) GetPlan() *GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Plan {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature{}
	}
	return &t.Plan
}
func (t *GetEntitlementPlanFeatureByID_EntitlementPlanFeature) GetFeature() *GetEntitlementPlanFeatureByID_EntitlementPlanFeature_Feature {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID_EntitlementPlanFeature{}
	}
	return &t.Feature
}

type GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan{}
	}
	return t.ID
}
func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan) GetName() string {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan{}
	}
	return t.Name
}

type GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature{}
	}
	return t.ID
}
func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature) GetName() string {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature{}
	}
	return t.Name
}

type GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node struct {
	ID       string                                                                "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{}                                                "json:\"metadata,omitempty\" graphql:\"metadata\""
	Plan     GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan    "json:\"plan\" graphql:\"plan\""
	Feature  GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return t.ID
}
func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetPlan() *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Plan {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return &t.Plan
}
func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node) GetFeature() *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node_Feature {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node{}
	}
	return &t.Feature
}

type GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges struct {
	Node *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges) GetNode() *GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges_Node {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges{}
	}
	return t.Node
}

type GetEntitlementPlanFeatures_EntitlementPlanFeatures struct {
	Edges []*GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEntitlementPlanFeatures_EntitlementPlanFeatures) GetEdges() []*GetEntitlementPlanFeatures_EntitlementPlanFeatures_Edges {
	if t == nil {
		t = &GetEntitlementPlanFeatures_EntitlementPlanFeatures{}
	}
	return t.Edges
}

type CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Plan) GetID() string {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Plan{}
	}
	return t.ID
}
func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Plan) GetName() string {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Plan{}
	}
	return t.Name
}

type CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Feature) GetID() string {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Feature{}
	}
	return t.ID
}
func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Feature) GetName() string {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Feature{}
	}
	return t.Name
}

type CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature struct {
	ID       string                                                                                   "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{}                                                                   "json:\"metadata,omitempty\" graphql:\"metadata\""
	Plan     CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Plan    "json:\"plan\" graphql:\"plan\""
	Feature  CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature) GetID() string {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return t.ID
}
func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return t.Metadata
}
func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature) GetPlan() *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Plan {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return &t.Plan
}
func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature) GetFeature() *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature_Feature {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return &t.Feature
}

type CreateEntitlementPlanFeature_CreateEntitlementPlanFeature struct {
	EntitlementPlanFeature CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature "json:\"entitlementPlanFeature\" graphql:\"entitlementPlanFeature\""
}

func (t *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature) GetEntitlementPlanFeature() *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature_EntitlementPlanFeature {
	if t == nil {
		t = &CreateEntitlementPlanFeature_CreateEntitlementPlanFeature{}
	}
	return &t.EntitlementPlanFeature
}

type CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Plan) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Plan{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Plan) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Plan{}
	}
	return t.Name
}

type CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Feature) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Feature{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Feature) GetName() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Feature{}
	}
	return t.Name
}

type CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures struct {
	ID       string                                                                                                  "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{}                                                                                  "json:\"metadata,omitempty\" graphql:\"metadata\""
	Plan     CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Plan    "json:\"plan\" graphql:\"plan\""
	Feature  CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return t.ID
}
func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return t.Metadata
}
func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures) GetPlan() *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Plan {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return &t.Plan
}
func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures) GetFeature() *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures_Feature {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return &t.Feature
}

type CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature struct {
	EntitlementPlanFeatures []*CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures "json:\"entitlementPlanFeatures,omitempty\" graphql:\"entitlementPlanFeatures\""
}

func (t *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature) GetEntitlementPlanFeatures() []*CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature_EntitlementPlanFeatures {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature{}
	}
	return t.EntitlementPlanFeatures
}

type CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Plan) GetID() string {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Plan{}
	}
	return t.ID
}
func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Plan) GetName() string {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Plan{}
	}
	return t.Name
}

type CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Feature) GetID() string {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Feature{}
	}
	return t.ID
}
func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Feature) GetName() string {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Feature{}
	}
	return t.Name
}

type CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures struct {
	ID       string                                                                                            "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{}                                                                            "json:\"metadata,omitempty\" graphql:\"metadata\""
	Plan     CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Plan    "json:\"plan\" graphql:\"plan\""
	Feature  CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures) GetID() string {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return t.ID
}
func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return t.Metadata
}
func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures) GetPlan() *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Plan {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return &t.Plan
}
func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures) GetFeature() *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures_Feature {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures{}
	}
	return &t.Feature
}

type CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature struct {
	EntitlementPlanFeatures []*CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures "json:\"entitlementPlanFeatures,omitempty\" graphql:\"entitlementPlanFeatures\""
}

func (t *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature) GetEntitlementPlanFeatures() []*CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature_EntitlementPlanFeatures {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature{}
	}
	return t.EntitlementPlanFeatures
}

type UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Plan struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Plan) GetID() string {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Plan{}
	}
	return t.ID
}
func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Plan) GetName() string {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Plan{}
	}
	return t.Name
}

type UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Feature struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Feature) GetID() string {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Feature{}
	}
	return t.ID
}
func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Feature) GetName() string {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Feature{}
	}
	return t.Name
}

type UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature struct {
	ID       string                                                                                   "json:\"id\" graphql:\"id\""
	Metadata map[string]interface{}                                                                   "json:\"metadata,omitempty\" graphql:\"metadata\""
	Plan     UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Plan    "json:\"plan\" graphql:\"plan\""
	Feature  UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature) GetID() string {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return t.ID
}
func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return t.Metadata
}
func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature) GetPlan() *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Plan {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return &t.Plan
}
func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature) GetFeature() *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature_Feature {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature{}
	}
	return &t.Feature
}

type UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature struct {
	EntitlementPlanFeature UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature "json:\"entitlementPlanFeature\" graphql:\"entitlementPlanFeature\""
}

func (t *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature) GetEntitlementPlanFeature() *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature_EntitlementPlanFeature {
	if t == nil {
		t = &UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature{}
	}
	return &t.EntitlementPlanFeature
}

type DeleteEntitlementPlanFeature_DeleteEntitlementPlanFeature struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEntitlementPlanFeature_DeleteEntitlementPlanFeature) GetDeletedID() string {
	if t == nil {
		t = &DeleteEntitlementPlanFeature_DeleteEntitlementPlanFeature{}
	}
	return t.DeletedID
}

type GetEvents_Events_Edges_Node struct {
	EventID       *string                "json:\"eventID,omitempty\" graphql:\"eventID\""
	ID            string                 "json:\"id\" graphql:\"id\""
	CorrelationID *string                "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType     string                 "json:\"eventType\" graphql:\"eventType\""
	Metadata      map[string]interface{} "json:\"metadata,omitempty\" graphql:\"metadata\""
}

func (t *GetEvents_Events_Edges_Node) GetEventID() *string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.EventID
}
func (t *GetEvents_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.ID
}
func (t *GetEvents_Events_Edges_Node) GetCorrelationID() *string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.CorrelationID
}
func (t *GetEvents_Events_Edges_Node) GetEventType() string {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.EventType
}
func (t *GetEvents_Events_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEvents_Events_Edges_Node{}
	}
	return t.Metadata
}

type GetEvents_Events_Edges struct {
	Node *GetEvents_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetEvents_Events_Edges) GetNode() *GetEvents_Events_Edges_Node {
	if t == nil {
		t = &GetEvents_Events_Edges{}
	}
	return t.Node
}

type GetEvents_Events struct {
	Edges []*GetEvents_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetEvents_Events) GetEdges() []*GetEvents_Events_Edges {
	if t == nil {
		t = &GetEvents_Events{}
	}
	return t.Edges
}

type GetEventByID_Event_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_User) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_User{}
	}
	return t.ID
}

type GetEventByID_Event_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Group) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Group{}
	}
	return t.ID
}

type GetEventByID_Event_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Integration) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Integration{}
	}
	return t.ID
}

type GetEventByID_Event_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Organization) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Organization{}
	}
	return t.ID
}

type GetEventByID_Event_Invite struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Invite) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Invite{}
	}
	return t.ID
}

type GetEventByID_Event_Feature struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Feature) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Feature{}
	}
	return t.ID
}

type GetEventByID_Event_PersonalAccessToken struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_PersonalAccessToken{}
	}
	return t.ID
}

type GetEventByID_Event_Oauth2token struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Oauth2token) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Oauth2token{}
	}
	return t.ID
}

type GetEventByID_Event_Hush struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Hush) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Hush{}
	}
	return t.ID
}

type GetEventByID_Event_Orgmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Orgmembership) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Orgmembership{}
	}
	return t.ID
}

type GetEventByID_Event_Groupmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Groupmembership) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Groupmembership{}
	}
	return t.ID
}

type GetEventByID_Event_Entitlement struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Entitlement) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Entitlement{}
	}
	return t.ID
}

type GetEventByID_Event_Webhook struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetEventByID_Event_Webhook) GetID() string {
	if t == nil {
		t = &GetEventByID_Event_Webhook{}
	}
	return t.ID
}

type GetEventByID_Event struct {
	ID                  string                                    "json:\"id\" graphql:\"id\""
	CreatedAt           *time.Time                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt           *time.Time                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy           *string                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy           *string                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	EventID             *string                                   "json:\"eventID,omitempty\" graphql:\"eventID\""
	CorrelationID       *string                                   "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType           string                                    "json:\"eventType\" graphql:\"eventType\""
	Metadata            map[string]interface{}                    "json:\"metadata,omitempty\" graphql:\"metadata\""
	User                []*GetEventByID_Event_User                "json:\"user,omitempty\" graphql:\"user\""
	Group               []*GetEventByID_Event_Group               "json:\"group,omitempty\" graphql:\"group\""
	Integration         []*GetEventByID_Event_Integration         "json:\"integration,omitempty\" graphql:\"integration\""
	Organization        []*GetEventByID_Event_Organization        "json:\"organization,omitempty\" graphql:\"organization\""
	Invite              []*GetEventByID_Event_Invite              "json:\"invite,omitempty\" graphql:\"invite\""
	Feature             []*GetEventByID_Event_Feature             "json:\"feature,omitempty\" graphql:\"feature\""
	PersonalAccessToken []*GetEventByID_Event_PersonalAccessToken "json:\"personalAccessToken,omitempty\" graphql:\"personalAccessToken\""
	Oauth2token         []*GetEventByID_Event_Oauth2token         "json:\"oauth2token,omitempty\" graphql:\"oauth2token\""
	Hush                []*GetEventByID_Event_Hush                "json:\"hush,omitempty\" graphql:\"hush\""
	Orgmembership       []*GetEventByID_Event_Orgmembership       "json:\"orgmembership,omitempty\" graphql:\"orgmembership\""
	Groupmembership     []*GetEventByID_Event_Groupmembership     "json:\"groupmembership,omitempty\" graphql:\"groupmembership\""
	Entitlement         []*GetEventByID_Event_Entitlement         "json:\"entitlement,omitempty\" graphql:\"entitlement\""
	Webhook             []*GetEventByID_Event_Webhook             "json:\"webhook,omitempty\" graphql:\"webhook\""
}

func (t *GetEventByID_Event) GetID() string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.ID
}
func (t *GetEventByID_Event) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.CreatedAt
}
func (t *GetEventByID_Event) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.UpdatedAt
}
func (t *GetEventByID_Event) GetCreatedBy() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.CreatedBy
}
func (t *GetEventByID_Event) GetUpdatedBy() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.UpdatedBy
}
func (t *GetEventByID_Event) GetEventID() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.EventID
}
func (t *GetEventByID_Event) GetCorrelationID() *string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.CorrelationID
}
func (t *GetEventByID_Event) GetEventType() string {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.EventType
}
func (t *GetEventByID_Event) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Metadata
}
func (t *GetEventByID_Event) GetUser() []*GetEventByID_Event_User {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.User
}
func (t *GetEventByID_Event) GetGroup() []*GetEventByID_Event_Group {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Group
}
func (t *GetEventByID_Event) GetIntegration() []*GetEventByID_Event_Integration {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Integration
}
func (t *GetEventByID_Event) GetOrganization() []*GetEventByID_Event_Organization {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Organization
}
func (t *GetEventByID_Event) GetInvite() []*GetEventByID_Event_Invite {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Invite
}
func (t *GetEventByID_Event) GetFeature() []*GetEventByID_Event_Feature {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Feature
}
func (t *GetEventByID_Event) GetPersonalAccessToken() []*GetEventByID_Event_PersonalAccessToken {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.PersonalAccessToken
}
func (t *GetEventByID_Event) GetOauth2token() []*GetEventByID_Event_Oauth2token {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Oauth2token
}
func (t *GetEventByID_Event) GetHush() []*GetEventByID_Event_Hush {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Hush
}
func (t *GetEventByID_Event) GetOrgmembership() []*GetEventByID_Event_Orgmembership {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Orgmembership
}
func (t *GetEventByID_Event) GetGroupmembership() []*GetEventByID_Event_Groupmembership {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Groupmembership
}
func (t *GetEventByID_Event) GetEntitlement() []*GetEventByID_Event_Entitlement {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Entitlement
}
func (t *GetEventByID_Event) GetWebhook() []*GetEventByID_Event_Webhook {
	if t == nil {
		t = &GetEventByID_Event{}
	}
	return t.Webhook
}

type GetAllEvents_Events_Edges_Node_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_User{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Group) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Group{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Integration) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Integration{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Organization{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Invite struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Invite) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Invite{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Feature struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Feature) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Feature{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_PersonalAccessToken struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_PersonalAccessToken{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Oauth2token struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Oauth2token) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Oauth2token{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Hush struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Hush) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Hush{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Orgmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Orgmembership) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Orgmembership{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Groupmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Groupmembership) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Groupmembership{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Entitlement struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Entitlement) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Entitlement{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node_Webhook struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllEvents_Events_Edges_Node_Webhook) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node_Webhook{}
	}
	return t.ID
}

type GetAllEvents_Events_Edges_Node struct {
	ID                  string                                                "json:\"id\" graphql:\"id\""
	CreatedAt           *time.Time                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt           *time.Time                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy           *string                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy           *string                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	EventID             *string                                               "json:\"eventID,omitempty\" graphql:\"eventID\""
	CorrelationID       *string                                               "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType           string                                                "json:\"eventType\" graphql:\"eventType\""
	Metadata            map[string]interface{}                                "json:\"metadata,omitempty\" graphql:\"metadata\""
	User                []*GetAllEvents_Events_Edges_Node_User                "json:\"user,omitempty\" graphql:\"user\""
	Group               []*GetAllEvents_Events_Edges_Node_Group               "json:\"group,omitempty\" graphql:\"group\""
	Integration         []*GetAllEvents_Events_Edges_Node_Integration         "json:\"integration,omitempty\" graphql:\"integration\""
	Organization        []*GetAllEvents_Events_Edges_Node_Organization        "json:\"organization,omitempty\" graphql:\"organization\""
	Invite              []*GetAllEvents_Events_Edges_Node_Invite              "json:\"invite,omitempty\" graphql:\"invite\""
	Feature             []*GetAllEvents_Events_Edges_Node_Feature             "json:\"feature,omitempty\" graphql:\"feature\""
	PersonalAccessToken []*GetAllEvents_Events_Edges_Node_PersonalAccessToken "json:\"personalAccessToken,omitempty\" graphql:\"personalAccessToken\""
	Oauth2token         []*GetAllEvents_Events_Edges_Node_Oauth2token         "json:\"oauth2token,omitempty\" graphql:\"oauth2token\""
	Hush                []*GetAllEvents_Events_Edges_Node_Hush                "json:\"hush,omitempty\" graphql:\"hush\""
	Orgmembership       []*GetAllEvents_Events_Edges_Node_Orgmembership       "json:\"orgmembership,omitempty\" graphql:\"orgmembership\""
	Groupmembership     []*GetAllEvents_Events_Edges_Node_Groupmembership     "json:\"groupmembership,omitempty\" graphql:\"groupmembership\""
	Entitlement         []*GetAllEvents_Events_Edges_Node_Entitlement         "json:\"entitlement,omitempty\" graphql:\"entitlement\""
	Webhook             []*GetAllEvents_Events_Edges_Node_Webhook             "json:\"webhook,omitempty\" graphql:\"webhook\""
}

func (t *GetAllEvents_Events_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllEvents_Events_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllEvents_Events_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllEvents_Events_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllEvents_Events_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllEvents_Events_Edges_Node) GetEventID() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.EventID
}
func (t *GetAllEvents_Events_Edges_Node) GetCorrelationID() *string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.CorrelationID
}
func (t *GetAllEvents_Events_Edges_Node) GetEventType() string {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.EventType
}
func (t *GetAllEvents_Events_Edges_Node) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Metadata
}
func (t *GetAllEvents_Events_Edges_Node) GetUser() []*GetAllEvents_Events_Edges_Node_User {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.User
}
func (t *GetAllEvents_Events_Edges_Node) GetGroup() []*GetAllEvents_Events_Edges_Node_Group {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Group
}
func (t *GetAllEvents_Events_Edges_Node) GetIntegration() []*GetAllEvents_Events_Edges_Node_Integration {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Integration
}
func (t *GetAllEvents_Events_Edges_Node) GetOrganization() []*GetAllEvents_Events_Edges_Node_Organization {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Organization
}
func (t *GetAllEvents_Events_Edges_Node) GetInvite() []*GetAllEvents_Events_Edges_Node_Invite {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Invite
}
func (t *GetAllEvents_Events_Edges_Node) GetFeature() []*GetAllEvents_Events_Edges_Node_Feature {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Feature
}
func (t *GetAllEvents_Events_Edges_Node) GetPersonalAccessToken() []*GetAllEvents_Events_Edges_Node_PersonalAccessToken {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.PersonalAccessToken
}
func (t *GetAllEvents_Events_Edges_Node) GetOauth2token() []*GetAllEvents_Events_Edges_Node_Oauth2token {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Oauth2token
}
func (t *GetAllEvents_Events_Edges_Node) GetHush() []*GetAllEvents_Events_Edges_Node_Hush {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Hush
}
func (t *GetAllEvents_Events_Edges_Node) GetOrgmembership() []*GetAllEvents_Events_Edges_Node_Orgmembership {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Orgmembership
}
func (t *GetAllEvents_Events_Edges_Node) GetGroupmembership() []*GetAllEvents_Events_Edges_Node_Groupmembership {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Groupmembership
}
func (t *GetAllEvents_Events_Edges_Node) GetEntitlement() []*GetAllEvents_Events_Edges_Node_Entitlement {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Entitlement
}
func (t *GetAllEvents_Events_Edges_Node) GetWebhook() []*GetAllEvents_Events_Edges_Node_Webhook {
	if t == nil {
		t = &GetAllEvents_Events_Edges_Node{}
	}
	return t.Webhook
}

type GetAllEvents_Events_Edges struct {
	Node *GetAllEvents_Events_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllEvents_Events_Edges) GetNode() *GetAllEvents_Events_Edges_Node {
	if t == nil {
		t = &GetAllEvents_Events_Edges{}
	}
	return t.Node
}

type GetAllEvents_Events struct {
	Edges []*GetAllEvents_Events_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllEvents_Events) GetEdges() []*GetAllEvents_Events_Edges {
	if t == nil {
		t = &GetAllEvents_Events{}
	}
	return t.Edges
}

type CreateEvent_CreateEvent_Event_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_User) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_User{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Group) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Group{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Integration) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Integration{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Organization) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Organization{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Invite struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Invite) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Invite{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Feature struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Feature) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Feature{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_PersonalAccessToken struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_PersonalAccessToken{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Oauth2token struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Oauth2token) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Oauth2token{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Hush struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Hush) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Hush{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Orgmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Orgmembership) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Orgmembership{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Groupmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Groupmembership) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Groupmembership{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Entitlement struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Entitlement) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Entitlement{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event_Webhook struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateEvent_CreateEvent_Event_Webhook) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event_Webhook{}
	}
	return t.ID
}

type CreateEvent_CreateEvent_Event struct {
	ID                  string                                               "json:\"id\" graphql:\"id\""
	EventID             *string                                              "json:\"eventID,omitempty\" graphql:\"eventID\""
	CorrelationID       *string                                              "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType           string                                               "json:\"eventType\" graphql:\"eventType\""
	Metadata            map[string]interface{}                               "json:\"metadata,omitempty\" graphql:\"metadata\""
	User                []*CreateEvent_CreateEvent_Event_User                "json:\"user,omitempty\" graphql:\"user\""
	Group               []*CreateEvent_CreateEvent_Event_Group               "json:\"group,omitempty\" graphql:\"group\""
	Integration         []*CreateEvent_CreateEvent_Event_Integration         "json:\"integration,omitempty\" graphql:\"integration\""
	Organization        []*CreateEvent_CreateEvent_Event_Organization        "json:\"organization,omitempty\" graphql:\"organization\""
	Invite              []*CreateEvent_CreateEvent_Event_Invite              "json:\"invite,omitempty\" graphql:\"invite\""
	Feature             []*CreateEvent_CreateEvent_Event_Feature             "json:\"feature,omitempty\" graphql:\"feature\""
	PersonalAccessToken []*CreateEvent_CreateEvent_Event_PersonalAccessToken "json:\"personalAccessToken,omitempty\" graphql:\"personalAccessToken\""
	Oauth2token         []*CreateEvent_CreateEvent_Event_Oauth2token         "json:\"oauth2token,omitempty\" graphql:\"oauth2token\""
	Hush                []*CreateEvent_CreateEvent_Event_Hush                "json:\"hush,omitempty\" graphql:\"hush\""
	Orgmembership       []*CreateEvent_CreateEvent_Event_Orgmembership       "json:\"orgmembership,omitempty\" graphql:\"orgmembership\""
	Groupmembership     []*CreateEvent_CreateEvent_Event_Groupmembership     "json:\"groupmembership,omitempty\" graphql:\"groupmembership\""
	Entitlement         []*CreateEvent_CreateEvent_Event_Entitlement         "json:\"entitlement,omitempty\" graphql:\"entitlement\""
	Webhook             []*CreateEvent_CreateEvent_Event_Webhook             "json:\"webhook,omitempty\" graphql:\"webhook\""
}

func (t *CreateEvent_CreateEvent_Event) GetID() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.ID
}
func (t *CreateEvent_CreateEvent_Event) GetEventID() *string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.EventID
}
func (t *CreateEvent_CreateEvent_Event) GetCorrelationID() *string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.CorrelationID
}
func (t *CreateEvent_CreateEvent_Event) GetEventType() string {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.EventType
}
func (t *CreateEvent_CreateEvent_Event) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Metadata
}
func (t *CreateEvent_CreateEvent_Event) GetUser() []*CreateEvent_CreateEvent_Event_User {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.User
}
func (t *CreateEvent_CreateEvent_Event) GetGroup() []*CreateEvent_CreateEvent_Event_Group {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Group
}
func (t *CreateEvent_CreateEvent_Event) GetIntegration() []*CreateEvent_CreateEvent_Event_Integration {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Integration
}
func (t *CreateEvent_CreateEvent_Event) GetOrganization() []*CreateEvent_CreateEvent_Event_Organization {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Organization
}
func (t *CreateEvent_CreateEvent_Event) GetInvite() []*CreateEvent_CreateEvent_Event_Invite {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Invite
}
func (t *CreateEvent_CreateEvent_Event) GetFeature() []*CreateEvent_CreateEvent_Event_Feature {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Feature
}
func (t *CreateEvent_CreateEvent_Event) GetPersonalAccessToken() []*CreateEvent_CreateEvent_Event_PersonalAccessToken {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.PersonalAccessToken
}
func (t *CreateEvent_CreateEvent_Event) GetOauth2token() []*CreateEvent_CreateEvent_Event_Oauth2token {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Oauth2token
}
func (t *CreateEvent_CreateEvent_Event) GetHush() []*CreateEvent_CreateEvent_Event_Hush {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Hush
}
func (t *CreateEvent_CreateEvent_Event) GetOrgmembership() []*CreateEvent_CreateEvent_Event_Orgmembership {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Orgmembership
}
func (t *CreateEvent_CreateEvent_Event) GetGroupmembership() []*CreateEvent_CreateEvent_Event_Groupmembership {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Groupmembership
}
func (t *CreateEvent_CreateEvent_Event) GetEntitlement() []*CreateEvent_CreateEvent_Event_Entitlement {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Entitlement
}
func (t *CreateEvent_CreateEvent_Event) GetWebhook() []*CreateEvent_CreateEvent_Event_Webhook {
	if t == nil {
		t = &CreateEvent_CreateEvent_Event{}
	}
	return t.Webhook
}

type CreateEvent_CreateEvent struct {
	Event CreateEvent_CreateEvent_Event "json:\"event\" graphql:\"event\""
}

func (t *CreateEvent_CreateEvent) GetEvent() *CreateEvent_CreateEvent_Event {
	if t == nil {
		t = &CreateEvent_CreateEvent{}
	}
	return &t.Event
}

type CreateBulkEvent_CreateBulkEvent_Events_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_User) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_User{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Group) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Group{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Integration) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Integration{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Organization) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Organization{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Invite struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Invite) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Invite{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Feature struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Feature) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Feature{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessToken struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessToken{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Oauth2token struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Oauth2token) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Oauth2token{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Hush struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Hush) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Hush{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Orgmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Orgmembership) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Orgmembership{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Groupmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Groupmembership) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Groupmembership{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Entitlement struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Entitlement) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Entitlement{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events_Webhook struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events_Webhook) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events_Webhook{}
	}
	return t.ID
}

type CreateBulkEvent_CreateBulkEvent_Events struct {
	ID                  string                                                        "json:\"id\" graphql:\"id\""
	EventID             *string                                                       "json:\"eventID,omitempty\" graphql:\"eventID\""
	CorrelationID       *string                                                       "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType           string                                                        "json:\"eventType\" graphql:\"eventType\""
	Metadata            map[string]interface{}                                        "json:\"metadata,omitempty\" graphql:\"metadata\""
	User                []*CreateBulkEvent_CreateBulkEvent_Events_User                "json:\"user,omitempty\" graphql:\"user\""
	Group               []*CreateBulkEvent_CreateBulkEvent_Events_Group               "json:\"group,omitempty\" graphql:\"group\""
	Integration         []*CreateBulkEvent_CreateBulkEvent_Events_Integration         "json:\"integration,omitempty\" graphql:\"integration\""
	Organization        []*CreateBulkEvent_CreateBulkEvent_Events_Organization        "json:\"organization,omitempty\" graphql:\"organization\""
	Invite              []*CreateBulkEvent_CreateBulkEvent_Events_Invite              "json:\"invite,omitempty\" graphql:\"invite\""
	Feature             []*CreateBulkEvent_CreateBulkEvent_Events_Feature             "json:\"feature,omitempty\" graphql:\"feature\""
	PersonalAccessToken []*CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessToken "json:\"personalAccessToken,omitempty\" graphql:\"personalAccessToken\""
	Oauth2token         []*CreateBulkEvent_CreateBulkEvent_Events_Oauth2token         "json:\"oauth2token,omitempty\" graphql:\"oauth2token\""
	Hush                []*CreateBulkEvent_CreateBulkEvent_Events_Hush                "json:\"hush,omitempty\" graphql:\"hush\""
	Orgmembership       []*CreateBulkEvent_CreateBulkEvent_Events_Orgmembership       "json:\"orgmembership,omitempty\" graphql:\"orgmembership\""
	Groupmembership     []*CreateBulkEvent_CreateBulkEvent_Events_Groupmembership     "json:\"groupmembership,omitempty\" graphql:\"groupmembership\""
	Entitlement         []*CreateBulkEvent_CreateBulkEvent_Events_Entitlement         "json:\"entitlement,omitempty\" graphql:\"entitlement\""
	Webhook             []*CreateBulkEvent_CreateBulkEvent_Events_Webhook             "json:\"webhook,omitempty\" graphql:\"webhook\""
}

func (t *CreateBulkEvent_CreateBulkEvent_Events) GetID() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.ID
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetEventID() *string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.EventID
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetCorrelationID() *string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.CorrelationID
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetEventType() string {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.EventType
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Metadata
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetUser() []*CreateBulkEvent_CreateBulkEvent_Events_User {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.User
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetGroup() []*CreateBulkEvent_CreateBulkEvent_Events_Group {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Group
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetIntegration() []*CreateBulkEvent_CreateBulkEvent_Events_Integration {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Integration
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetOrganization() []*CreateBulkEvent_CreateBulkEvent_Events_Organization {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Organization
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetInvite() []*CreateBulkEvent_CreateBulkEvent_Events_Invite {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Invite
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetFeature() []*CreateBulkEvent_CreateBulkEvent_Events_Feature {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Feature
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetPersonalAccessToken() []*CreateBulkEvent_CreateBulkEvent_Events_PersonalAccessToken {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.PersonalAccessToken
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetOauth2token() []*CreateBulkEvent_CreateBulkEvent_Events_Oauth2token {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Oauth2token
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetHush() []*CreateBulkEvent_CreateBulkEvent_Events_Hush {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Hush
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetOrgmembership() []*CreateBulkEvent_CreateBulkEvent_Events_Orgmembership {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Orgmembership
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetGroupmembership() []*CreateBulkEvent_CreateBulkEvent_Events_Groupmembership {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Groupmembership
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetEntitlement() []*CreateBulkEvent_CreateBulkEvent_Events_Entitlement {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Entitlement
}
func (t *CreateBulkEvent_CreateBulkEvent_Events) GetWebhook() []*CreateBulkEvent_CreateBulkEvent_Events_Webhook {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent_Events{}
	}
	return t.Webhook
}

type CreateBulkEvent_CreateBulkEvent struct {
	Events []*CreateBulkEvent_CreateBulkEvent_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkEvent_CreateBulkEvent) GetEvents() []*CreateBulkEvent_CreateBulkEvent_Events {
	if t == nil {
		t = &CreateBulkEvent_CreateBulkEvent{}
	}
	return t.Events
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_User) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_User{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Group) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Group{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integration) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integration{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organization) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organization{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invite struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invite) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invite{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Feature struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Feature) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Feature{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessToken struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessToken{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Oauth2token struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Oauth2token) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Oauth2token{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Hush struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Hush) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Hush{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmembership) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmembership{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmembership) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmembership{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Entitlement struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Entitlement) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Entitlement{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Webhook struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Webhook) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Webhook{}
	}
	return t.ID
}

type CreateBulkCSVEvent_CreateBulkCSVEvent_Events struct {
	ID                  string                                                              "json:\"id\" graphql:\"id\""
	EventID             *string                                                             "json:\"eventID,omitempty\" graphql:\"eventID\""
	CorrelationID       *string                                                             "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType           string                                                              "json:\"eventType\" graphql:\"eventType\""
	Metadata            map[string]interface{}                                              "json:\"metadata,omitempty\" graphql:\"metadata\""
	User                []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_User                "json:\"user,omitempty\" graphql:\"user\""
	Group               []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Group               "json:\"group,omitempty\" graphql:\"group\""
	Integration         []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integration         "json:\"integration,omitempty\" graphql:\"integration\""
	Organization        []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organization        "json:\"organization,omitempty\" graphql:\"organization\""
	Invite              []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invite              "json:\"invite,omitempty\" graphql:\"invite\""
	Feature             []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Feature             "json:\"feature,omitempty\" graphql:\"feature\""
	PersonalAccessToken []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessToken "json:\"personalAccessToken,omitempty\" graphql:\"personalAccessToken\""
	Oauth2token         []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Oauth2token         "json:\"oauth2token,omitempty\" graphql:\"oauth2token\""
	Hush                []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Hush                "json:\"hush,omitempty\" graphql:\"hush\""
	Orgmembership       []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmembership       "json:\"orgmembership,omitempty\" graphql:\"orgmembership\""
	Groupmembership     []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmembership     "json:\"groupmembership,omitempty\" graphql:\"groupmembership\""
	Entitlement         []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Entitlement         "json:\"entitlement,omitempty\" graphql:\"entitlement\""
	Webhook             []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Webhook             "json:\"webhook,omitempty\" graphql:\"webhook\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetID() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.ID
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetEventID() *string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.EventID
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetCorrelationID() *string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.CorrelationID
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetEventType() string {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.EventType
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Metadata
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetUser() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_User {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.User
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetGroup() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Group {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Group
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetIntegration() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Integration {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Integration
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetOrganization() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Organization {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Organization
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetInvite() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Invite {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Invite
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetFeature() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Feature {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Feature
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetPersonalAccessToken() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_PersonalAccessToken {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.PersonalAccessToken
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetOauth2token() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Oauth2token {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Oauth2token
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetHush() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Hush {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Hush
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetOrgmembership() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Orgmembership {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Orgmembership
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetGroupmembership() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Groupmembership {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Groupmembership
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetEntitlement() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Entitlement {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Entitlement
}
func (t *CreateBulkCSVEvent_CreateBulkCSVEvent_Events) GetWebhook() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events_Webhook {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent_Events{}
	}
	return t.Webhook
}

type CreateBulkCSVEvent_CreateBulkCSVEvent struct {
	Events []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkCSVEvent_CreateBulkCSVEvent) GetEvents() []*CreateBulkCSVEvent_CreateBulkCSVEvent_Events {
	if t == nil {
		t = &CreateBulkCSVEvent_CreateBulkCSVEvent{}
	}
	return t.Events
}

type UpdateEvent_UpdateEvent_Event_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_User) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_User{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Group) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Group{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Integration) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Integration{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Organization) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Organization{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Invite struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Invite) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Invite{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Feature struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Feature) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Feature{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_PersonalAccessToken struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_PersonalAccessToken{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Oauth2token struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Oauth2token) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Oauth2token{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Hush struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Hush) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Hush{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Orgmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Orgmembership) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Orgmembership{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Groupmembership struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Groupmembership) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Groupmembership{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Entitlement struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Entitlement) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Entitlement{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event_Webhook struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateEvent_UpdateEvent_Event_Webhook) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event_Webhook{}
	}
	return t.ID
}

type UpdateEvent_UpdateEvent_Event struct {
	ID                  string                                               "json:\"id\" graphql:\"id\""
	CreatedAt           *time.Time                                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt           *time.Time                                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy           *string                                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy           *string                                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	EventID             *string                                              "json:\"eventID,omitempty\" graphql:\"eventID\""
	CorrelationID       *string                                              "json:\"correlationID,omitempty\" graphql:\"correlationID\""
	EventType           string                                               "json:\"eventType\" graphql:\"eventType\""
	Metadata            map[string]interface{}                               "json:\"metadata,omitempty\" graphql:\"metadata\""
	User                []*UpdateEvent_UpdateEvent_Event_User                "json:\"user,omitempty\" graphql:\"user\""
	Group               []*UpdateEvent_UpdateEvent_Event_Group               "json:\"group,omitempty\" graphql:\"group\""
	Integration         []*UpdateEvent_UpdateEvent_Event_Integration         "json:\"integration,omitempty\" graphql:\"integration\""
	Organization        []*UpdateEvent_UpdateEvent_Event_Organization        "json:\"organization,omitempty\" graphql:\"organization\""
	Invite              []*UpdateEvent_UpdateEvent_Event_Invite              "json:\"invite,omitempty\" graphql:\"invite\""
	Feature             []*UpdateEvent_UpdateEvent_Event_Feature             "json:\"feature,omitempty\" graphql:\"feature\""
	PersonalAccessToken []*UpdateEvent_UpdateEvent_Event_PersonalAccessToken "json:\"personalAccessToken,omitempty\" graphql:\"personalAccessToken\""
	Oauth2token         []*UpdateEvent_UpdateEvent_Event_Oauth2token         "json:\"oauth2token,omitempty\" graphql:\"oauth2token\""
	Hush                []*UpdateEvent_UpdateEvent_Event_Hush                "json:\"hush,omitempty\" graphql:\"hush\""
	Orgmembership       []*UpdateEvent_UpdateEvent_Event_Orgmembership       "json:\"orgmembership,omitempty\" graphql:\"orgmembership\""
	Groupmembership     []*UpdateEvent_UpdateEvent_Event_Groupmembership     "json:\"groupmembership,omitempty\" graphql:\"groupmembership\""
	Entitlement         []*UpdateEvent_UpdateEvent_Event_Entitlement         "json:\"entitlement,omitempty\" graphql:\"entitlement\""
	Webhook             []*UpdateEvent_UpdateEvent_Event_Webhook             "json:\"webhook,omitempty\" graphql:\"webhook\""
}

func (t *UpdateEvent_UpdateEvent_Event) GetID() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.ID
}
func (t *UpdateEvent_UpdateEvent_Event) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.CreatedAt
}
func (t *UpdateEvent_UpdateEvent_Event) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.UpdatedAt
}
func (t *UpdateEvent_UpdateEvent_Event) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.CreatedBy
}
func (t *UpdateEvent_UpdateEvent_Event) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.UpdatedBy
}
func (t *UpdateEvent_UpdateEvent_Event) GetEventID() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.EventID
}
func (t *UpdateEvent_UpdateEvent_Event) GetCorrelationID() *string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.CorrelationID
}
func (t *UpdateEvent_UpdateEvent_Event) GetEventType() string {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.EventType
}
func (t *UpdateEvent_UpdateEvent_Event) GetMetadata() map[string]interface{} {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Metadata
}
func (t *UpdateEvent_UpdateEvent_Event) GetUser() []*UpdateEvent_UpdateEvent_Event_User {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.User
}
func (t *UpdateEvent_UpdateEvent_Event) GetGroup() []*UpdateEvent_UpdateEvent_Event_Group {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Group
}
func (t *UpdateEvent_UpdateEvent_Event) GetIntegration() []*UpdateEvent_UpdateEvent_Event_Integration {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Integration
}
func (t *UpdateEvent_UpdateEvent_Event) GetOrganization() []*UpdateEvent_UpdateEvent_Event_Organization {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Organization
}
func (t *UpdateEvent_UpdateEvent_Event) GetInvite() []*UpdateEvent_UpdateEvent_Event_Invite {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Invite
}
func (t *UpdateEvent_UpdateEvent_Event) GetFeature() []*UpdateEvent_UpdateEvent_Event_Feature {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Feature
}
func (t *UpdateEvent_UpdateEvent_Event) GetPersonalAccessToken() []*UpdateEvent_UpdateEvent_Event_PersonalAccessToken {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.PersonalAccessToken
}
func (t *UpdateEvent_UpdateEvent_Event) GetOauth2token() []*UpdateEvent_UpdateEvent_Event_Oauth2token {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Oauth2token
}
func (t *UpdateEvent_UpdateEvent_Event) GetHush() []*UpdateEvent_UpdateEvent_Event_Hush {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Hush
}
func (t *UpdateEvent_UpdateEvent_Event) GetOrgmembership() []*UpdateEvent_UpdateEvent_Event_Orgmembership {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Orgmembership
}
func (t *UpdateEvent_UpdateEvent_Event) GetGroupmembership() []*UpdateEvent_UpdateEvent_Event_Groupmembership {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Groupmembership
}
func (t *UpdateEvent_UpdateEvent_Event) GetEntitlement() []*UpdateEvent_UpdateEvent_Event_Entitlement {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Entitlement
}
func (t *UpdateEvent_UpdateEvent_Event) GetWebhook() []*UpdateEvent_UpdateEvent_Event_Webhook {
	if t == nil {
		t = &UpdateEvent_UpdateEvent_Event{}
	}
	return t.Webhook
}

type UpdateEvent_UpdateEvent struct {
	Event UpdateEvent_UpdateEvent_Event "json:\"event\" graphql:\"event\""
}

func (t *UpdateEvent_UpdateEvent) GetEvent() *UpdateEvent_UpdateEvent_Event {
	if t == nil {
		t = &UpdateEvent_UpdateEvent{}
	}
	return &t.Event
}

type DeleteEvent_DeleteEvent struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteEvent_DeleteEvent) GetDeletedID() string {
	if t == nil {
		t = &DeleteEvent_DeleteEvent{}
	}
	return t.DeletedID
}

type CreateBulkCSVFeature_CreateBulkCSVFeature_Features struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Enabled     bool     "json:\"enabled\" graphql:\"enabled\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateBulkCSVFeature_CreateBulkCSVFeature_Features) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVFeature_CreateBulkCSVFeature_Features{}
	}
	return t.Description
}
func (t *CreateBulkCSVFeature_CreateBulkCSVFeature_Features) GetEnabled() bool {
	if t == nil {
		t = &CreateBulkCSVFeature_CreateBulkCSVFeature_Features{}
	}
	return t.Enabled
}
func (t *CreateBulkCSVFeature_CreateBulkCSVFeature_Features) GetID() string {
	if t == nil {
		t = &CreateBulkCSVFeature_CreateBulkCSVFeature_Features{}
	}
	return t.ID
}
func (t *CreateBulkCSVFeature_CreateBulkCSVFeature_Features) GetName() string {
	if t == nil {
		t = &CreateBulkCSVFeature_CreateBulkCSVFeature_Features{}
	}
	return t.Name
}
func (t *CreateBulkCSVFeature_CreateBulkCSVFeature_Features) GetDisplayName() *string {
	if t == nil {
		t = &CreateBulkCSVFeature_CreateBulkCSVFeature_Features{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVFeature_CreateBulkCSVFeature_Features) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVFeature_CreateBulkCSVFeature_Features{}
	}
	return t.Tags
}

type CreateBulkCSVFeature_CreateBulkCSVFeature struct {
	Features []*CreateBulkCSVFeature_CreateBulkCSVFeature_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *CreateBulkCSVFeature_CreateBulkCSVFeature) GetFeatures() []*CreateBulkCSVFeature_CreateBulkCSVFeature_Features {
	if t == nil {
		t = &CreateBulkCSVFeature_CreateBulkCSVFeature{}
	}
	return t.Features
}

type CreateBulkFeature_CreateBulkFeature_Features struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Enabled     bool     "json:\"enabled\" graphql:\"enabled\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateBulkFeature_CreateBulkFeature_Features) GetDescription() *string {
	if t == nil {
		t = &CreateBulkFeature_CreateBulkFeature_Features{}
	}
	return t.Description
}
func (t *CreateBulkFeature_CreateBulkFeature_Features) GetEnabled() bool {
	if t == nil {
		t = &CreateBulkFeature_CreateBulkFeature_Features{}
	}
	return t.Enabled
}
func (t *CreateBulkFeature_CreateBulkFeature_Features) GetID() string {
	if t == nil {
		t = &CreateBulkFeature_CreateBulkFeature_Features{}
	}
	return t.ID
}
func (t *CreateBulkFeature_CreateBulkFeature_Features) GetName() string {
	if t == nil {
		t = &CreateBulkFeature_CreateBulkFeature_Features{}
	}
	return t.Name
}
func (t *CreateBulkFeature_CreateBulkFeature_Features) GetDisplayName() *string {
	if t == nil {
		t = &CreateBulkFeature_CreateBulkFeature_Features{}
	}
	return t.DisplayName
}
func (t *CreateBulkFeature_CreateBulkFeature_Features) GetTags() []string {
	if t == nil {
		t = &CreateBulkFeature_CreateBulkFeature_Features{}
	}
	return t.Tags
}

type CreateBulkFeature_CreateBulkFeature struct {
	Features []*CreateBulkFeature_CreateBulkFeature_Features "json:\"features,omitempty\" graphql:\"features\""
}

func (t *CreateBulkFeature_CreateBulkFeature) GetFeatures() []*CreateBulkFeature_CreateBulkFeature_Features {
	if t == nil {
		t = &CreateBulkFeature_CreateBulkFeature{}
	}
	return t.Features
}

type CreateFeature_CreateFeature_Feature struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Enabled     bool     "json:\"enabled\" graphql:\"enabled\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateFeature_CreateFeature_Feature) GetDescription() *string {
	if t == nil {
		t = &CreateFeature_CreateFeature_Feature{}
	}
	return t.Description
}
func (t *CreateFeature_CreateFeature_Feature) GetEnabled() bool {
	if t == nil {
		t = &CreateFeature_CreateFeature_Feature{}
	}
	return t.Enabled
}
func (t *CreateFeature_CreateFeature_Feature) GetID() string {
	if t == nil {
		t = &CreateFeature_CreateFeature_Feature{}
	}
	return t.ID
}
func (t *CreateFeature_CreateFeature_Feature) GetName() string {
	if t == nil {
		t = &CreateFeature_CreateFeature_Feature{}
	}
	return t.Name
}
func (t *CreateFeature_CreateFeature_Feature) GetDisplayName() *string {
	if t == nil {
		t = &CreateFeature_CreateFeature_Feature{}
	}
	return t.DisplayName
}
func (t *CreateFeature_CreateFeature_Feature) GetTags() []string {
	if t == nil {
		t = &CreateFeature_CreateFeature_Feature{}
	}
	return t.Tags
}

type CreateFeature_CreateFeature struct {
	Feature CreateFeature_CreateFeature_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *CreateFeature_CreateFeature) GetFeature() *CreateFeature_CreateFeature_Feature {
	if t == nil {
		t = &CreateFeature_CreateFeature{}
	}
	return &t.Feature
}

type DeleteFeature_DeleteFeature struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteFeature_DeleteFeature) GetDeletedID() string {
	if t == nil {
		t = &DeleteFeature_DeleteFeature{}
	}
	return t.DeletedID
}

type GetFeatureByID_Feature struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Enabled     bool     "json:\"enabled\" graphql:\"enabled\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetFeatureByID_Feature) GetDescription() *string {
	if t == nil {
		t = &GetFeatureByID_Feature{}
	}
	return t.Description
}
func (t *GetFeatureByID_Feature) GetEnabled() bool {
	if t == nil {
		t = &GetFeatureByID_Feature{}
	}
	return t.Enabled
}
func (t *GetFeatureByID_Feature) GetID() string {
	if t == nil {
		t = &GetFeatureByID_Feature{}
	}
	return t.ID
}
func (t *GetFeatureByID_Feature) GetName() string {
	if t == nil {
		t = &GetFeatureByID_Feature{}
	}
	return t.Name
}
func (t *GetFeatureByID_Feature) GetDisplayName() *string {
	if t == nil {
		t = &GetFeatureByID_Feature{}
	}
	return t.DisplayName
}
func (t *GetFeatureByID_Feature) GetTags() []string {
	if t == nil {
		t = &GetFeatureByID_Feature{}
	}
	return t.Tags
}

type GetAllFeatures_Features_Edges_Node struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Enabled     bool     "json:\"enabled\" graphql:\"enabled\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetAllFeatures_Features_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllFeatures_Features_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllFeatures_Features_Edges_Node) GetEnabled() bool {
	if t == nil {
		t = &GetAllFeatures_Features_Edges_Node{}
	}
	return t.Enabled
}
func (t *GetAllFeatures_Features_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllFeatures_Features_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllFeatures_Features_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllFeatures_Features_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllFeatures_Features_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetAllFeatures_Features_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllFeatures_Features_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllFeatures_Features_Edges_Node{}
	}
	return t.Tags
}

type GetAllFeatures_Features_Edges struct {
	Node *GetAllFeatures_Features_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllFeatures_Features_Edges) GetNode() *GetAllFeatures_Features_Edges_Node {
	if t == nil {
		t = &GetAllFeatures_Features_Edges{}
	}
	return t.Node
}

type GetAllFeatures_Features struct {
	Edges []*GetAllFeatures_Features_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllFeatures_Features) GetEdges() []*GetAllFeatures_Features_Edges {
	if t == nil {
		t = &GetAllFeatures_Features{}
	}
	return t.Edges
}

type GetFeatures_Features_Edges_Node struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Enabled     bool     "json:\"enabled\" graphql:\"enabled\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetFeatures_Features_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetFeatures_Features_Edges_Node{}
	}
	return t.Description
}
func (t *GetFeatures_Features_Edges_Node) GetEnabled() bool {
	if t == nil {
		t = &GetFeatures_Features_Edges_Node{}
	}
	return t.Enabled
}
func (t *GetFeatures_Features_Edges_Node) GetID() string {
	if t == nil {
		t = &GetFeatures_Features_Edges_Node{}
	}
	return t.ID
}
func (t *GetFeatures_Features_Edges_Node) GetName() string {
	if t == nil {
		t = &GetFeatures_Features_Edges_Node{}
	}
	return t.Name
}
func (t *GetFeatures_Features_Edges_Node) GetDisplayName() *string {
	if t == nil {
		t = &GetFeatures_Features_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetFeatures_Features_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetFeatures_Features_Edges_Node{}
	}
	return t.Tags
}

type GetFeatures_Features_Edges struct {
	Node *GetFeatures_Features_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetFeatures_Features_Edges) GetNode() *GetFeatures_Features_Edges_Node {
	if t == nil {
		t = &GetFeatures_Features_Edges{}
	}
	return t.Node
}

type GetFeatures_Features struct {
	Edges []*GetFeatures_Features_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetFeatures_Features) GetEdges() []*GetFeatures_Features_Edges {
	if t == nil {
		t = &GetFeatures_Features{}
	}
	return t.Edges
}

type UpdateFeature_UpdateFeature_Feature struct {
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	Enabled     bool     "json:\"enabled\" graphql:\"enabled\""
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName *string  "json:\"displayName,omitempty\" graphql:\"displayName\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *UpdateFeature_UpdateFeature_Feature) GetDescription() *string {
	if t == nil {
		t = &UpdateFeature_UpdateFeature_Feature{}
	}
	return t.Description
}
func (t *UpdateFeature_UpdateFeature_Feature) GetEnabled() bool {
	if t == nil {
		t = &UpdateFeature_UpdateFeature_Feature{}
	}
	return t.Enabled
}
func (t *UpdateFeature_UpdateFeature_Feature) GetID() string {
	if t == nil {
		t = &UpdateFeature_UpdateFeature_Feature{}
	}
	return t.ID
}
func (t *UpdateFeature_UpdateFeature_Feature) GetName() string {
	if t == nil {
		t = &UpdateFeature_UpdateFeature_Feature{}
	}
	return t.Name
}
func (t *UpdateFeature_UpdateFeature_Feature) GetDisplayName() *string {
	if t == nil {
		t = &UpdateFeature_UpdateFeature_Feature{}
	}
	return t.DisplayName
}
func (t *UpdateFeature_UpdateFeature_Feature) GetTags() []string {
	if t == nil {
		t = &UpdateFeature_UpdateFeature_Feature{}
	}
	return t.Tags
}

type UpdateFeature_UpdateFeature struct {
	Feature UpdateFeature_UpdateFeature_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *UpdateFeature_UpdateFeature) GetFeature() *UpdateFeature_UpdateFeature_Feature {
	if t == nil {
		t = &UpdateFeature_UpdateFeature{}
	}
	return &t.Feature
}

type CreateBulkCSVFile_CreateBulkCSVFile_Files_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVFile_CreateBulkCSVFile_Files_User) GetID() string {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile_Files_User{}
	}
	return t.ID
}

type CreateBulkCSVFile_CreateBulkCSVFile_Files_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVFile_CreateBulkCSVFile_Files_Organization) GetID() string {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile_Files_Organization{}
	}
	return t.ID
}

type CreateBulkCSVFile_CreateBulkCSVFile_Files_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVFile_CreateBulkCSVFile_Files_Group) GetID() string {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile_Files_Group{}
	}
	return t.ID
}

type CreateBulkCSVFile_CreateBulkCSVFile_Files struct {
	Annotation    *string                                                   "json:\"annotation,omitempty\" graphql:\"annotation\""
	Category      *string                                                   "json:\"category,omitempty\" graphql:\"category\""
	ContentType   string                                                    "json:\"contentType\" graphql:\"contentType\""
	FileExtension string                                                    "json:\"fileExtension\" graphql:\"fileExtension\""
	FileName      string                                                    "json:\"fileName\" graphql:\"fileName\""
	FileSize      *int64                                                    "json:\"fileSize,omitempty\" graphql:\"fileSize\""
	ID            string                                                    "json:\"id\" graphql:\"id\""
	StoreKey      string                                                    "json:\"storeKey\" graphql:\"storeKey\""
	User          *CreateBulkCSVFile_CreateBulkCSVFile_Files_User           "json:\"user,omitempty\" graphql:\"user\""
	Organization  []*CreateBulkCSVFile_CreateBulkCSVFile_Files_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Group         []*CreateBulkCSVFile_CreateBulkCSVFile_Files_Group        "json:\"group,omitempty\" graphql:\"group\""
}

func (t *CreateBulkCSVFile_CreateBulkCSVFile_Files) GetAnnotation() *string {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile_Files{}
	}
	return t.Annotation
}
func (t *CreateBulkCSVFile_CreateBulkCSVFile_Files) GetCategory() *string {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile_Files{}
	}
	return t.Category
}
func (t *CreateBulkCSVFile_CreateBulkCSVFile_Files) GetContentType() string {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile_Files{}
	}
	return t.ContentType
}
func (t *CreateBulkCSVFile_CreateBulkCSVFile_Files) GetFileExtension() string {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile_Files{}
	}
	return t.FileExtension
}
func (t *CreateBulkCSVFile_CreateBulkCSVFile_Files) GetFileName() string {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile_Files{}
	}
	return t.FileName
}
func (t *CreateBulkCSVFile_CreateBulkCSVFile_Files) GetFileSize() *int64 {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile_Files{}
	}
	return t.FileSize
}
func (t *CreateBulkCSVFile_CreateBulkCSVFile_Files) GetID() string {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile_Files{}
	}
	return t.ID
}
func (t *CreateBulkCSVFile_CreateBulkCSVFile_Files) GetStoreKey() string {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile_Files{}
	}
	return t.StoreKey
}
func (t *CreateBulkCSVFile_CreateBulkCSVFile_Files) GetUser() *CreateBulkCSVFile_CreateBulkCSVFile_Files_User {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile_Files{}
	}
	return t.User
}
func (t *CreateBulkCSVFile_CreateBulkCSVFile_Files) GetOrganization() []*CreateBulkCSVFile_CreateBulkCSVFile_Files_Organization {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile_Files{}
	}
	return t.Organization
}
func (t *CreateBulkCSVFile_CreateBulkCSVFile_Files) GetGroup() []*CreateBulkCSVFile_CreateBulkCSVFile_Files_Group {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile_Files{}
	}
	return t.Group
}

type CreateBulkCSVFile_CreateBulkCSVFile struct {
	Files []*CreateBulkCSVFile_CreateBulkCSVFile_Files "json:\"files,omitempty\" graphql:\"files\""
}

func (t *CreateBulkCSVFile_CreateBulkCSVFile) GetFiles() []*CreateBulkCSVFile_CreateBulkCSVFile_Files {
	if t == nil {
		t = &CreateBulkCSVFile_CreateBulkCSVFile{}
	}
	return t.Files
}

type CreateBulkFile_CreateBulkFile_Files_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkFile_CreateBulkFile_Files_User) GetID() string {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile_Files_User{}
	}
	return t.ID
}

type CreateBulkFile_CreateBulkFile_Files_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkFile_CreateBulkFile_Files_Organization) GetID() string {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile_Files_Organization{}
	}
	return t.ID
}

type CreateBulkFile_CreateBulkFile_Files_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkFile_CreateBulkFile_Files_Group) GetID() string {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile_Files_Group{}
	}
	return t.ID
}

type CreateBulkFile_CreateBulkFile_Files struct {
	Annotation    *string                                             "json:\"annotation,omitempty\" graphql:\"annotation\""
	Category      *string                                             "json:\"category,omitempty\" graphql:\"category\""
	ContentType   string                                              "json:\"contentType\" graphql:\"contentType\""
	FileExtension string                                              "json:\"fileExtension\" graphql:\"fileExtension\""
	FileName      string                                              "json:\"fileName\" graphql:\"fileName\""
	FileSize      *int64                                              "json:\"fileSize,omitempty\" graphql:\"fileSize\""
	ID            string                                              "json:\"id\" graphql:\"id\""
	StoreKey      string                                              "json:\"storeKey\" graphql:\"storeKey\""
	User          *CreateBulkFile_CreateBulkFile_Files_User           "json:\"user,omitempty\" graphql:\"user\""
	Organization  []*CreateBulkFile_CreateBulkFile_Files_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Group         []*CreateBulkFile_CreateBulkFile_Files_Group        "json:\"group,omitempty\" graphql:\"group\""
}

func (t *CreateBulkFile_CreateBulkFile_Files) GetAnnotation() *string {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile_Files{}
	}
	return t.Annotation
}
func (t *CreateBulkFile_CreateBulkFile_Files) GetCategory() *string {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile_Files{}
	}
	return t.Category
}
func (t *CreateBulkFile_CreateBulkFile_Files) GetContentType() string {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile_Files{}
	}
	return t.ContentType
}
func (t *CreateBulkFile_CreateBulkFile_Files) GetFileExtension() string {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile_Files{}
	}
	return t.FileExtension
}
func (t *CreateBulkFile_CreateBulkFile_Files) GetFileName() string {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile_Files{}
	}
	return t.FileName
}
func (t *CreateBulkFile_CreateBulkFile_Files) GetFileSize() *int64 {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile_Files{}
	}
	return t.FileSize
}
func (t *CreateBulkFile_CreateBulkFile_Files) GetID() string {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile_Files{}
	}
	return t.ID
}
func (t *CreateBulkFile_CreateBulkFile_Files) GetStoreKey() string {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile_Files{}
	}
	return t.StoreKey
}
func (t *CreateBulkFile_CreateBulkFile_Files) GetUser() *CreateBulkFile_CreateBulkFile_Files_User {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile_Files{}
	}
	return t.User
}
func (t *CreateBulkFile_CreateBulkFile_Files) GetOrganization() []*CreateBulkFile_CreateBulkFile_Files_Organization {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile_Files{}
	}
	return t.Organization
}
func (t *CreateBulkFile_CreateBulkFile_Files) GetGroup() []*CreateBulkFile_CreateBulkFile_Files_Group {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile_Files{}
	}
	return t.Group
}

type CreateBulkFile_CreateBulkFile struct {
	Files []*CreateBulkFile_CreateBulkFile_Files "json:\"files,omitempty\" graphql:\"files\""
}

func (t *CreateBulkFile_CreateBulkFile) GetFiles() []*CreateBulkFile_CreateBulkFile_Files {
	if t == nil {
		t = &CreateBulkFile_CreateBulkFile{}
	}
	return t.Files
}

type CreateFile_CreateFile_File_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateFile_CreateFile_File_User) GetID() string {
	if t == nil {
		t = &CreateFile_CreateFile_File_User{}
	}
	return t.ID
}

type CreateFile_CreateFile_File_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateFile_CreateFile_File_Organization) GetID() string {
	if t == nil {
		t = &CreateFile_CreateFile_File_Organization{}
	}
	return t.ID
}

type CreateFile_CreateFile_File_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateFile_CreateFile_File_Group) GetID() string {
	if t == nil {
		t = &CreateFile_CreateFile_File_Group{}
	}
	return t.ID
}

type CreateFile_CreateFile_File struct {
	Annotation    *string                                    "json:\"annotation,omitempty\" graphql:\"annotation\""
	Category      *string                                    "json:\"category,omitempty\" graphql:\"category\""
	ContentType   string                                     "json:\"contentType\" graphql:\"contentType\""
	FileExtension string                                     "json:\"fileExtension\" graphql:\"fileExtension\""
	FileName      string                                     "json:\"fileName\" graphql:\"fileName\""
	FileSize      *int64                                     "json:\"fileSize,omitempty\" graphql:\"fileSize\""
	ID            string                                     "json:\"id\" graphql:\"id\""
	StoreKey      string                                     "json:\"storeKey\" graphql:\"storeKey\""
	User          *CreateFile_CreateFile_File_User           "json:\"user,omitempty\" graphql:\"user\""
	Organization  []*CreateFile_CreateFile_File_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Group         []*CreateFile_CreateFile_File_Group        "json:\"group,omitempty\" graphql:\"group\""
}

func (t *CreateFile_CreateFile_File) GetAnnotation() *string {
	if t == nil {
		t = &CreateFile_CreateFile_File{}
	}
	return t.Annotation
}
func (t *CreateFile_CreateFile_File) GetCategory() *string {
	if t == nil {
		t = &CreateFile_CreateFile_File{}
	}
	return t.Category
}
func (t *CreateFile_CreateFile_File) GetContentType() string {
	if t == nil {
		t = &CreateFile_CreateFile_File{}
	}
	return t.ContentType
}
func (t *CreateFile_CreateFile_File) GetFileExtension() string {
	if t == nil {
		t = &CreateFile_CreateFile_File{}
	}
	return t.FileExtension
}
func (t *CreateFile_CreateFile_File) GetFileName() string {
	if t == nil {
		t = &CreateFile_CreateFile_File{}
	}
	return t.FileName
}
func (t *CreateFile_CreateFile_File) GetFileSize() *int64 {
	if t == nil {
		t = &CreateFile_CreateFile_File{}
	}
	return t.FileSize
}
func (t *CreateFile_CreateFile_File) GetID() string {
	if t == nil {
		t = &CreateFile_CreateFile_File{}
	}
	return t.ID
}
func (t *CreateFile_CreateFile_File) GetStoreKey() string {
	if t == nil {
		t = &CreateFile_CreateFile_File{}
	}
	return t.StoreKey
}
func (t *CreateFile_CreateFile_File) GetUser() *CreateFile_CreateFile_File_User {
	if t == nil {
		t = &CreateFile_CreateFile_File{}
	}
	return t.User
}
func (t *CreateFile_CreateFile_File) GetOrganization() []*CreateFile_CreateFile_File_Organization {
	if t == nil {
		t = &CreateFile_CreateFile_File{}
	}
	return t.Organization
}
func (t *CreateFile_CreateFile_File) GetGroup() []*CreateFile_CreateFile_File_Group {
	if t == nil {
		t = &CreateFile_CreateFile_File{}
	}
	return t.Group
}

type CreateFile_CreateFile struct {
	File CreateFile_CreateFile_File "json:\"file\" graphql:\"file\""
}

func (t *CreateFile_CreateFile) GetFile() *CreateFile_CreateFile_File {
	if t == nil {
		t = &CreateFile_CreateFile{}
	}
	return &t.File
}

type DeleteFile_DeleteFile struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteFile_DeleteFile) GetDeletedID() string {
	if t == nil {
		t = &DeleteFile_DeleteFile{}
	}
	return t.DeletedID
}

type GetFiles_Files_Edges_Node_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetFiles_Files_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node_User{}
	}
	return t.ID
}

type GetFiles_Files_Edges_Node_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetFiles_Files_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node_Organization{}
	}
	return t.ID
}

type GetFiles_Files_Edges_Node_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetFiles_Files_Edges_Node_Group) GetID() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node_Group{}
	}
	return t.ID
}

type GetFiles_Files_Edges_Node struct {
	Annotation    *string                                   "json:\"annotation,omitempty\" graphql:\"annotation\""
	Category      *string                                   "json:\"category,omitempty\" graphql:\"category\""
	ContentType   string                                    "json:\"contentType\" graphql:\"contentType\""
	CreatedAt     *time.Time                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FileExtension string                                    "json:\"fileExtension\" graphql:\"fileExtension\""
	FileName      string                                    "json:\"fileName\" graphql:\"fileName\""
	FileSize      *int64                                    "json:\"fileSize,omitempty\" graphql:\"fileSize\""
	ID            string                                    "json:\"id\" graphql:\"id\""
	StoreKey      string                                    "json:\"storeKey\" graphql:\"storeKey\""
	UpdatedAt     *time.Time                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	User          *GetFiles_Files_Edges_Node_User           "json:\"user,omitempty\" graphql:\"user\""
	Organization  []*GetFiles_Files_Edges_Node_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Group         []*GetFiles_Files_Edges_Node_Group        "json:\"group,omitempty\" graphql:\"group\""
}

func (t *GetFiles_Files_Edges_Node) GetAnnotation() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.Annotation
}
func (t *GetFiles_Files_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.Category
}
func (t *GetFiles_Files_Edges_Node) GetContentType() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.ContentType
}
func (t *GetFiles_Files_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetFiles_Files_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetFiles_Files_Edges_Node) GetFileExtension() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.FileExtension
}
func (t *GetFiles_Files_Edges_Node) GetFileName() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.FileName
}
func (t *GetFiles_Files_Edges_Node) GetFileSize() *int64 {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.FileSize
}
func (t *GetFiles_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetFiles_Files_Edges_Node) GetStoreKey() string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetFiles_Files_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetFiles_Files_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetFiles_Files_Edges_Node) GetUser() *GetFiles_Files_Edges_Node_User {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.User
}
func (t *GetFiles_Files_Edges_Node) GetOrganization() []*GetFiles_Files_Edges_Node_Organization {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.Organization
}
func (t *GetFiles_Files_Edges_Node) GetGroup() []*GetFiles_Files_Edges_Node_Group {
	if t == nil {
		t = &GetFiles_Files_Edges_Node{}
	}
	return t.Group
}

type GetFiles_Files_Edges struct {
	Node *GetFiles_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetFiles_Files_Edges) GetNode() *GetFiles_Files_Edges_Node {
	if t == nil {
		t = &GetFiles_Files_Edges{}
	}
	return t.Node
}

type GetFiles_Files struct {
	Edges []*GetFiles_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetFiles_Files) GetEdges() []*GetFiles_Files_Edges {
	if t == nil {
		t = &GetFiles_Files{}
	}
	return t.Edges
}

type GetAllFiles_Files_Edges_Node_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllFiles_Files_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node_User{}
	}
	return t.ID
}

type GetAllFiles_Files_Edges_Node_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllFiles_Files_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node_Organization{}
	}
	return t.ID
}

type GetAllFiles_Files_Edges_Node_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllFiles_Files_Edges_Node_Group) GetID() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node_Group{}
	}
	return t.ID
}

type GetAllFiles_Files_Edges_Node struct {
	Annotation    *string                                      "json:\"annotation,omitempty\" graphql:\"annotation\""
	Category      *string                                      "json:\"category,omitempty\" graphql:\"category\""
	ContentType   string                                       "json:\"contentType\" graphql:\"contentType\""
	CreatedAt     *time.Time                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FileExtension string                                       "json:\"fileExtension\" graphql:\"fileExtension\""
	FileName      string                                       "json:\"fileName\" graphql:\"fileName\""
	FileSize      *int64                                       "json:\"fileSize,omitempty\" graphql:\"fileSize\""
	ID            string                                       "json:\"id\" graphql:\"id\""
	StoreKey      string                                       "json:\"storeKey\" graphql:\"storeKey\""
	UpdatedAt     *time.Time                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	User          *GetAllFiles_Files_Edges_Node_User           "json:\"user,omitempty\" graphql:\"user\""
	Organization  []*GetAllFiles_Files_Edges_Node_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Group         []*GetAllFiles_Files_Edges_Node_Group        "json:\"group,omitempty\" graphql:\"group\""
}

func (t *GetAllFiles_Files_Edges_Node) GetAnnotation() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.Annotation
}
func (t *GetAllFiles_Files_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllFiles_Files_Edges_Node) GetContentType() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.ContentType
}
func (t *GetAllFiles_Files_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllFiles_Files_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllFiles_Files_Edges_Node) GetFileExtension() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.FileExtension
}
func (t *GetAllFiles_Files_Edges_Node) GetFileName() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.FileName
}
func (t *GetAllFiles_Files_Edges_Node) GetFileSize() *int64 {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.FileSize
}
func (t *GetAllFiles_Files_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllFiles_Files_Edges_Node) GetStoreKey() string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetAllFiles_Files_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllFiles_Files_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllFiles_Files_Edges_Node) GetUser() *GetAllFiles_Files_Edges_Node_User {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.User
}
func (t *GetAllFiles_Files_Edges_Node) GetOrganization() []*GetAllFiles_Files_Edges_Node_Organization {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.Organization
}
func (t *GetAllFiles_Files_Edges_Node) GetGroup() []*GetAllFiles_Files_Edges_Node_Group {
	if t == nil {
		t = &GetAllFiles_Files_Edges_Node{}
	}
	return t.Group
}

type GetAllFiles_Files_Edges struct {
	Node *GetAllFiles_Files_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllFiles_Files_Edges) GetNode() *GetAllFiles_Files_Edges_Node {
	if t == nil {
		t = &GetAllFiles_Files_Edges{}
	}
	return t.Node
}

type GetAllFiles_Files struct {
	Edges []*GetAllFiles_Files_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllFiles_Files) GetEdges() []*GetAllFiles_Files_Edges {
	if t == nil {
		t = &GetAllFiles_Files{}
	}
	return t.Edges
}

type UpdateFile_UpdateFile_File_User struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateFile_UpdateFile_File_User) GetID() string {
	if t == nil {
		t = &UpdateFile_UpdateFile_File_User{}
	}
	return t.ID
}

type UpdateFile_UpdateFile_File_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateFile_UpdateFile_File_Organization) GetID() string {
	if t == nil {
		t = &UpdateFile_UpdateFile_File_Organization{}
	}
	return t.ID
}

type UpdateFile_UpdateFile_File_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateFile_UpdateFile_File_Group) GetID() string {
	if t == nil {
		t = &UpdateFile_UpdateFile_File_Group{}
	}
	return t.ID
}

type UpdateFile_UpdateFile_File struct {
	ID            string                                     "json:\"id\" graphql:\"id\""
	FileName      string                                     "json:\"fileName\" graphql:\"fileName\""
	FileExtension string                                     "json:\"fileExtension\" graphql:\"fileExtension\""
	FileSize      *int64                                     "json:\"fileSize,omitempty\" graphql:\"fileSize\""
	ContentType   string                                     "json:\"contentType\" graphql:\"contentType\""
	StoreKey      string                                     "json:\"storeKey\" graphql:\"storeKey\""
	Category      *string                                    "json:\"category,omitempty\" graphql:\"category\""
	Annotation    *string                                    "json:\"annotation,omitempty\" graphql:\"annotation\""
	User          *UpdateFile_UpdateFile_File_User           "json:\"user,omitempty\" graphql:\"user\""
	Organization  []*UpdateFile_UpdateFile_File_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Group         []*UpdateFile_UpdateFile_File_Group        "json:\"group,omitempty\" graphql:\"group\""
}

func (t *UpdateFile_UpdateFile_File) GetID() string {
	if t == nil {
		t = &UpdateFile_UpdateFile_File{}
	}
	return t.ID
}
func (t *UpdateFile_UpdateFile_File) GetFileName() string {
	if t == nil {
		t = &UpdateFile_UpdateFile_File{}
	}
	return t.FileName
}
func (t *UpdateFile_UpdateFile_File) GetFileExtension() string {
	if t == nil {
		t = &UpdateFile_UpdateFile_File{}
	}
	return t.FileExtension
}
func (t *UpdateFile_UpdateFile_File) GetFileSize() *int64 {
	if t == nil {
		t = &UpdateFile_UpdateFile_File{}
	}
	return t.FileSize
}
func (t *UpdateFile_UpdateFile_File) GetContentType() string {
	if t == nil {
		t = &UpdateFile_UpdateFile_File{}
	}
	return t.ContentType
}
func (t *UpdateFile_UpdateFile_File) GetStoreKey() string {
	if t == nil {
		t = &UpdateFile_UpdateFile_File{}
	}
	return t.StoreKey
}
func (t *UpdateFile_UpdateFile_File) GetCategory() *string {
	if t == nil {
		t = &UpdateFile_UpdateFile_File{}
	}
	return t.Category
}
func (t *UpdateFile_UpdateFile_File) GetAnnotation() *string {
	if t == nil {
		t = &UpdateFile_UpdateFile_File{}
	}
	return t.Annotation
}
func (t *UpdateFile_UpdateFile_File) GetUser() *UpdateFile_UpdateFile_File_User {
	if t == nil {
		t = &UpdateFile_UpdateFile_File{}
	}
	return t.User
}
func (t *UpdateFile_UpdateFile_File) GetOrganization() []*UpdateFile_UpdateFile_File_Organization {
	if t == nil {
		t = &UpdateFile_UpdateFile_File{}
	}
	return t.Organization
}
func (t *UpdateFile_UpdateFile_File) GetGroup() []*UpdateFile_UpdateFile_File_Group {
	if t == nil {
		t = &UpdateFile_UpdateFile_File{}
	}
	return t.Group
}

type UpdateFile_UpdateFile struct {
	File UpdateFile_UpdateFile_File "json:\"file\" graphql:\"file\""
}

func (t *UpdateFile_UpdateFile) GetFile() *UpdateFile_UpdateFile_File {
	if t == nil {
		t = &UpdateFile_UpdateFile{}
	}
	return &t.File
}

type GetAllFileHistories_FileHistories_Edges_Node struct {
	Annotation    *string           "json:\"annotation,omitempty\" graphql:\"annotation\""
	Category      *string           "json:\"category,omitempty\" graphql:\"category\""
	ContentType   string            "json:\"contentType\" graphql:\"contentType\""
	CreatedAt     *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FileExtension string            "json:\"fileExtension\" graphql:\"fileExtension\""
	FileName      string            "json:\"fileName\" graphql:\"fileName\""
	FileSize      *int64            "json:\"fileSize,omitempty\" graphql:\"fileSize\""
	HistoryTime   time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID            string            "json:\"id\" graphql:\"id\""
	Operation     enthistory.OpType "json:\"operation\" graphql:\"operation\""
	Ref           *string           "json:\"ref,omitempty\" graphql:\"ref\""
	StoreKey      string            "json:\"storeKey\" graphql:\"storeKey\""
	Tags          []string          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllFileHistories_FileHistories_Edges_Node) GetAnnotation() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.Annotation
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetContentType() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.ContentType
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetFileExtension() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.FileExtension
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetFileName() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.FileName
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetFileSize() *int64 {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.FileSize
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetStoreKey() string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllFileHistories_FileHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllFileHistories_FileHistories_Edges struct {
	Node *GetAllFileHistories_FileHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllFileHistories_FileHistories_Edges) GetNode() *GetAllFileHistories_FileHistories_Edges_Node {
	if t == nil {
		t = &GetAllFileHistories_FileHistories_Edges{}
	}
	return t.Node
}

type GetAllFileHistories_FileHistories struct {
	Edges []*GetAllFileHistories_FileHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllFileHistories_FileHistories) GetEdges() []*GetAllFileHistories_FileHistories_Edges {
	if t == nil {
		t = &GetAllFileHistories_FileHistories{}
	}
	return t.Edges
}

type GetFileHistories_FileHistories_Edges_Node struct {
	Annotation    *string           "json:\"annotation,omitempty\" graphql:\"annotation\""
	Category      *string           "json:\"category,omitempty\" graphql:\"category\""
	ContentType   string            "json:\"contentType\" graphql:\"contentType\""
	CreatedAt     *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	FileExtension string            "json:\"fileExtension\" graphql:\"fileExtension\""
	FileName      string            "json:\"fileName\" graphql:\"fileName\""
	FileSize      *int64            "json:\"fileSize,omitempty\" graphql:\"fileSize\""
	HistoryTime   time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID            string            "json:\"id\" graphql:\"id\""
	Operation     enthistory.OpType "json:\"operation\" graphql:\"operation\""
	Ref           *string           "json:\"ref,omitempty\" graphql:\"ref\""
	StoreKey      string            "json:\"storeKey\" graphql:\"storeKey\""
	Tags          []string          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt     *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetFileHistories_FileHistories_Edges_Node) GetAnnotation() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.Annotation
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetCategory() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.Category
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetContentType() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.ContentType
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetFileExtension() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.FileExtension
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetFileName() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.FileName
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetFileSize() *int64 {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.FileSize
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetStoreKey() string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.StoreKey
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetFileHistories_FileHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetFileHistories_FileHistories_Edges struct {
	Node *GetFileHistories_FileHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetFileHistories_FileHistories_Edges) GetNode() *GetFileHistories_FileHistories_Edges_Node {
	if t == nil {
		t = &GetFileHistories_FileHistories_Edges{}
	}
	return t.Node
}

type GetFileHistories_FileHistories struct {
	Edges []*GetFileHistories_FileHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetFileHistories_FileHistories) GetEdges() []*GetFileHistories_FileHistories_Edges {
	if t == nil {
		t = &GetFileHistories_FileHistories{}
	}
	return t.Edges
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner{}
	}
	return t.DisplayName
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting struct {
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return &t.JoinPolicy
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return t.SyncToGithub
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return t.SyncToSlack
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return t.Tags
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting{}
	}
	return &t.Visibility
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User{}
	}
	return t.FirstName
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User) GetLastName() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User{}
	}
	return t.LastName
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members struct {
	ID   string                                                    "json:\"id\" graphql:\"id\""
	Role enums.Role                                                "json:\"role\" graphql:\"role\""
	User CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User "json:\"user\" graphql:\"user\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members{}
	}
	return &t.Role
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members) GetUser() *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members_User {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members{}
	}
	return &t.User
}

type CreateBulkCSVGroup_CreateBulkCSVGroup_Groups struct {
	Description *string                                                 "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                                  "json:\"displayName\" graphql:\"displayName\""
	ID          string                                                  "json:\"id\" graphql:\"id\""
	LogoURL     *string                                                 "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name        string                                                  "json:\"name\" graphql:\"name\""
	Tags        []string                                                "json:\"tags,omitempty\" graphql:\"tags\""
	Owner       *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting    "json:\"setting\" graphql:\"setting\""
	Members     []*CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members "json:\"members,omitempty\" graphql:\"members\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Description
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetLogoURL() *string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.LogoURL
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetName() string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Name
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Tags
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetOwner() *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Owner {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Owner
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetSetting() *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Setting {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return &t.Setting
}
func (t *CreateBulkCSVGroup_CreateBulkCSVGroup_Groups) GetMembers() []*CreateBulkCSVGroup_CreateBulkCSVGroup_Groups_Members {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup_Groups{}
	}
	return t.Members
}

type CreateBulkCSVGroup_CreateBulkCSVGroup struct {
	Groups []*CreateBulkCSVGroup_CreateBulkCSVGroup_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *CreateBulkCSVGroup_CreateBulkCSVGroup) GetGroups() []*CreateBulkCSVGroup_CreateBulkCSVGroup_Groups {
	if t == nil {
		t = &CreateBulkCSVGroup_CreateBulkCSVGroup{}
	}
	return t.Groups
}

type CreateBulkGroup_CreateBulkGroup_Groups_Owner struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Owner{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Owner) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Owner{}
	}
	return t.DisplayName
}

type CreateBulkGroup_CreateBulkGroup_Groups_Setting struct {
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return &t.JoinPolicy
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return t.SyncToGithub
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return t.SyncToSlack
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetTags() []string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return t.Tags
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Setting{}
	}
	return &t.Visibility
}

type CreateBulkGroup_CreateBulkGroup_Groups_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members_User) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members_User{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members_User) GetFirstName() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members_User{}
	}
	return t.FirstName
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members_User) GetLastName() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members_User{}
	}
	return t.LastName
}

type CreateBulkGroup_CreateBulkGroup_Groups_Members struct {
	ID   string                                              "json:\"id\" graphql:\"id\""
	Role enums.Role                                          "json:\"role\" graphql:\"role\""
	User CreateBulkGroup_CreateBulkGroup_Groups_Members_User "json:\"user\" graphql:\"user\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members{}
	}
	return &t.Role
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups_Members) GetUser() *CreateBulkGroup_CreateBulkGroup_Groups_Members_User {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups_Members{}
	}
	return &t.User
}

type CreateBulkGroup_CreateBulkGroup_Groups struct {
	Description *string                                           "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                            "json:\"displayName\" graphql:\"displayName\""
	ID          string                                            "json:\"id\" graphql:\"id\""
	LogoURL     *string                                           "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name        string                                            "json:\"name\" graphql:\"name\""
	Tags        []string                                          "json:\"tags,omitempty\" graphql:\"tags\""
	Owner       *CreateBulkGroup_CreateBulkGroup_Groups_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     CreateBulkGroup_CreateBulkGroup_Groups_Setting    "json:\"setting\" graphql:\"setting\""
	Members     []*CreateBulkGroup_CreateBulkGroup_Groups_Members "json:\"members,omitempty\" graphql:\"members\""
}

func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetDescription() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Description
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.DisplayName
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetID() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.ID
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetLogoURL() *string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.LogoURL
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetName() string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Name
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetTags() []string {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Tags
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetOwner() *CreateBulkGroup_CreateBulkGroup_Groups_Owner {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Owner
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetSetting() *CreateBulkGroup_CreateBulkGroup_Groups_Setting {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return &t.Setting
}
func (t *CreateBulkGroup_CreateBulkGroup_Groups) GetMembers() []*CreateBulkGroup_CreateBulkGroup_Groups_Members {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup_Groups{}
	}
	return t.Members
}

type CreateBulkGroup_CreateBulkGroup struct {
	Groups []*CreateBulkGroup_CreateBulkGroup_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *CreateBulkGroup_CreateBulkGroup) GetGroups() []*CreateBulkGroup_CreateBulkGroup_Groups {
	if t == nil {
		t = &CreateBulkGroup_CreateBulkGroup{}
	}
	return t.Groups
}

type CreateGroup_CreateGroup_Group_Owner struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *CreateGroup_CreateGroup_Group_Owner) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Owner{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Owner) GetDisplayName() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Owner{}
	}
	return t.DisplayName
}

type CreateGroup_CreateGroup_Group_Setting struct {
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *CreateGroup_CreateGroup_Group_Setting) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return &t.JoinPolicy
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.SyncToGithub
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.SyncToSlack
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetTags() []string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return t.Tags
}
func (t *CreateGroup_CreateGroup_Group_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Setting{}
	}
	return &t.Visibility
}

type CreateGroup_CreateGroup_Group_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *CreateGroup_CreateGroup_Group_Members_User) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members_User{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Members_User) GetFirstName() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members_User{}
	}
	return t.FirstName
}
func (t *CreateGroup_CreateGroup_Group_Members_User) GetLastName() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members_User{}
	}
	return t.LastName
}

type CreateGroup_CreateGroup_Group_Members struct {
	ID   string                                     "json:\"id\" graphql:\"id\""
	Role enums.Role                                 "json:\"role\" graphql:\"role\""
	User CreateGroup_CreateGroup_Group_Members_User "json:\"user\" graphql:\"user\""
}

func (t *CreateGroup_CreateGroup_Group_Members) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group_Members) GetRole() *enums.Role {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members{}
	}
	return &t.Role
}
func (t *CreateGroup_CreateGroup_Group_Members) GetUser() *CreateGroup_CreateGroup_Group_Members_User {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group_Members{}
	}
	return &t.User
}

type CreateGroup_CreateGroup_Group struct {
	Description *string                                  "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                   "json:\"displayName\" graphql:\"displayName\""
	ID          string                                   "json:\"id\" graphql:\"id\""
	LogoURL     *string                                  "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name        string                                   "json:\"name\" graphql:\"name\""
	Tags        []string                                 "json:\"tags,omitempty\" graphql:\"tags\""
	Owner       *CreateGroup_CreateGroup_Group_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     CreateGroup_CreateGroup_Group_Setting    "json:\"setting\" graphql:\"setting\""
	Members     []*CreateGroup_CreateGroup_Group_Members "json:\"members,omitempty\" graphql:\"members\""
}

func (t *CreateGroup_CreateGroup_Group) GetDescription() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Description
}
func (t *CreateGroup_CreateGroup_Group) GetDisplayName() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.DisplayName
}
func (t *CreateGroup_CreateGroup_Group) GetID() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.ID
}
func (t *CreateGroup_CreateGroup_Group) GetLogoURL() *string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.LogoURL
}
func (t *CreateGroup_CreateGroup_Group) GetName() string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Name
}
func (t *CreateGroup_CreateGroup_Group) GetTags() []string {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Tags
}
func (t *CreateGroup_CreateGroup_Group) GetOwner() *CreateGroup_CreateGroup_Group_Owner {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Owner
}
func (t *CreateGroup_CreateGroup_Group) GetSetting() *CreateGroup_CreateGroup_Group_Setting {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return &t.Setting
}
func (t *CreateGroup_CreateGroup_Group) GetMembers() []*CreateGroup_CreateGroup_Group_Members {
	if t == nil {
		t = &CreateGroup_CreateGroup_Group{}
	}
	return t.Members
}

type CreateGroup_CreateGroup struct {
	Group CreateGroup_CreateGroup_Group "json:\"group\" graphql:\"group\""
}

func (t *CreateGroup_CreateGroup) GetGroup() *CreateGroup_CreateGroup_Group {
	if t == nil {
		t = &CreateGroup_CreateGroup{}
	}
	return &t.Group
}

type DeleteGroup_DeleteGroup struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteGroup_DeleteGroup) GetDeletedID() string {
	if t == nil {
		t = &DeleteGroup_DeleteGroup{}
	}
	return t.DeletedID
}

type GetAllGroups_Groups_Edges_Node_Owner struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *GetAllGroups_Groups_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Owner{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node_Owner) GetDisplayName() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Owner{}
	}
	return t.DisplayName
}

type GetAllGroups_Groups_Edges_Node_Setting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetAllGroups_Groups_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.CreatedAt
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return &t.JoinPolicy
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToGithub
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToSlack
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetTags() []string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.Tags
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetAllGroups_Groups_Edges_Node_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Setting{}
	}
	return &t.Visibility
}

type GetAllGroups_Groups_Edges_Node_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetAllGroups_Groups_Edges_Node_Members_User) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members_User{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members_User{}
	}
	return t.FirstName
}
func (t *GetAllGroups_Groups_Edges_Node_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members_User{}
	}
	return t.LastName
}

type GetAllGroups_Groups_Edges_Node_Members struct {
	ID   string                                      "json:\"id\" graphql:\"id\""
	Role enums.Role                                  "json:\"role\" graphql:\"role\""
	User GetAllGroups_Groups_Edges_Node_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetAllGroups_Groups_Edges_Node_Members) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members{}
	}
	return &t.Role
}
func (t *GetAllGroups_Groups_Edges_Node_Members) GetUser() *GetAllGroups_Groups_Edges_Node_Members_User {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node_Members{}
	}
	return &t.User
}

type GetAllGroups_Groups_Edges_Node struct {
	Description *string                                   "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                    "json:\"displayName\" graphql:\"displayName\""
	ID          string                                    "json:\"id\" graphql:\"id\""
	LogoURL     *string                                   "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name        string                                    "json:\"name\" graphql:\"name\""
	Tags        []string                                  "json:\"tags,omitempty\" graphql:\"tags\""
	Owner       *GetAllGroups_Groups_Edges_Node_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     GetAllGroups_Groups_Edges_Node_Setting    "json:\"setting\" graphql:\"setting\""
	Members     []*GetAllGroups_Groups_Edges_Node_Members "json:\"members,omitempty\" graphql:\"members\""
	CreatedAt   *time.Time                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt   *time.Time                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllGroups_Groups_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllGroups_Groups_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllGroups_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroups_Groups_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetAllGroups_Groups_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllGroups_Groups_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllGroups_Groups_Edges_Node) GetOwner() *GetAllGroups_Groups_Edges_Node_Owner {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Owner
}
func (t *GetAllGroups_Groups_Edges_Node) GetSetting() *GetAllGroups_Groups_Edges_Node_Setting {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return &t.Setting
}
func (t *GetAllGroups_Groups_Edges_Node) GetMembers() []*GetAllGroups_Groups_Edges_Node_Members {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.Members
}
func (t *GetAllGroups_Groups_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroups_Groups_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroups_Groups_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroups_Groups_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroups_Groups_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllGroups_Groups_Edges struct {
	Node *GetAllGroups_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroups_Groups_Edges) GetNode() *GetAllGroups_Groups_Edges_Node {
	if t == nil {
		t = &GetAllGroups_Groups_Edges{}
	}
	return t.Node
}

type GetAllGroups_Groups struct {
	Edges []*GetAllGroups_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllGroups_Groups) GetEdges() []*GetAllGroups_Groups_Edges {
	if t == nil {
		t = &GetAllGroups_Groups{}
	}
	return t.Edges
}

type GetGroupByID_Group_Owner struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *GetGroupByID_Group_Owner) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Owner{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Owner) GetDisplayName() string {
	if t == nil {
		t = &GetGroupByID_Group_Owner{}
	}
	return t.DisplayName
}

type GetGroupByID_Group_Setting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroupByID_Group_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.CreatedAt
}
func (t *GetGroupByID_Group_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.CreatedBy
}
func (t *GetGroupByID_Group_Setting) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupByID_Group_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.SyncToGithub
}
func (t *GetGroupByID_Group_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.SyncToSlack
}
func (t *GetGroupByID_Group_Setting) GetTags() []string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.Tags
}
func (t *GetGroupByID_Group_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetGroupByID_Group_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetGroupByID_Group_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupByID_Group_Setting{}
	}
	return &t.Visibility
}

type GetGroupByID_Group_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetGroupByID_Group_Members_User) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Members_User{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetGroupByID_Group_Members_User{}
	}
	return t.FirstName
}
func (t *GetGroupByID_Group_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetGroupByID_Group_Members_User{}
	}
	return t.LastName
}

type GetGroupByID_Group_Members struct {
	ID   string                          "json:\"id\" graphql:\"id\""
	Role enums.Role                      "json:\"role\" graphql:\"role\""
	User GetGroupByID_Group_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetGroupByID_Group_Members) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group_Members{}
	}
	return t.ID
}
func (t *GetGroupByID_Group_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetGroupByID_Group_Members{}
	}
	return &t.Role
}
func (t *GetGroupByID_Group_Members) GetUser() *GetGroupByID_Group_Members_User {
	if t == nil {
		t = &GetGroupByID_Group_Members{}
	}
	return &t.User
}

type GetGroupByID_Group struct {
	Description *string                       "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                        "json:\"displayName\" graphql:\"displayName\""
	ID          string                        "json:\"id\" graphql:\"id\""
	LogoURL     *string                       "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name        string                        "json:\"name\" graphql:\"name\""
	Tags        []string                      "json:\"tags,omitempty\" graphql:\"tags\""
	Owner       *GetGroupByID_Group_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     GetGroupByID_Group_Setting    "json:\"setting\" graphql:\"setting\""
	Members     []*GetGroupByID_Group_Members "json:\"members,omitempty\" graphql:\"members\""
	CreatedAt   *time.Time                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt   *time.Time                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroupByID_Group) GetDescription() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Description
}
func (t *GetGroupByID_Group) GetDisplayName() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.DisplayName
}
func (t *GetGroupByID_Group) GetID() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.ID
}
func (t *GetGroupByID_Group) GetLogoURL() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.LogoURL
}
func (t *GetGroupByID_Group) GetName() string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Name
}
func (t *GetGroupByID_Group) GetTags() []string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Tags
}
func (t *GetGroupByID_Group) GetOwner() *GetGroupByID_Group_Owner {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Owner
}
func (t *GetGroupByID_Group) GetSetting() *GetGroupByID_Group_Setting {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return &t.Setting
}
func (t *GetGroupByID_Group) GetMembers() []*GetGroupByID_Group_Members {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.Members
}
func (t *GetGroupByID_Group) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.CreatedAt
}
func (t *GetGroupByID_Group) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.CreatedBy
}
func (t *GetGroupByID_Group) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.UpdatedAt
}
func (t *GetGroupByID_Group) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupByID_Group{}
	}
	return t.UpdatedBy
}

type GetGroups_Groups_Edges_Node_Owner struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *GetGroups_Groups_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Owner{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node_Owner) GetDisplayName() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Owner{}
	}
	return t.DisplayName
}

type GetGroups_Groups_Edges_Node_Setting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *GetGroups_Groups_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.CreatedAt
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return &t.JoinPolicy
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToGithub
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.SyncToSlack
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetTags() []string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.Tags
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetGroups_Groups_Edges_Node_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Setting{}
	}
	return &t.Visibility
}

type GetGroups_Groups_Edges_Node_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetGroups_Groups_Edges_Node_Members_User) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members_User{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members_User{}
	}
	return t.FirstName
}
func (t *GetGroups_Groups_Edges_Node_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members_User{}
	}
	return t.LastName
}

type GetGroups_Groups_Edges_Node_Members struct {
	ID   string                                   "json:\"id\" graphql:\"id\""
	Role enums.Role                               "json:\"role\" graphql:\"role\""
	User GetGroups_Groups_Edges_Node_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetGroups_Groups_Edges_Node_Members) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members{}
	}
	return &t.Role
}
func (t *GetGroups_Groups_Edges_Node_Members) GetUser() *GetGroups_Groups_Edges_Node_Members_User {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node_Members{}
	}
	return &t.User
}

type GetGroups_Groups_Edges_Node struct {
	Description *string                                "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                 "json:\"displayName\" graphql:\"displayName\""
	ID          string                                 "json:\"id\" graphql:\"id\""
	LogoURL     *string                                "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name        string                                 "json:\"name\" graphql:\"name\""
	Tags        []string                               "json:\"tags,omitempty\" graphql:\"tags\""
	Owner       *GetGroups_Groups_Edges_Node_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     GetGroups_Groups_Edges_Node_Setting    "json:\"setting\" graphql:\"setting\""
	Members     []*GetGroups_Groups_Edges_Node_Members "json:\"members,omitempty\" graphql:\"members\""
	CreatedAt   *time.Time                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt   *time.Time                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroups_Groups_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Description
}
func (t *GetGroups_Groups_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetGroups_Groups_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroups_Groups_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetGroups_Groups_Edges_Node) GetName() string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Name
}
func (t *GetGroups_Groups_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Tags
}
func (t *GetGroups_Groups_Edges_Node) GetOwner() *GetGroups_Groups_Edges_Node_Owner {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Owner
}
func (t *GetGroups_Groups_Edges_Node) GetSetting() *GetGroups_Groups_Edges_Node_Setting {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return &t.Setting
}
func (t *GetGroups_Groups_Edges_Node) GetMembers() []*GetGroups_Groups_Edges_Node_Members {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.Members
}
func (t *GetGroups_Groups_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroups_Groups_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroups_Groups_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroups_Groups_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroups_Groups_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetGroups_Groups_Edges struct {
	Node *GetGroups_Groups_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroups_Groups_Edges) GetNode() *GetGroups_Groups_Edges_Node {
	if t == nil {
		t = &GetGroups_Groups_Edges{}
	}
	return t.Node
}

type GetGroups_Groups struct {
	Edges []*GetGroups_Groups_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroups_Groups) GetEdges() []*GetGroups_Groups_Edges {
	if t == nil {
		t = &GetGroups_Groups{}
	}
	return t.Edges
}

type UpdateGroup_UpdateGroup_Group_Owner struct {
	ID          string "json:\"id\" graphql:\"id\""
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
}

func (t *UpdateGroup_UpdateGroup_Group_Owner) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Owner{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group_Owner) GetDisplayName() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Owner{}
	}
	return t.DisplayName
}

type UpdateGroup_UpdateGroup_Group_Setting struct {
	CreatedAt    *time.Time       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	ID           string           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt    *time.Time       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Visibility   enums.Visibility "json:\"visibility\" graphql:\"visibility\""
}

func (t *UpdateGroup_UpdateGroup_Group_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.CreatedAt
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.CreatedBy
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return &t.JoinPolicy
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetSyncToGithub() *bool {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.SyncToGithub
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetSyncToSlack() *bool {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.SyncToSlack
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetTags() []string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.Tags
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.UpdatedAt
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return t.UpdatedBy
}
func (t *UpdateGroup_UpdateGroup_Group_Setting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Setting{}
	}
	return &t.Visibility
}

type UpdateGroup_UpdateGroup_Group_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *UpdateGroup_UpdateGroup_Group_Members_User) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members_User{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group_Members_User) GetFirstName() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members_User{}
	}
	return t.FirstName
}
func (t *UpdateGroup_UpdateGroup_Group_Members_User) GetLastName() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members_User{}
	}
	return t.LastName
}

type UpdateGroup_UpdateGroup_Group_Members struct {
	ID   string                                     "json:\"id\" graphql:\"id\""
	Role enums.Role                                 "json:\"role\" graphql:\"role\""
	User UpdateGroup_UpdateGroup_Group_Members_User "json:\"user\" graphql:\"user\""
}

func (t *UpdateGroup_UpdateGroup_Group_Members) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group_Members) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members{}
	}
	return &t.Role
}
func (t *UpdateGroup_UpdateGroup_Group_Members) GetUser() *UpdateGroup_UpdateGroup_Group_Members_User {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group_Members{}
	}
	return &t.User
}

type UpdateGroup_UpdateGroup_Group struct {
	Description *string                                  "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string                                   "json:\"displayName\" graphql:\"displayName\""
	ID          string                                   "json:\"id\" graphql:\"id\""
	LogoURL     *string                                  "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name        string                                   "json:\"name\" graphql:\"name\""
	Tags        []string                                 "json:\"tags,omitempty\" graphql:\"tags\""
	Owner       *UpdateGroup_UpdateGroup_Group_Owner     "json:\"owner,omitempty\" graphql:\"owner\""
	Setting     UpdateGroup_UpdateGroup_Group_Setting    "json:\"setting\" graphql:\"setting\""
	Members     []*UpdateGroup_UpdateGroup_Group_Members "json:\"members,omitempty\" graphql:\"members\""
}

func (t *UpdateGroup_UpdateGroup_Group) GetDescription() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Description
}
func (t *UpdateGroup_UpdateGroup_Group) GetDisplayName() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.DisplayName
}
func (t *UpdateGroup_UpdateGroup_Group) GetID() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.ID
}
func (t *UpdateGroup_UpdateGroup_Group) GetLogoURL() *string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.LogoURL
}
func (t *UpdateGroup_UpdateGroup_Group) GetName() string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Name
}
func (t *UpdateGroup_UpdateGroup_Group) GetTags() []string {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Tags
}
func (t *UpdateGroup_UpdateGroup_Group) GetOwner() *UpdateGroup_UpdateGroup_Group_Owner {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Owner
}
func (t *UpdateGroup_UpdateGroup_Group) GetSetting() *UpdateGroup_UpdateGroup_Group_Setting {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return &t.Setting
}
func (t *UpdateGroup_UpdateGroup_Group) GetMembers() []*UpdateGroup_UpdateGroup_Group_Members {
	if t == nil {
		t = &UpdateGroup_UpdateGroup_Group{}
	}
	return t.Members
}

type UpdateGroup_UpdateGroup struct {
	Group UpdateGroup_UpdateGroup_Group "json:\"group\" graphql:\"group\""
}

func (t *UpdateGroup_UpdateGroup) GetGroup() *UpdateGroup_UpdateGroup_Group {
	if t == nil {
		t = &UpdateGroup_UpdateGroup{}
	}
	return &t.Group
}

type GetAllGroupHistories_GroupHistories_Edges_Node struct {
	CreatedAt       *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string           "json:\"description,omitempty\" graphql:\"description\""
	DisplayName     string            "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string           "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	HistoryTime     time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID              string            "json:\"id\" graphql:\"id\""
	LogoURL         *string           "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name            string            "json:\"name\" graphql:\"name\""
	Operation       enthistory.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID         *string           "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref             *string           "json:\"ref,omitempty\" graphql:\"ref\""
	Tags            []string          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetGravatarLogoURL() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.GravatarLogoURL
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupHistories_GroupHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllGroupHistories_GroupHistories_Edges struct {
	Node *GetAllGroupHistories_GroupHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupHistories_GroupHistories_Edges) GetNode() *GetAllGroupHistories_GroupHistories_Edges_Node {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories_Edges{}
	}
	return t.Node
}

type GetAllGroupHistories_GroupHistories struct {
	Edges []*GetAllGroupHistories_GroupHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllGroupHistories_GroupHistories) GetEdges() []*GetAllGroupHistories_GroupHistories_Edges {
	if t == nil {
		t = &GetAllGroupHistories_GroupHistories{}
	}
	return t.Edges
}

type GetGroupHistories_GroupHistories_Edges_Node struct {
	CreatedAt       *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description     *string           "json:\"description,omitempty\" graphql:\"description\""
	DisplayName     string            "json:\"displayName\" graphql:\"displayName\""
	GravatarLogoURL *string           "json:\"gravatarLogoURL,omitempty\" graphql:\"gravatarLogoURL\""
	HistoryTime     time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID              string            "json:\"id\" graphql:\"id\""
	LogoURL         *string           "json:\"logoURL,omitempty\" graphql:\"logoURL\""
	Name            string            "json:\"name\" graphql:\"name\""
	Operation       enthistory.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID         *string           "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref             *string           "json:\"ref,omitempty\" graphql:\"ref\""
	Tags            []string          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroupHistories_GroupHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetGravatarLogoURL() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.GravatarLogoURL
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetLogoURL() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.LogoURL
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupHistories_GroupHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetGroupHistories_GroupHistories_Edges struct {
	Node *GetGroupHistories_GroupHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupHistories_GroupHistories_Edges) GetNode() *GetGroupHistories_GroupHistories_Edges_Node {
	if t == nil {
		t = &GetGroupHistories_GroupHistories_Edges{}
	}
	return t.Node
}

type GetGroupHistories_GroupHistories struct {
	Edges []*GetGroupHistories_GroupHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroupHistories_GroupHistories) GetEdges() []*GetGroupHistories_GroupHistories_Edges {
	if t == nil {
		t = &GetGroupHistories_GroupHistories{}
	}
	return t.Edges
}

type GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetDisplayName() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.DisplayName
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetEmail() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.Email
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User{}
	}
	return t.LastName
}

type GetGroupMembersByGroupID_GroupMemberships_Edges_Node struct {
	GroupID string                                                    "json:\"groupID\" graphql:\"groupID\""
	ID      string                                                    "json:\"id\" graphql:\"id\""
	Role    enums.Role                                                "json:\"role\" graphql:\"role\""
	UserID  string                                                    "json:\"userID\" graphql:\"userID\""
	User    GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetGroupID() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return t.GroupID
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return t.UserID
}
func (t *GetGroupMembersByGroupID_GroupMemberships_Edges_Node) GetUser() *GetGroupMembersByGroupID_GroupMemberships_Edges_Node_User {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges_Node{}
	}
	return &t.User
}

type GetGroupMembersByGroupID_GroupMemberships_Edges struct {
	Node *GetGroupMembersByGroupID_GroupMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupMembersByGroupID_GroupMemberships_Edges) GetNode() *GetGroupMembersByGroupID_GroupMemberships_Edges_Node {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships_Edges{}
	}
	return t.Node
}

type GetGroupMembersByGroupID_GroupMemberships struct {
	Edges []*GetGroupMembersByGroupID_GroupMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroupMembersByGroupID_GroupMemberships) GetEdges() []*GetGroupMembersByGroupID_GroupMemberships_Edges {
	if t == nil {
		t = &GetGroupMembersByGroupID_GroupMemberships{}
	}
	return t.Edges
}

type AddUserToGroupWithRole_CreateGroupMembership_GroupMembership struct {
	GroupID string     "json:\"groupID\" graphql:\"groupID\""
	ID      string     "json:\"id\" graphql:\"id\""
	Role    enums.Role "json:\"role\" graphql:\"role\""
	UserID  string     "json:\"userID\" graphql:\"userID\""
}

func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetGroupID() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return t.GroupID
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetID() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return t.ID
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetRole() *enums.Role {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return &t.Role
}
func (t *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership) GetUserID() string {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership_GroupMembership{}
	}
	return t.UserID
}

type AddUserToGroupWithRole_CreateGroupMembership struct {
	GroupMembership AddUserToGroupWithRole_CreateGroupMembership_GroupMembership "json:\"groupMembership\" graphql:\"groupMembership\""
}

func (t *AddUserToGroupWithRole_CreateGroupMembership) GetGroupMembership() *AddUserToGroupWithRole_CreateGroupMembership_GroupMembership {
	if t == nil {
		t = &AddUserToGroupWithRole_CreateGroupMembership{}
	}
	return &t.GroupMembership
}

type CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships struct {
	GroupID string     "json:\"groupID\" graphql:\"groupID\""
	ID      string     "json:\"id\" graphql:\"id\""
	Role    enums.Role "json:\"role\" graphql:\"role\""
	UserID  string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetGroupID() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.GroupID
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.ID
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships{}
	}
	return t.UserID
}

type CreateBulkGroupMembers_CreateBulkGroupMembership struct {
	GroupMemberships []*CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships "json:\"groupMemberships,omitempty\" graphql:\"groupMemberships\""
}

func (t *CreateBulkGroupMembers_CreateBulkGroupMembership) GetGroupMemberships() []*CreateBulkGroupMembers_CreateBulkGroupMembership_GroupMemberships {
	if t == nil {
		t = &CreateBulkGroupMembers_CreateBulkGroupMembership{}
	}
	return t.GroupMemberships
}

type CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships struct {
	GroupID string     "json:\"groupID\" graphql:\"groupID\""
	ID      string     "json:\"id\" graphql:\"id\""
	Role    enums.Role "json:\"role\" graphql:\"role\""
	UserID  string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetGroupID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.GroupID
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.ID
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships{}
	}
	return t.UserID
}

type CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership struct {
	GroupMemberships []*CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships "json:\"groupMemberships,omitempty\" graphql:\"groupMemberships\""
}

func (t *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership) GetGroupMemberships() []*CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership_GroupMemberships {
	if t == nil {
		t = &CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership{}
	}
	return t.GroupMemberships
}

type UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership struct {
	GroupID string     "json:\"groupID\" graphql:\"groupID\""
	ID      string     "json:\"id\" graphql:\"id\""
	Role    enums.Role "json:\"role\" graphql:\"role\""
	UserID  string     "json:\"userID\" graphql:\"userID\""
}

func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetGroupID() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return t.GroupID
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetID() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return t.ID
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return &t.Role
}
func (t *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership) GetUserID() string {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership{}
	}
	return t.UserID
}

type UpdateUserRoleInGroup_UpdateGroupMembership struct {
	GroupMembership UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership "json:\"groupMembership\" graphql:\"groupMembership\""
}

func (t *UpdateUserRoleInGroup_UpdateGroupMembership) GetGroupMembership() *UpdateUserRoleInGroup_UpdateGroupMembership_GroupMembership {
	if t == nil {
		t = &UpdateUserRoleInGroup_UpdateGroupMembership{}
	}
	return &t.GroupMembership
}

type RemoveUserFromGroup_DeleteGroupMembership struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *RemoveUserFromGroup_DeleteGroupMembership) GetDeletedID() string {
	if t == nil {
		t = &RemoveUserFromGroup_DeleteGroupMembership{}
	}
	return t.DeletedID
}

type GetAllGroupSettings_GroupSettings_Edges_Node_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllGroupSettings_GroupSettings_Edges_Node_Group) GetID() string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node_Group{}
	}
	return t.ID
}

type GetAllGroupSettings_GroupSettings_Edges_Node struct {
	ID           string                                              "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy                                    "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool                                               "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool                                               "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string                                            "json:\"tags,omitempty\" graphql:\"tags\""
	Visibility   enums.Visibility                                    "json:\"visibility\" graphql:\"visibility\""
	Group        *GetAllGroupSettings_GroupSettings_Edges_Node_Group "json:\"group,omitempty\" graphql:\"group\""
	CreatedAt    *time.Time                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.JoinPolicy
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToGithub
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToSlack
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.Visibility
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetGroup() *GetAllGroupSettings_GroupSettings_Edges_Node_Group {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.Group
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllGroupSettings_GroupSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllGroupSettings_GroupSettings_Edges struct {
	Node *GetAllGroupSettings_GroupSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllGroupSettings_GroupSettings_Edges) GetNode() *GetAllGroupSettings_GroupSettings_Edges_Node {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings_Edges{}
	}
	return t.Node
}

type GetAllGroupSettings_GroupSettings struct {
	Edges []*GetAllGroupSettings_GroupSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllGroupSettings_GroupSettings) GetEdges() []*GetAllGroupSettings_GroupSettings_Edges {
	if t == nil {
		t = &GetAllGroupSettings_GroupSettings{}
	}
	return t.Edges
}

type GetGroupSettingByID_GroupSetting_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetGroupSettingByID_GroupSetting_Group) GetID() string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting_Group{}
	}
	return t.ID
}

type GetGroupSettingByID_GroupSetting struct {
	ID           string                                  "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy                        "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool                                   "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool                                   "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string                                "json:\"tags,omitempty\" graphql:\"tags\""
	Visibility   enums.Visibility                        "json:\"visibility\" graphql:\"visibility\""
	Group        *GetGroupSettingByID_GroupSetting_Group "json:\"group,omitempty\" graphql:\"group\""
	CreatedAt    *time.Time                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroupSettingByID_GroupSetting) GetID() string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.ID
}
func (t *GetGroupSettingByID_GroupSetting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupSettingByID_GroupSetting) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.SyncToGithub
}
func (t *GetGroupSettingByID_GroupSetting) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.SyncToSlack
}
func (t *GetGroupSettingByID_GroupSetting) GetTags() []string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.Tags
}
func (t *GetGroupSettingByID_GroupSetting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return &t.Visibility
}
func (t *GetGroupSettingByID_GroupSetting) GetGroup() *GetGroupSettingByID_GroupSetting_Group {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.Group
}
func (t *GetGroupSettingByID_GroupSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.CreatedAt
}
func (t *GetGroupSettingByID_GroupSetting) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.CreatedBy
}
func (t *GetGroupSettingByID_GroupSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.UpdatedAt
}
func (t *GetGroupSettingByID_GroupSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupSettingByID_GroupSetting{}
	}
	return t.UpdatedBy
}

type GetGroupSettings_GroupSettings_Edges_Node_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetGroupSettings_GroupSettings_Edges_Node_Group) GetID() string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node_Group{}
	}
	return t.ID
}

type GetGroupSettings_GroupSettings_Edges_Node struct {
	ID           string                                           "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy                                 "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool                                            "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool                                            "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string                                         "json:\"tags,omitempty\" graphql:\"tags\""
	Visibility   enums.Visibility                                 "json:\"visibility\" graphql:\"visibility\""
	Group        *GetGroupSettings_GroupSettings_Edges_Node_Group "json:\"group,omitempty\" graphql:\"group\""
	CreatedAt    *time.Time                                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetGroupSettings_GroupSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.JoinPolicy
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetSyncToGithub() *bool {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToGithub
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetSyncToSlack() *bool {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.SyncToSlack
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return &t.Visibility
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetGroup() *GetGroupSettings_GroupSettings_Edges_Node_Group {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.Group
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetGroupSettings_GroupSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetGroupSettings_GroupSettings_Edges struct {
	Node *GetGroupSettings_GroupSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetGroupSettings_GroupSettings_Edges) GetNode() *GetGroupSettings_GroupSettings_Edges_Node {
	if t == nil {
		t = &GetGroupSettings_GroupSettings_Edges{}
	}
	return t.Node
}

type GetGroupSettings_GroupSettings struct {
	Edges []*GetGroupSettings_GroupSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetGroupSettings_GroupSettings) GetEdges() []*GetGroupSettings_GroupSettings_Edges {
	if t == nil {
		t = &GetGroupSettings_GroupSettings{}
	}
	return t.Edges
}

type UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group) GetID() string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group{}
	}
	return t.ID
}

type UpdateGroupSetting_UpdateGroupSetting_GroupSetting struct {
	ID           string                                                    "json:\"id\" graphql:\"id\""
	JoinPolicy   enums.JoinPolicy                                          "json:\"joinPolicy\" graphql:\"joinPolicy\""
	SyncToGithub *bool                                                     "json:\"syncToGithub,omitempty\" graphql:\"syncToGithub\""
	SyncToSlack  *bool                                                     "json:\"syncToSlack,omitempty\" graphql:\"syncToSlack\""
	Tags         []string                                                  "json:\"tags,omitempty\" graphql:\"tags\""
	Visibility   enums.Visibility                                          "json:\"visibility\" graphql:\"visibility\""
	Group        *UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group "json:\"group,omitempty\" graphql:\"group\""
	CreatedAt    *time.Time                                                "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                                   "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                                                "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                                   "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetID() string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.ID
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetJoinPolicy() *enums.JoinPolicy {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return &t.JoinPolicy
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetSyncToGithub() *bool {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.SyncToGithub
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetSyncToSlack() *bool {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.SyncToSlack
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetTags() []string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.Tags
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetVisibility() *enums.Visibility {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return &t.Visibility
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetGroup() *UpdateGroupSetting_UpdateGroupSetting_GroupSetting_Group {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.Group
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.CreatedAt
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.CreatedBy
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.UpdatedAt
}
func (t *UpdateGroupSetting_UpdateGroupSetting_GroupSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting_GroupSetting{}
	}
	return t.UpdatedBy
}

type UpdateGroupSetting_UpdateGroupSetting struct {
	GroupSetting UpdateGroupSetting_UpdateGroupSetting_GroupSetting "json:\"groupSetting\" graphql:\"groupSetting\""
}

func (t *UpdateGroupSetting_UpdateGroupSetting) GetGroupSetting() *UpdateGroupSetting_UpdateGroupSetting_GroupSetting {
	if t == nil {
		t = &UpdateGroupSetting_UpdateGroupSetting{}
	}
	return &t.GroupSetting
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations) GetID() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations{}
	}
	return t.ID
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Organization) GetID() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Organization{}
	}
	return t.ID
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events) GetID() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events{}
	}
	return t.ID
}

type CreateBulkCSVHush_CreateBulkCSVHush_Hushes struct {
	Description  *string                                                    "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                                     "json:\"id\" graphql:\"id\""
	Kind         *string                                                    "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                     "json:\"name\" graphql:\"name\""
	SecretName   *string                                                    "json:\"secretName,omitempty\" graphql:\"secretName\""
	Integrations []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
	Organization []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Events       []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events       "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Description
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetID() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.ID
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetKind() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Kind
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetName() string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Name
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetSecretName() *string {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.SecretName
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetIntegrations() []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Integrations {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Integrations
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetOrganization() []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Organization {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Organization
}
func (t *CreateBulkCSVHush_CreateBulkCSVHush_Hushes) GetEvents() []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes_Events {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush_Hushes{}
	}
	return t.Events
}

type CreateBulkCSVHush_CreateBulkCSVHush struct {
	Hushes []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes "json:\"hushes,omitempty\" graphql:\"hushes\""
}

func (t *CreateBulkCSVHush_CreateBulkCSVHush) GetHushes() []*CreateBulkCSVHush_CreateBulkCSVHush_Hushes {
	if t == nil {
		t = &CreateBulkCSVHush_CreateBulkCSVHush{}
	}
	return t.Hushes
}

type CreateBulkHush_CreateBulkHush_Hushes_Integrations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes_Integrations) GetID() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes_Integrations{}
	}
	return t.ID
}

type CreateBulkHush_CreateBulkHush_Hushes_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes_Organization) GetID() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes_Organization{}
	}
	return t.ID
}

type CreateBulkHush_CreateBulkHush_Hushes_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes_Events) GetID() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes_Events{}
	}
	return t.ID
}

type CreateBulkHush_CreateBulkHush_Hushes struct {
	Description  *string                                              "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                               "json:\"id\" graphql:\"id\""
	Kind         *string                                              "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                               "json:\"name\" graphql:\"name\""
	SecretName   *string                                              "json:\"secretName,omitempty\" graphql:\"secretName\""
	Integrations []*CreateBulkHush_CreateBulkHush_Hushes_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
	Organization []*CreateBulkHush_CreateBulkHush_Hushes_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Events       []*CreateBulkHush_CreateBulkHush_Hushes_Events       "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkHush_CreateBulkHush_Hushes) GetDescription() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Description
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetID() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.ID
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetKind() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Kind
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetName() string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Name
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetSecretName() *string {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.SecretName
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetIntegrations() []*CreateBulkHush_CreateBulkHush_Hushes_Integrations {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Integrations
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetOrganization() []*CreateBulkHush_CreateBulkHush_Hushes_Organization {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Organization
}
func (t *CreateBulkHush_CreateBulkHush_Hushes) GetEvents() []*CreateBulkHush_CreateBulkHush_Hushes_Events {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush_Hushes{}
	}
	return t.Events
}

type CreateBulkHush_CreateBulkHush struct {
	Hushes []*CreateBulkHush_CreateBulkHush_Hushes "json:\"hushes,omitempty\" graphql:\"hushes\""
}

func (t *CreateBulkHush_CreateBulkHush) GetHushes() []*CreateBulkHush_CreateBulkHush_Hushes {
	if t == nil {
		t = &CreateBulkHush_CreateBulkHush{}
	}
	return t.Hushes
}

type CreateHush_CreateHush_Hush_Integrations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateHush_CreateHush_Hush_Integrations) GetID() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush_Integrations{}
	}
	return t.ID
}

type CreateHush_CreateHush_Hush_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateHush_CreateHush_Hush_Organization) GetID() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush_Organization{}
	}
	return t.ID
}

type CreateHush_CreateHush_Hush_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateHush_CreateHush_Hush_Events) GetID() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush_Events{}
	}
	return t.ID
}

type CreateHush_CreateHush_Hush struct {
	Description  *string                                    "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                     "json:\"id\" graphql:\"id\""
	Kind         *string                                    "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                     "json:\"name\" graphql:\"name\""
	SecretName   *string                                    "json:\"secretName,omitempty\" graphql:\"secretName\""
	Integrations []*CreateHush_CreateHush_Hush_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
	Organization []*CreateHush_CreateHush_Hush_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Events       []*CreateHush_CreateHush_Hush_Events       "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateHush_CreateHush_Hush) GetDescription() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Description
}
func (t *CreateHush_CreateHush_Hush) GetID() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.ID
}
func (t *CreateHush_CreateHush_Hush) GetKind() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Kind
}
func (t *CreateHush_CreateHush_Hush) GetName() string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Name
}
func (t *CreateHush_CreateHush_Hush) GetSecretName() *string {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.SecretName
}
func (t *CreateHush_CreateHush_Hush) GetIntegrations() []*CreateHush_CreateHush_Hush_Integrations {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Integrations
}
func (t *CreateHush_CreateHush_Hush) GetOrganization() []*CreateHush_CreateHush_Hush_Organization {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Organization
}
func (t *CreateHush_CreateHush_Hush) GetEvents() []*CreateHush_CreateHush_Hush_Events {
	if t == nil {
		t = &CreateHush_CreateHush_Hush{}
	}
	return t.Events
}

type CreateHush_CreateHush struct {
	Hush CreateHush_CreateHush_Hush "json:\"hush\" graphql:\"hush\""
}

func (t *CreateHush_CreateHush) GetHush() *CreateHush_CreateHush_Hush {
	if t == nil {
		t = &CreateHush_CreateHush{}
	}
	return &t.Hush
}

type GetAllHushes_Hushes_Edges_Node_Integrations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllHushes_Hushes_Edges_Node_Integrations) GetID() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node_Integrations{}
	}
	return t.ID
}

type GetAllHushes_Hushes_Edges_Node_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllHushes_Hushes_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node_Organization{}
	}
	return t.ID
}

type GetAllHushes_Hushes_Edges_Node_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllHushes_Hushes_Edges_Node_Events) GetID() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node_Events{}
	}
	return t.ID
}

type GetAllHushes_Hushes_Edges_Node struct {
	Description  *string                                        "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                         "json:\"id\" graphql:\"id\""
	Kind         *string                                        "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                         "json:\"name\" graphql:\"name\""
	SecretName   *string                                        "json:\"secretName,omitempty\" graphql:\"secretName\""
	Integrations []*GetAllHushes_Hushes_Edges_Node_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
	Organization []*GetAllHushes_Hushes_Edges_Node_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Events       []*GetAllHushes_Hushes_Edges_Node_Events       "json:\"events,omitempty\" graphql:\"events\""
	CreatedAt    *time.Time                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt    *time.Time                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy    *string                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy    *string                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllHushes_Hushes_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllHushes_Hushes_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllHushes_Hushes_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllHushes_Hushes_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllHushes_Hushes_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetAllHushes_Hushes_Edges_Node) GetIntegrations() []*GetAllHushes_Hushes_Edges_Node_Integrations {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Integrations
}
func (t *GetAllHushes_Hushes_Edges_Node) GetOrganization() []*GetAllHushes_Hushes_Edges_Node_Organization {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Organization
}
func (t *GetAllHushes_Hushes_Edges_Node) GetEvents() []*GetAllHushes_Hushes_Edges_Node_Events {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.Events
}
func (t *GetAllHushes_Hushes_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllHushes_Hushes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllHushes_Hushes_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllHushes_Hushes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllHushes_Hushes_Edges struct {
	Node *GetAllHushes_Hushes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllHushes_Hushes_Edges) GetNode() *GetAllHushes_Hushes_Edges_Node {
	if t == nil {
		t = &GetAllHushes_Hushes_Edges{}
	}
	return t.Node
}

type GetAllHushes_Hushes struct {
	Edges []*GetAllHushes_Hushes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllHushes_Hushes) GetEdges() []*GetAllHushes_Hushes_Edges {
	if t == nil {
		t = &GetAllHushes_Hushes{}
	}
	return t.Edges
}

type GetHushByID_Hush_Integrations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushByID_Hush_Integrations) GetID() string {
	if t == nil {
		t = &GetHushByID_Hush_Integrations{}
	}
	return t.ID
}

type GetHushByID_Hush_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushByID_Hush_Organization) GetID() string {
	if t == nil {
		t = &GetHushByID_Hush_Organization{}
	}
	return t.ID
}

type GetHushByID_Hush_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushByID_Hush_Events) GetID() string {
	if t == nil {
		t = &GetHushByID_Hush_Events{}
	}
	return t.ID
}

type GetHushByID_Hush struct {
	Description  *string                          "json:\"description,omitempty\" graphql:\"description\""
	ID           string                           "json:\"id\" graphql:\"id\""
	Kind         *string                          "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                           "json:\"name\" graphql:\"name\""
	SecretName   *string                          "json:\"secretName,omitempty\" graphql:\"secretName\""
	Integrations []*GetHushByID_Hush_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
	Organization []*GetHushByID_Hush_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Events       []*GetHushByID_Hush_Events       "json:\"events,omitempty\" graphql:\"events\""
	CreatedAt    *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt    *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy    *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy    *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetHushByID_Hush) GetDescription() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Description
}
func (t *GetHushByID_Hush) GetID() string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.ID
}
func (t *GetHushByID_Hush) GetKind() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Kind
}
func (t *GetHushByID_Hush) GetName() string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Name
}
func (t *GetHushByID_Hush) GetSecretName() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.SecretName
}
func (t *GetHushByID_Hush) GetIntegrations() []*GetHushByID_Hush_Integrations {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Integrations
}
func (t *GetHushByID_Hush) GetOrganization() []*GetHushByID_Hush_Organization {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Organization
}
func (t *GetHushByID_Hush) GetEvents() []*GetHushByID_Hush_Events {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.Events
}
func (t *GetHushByID_Hush) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.CreatedAt
}
func (t *GetHushByID_Hush) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.UpdatedAt
}
func (t *GetHushByID_Hush) GetCreatedBy() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.CreatedBy
}
func (t *GetHushByID_Hush) GetUpdatedBy() *string {
	if t == nil {
		t = &GetHushByID_Hush{}
	}
	return t.UpdatedBy
}

type GetHushes_Hushes_Edges_Node_Integrations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushes_Hushes_Edges_Node_Integrations) GetID() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node_Integrations{}
	}
	return t.ID
}

type GetHushes_Hushes_Edges_Node_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushes_Hushes_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node_Organization{}
	}
	return t.ID
}

type GetHushes_Hushes_Edges_Node_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetHushes_Hushes_Edges_Node_Events) GetID() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node_Events{}
	}
	return t.ID
}

type GetHushes_Hushes_Edges_Node struct {
	Description  *string                                     "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                      "json:\"id\" graphql:\"id\""
	Kind         *string                                     "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                      "json:\"name\" graphql:\"name\""
	SecretName   *string                                     "json:\"secretName,omitempty\" graphql:\"secretName\""
	Integrations []*GetHushes_Hushes_Edges_Node_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
	Organization []*GetHushes_Hushes_Edges_Node_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Events       []*GetHushes_Hushes_Edges_Node_Events       "json:\"events,omitempty\" graphql:\"events\""
	CreatedAt    *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt    *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy    *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy    *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetHushes_Hushes_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Description
}
func (t *GetHushes_Hushes_Edges_Node) GetID() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.ID
}
func (t *GetHushes_Hushes_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Kind
}
func (t *GetHushes_Hushes_Edges_Node) GetName() string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Name
}
func (t *GetHushes_Hushes_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetHushes_Hushes_Edges_Node) GetIntegrations() []*GetHushes_Hushes_Edges_Node_Integrations {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Integrations
}
func (t *GetHushes_Hushes_Edges_Node) GetOrganization() []*GetHushes_Hushes_Edges_Node_Organization {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Organization
}
func (t *GetHushes_Hushes_Edges_Node) GetEvents() []*GetHushes_Hushes_Edges_Node_Events {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.Events
}
func (t *GetHushes_Hushes_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetHushes_Hushes_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetHushes_Hushes_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetHushes_Hushes_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetHushes_Hushes_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetHushes_Hushes_Edges struct {
	Node *GetHushes_Hushes_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetHushes_Hushes_Edges) GetNode() *GetHushes_Hushes_Edges_Node {
	if t == nil {
		t = &GetHushes_Hushes_Edges{}
	}
	return t.Node
}

type GetHushes_Hushes struct {
	Edges []*GetHushes_Hushes_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetHushes_Hushes) GetEdges() []*GetHushes_Hushes_Edges {
	if t == nil {
		t = &GetHushes_Hushes{}
	}
	return t.Edges
}

type UpdateHush_UpdateHush_Hush_Integrations struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateHush_UpdateHush_Hush_Integrations) GetID() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush_Integrations{}
	}
	return t.ID
}

type UpdateHush_UpdateHush_Hush_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateHush_UpdateHush_Hush_Organization) GetID() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush_Organization{}
	}
	return t.ID
}

type UpdateHush_UpdateHush_Hush_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateHush_UpdateHush_Hush_Events) GetID() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush_Events{}
	}
	return t.ID
}

type UpdateHush_UpdateHush_Hush struct {
	Description  *string                                    "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                     "json:\"id\" graphql:\"id\""
	Kind         *string                                    "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                     "json:\"name\" graphql:\"name\""
	SecretName   *string                                    "json:\"secretName,omitempty\" graphql:\"secretName\""
	Integrations []*UpdateHush_UpdateHush_Hush_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
	Organization []*UpdateHush_UpdateHush_Hush_Organization "json:\"organization,omitempty\" graphql:\"organization\""
	Events       []*UpdateHush_UpdateHush_Hush_Events       "json:\"events,omitempty\" graphql:\"events\""
}

func (t *UpdateHush_UpdateHush_Hush) GetDescription() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Description
}
func (t *UpdateHush_UpdateHush_Hush) GetID() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.ID
}
func (t *UpdateHush_UpdateHush_Hush) GetKind() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Kind
}
func (t *UpdateHush_UpdateHush_Hush) GetName() string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Name
}
func (t *UpdateHush_UpdateHush_Hush) GetSecretName() *string {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.SecretName
}
func (t *UpdateHush_UpdateHush_Hush) GetIntegrations() []*UpdateHush_UpdateHush_Hush_Integrations {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Integrations
}
func (t *UpdateHush_UpdateHush_Hush) GetOrganization() []*UpdateHush_UpdateHush_Hush_Organization {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Organization
}
func (t *UpdateHush_UpdateHush_Hush) GetEvents() []*UpdateHush_UpdateHush_Hush_Events {
	if t == nil {
		t = &UpdateHush_UpdateHush_Hush{}
	}
	return t.Events
}

type UpdateHush_UpdateHush struct {
	Hush UpdateHush_UpdateHush_Hush "json:\"hush\" graphql:\"hush\""
}

func (t *UpdateHush_UpdateHush) GetHush() *UpdateHush_UpdateHush_Hush {
	if t == nil {
		t = &UpdateHush_UpdateHush{}
	}
	return &t.Hush
}

type GetAllHushHistories_HushHistories_Edges_Node struct {
	CreatedAt   *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string           "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID          string            "json:\"id\" graphql:\"id\""
	Kind        *string           "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string            "json:\"name\" graphql:\"name\""
	Operation   enthistory.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string           "json:\"ref,omitempty\" graphql:\"ref\""
	SecretName  *string           "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllHushHistories_HushHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllHushHistories_HushHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllHushHistories_HushHistories_Edges struct {
	Node *GetAllHushHistories_HushHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllHushHistories_HushHistories_Edges) GetNode() *GetAllHushHistories_HushHistories_Edges_Node {
	if t == nil {
		t = &GetAllHushHistories_HushHistories_Edges{}
	}
	return t.Node
}

type GetAllHushHistories_HushHistories struct {
	Edges []*GetAllHushHistories_HushHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllHushHistories_HushHistories) GetEdges() []*GetAllHushHistories_HushHistories_Edges {
	if t == nil {
		t = &GetAllHushHistories_HushHistories{}
	}
	return t.Edges
}

type GetHushHistories_HushHistories_Edges_Node struct {
	CreatedAt   *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string           "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID          string            "json:\"id\" graphql:\"id\""
	Kind        *string           "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string            "json:\"name\" graphql:\"name\""
	Operation   enthistory.OpType "json:\"operation\" graphql:\"operation\""
	Ref         *string           "json:\"ref,omitempty\" graphql:\"ref\""
	SecretName  *string           "json:\"secretName,omitempty\" graphql:\"secretName\""
	UpdatedAt   *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetHushHistories_HushHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetSecretName() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.SecretName
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetHushHistories_HushHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetHushHistories_HushHistories_Edges struct {
	Node *GetHushHistories_HushHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetHushHistories_HushHistories_Edges) GetNode() *GetHushHistories_HushHistories_Edges_Node {
	if t == nil {
		t = &GetHushHistories_HushHistories_Edges{}
	}
	return t.Node
}

type GetHushHistories_HushHistories struct {
	Edges []*GetHushHistories_HushHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetHushHistories_HushHistories) GetEdges() []*GetHushHistories_HushHistories_Edges {
	if t == nil {
		t = &GetHushHistories_HushHistories{}
	}
	return t.Edges
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner{}
	}
	return t.ID
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets{}
	}
	return t.ID
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Oauth2tokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Oauth2tokens) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Oauth2tokens{}
	}
	return t.ID
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events{}
	}
	return t.ID
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks struct {
	ID             string "json:\"id\" graphql:\"id\""
	DestinationURL string "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool   "json:\"enabled\" graphql:\"enabled\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks{}
	}
	return t.ID
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks{}
	}
	return t.DestinationURL
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks{}
	}
	return t.Enabled
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations struct {
	Description  *string                                                                        "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                                                         "json:\"id\" graphql:\"id\""
	Kind         *string                                                                        "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                                         "json:\"name\" graphql:\"name\""
	OwnerID      *string                                                                        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Owner        *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner          "json:\"owner,omitempty\" graphql:\"owner\""
	Secrets      []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets      "json:\"secrets,omitempty\" graphql:\"secrets\""
	Oauth2tokens []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Oauth2tokens "json:\"oauth2tokens,omitempty\" graphql:\"oauth2tokens\""
	Events       []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events       "json:\"events,omitempty\" graphql:\"events\""
	Webhooks     []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks     "json:\"webhooks,omitempty\" graphql:\"webhooks\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Description
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetID() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.ID
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetKind() *string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Kind
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetName() string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Name
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.OwnerID
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetOwner() *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Owner {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Owner
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetSecrets() []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Secrets {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Secrets
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetOauth2tokens() []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Oauth2tokens {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Oauth2tokens
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetEvents() []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Events {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Events
}
func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations) GetWebhooks() []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations_Webhooks {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations{}
	}
	return t.Webhooks
}

type CreateBulkCSVIntegration_CreateBulkCSVIntegration struct {
	Integrations []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
}

func (t *CreateBulkCSVIntegration_CreateBulkCSVIntegration) GetIntegrations() []*CreateBulkCSVIntegration_CreateBulkCSVIntegration_Integrations {
	if t == nil {
		t = &CreateBulkCSVIntegration_CreateBulkCSVIntegration{}
	}
	return t.Integrations
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner{}
	}
	return t.ID
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets{}
	}
	return t.ID
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Oauth2tokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Oauth2tokens) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Oauth2tokens{}
	}
	return t.ID
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Events) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Events{}
	}
	return t.ID
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks struct {
	ID             string "json:\"id\" graphql:\"id\""
	DestinationURL string "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool   "json:\"enabled\" graphql:\"enabled\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks{}
	}
	return t.ID
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks{}
	}
	return t.DestinationURL
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks{}
	}
	return t.Enabled
}

type CreateBulkIntegration_CreateBulkIntegration_Integrations struct {
	Description  *string                                                                  "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                                                   "json:\"id\" graphql:\"id\""
	Kind         *string                                                                  "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                                   "json:\"name\" graphql:\"name\""
	OwnerID      *string                                                                  "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Owner        *CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner          "json:\"owner,omitempty\" graphql:\"owner\""
	Secrets      []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets      "json:\"secrets,omitempty\" graphql:\"secrets\""
	Oauth2tokens []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Oauth2tokens "json:\"oauth2tokens,omitempty\" graphql:\"oauth2tokens\""
	Events       []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Events       "json:\"events,omitempty\" graphql:\"events\""
	Webhooks     []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks     "json:\"webhooks,omitempty\" graphql:\"webhooks\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetDescription() *string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Description
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetID() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.ID
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetKind() *string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Kind
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetName() string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Name
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.OwnerID
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetOwner() *CreateBulkIntegration_CreateBulkIntegration_Integrations_Owner {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Owner
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetSecrets() []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Secrets {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Secrets
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetOauth2tokens() []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Oauth2tokens {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Oauth2tokens
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetEvents() []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Events {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Events
}
func (t *CreateBulkIntegration_CreateBulkIntegration_Integrations) GetWebhooks() []*CreateBulkIntegration_CreateBulkIntegration_Integrations_Webhooks {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration_Integrations{}
	}
	return t.Webhooks
}

type CreateBulkIntegration_CreateBulkIntegration struct {
	Integrations []*CreateBulkIntegration_CreateBulkIntegration_Integrations "json:\"integrations,omitempty\" graphql:\"integrations\""
}

func (t *CreateBulkIntegration_CreateBulkIntegration) GetIntegrations() []*CreateBulkIntegration_CreateBulkIntegration_Integrations {
	if t == nil {
		t = &CreateBulkIntegration_CreateBulkIntegration{}
	}
	return t.Integrations
}

type CreateIntegration_CreateIntegration_Integration_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Owner) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Owner{}
	}
	return t.ID
}

type CreateIntegration_CreateIntegration_Integration_Secrets struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Secrets) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Secrets{}
	}
	return t.ID
}

type CreateIntegration_CreateIntegration_Integration_Oauth2tokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Oauth2tokens) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Oauth2tokens{}
	}
	return t.ID
}

type CreateIntegration_CreateIntegration_Integration_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Events) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Events{}
	}
	return t.ID
}

type CreateIntegration_CreateIntegration_Integration_Webhooks struct {
	ID             string "json:\"id\" graphql:\"id\""
	DestinationURL string "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool   "json:\"enabled\" graphql:\"enabled\""
}

func (t *CreateIntegration_CreateIntegration_Integration_Webhooks) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Webhooks{}
	}
	return t.ID
}
func (t *CreateIntegration_CreateIntegration_Integration_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Webhooks{}
	}
	return t.DestinationURL
}
func (t *CreateIntegration_CreateIntegration_Integration_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration_Webhooks{}
	}
	return t.Enabled
}

type CreateIntegration_CreateIntegration_Integration struct {
	Description  *string                                                         "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                                          "json:\"id\" graphql:\"id\""
	Kind         *string                                                         "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                          "json:\"name\" graphql:\"name\""
	OwnerID      *string                                                         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Owner        *CreateIntegration_CreateIntegration_Integration_Owner          "json:\"owner,omitempty\" graphql:\"owner\""
	Secrets      []*CreateIntegration_CreateIntegration_Integration_Secrets      "json:\"secrets,omitempty\" graphql:\"secrets\""
	Oauth2tokens []*CreateIntegration_CreateIntegration_Integration_Oauth2tokens "json:\"oauth2tokens,omitempty\" graphql:\"oauth2tokens\""
	Events       []*CreateIntegration_CreateIntegration_Integration_Events       "json:\"events,omitempty\" graphql:\"events\""
	Webhooks     []*CreateIntegration_CreateIntegration_Integration_Webhooks     "json:\"webhooks,omitempty\" graphql:\"webhooks\""
}

func (t *CreateIntegration_CreateIntegration_Integration) GetDescription() *string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Description
}
func (t *CreateIntegration_CreateIntegration_Integration) GetID() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.ID
}
func (t *CreateIntegration_CreateIntegration_Integration) GetKind() *string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Kind
}
func (t *CreateIntegration_CreateIntegration_Integration) GetName() string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Name
}
func (t *CreateIntegration_CreateIntegration_Integration) GetOwnerID() *string {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.OwnerID
}
func (t *CreateIntegration_CreateIntegration_Integration) GetOwner() *CreateIntegration_CreateIntegration_Integration_Owner {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Owner
}
func (t *CreateIntegration_CreateIntegration_Integration) GetSecrets() []*CreateIntegration_CreateIntegration_Integration_Secrets {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Secrets
}
func (t *CreateIntegration_CreateIntegration_Integration) GetOauth2tokens() []*CreateIntegration_CreateIntegration_Integration_Oauth2tokens {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Oauth2tokens
}
func (t *CreateIntegration_CreateIntegration_Integration) GetEvents() []*CreateIntegration_CreateIntegration_Integration_Events {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Events
}
func (t *CreateIntegration_CreateIntegration_Integration) GetWebhooks() []*CreateIntegration_CreateIntegration_Integration_Webhooks {
	if t == nil {
		t = &CreateIntegration_CreateIntegration_Integration{}
	}
	return t.Webhooks
}

type CreateIntegration_CreateIntegration struct {
	Integration CreateIntegration_CreateIntegration_Integration "json:\"integration\" graphql:\"integration\""
}

func (t *CreateIntegration_CreateIntegration) GetIntegration() *CreateIntegration_CreateIntegration_Integration {
	if t == nil {
		t = &CreateIntegration_CreateIntegration{}
	}
	return &t.Integration
}

type DeleteIntegration_DeleteIntegration struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteIntegration_DeleteIntegration) GetDeletedID() string {
	if t == nil {
		t = &DeleteIntegration_DeleteIntegration{}
	}
	return t.DeletedID
}

type GetAllIntegrations_Integrations_Edges_Node_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Owner{}
	}
	return t.ID
}

type GetAllIntegrations_Integrations_Edges_Node_Secrets struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Secrets) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Secrets{}
	}
	return t.ID
}

type GetAllIntegrations_Integrations_Edges_Node_Oauth2tokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Oauth2tokens) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Oauth2tokens{}
	}
	return t.ID
}

type GetAllIntegrations_Integrations_Edges_Node_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Events) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Events{}
	}
	return t.ID
}

type GetAllIntegrations_Integrations_Edges_Node_Webhooks struct {
	ID             string "json:\"id\" graphql:\"id\""
	DestinationURL string "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool   "json:\"enabled\" graphql:\"enabled\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node_Webhooks) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Webhooks{}
	}
	return t.ID
}
func (t *GetAllIntegrations_Integrations_Edges_Node_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Webhooks{}
	}
	return t.DestinationURL
}
func (t *GetAllIntegrations_Integrations_Edges_Node_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node_Webhooks{}
	}
	return t.Enabled
}

type GetAllIntegrations_Integrations_Edges_Node struct {
	Description  *string                                                    "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                                     "json:\"id\" graphql:\"id\""
	Kind         *string                                                    "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                     "json:\"name\" graphql:\"name\""
	OwnerID      *string                                                    "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Owner        *GetAllIntegrations_Integrations_Edges_Node_Owner          "json:\"owner,omitempty\" graphql:\"owner\""
	Secrets      []*GetAllIntegrations_Integrations_Edges_Node_Secrets      "json:\"secrets,omitempty\" graphql:\"secrets\""
	Oauth2tokens []*GetAllIntegrations_Integrations_Edges_Node_Oauth2tokens "json:\"oauth2tokens,omitempty\" graphql:\"oauth2tokens\""
	Events       []*GetAllIntegrations_Integrations_Edges_Node_Events       "json:\"events,omitempty\" graphql:\"events\""
	Webhooks     []*GetAllIntegrations_Integrations_Edges_Node_Webhooks     "json:\"webhooks,omitempty\" graphql:\"webhooks\""
	CreatedAt    *time.Time                                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllIntegrations_Integrations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetOwner() *GetAllIntegrations_Integrations_Edges_Node_Owner {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Owner
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetSecrets() []*GetAllIntegrations_Integrations_Edges_Node_Secrets {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Secrets
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetOauth2tokens() []*GetAllIntegrations_Integrations_Edges_Node_Oauth2tokens {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Oauth2tokens
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetEvents() []*GetAllIntegrations_Integrations_Edges_Node_Events {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Events
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetWebhooks() []*GetAllIntegrations_Integrations_Edges_Node_Webhooks {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.Webhooks
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllIntegrations_Integrations_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllIntegrations_Integrations_Edges struct {
	Node *GetAllIntegrations_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllIntegrations_Integrations_Edges) GetNode() *GetAllIntegrations_Integrations_Edges_Node {
	if t == nil {
		t = &GetAllIntegrations_Integrations_Edges{}
	}
	return t.Node
}

type GetAllIntegrations_Integrations struct {
	Edges []*GetAllIntegrations_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllIntegrations_Integrations) GetEdges() []*GetAllIntegrations_Integrations_Edges {
	if t == nil {
		t = &GetAllIntegrations_Integrations{}
	}
	return t.Edges
}

type GetIntegrationByID_Integration_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrationByID_Integration_Owner) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Owner{}
	}
	return t.ID
}

type GetIntegrationByID_Integration_Secrets struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrationByID_Integration_Secrets) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Secrets{}
	}
	return t.ID
}

type GetIntegrationByID_Integration_Oauth2tokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrationByID_Integration_Oauth2tokens) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Oauth2tokens{}
	}
	return t.ID
}

type GetIntegrationByID_Integration_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrationByID_Integration_Events) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Events{}
	}
	return t.ID
}

type GetIntegrationByID_Integration_Webhooks struct {
	ID             string "json:\"id\" graphql:\"id\""
	DestinationURL string "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool   "json:\"enabled\" graphql:\"enabled\""
}

func (t *GetIntegrationByID_Integration_Webhooks) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Webhooks{}
	}
	return t.ID
}
func (t *GetIntegrationByID_Integration_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &GetIntegrationByID_Integration_Webhooks{}
	}
	return t.DestinationURL
}
func (t *GetIntegrationByID_Integration_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &GetIntegrationByID_Integration_Webhooks{}
	}
	return t.Enabled
}

type GetIntegrationByID_Integration struct {
	Description  *string                                        "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                         "json:\"id\" graphql:\"id\""
	Kind         *string                                        "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                         "json:\"name\" graphql:\"name\""
	OwnerID      *string                                        "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Owner        *GetIntegrationByID_Integration_Owner          "json:\"owner,omitempty\" graphql:\"owner\""
	Secrets      []*GetIntegrationByID_Integration_Secrets      "json:\"secrets,omitempty\" graphql:\"secrets\""
	Oauth2tokens []*GetIntegrationByID_Integration_Oauth2tokens "json:\"oauth2tokens,omitempty\" graphql:\"oauth2tokens\""
	Events       []*GetIntegrationByID_Integration_Events       "json:\"events,omitempty\" graphql:\"events\""
	Webhooks     []*GetIntegrationByID_Integration_Webhooks     "json:\"webhooks,omitempty\" graphql:\"webhooks\""
	CreatedAt    *time.Time                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetIntegrationByID_Integration) GetDescription() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Description
}
func (t *GetIntegrationByID_Integration) GetID() string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.ID
}
func (t *GetIntegrationByID_Integration) GetKind() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Kind
}
func (t *GetIntegrationByID_Integration) GetName() string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Name
}
func (t *GetIntegrationByID_Integration) GetOwnerID() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.OwnerID
}
func (t *GetIntegrationByID_Integration) GetOwner() *GetIntegrationByID_Integration_Owner {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Owner
}
func (t *GetIntegrationByID_Integration) GetSecrets() []*GetIntegrationByID_Integration_Secrets {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Secrets
}
func (t *GetIntegrationByID_Integration) GetOauth2tokens() []*GetIntegrationByID_Integration_Oauth2tokens {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Oauth2tokens
}
func (t *GetIntegrationByID_Integration) GetEvents() []*GetIntegrationByID_Integration_Events {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Events
}
func (t *GetIntegrationByID_Integration) GetWebhooks() []*GetIntegrationByID_Integration_Webhooks {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.Webhooks
}
func (t *GetIntegrationByID_Integration) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.CreatedAt
}
func (t *GetIntegrationByID_Integration) GetCreatedBy() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.CreatedBy
}
func (t *GetIntegrationByID_Integration) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.UpdatedAt
}
func (t *GetIntegrationByID_Integration) GetUpdatedBy() *string {
	if t == nil {
		t = &GetIntegrationByID_Integration{}
	}
	return t.UpdatedBy
}

type GetIntegrations_Integrations_Edges_Node_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Owner{}
	}
	return t.ID
}

type GetIntegrations_Integrations_Edges_Node_Secrets struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Secrets) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Secrets{}
	}
	return t.ID
}

type GetIntegrations_Integrations_Edges_Node_Oauth2tokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Oauth2tokens) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Oauth2tokens{}
	}
	return t.ID
}

type GetIntegrations_Integrations_Edges_Node_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Events) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Events{}
	}
	return t.ID
}

type GetIntegrations_Integrations_Edges_Node_Webhooks struct {
	ID             string "json:\"id\" graphql:\"id\""
	DestinationURL string "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool   "json:\"enabled\" graphql:\"enabled\""
}

func (t *GetIntegrations_Integrations_Edges_Node_Webhooks) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Webhooks{}
	}
	return t.ID
}
func (t *GetIntegrations_Integrations_Edges_Node_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Webhooks{}
	}
	return t.DestinationURL
}
func (t *GetIntegrations_Integrations_Edges_Node_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node_Webhooks{}
	}
	return t.Enabled
}

type GetIntegrations_Integrations_Edges_Node struct {
	Description  *string                                                 "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                                  "json:\"id\" graphql:\"id\""
	Kind         *string                                                 "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                  "json:\"name\" graphql:\"name\""
	OwnerID      *string                                                 "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Owner        *GetIntegrations_Integrations_Edges_Node_Owner          "json:\"owner,omitempty\" graphql:\"owner\""
	Secrets      []*GetIntegrations_Integrations_Edges_Node_Secrets      "json:\"secrets,omitempty\" graphql:\"secrets\""
	Oauth2tokens []*GetIntegrations_Integrations_Edges_Node_Oauth2tokens "json:\"oauth2tokens,omitempty\" graphql:\"oauth2tokens\""
	Events       []*GetIntegrations_Integrations_Edges_Node_Events       "json:\"events,omitempty\" graphql:\"events\""
	Webhooks     []*GetIntegrations_Integrations_Edges_Node_Webhooks     "json:\"webhooks,omitempty\" graphql:\"webhooks\""
	CreatedAt    *time.Time                                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                                                 "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetIntegrations_Integrations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Description
}
func (t *GetIntegrations_Integrations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.ID
}
func (t *GetIntegrations_Integrations_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Kind
}
func (t *GetIntegrations_Integrations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Name
}
func (t *GetIntegrations_Integrations_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetIntegrations_Integrations_Edges_Node) GetOwner() *GetIntegrations_Integrations_Edges_Node_Owner {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Owner
}
func (t *GetIntegrations_Integrations_Edges_Node) GetSecrets() []*GetIntegrations_Integrations_Edges_Node_Secrets {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Secrets
}
func (t *GetIntegrations_Integrations_Edges_Node) GetOauth2tokens() []*GetIntegrations_Integrations_Edges_Node_Oauth2tokens {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Oauth2tokens
}
func (t *GetIntegrations_Integrations_Edges_Node) GetEvents() []*GetIntegrations_Integrations_Edges_Node_Events {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Events
}
func (t *GetIntegrations_Integrations_Edges_Node) GetWebhooks() []*GetIntegrations_Integrations_Edges_Node_Webhooks {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.Webhooks
}
func (t *GetIntegrations_Integrations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetIntegrations_Integrations_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetIntegrations_Integrations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetIntegrations_Integrations_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetIntegrations_Integrations_Edges struct {
	Node *GetIntegrations_Integrations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetIntegrations_Integrations_Edges) GetNode() *GetIntegrations_Integrations_Edges_Node {
	if t == nil {
		t = &GetIntegrations_Integrations_Edges{}
	}
	return t.Node
}

type GetIntegrations_Integrations struct {
	Edges []*GetIntegrations_Integrations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetIntegrations_Integrations) GetEdges() []*GetIntegrations_Integrations_Edges {
	if t == nil {
		t = &GetIntegrations_Integrations{}
	}
	return t.Edges
}

type UpdateIntegration_UpdateIntegration_Integration_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Owner) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Owner{}
	}
	return t.ID
}

type UpdateIntegration_UpdateIntegration_Integration_Secrets struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Secrets) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Secrets{}
	}
	return t.ID
}

type UpdateIntegration_UpdateIntegration_Integration_Oauth2tokens struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Oauth2tokens) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Oauth2tokens{}
	}
	return t.ID
}

type UpdateIntegration_UpdateIntegration_Integration_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Events) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Events{}
	}
	return t.ID
}

type UpdateIntegration_UpdateIntegration_Integration_Webhooks struct {
	ID             string "json:\"id\" graphql:\"id\""
	DestinationURL string "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool   "json:\"enabled\" graphql:\"enabled\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration_Webhooks) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Webhooks{}
	}
	return t.ID
}
func (t *UpdateIntegration_UpdateIntegration_Integration_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Webhooks{}
	}
	return t.DestinationURL
}
func (t *UpdateIntegration_UpdateIntegration_Integration_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration_Webhooks{}
	}
	return t.Enabled
}

type UpdateIntegration_UpdateIntegration_Integration struct {
	Description  *string                                                         "json:\"description,omitempty\" graphql:\"description\""
	ID           string                                                          "json:\"id\" graphql:\"id\""
	Kind         *string                                                         "json:\"kind,omitempty\" graphql:\"kind\""
	Name         string                                                          "json:\"name\" graphql:\"name\""
	OwnerID      *string                                                         "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Owner        *UpdateIntegration_UpdateIntegration_Integration_Owner          "json:\"owner,omitempty\" graphql:\"owner\""
	Secrets      []*UpdateIntegration_UpdateIntegration_Integration_Secrets      "json:\"secrets,omitempty\" graphql:\"secrets\""
	Oauth2tokens []*UpdateIntegration_UpdateIntegration_Integration_Oauth2tokens "json:\"oauth2tokens,omitempty\" graphql:\"oauth2tokens\""
	Events       []*UpdateIntegration_UpdateIntegration_Integration_Events       "json:\"events,omitempty\" graphql:\"events\""
	Webhooks     []*UpdateIntegration_UpdateIntegration_Integration_Webhooks     "json:\"webhooks,omitempty\" graphql:\"webhooks\""
}

func (t *UpdateIntegration_UpdateIntegration_Integration) GetDescription() *string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Description
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetID() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.ID
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetKind() *string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Kind
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetName() string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Name
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetOwnerID() *string {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.OwnerID
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetOwner() *UpdateIntegration_UpdateIntegration_Integration_Owner {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Owner
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetSecrets() []*UpdateIntegration_UpdateIntegration_Integration_Secrets {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Secrets
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetOauth2tokens() []*UpdateIntegration_UpdateIntegration_Integration_Oauth2tokens {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Oauth2tokens
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetEvents() []*UpdateIntegration_UpdateIntegration_Integration_Events {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Events
}
func (t *UpdateIntegration_UpdateIntegration_Integration) GetWebhooks() []*UpdateIntegration_UpdateIntegration_Integration_Webhooks {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration_Integration{}
	}
	return t.Webhooks
}

type UpdateIntegration_UpdateIntegration struct {
	Integration UpdateIntegration_UpdateIntegration_Integration "json:\"integration\" graphql:\"integration\""
}

func (t *UpdateIntegration_UpdateIntegration) GetIntegration() *UpdateIntegration_UpdateIntegration_Integration {
	if t == nil {
		t = &UpdateIntegration_UpdateIntegration{}
	}
	return &t.Integration
}

type GetAllIntegrationHistories_IntegrationHistories_Edges_Node struct {
	CreatedAt   *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string           "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID          string            "json:\"id\" graphql:\"id\""
	Kind        *string           "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string            "json:\"name\" graphql:\"name\""
	Operation   enthistory.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string           "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string           "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllIntegrationHistories_IntegrationHistories_Edges struct {
	Node *GetAllIntegrationHistories_IntegrationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllIntegrationHistories_IntegrationHistories_Edges) GetNode() *GetAllIntegrationHistories_IntegrationHistories_Edges_Node {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories_Edges{}
	}
	return t.Node
}

type GetAllIntegrationHistories_IntegrationHistories struct {
	Edges []*GetAllIntegrationHistories_IntegrationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllIntegrationHistories_IntegrationHistories) GetEdges() []*GetAllIntegrationHistories_IntegrationHistories_Edges {
	if t == nil {
		t = &GetAllIntegrationHistories_IntegrationHistories{}
	}
	return t.Edges
}

type GetIntegrationHistories_IntegrationHistories_Edges_Node struct {
	CreatedAt   *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string           "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID          string            "json:\"id\" graphql:\"id\""
	Kind        *string           "json:\"kind,omitempty\" graphql:\"kind\""
	Name        string            "json:\"name\" graphql:\"name\""
	Operation   enthistory.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID     *string           "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref         *string           "json:\"ref,omitempty\" graphql:\"ref\""
	Tags        []string          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt   *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetKind() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Kind
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetIntegrationHistories_IntegrationHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetIntegrationHistories_IntegrationHistories_Edges struct {
	Node *GetIntegrationHistories_IntegrationHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetIntegrationHistories_IntegrationHistories_Edges) GetNode() *GetIntegrationHistories_IntegrationHistories_Edges_Node {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories_Edges{}
	}
	return t.Node
}

type GetIntegrationHistories_IntegrationHistories struct {
	Edges []*GetIntegrationHistories_IntegrationHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetIntegrationHistories_IntegrationHistories) GetEdges() []*GetIntegrationHistories_IntegrationHistories_Edges {
	if t == nil {
		t = &GetIntegrationHistories_IntegrationHistories{}
	}
	return t.Edges
}

type CreateBulkCSVInvite_CreateBulkCSVInvite_Invites struct {
	Expires      *time.Time         "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string             "json:\"id\" graphql:\"id\""
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
}

func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetExpires() *time.Time {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.Expires
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetID() string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.ID
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetRecipient() string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.Recipient
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetRequestorID() *string {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.RequestorID
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return &t.Role
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetSendAttempts() int64 {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return t.SendAttempts
}
func (t *CreateBulkCSVInvite_CreateBulkCSVInvite_Invites) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite_Invites{}
	}
	return &t.Status
}

type CreateBulkCSVInvite_CreateBulkCSVInvite struct {
	Invites []*CreateBulkCSVInvite_CreateBulkCSVInvite_Invites "json:\"invites,omitempty\" graphql:\"invites\""
}

func (t *CreateBulkCSVInvite_CreateBulkCSVInvite) GetInvites() []*CreateBulkCSVInvite_CreateBulkCSVInvite_Invites {
	if t == nil {
		t = &CreateBulkCSVInvite_CreateBulkCSVInvite{}
	}
	return t.Invites
}

type CreateBulkInvite_CreateBulkInvite_Invites struct {
	Expires      *time.Time         "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string             "json:\"id\" graphql:\"id\""
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
}

func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetExpires() *time.Time {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.Expires
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetID() string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.ID
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetRecipient() string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.Recipient
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetRequestorID() *string {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.RequestorID
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return &t.Role
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetSendAttempts() int64 {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return t.SendAttempts
}
func (t *CreateBulkInvite_CreateBulkInvite_Invites) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite_Invites{}
	}
	return &t.Status
}

type CreateBulkInvite_CreateBulkInvite struct {
	Invites []*CreateBulkInvite_CreateBulkInvite_Invites "json:\"invites,omitempty\" graphql:\"invites\""
}

func (t *CreateBulkInvite_CreateBulkInvite) GetInvites() []*CreateBulkInvite_CreateBulkInvite_Invites {
	if t == nil {
		t = &CreateBulkInvite_CreateBulkInvite{}
	}
	return t.Invites
}

type CreateInvite_CreateInvite_Invite_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateInvite_CreateInvite_Invite_Owner) GetID() string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite_Owner{}
	}
	return t.ID
}

type CreateInvite_CreateInvite_Invite struct {
	Expires      *time.Time                              "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string                                  "json:\"id\" graphql:\"id\""
	Recipient    string                                  "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string                                 "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role                              "json:\"role\" graphql:\"role\""
	SendAttempts int64                                   "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus                      "json:\"status\" graphql:\"status\""
	Owner        *CreateInvite_CreateInvite_Invite_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *CreateInvite_CreateInvite_Invite) GetExpires() *time.Time {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.Expires
}
func (t *CreateInvite_CreateInvite_Invite) GetID() string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.ID
}
func (t *CreateInvite_CreateInvite_Invite) GetRecipient() string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.Recipient
}
func (t *CreateInvite_CreateInvite_Invite) GetRequestorID() *string {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.RequestorID
}
func (t *CreateInvite_CreateInvite_Invite) GetRole() *enums.Role {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return &t.Role
}
func (t *CreateInvite_CreateInvite_Invite) GetSendAttempts() int64 {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.SendAttempts
}
func (t *CreateInvite_CreateInvite_Invite) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return &t.Status
}
func (t *CreateInvite_CreateInvite_Invite) GetOwner() *CreateInvite_CreateInvite_Invite_Owner {
	if t == nil {
		t = &CreateInvite_CreateInvite_Invite{}
	}
	return t.Owner
}

type CreateInvite_CreateInvite struct {
	Invite CreateInvite_CreateInvite_Invite "json:\"invite\" graphql:\"invite\""
}

func (t *CreateInvite_CreateInvite) GetInvite() *CreateInvite_CreateInvite_Invite {
	if t == nil {
		t = &CreateInvite_CreateInvite{}
	}
	return &t.Invite
}

type DeleteInvite_DeleteInvite struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteInvite_DeleteInvite) GetDeletedID() string {
	if t == nil {
		t = &DeleteInvite_DeleteInvite{}
	}
	return t.DeletedID
}

type GetInviteByID_Invite_Owner struct {
	DisplayName string "json:\"displayName\" graphql:\"displayName\""
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
}

func (t *GetInviteByID_Invite_Owner) GetDisplayName() string {
	if t == nil {
		t = &GetInviteByID_Invite_Owner{}
	}
	return t.DisplayName
}
func (t *GetInviteByID_Invite_Owner) GetID() string {
	if t == nil {
		t = &GetInviteByID_Invite_Owner{}
	}
	return t.ID
}
func (t *GetInviteByID_Invite_Owner) GetName() string {
	if t == nil {
		t = &GetInviteByID_Invite_Owner{}
	}
	return t.Name
}

type GetInviteByID_Invite struct {
	Expires      *time.Time                  "json:\"expires,omitempty\" graphql:\"expires\""
	ID           string                      "json:\"id\" graphql:\"id\""
	Recipient    string                      "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string                     "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role                  "json:\"role\" graphql:\"role\""
	SendAttempts int64                       "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus          "json:\"status\" graphql:\"status\""
	Owner        *GetInviteByID_Invite_Owner "json:\"owner,omitempty\" graphql:\"owner\""
	CreatedAt    *time.Time                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt    *time.Time                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetInviteByID_Invite) GetExpires() *time.Time {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.Expires
}
func (t *GetInviteByID_Invite) GetID() string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.ID
}
func (t *GetInviteByID_Invite) GetRecipient() string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.Recipient
}
func (t *GetInviteByID_Invite) GetRequestorID() *string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.RequestorID
}
func (t *GetInviteByID_Invite) GetRole() *enums.Role {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return &t.Role
}
func (t *GetInviteByID_Invite) GetSendAttempts() int64 {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.SendAttempts
}
func (t *GetInviteByID_Invite) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return &t.Status
}
func (t *GetInviteByID_Invite) GetOwner() *GetInviteByID_Invite_Owner {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.Owner
}
func (t *GetInviteByID_Invite) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.CreatedAt
}
func (t *GetInviteByID_Invite) GetCreatedBy() *string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.CreatedBy
}
func (t *GetInviteByID_Invite) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.UpdatedAt
}
func (t *GetInviteByID_Invite) GetUpdatedBy() *string {
	if t == nil {
		t = &GetInviteByID_Invite{}
	}
	return t.UpdatedBy
}

type GetAllInvites_Invites_Edges_Node struct {
	ID        string             "json:\"id\" graphql:\"id\""
	Recipient string             "json:\"recipient\" graphql:\"recipient\""
	Role      enums.Role         "json:\"role\" graphql:\"role\""
	Status    enums.InviteStatus "json:\"status\" graphql:\"status\""
}

func (t *GetAllInvites_Invites_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllInvites_Invites_Edges_Node) GetRecipient() string {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return t.Recipient
}
func (t *GetAllInvites_Invites_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllInvites_Invites_Edges_Node) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &GetAllInvites_Invites_Edges_Node{}
	}
	return &t.Status
}

type GetAllInvites_Invites_Edges struct {
	Node *GetAllInvites_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllInvites_Invites_Edges) GetNode() *GetAllInvites_Invites_Edges_Node {
	if t == nil {
		t = &GetAllInvites_Invites_Edges{}
	}
	return t.Node
}

type GetAllInvites_Invites struct {
	Edges []*GetAllInvites_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllInvites_Invites) GetEdges() []*GetAllInvites_Invites_Edges {
	if t == nil {
		t = &GetAllInvites_Invites{}
	}
	return t.Edges
}

type InvitesByOrgID_Invites_Edges_Node_Owner_Invites struct {
	Recipient    string             "json:\"recipient\" graphql:\"recipient\""
	RequestorID  *string            "json:\"requestorID,omitempty\" graphql:\"requestorID\""
	Role         enums.Role         "json:\"role\" graphql:\"role\""
	SendAttempts int64              "json:\"sendAttempts\" graphql:\"sendAttempts\""
	Status       enums.InviteStatus "json:\"status\" graphql:\"status\""
}

func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites) GetRecipient() string {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites{}
	}
	return t.Recipient
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites) GetRequestorID() *string {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites{}
	}
	return t.RequestorID
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites) GetRole() *enums.Role {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites{}
	}
	return &t.Role
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites) GetSendAttempts() int64 {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites{}
	}
	return t.SendAttempts
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner_Invites) GetStatus() *enums.InviteStatus {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner_Invites{}
	}
	return &t.Status
}

type InvitesByOrgID_Invites_Edges_Node_Owner struct {
	ID      string                                             "json:\"id\" graphql:\"id\""
	Invites []*InvitesByOrgID_Invites_Edges_Node_Owner_Invites "json:\"invites,omitempty\" graphql:\"invites\""
}

func (t *InvitesByOrgID_Invites_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner{}
	}
	return t.ID
}
func (t *InvitesByOrgID_Invites_Edges_Node_Owner) GetInvites() []*InvitesByOrgID_Invites_Edges_Node_Owner_Invites {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node_Owner{}
	}
	return t.Invites
}

type InvitesByOrgID_Invites_Edges_Node struct {
	Owner *InvitesByOrgID_Invites_Edges_Node_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *InvitesByOrgID_Invites_Edges_Node) GetOwner() *InvitesByOrgID_Invites_Edges_Node_Owner {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges_Node{}
	}
	return t.Owner
}

type InvitesByOrgID_Invites_Edges struct {
	Node *InvitesByOrgID_Invites_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *InvitesByOrgID_Invites_Edges) GetNode() *InvitesByOrgID_Invites_Edges_Node {
	if t == nil {
		t = &InvitesByOrgID_Invites_Edges{}
	}
	return t.Node
}

type InvitesByOrgID_Invites struct {
	Edges []*InvitesByOrgID_Invites_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *InvitesByOrgID_Invites) GetEdges() []*InvitesByOrgID_Invites_Edges {
	if t == nil {
		t = &InvitesByOrgID_Invites{}
	}
	return t.Edges
}

type GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node struct {
	AuthStyle    string            "json:\"authStyle\" graphql:\"authStyle\""
	AuthURL      string            "json:\"authURL\" graphql:\"authURL\""
	ClientID     string            "json:\"clientID\" graphql:\"clientID\""
	ClientSecret string            "json:\"clientSecret\" graphql:\"clientSecret\""
	CreatedAt    *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime  time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID           string            "json:\"id\" graphql:\"id\""
	InfoURL      string            "json:\"infoURL\" graphql:\"infoURL\""
	Name         string            "json:\"name\" graphql:\"name\""
	Operation    enthistory.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID      *string           "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RedirectURL  string            "json:\"redirectURL\" graphql:\"redirectURL\""
	Ref          *string           "json:\"ref,omitempty\" graphql:\"ref\""
	Scopes       string            "json:\"scopes\" graphql:\"scopes\""
	Tags         []string          "json:\"tags,omitempty\" graphql:\"tags\""
	TokenURL     string            "json:\"tokenURL\" graphql:\"tokenURL\""
	UpdatedAt    *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetAuthStyle() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.AuthStyle
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetAuthURL() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.AuthURL
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetClientID() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.ClientID
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetClientSecret() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.ClientSecret
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetInfoURL() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.InfoURL
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetRedirectURL() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.RedirectURL
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetScopes() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetTokenURL() string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.TokenURL
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOauthProviderHistories_OauthProviderHistories_Edges struct {
	Node *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOauthProviderHistories_OauthProviderHistories_Edges) GetNode() *GetAllOauthProviderHistories_OauthProviderHistories_Edges_Node {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories_Edges{}
	}
	return t.Node
}

type GetAllOauthProviderHistories_OauthProviderHistories struct {
	Edges []*GetAllOauthProviderHistories_OauthProviderHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOauthProviderHistories_OauthProviderHistories) GetEdges() []*GetAllOauthProviderHistories_OauthProviderHistories_Edges {
	if t == nil {
		t = &GetAllOauthProviderHistories_OauthProviderHistories{}
	}
	return t.Edges
}

type GetOauthProviderHistories_OauthProviderHistories_Edges_Node struct {
	AuthStyle    string            "json:\"authStyle\" graphql:\"authStyle\""
	AuthURL      string            "json:\"authURL\" graphql:\"authURL\""
	ClientID     string            "json:\"clientID\" graphql:\"clientID\""
	ClientSecret string            "json:\"clientSecret\" graphql:\"clientSecret\""
	CreatedAt    *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime  time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID           string            "json:\"id\" graphql:\"id\""
	InfoURL      string            "json:\"infoURL\" graphql:\"infoURL\""
	Name         string            "json:\"name\" graphql:\"name\""
	Operation    enthistory.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID      *string           "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	RedirectURL  string            "json:\"redirectURL\" graphql:\"redirectURL\""
	Ref          *string           "json:\"ref,omitempty\" graphql:\"ref\""
	Scopes       string            "json:\"scopes\" graphql:\"scopes\""
	Tags         []string          "json:\"tags,omitempty\" graphql:\"tags\""
	TokenURL     string            "json:\"tokenURL\" graphql:\"tokenURL\""
	UpdatedAt    *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetAuthStyle() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.AuthStyle
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetAuthURL() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.AuthURL
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetClientID() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.ClientID
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetClientSecret() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.ClientSecret
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetInfoURL() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.InfoURL
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetRedirectURL() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.RedirectURL
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetScopes() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetTokenURL() string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.TokenURL
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOauthProviderHistories_OauthProviderHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOauthProviderHistories_OauthProviderHistories_Edges struct {
	Node *GetOauthProviderHistories_OauthProviderHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOauthProviderHistories_OauthProviderHistories_Edges) GetNode() *GetOauthProviderHistories_OauthProviderHistories_Edges_Node {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories_Edges{}
	}
	return t.Node
}

type GetOauthProviderHistories_OauthProviderHistories struct {
	Edges []*GetOauthProviderHistories_OauthProviderHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOauthProviderHistories_OauthProviderHistories) GetEdges() []*GetOauthProviderHistories_OauthProviderHistories_Edges {
	if t == nil {
		t = &GetOauthProviderHistories_OauthProviderHistories{}
	}
	return t.Edges
}

type CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Integration) GetID() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Integration{}
	}
	return t.ID
}

type CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Events) GetID() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Events{}
	}
	return t.ID
}

type CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens struct {
	ClaimsEmail             string                                                                                 "json:\"claimsEmail\" graphql:\"claimsEmail\""
	ClaimsEmailVerified     bool                                                                                   "json:\"claimsEmailVerified\" graphql:\"claimsEmailVerified\""
	ClaimsGroups            []string                                                                               "json:\"claimsGroups,omitempty\" graphql:\"claimsGroups\""
	ClaimsPreferredUsername string                                                                                 "json:\"claimsPreferredUsername\" graphql:\"claimsPreferredUsername\""
	ClaimsUserID            string                                                                                 "json:\"claimsUserID\" graphql:\"claimsUserID\""
	ClaimsUsername          string                                                                                 "json:\"claimsUsername\" graphql:\"claimsUsername\""
	ClientID                string                                                                                 "json:\"clientID\" graphql:\"clientID\""
	ConnectorData           []string                                                                               "json:\"connectorData,omitempty\" graphql:\"connectorData\""
	ConnectorID             string                                                                                 "json:\"connectorID\" graphql:\"connectorID\""
	ID                      string                                                                                 "json:\"id\" graphql:\"id\""
	LastUsed                time.Time                                                                              "json:\"lastUsed\" graphql:\"lastUsed\""
	Nonce                   string                                                                                 "json:\"nonce\" graphql:\"nonce\""
	Scopes                  []string                                                                               "json:\"scopes,omitempty\" graphql:\"scopes\""
	Integration             []*CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Integration "json:\"integration,omitempty\" graphql:\"integration\""
	Events                  []*CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Events      "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetClaimsEmail() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsEmail
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetClaimsEmailVerified() bool {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsEmailVerified
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetClaimsGroups() []string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsGroups
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetClaimsPreferredUsername() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsPreferredUsername
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetClaimsUserID() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsUserID
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetClaimsUsername() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsUsername
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetClientID() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClientID
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetConnectorData() []string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ConnectorData
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetConnectorID() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ConnectorID
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetID() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ID
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetLastUsed() *time.Time {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return &t.LastUsed
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetNonce() string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Nonce
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetScopes() []string {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Scopes
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetIntegration() []*CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Integration {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Integration
}
func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens) GetEvents() []*CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens_Events {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Events
}

type CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken struct {
	OhAuthTooTokens []*CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens "json:\"ohAuthTooTokens,omitempty\" graphql:\"ohAuthTooTokens\""
}

func (t *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken) GetOhAuthTooTokens() []*CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken_OhAuthTooTokens {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken{}
	}
	return t.OhAuthTooTokens
}

type CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Integration) GetID() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Integration{}
	}
	return t.ID
}

type CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Events) GetID() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Events{}
	}
	return t.ID
}

type CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens struct {
	ClaimsEmail             string                                                                           "json:\"claimsEmail\" graphql:\"claimsEmail\""
	ClaimsEmailVerified     bool                                                                             "json:\"claimsEmailVerified\" graphql:\"claimsEmailVerified\""
	ClaimsGroups            []string                                                                         "json:\"claimsGroups,omitempty\" graphql:\"claimsGroups\""
	ClaimsPreferredUsername string                                                                           "json:\"claimsPreferredUsername\" graphql:\"claimsPreferredUsername\""
	ClaimsUserID            string                                                                           "json:\"claimsUserID\" graphql:\"claimsUserID\""
	ClaimsUsername          string                                                                           "json:\"claimsUsername\" graphql:\"claimsUsername\""
	ClientID                string                                                                           "json:\"clientID\" graphql:\"clientID\""
	ConnectorData           []string                                                                         "json:\"connectorData,omitempty\" graphql:\"connectorData\""
	ConnectorID             string                                                                           "json:\"connectorID\" graphql:\"connectorID\""
	ID                      string                                                                           "json:\"id\" graphql:\"id\""
	LastUsed                time.Time                                                                        "json:\"lastUsed\" graphql:\"lastUsed\""
	Nonce                   string                                                                           "json:\"nonce\" graphql:\"nonce\""
	Scopes                  []string                                                                         "json:\"scopes,omitempty\" graphql:\"scopes\""
	Integration             []*CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Integration "json:\"integration,omitempty\" graphql:\"integration\""
	Events                  []*CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Events      "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetClaimsEmail() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsEmail
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetClaimsEmailVerified() bool {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsEmailVerified
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetClaimsGroups() []string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsGroups
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetClaimsPreferredUsername() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsPreferredUsername
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetClaimsUserID() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsUserID
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetClaimsUsername() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClaimsUsername
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetClientID() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ClientID
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetConnectorData() []string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ConnectorData
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetConnectorID() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ConnectorID
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetID() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.ID
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetLastUsed() *time.Time {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return &t.LastUsed
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetNonce() string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Nonce
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetScopes() []string {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Scopes
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetIntegration() []*CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Integration {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Integration
}
func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens) GetEvents() []*CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens_Events {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens{}
	}
	return t.Events
}

type CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken struct {
	OhAuthTooTokens []*CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens "json:\"ohAuthTooTokens,omitempty\" graphql:\"ohAuthTooTokens\""
}

func (t *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken) GetOhAuthTooTokens() []*CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken_OhAuthTooTokens {
	if t == nil {
		t = &CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken{}
	}
	return t.OhAuthTooTokens
}

type CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Integration) GetID() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Integration{}
	}
	return t.ID
}

type CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Events) GetID() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Events{}
	}
	return t.ID
}

type CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken struct {
	ClaimsEmail             string                                                                  "json:\"claimsEmail\" graphql:\"claimsEmail\""
	ClaimsEmailVerified     bool                                                                    "json:\"claimsEmailVerified\" graphql:\"claimsEmailVerified\""
	ClaimsGroups            []string                                                                "json:\"claimsGroups,omitempty\" graphql:\"claimsGroups\""
	ClaimsPreferredUsername string                                                                  "json:\"claimsPreferredUsername\" graphql:\"claimsPreferredUsername\""
	ClaimsUserID            string                                                                  "json:\"claimsUserID\" graphql:\"claimsUserID\""
	ClaimsUsername          string                                                                  "json:\"claimsUsername\" graphql:\"claimsUsername\""
	ClientID                string                                                                  "json:\"clientID\" graphql:\"clientID\""
	ConnectorData           []string                                                                "json:\"connectorData,omitempty\" graphql:\"connectorData\""
	ConnectorID             string                                                                  "json:\"connectorID\" graphql:\"connectorID\""
	ID                      string                                                                  "json:\"id\" graphql:\"id\""
	LastUsed                time.Time                                                               "json:\"lastUsed\" graphql:\"lastUsed\""
	Nonce                   string                                                                  "json:\"nonce\" graphql:\"nonce\""
	Scopes                  []string                                                                "json:\"scopes,omitempty\" graphql:\"scopes\""
	Integration             []*CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Integration "json:\"integration,omitempty\" graphql:\"integration\""
	Events                  []*CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Events      "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetClaimsEmail() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsEmail
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetClaimsEmailVerified() bool {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsEmailVerified
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetClaimsGroups() []string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsGroups
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetClaimsPreferredUsername() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsPreferredUsername
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetClaimsUserID() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsUserID
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetClaimsUsername() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsUsername
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetClientID() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClientID
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetConnectorData() []string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ConnectorData
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetConnectorID() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ConnectorID
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetID() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ID
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetLastUsed() *time.Time {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return &t.LastUsed
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetNonce() string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Nonce
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetScopes() []string {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Scopes
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetIntegration() []*CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Integration {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Integration
}
func (t *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken) GetEvents() []*CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken_Events {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Events
}

type CreateOhAuthTooToken_CreateOhAuthTooToken struct {
	OhAuthTooToken CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken "json:\"ohAuthTooToken\" graphql:\"ohAuthTooToken\""
}

func (t *CreateOhAuthTooToken_CreateOhAuthTooToken) GetOhAuthTooToken() *CreateOhAuthTooToken_CreateOhAuthTooToken_OhAuthTooToken {
	if t == nil {
		t = &CreateOhAuthTooToken_CreateOhAuthTooToken{}
	}
	return &t.OhAuthTooToken
}

type DeleteOhAuthTooToken_DeleteOhAuthTooToken struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteOhAuthTooToken_DeleteOhAuthTooToken) GetDeletedID() string {
	if t == nil {
		t = &DeleteOhAuthTooToken_DeleteOhAuthTooToken{}
	}
	return t.DeletedID
}

type GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Integration) GetID() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Integration{}
	}
	return t.ID
}

type GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Events) GetID() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Events{}
	}
	return t.ID
}

type GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node struct {
	ClaimsEmail             string                                                       "json:\"claimsEmail\" graphql:\"claimsEmail\""
	ClaimsEmailVerified     bool                                                         "json:\"claimsEmailVerified\" graphql:\"claimsEmailVerified\""
	ClaimsGroups            []string                                                     "json:\"claimsGroups,omitempty\" graphql:\"claimsGroups\""
	ClaimsPreferredUsername string                                                       "json:\"claimsPreferredUsername\" graphql:\"claimsPreferredUsername\""
	ClaimsUserID            string                                                       "json:\"claimsUserID\" graphql:\"claimsUserID\""
	ClaimsUsername          string                                                       "json:\"claimsUsername\" graphql:\"claimsUsername\""
	ClientID                string                                                       "json:\"clientID\" graphql:\"clientID\""
	ConnectorData           []string                                                     "json:\"connectorData,omitempty\" graphql:\"connectorData\""
	ConnectorID             string                                                       "json:\"connectorID\" graphql:\"connectorID\""
	ID                      string                                                       "json:\"id\" graphql:\"id\""
	LastUsed                time.Time                                                    "json:\"lastUsed\" graphql:\"lastUsed\""
	Nonce                   string                                                       "json:\"nonce\" graphql:\"nonce\""
	Scopes                  []string                                                     "json:\"scopes,omitempty\" graphql:\"scopes\""
	Integration             []*GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Integration "json:\"integration,omitempty\" graphql:\"integration\""
	Events                  []*GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Events      "json:\"events,omitempty\" graphql:\"events\""
}

func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetClaimsEmail() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ClaimsEmail
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetClaimsEmailVerified() bool {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ClaimsEmailVerified
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetClaimsGroups() []string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ClaimsGroups
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetClaimsPreferredUsername() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ClaimsPreferredUsername
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetClaimsUserID() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ClaimsUserID
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetClaimsUsername() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ClaimsUsername
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetClientID() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ClientID
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetConnectorData() []string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ConnectorData
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetConnectorID() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ConnectorID
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetLastUsed() *time.Time {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return &t.LastUsed
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetNonce() string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.Nonce
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetIntegration() []*GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Integration {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.Integration
}
func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node) GetEvents() []*GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node_Events {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node{}
	}
	return t.Events
}

type GetOhAuthTooTokens_OhAuthTooTokens_Edges struct {
	Node *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOhAuthTooTokens_OhAuthTooTokens_Edges) GetNode() *GetOhAuthTooTokens_OhAuthTooTokens_Edges_Node {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens_Edges{}
	}
	return t.Node
}

type GetOhAuthTooTokens_OhAuthTooTokens struct {
	Edges []*GetOhAuthTooTokens_OhAuthTooTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOhAuthTooTokens_OhAuthTooTokens) GetEdges() []*GetOhAuthTooTokens_OhAuthTooTokens_Edges {
	if t == nil {
		t = &GetOhAuthTooTokens_OhAuthTooTokens{}
	}
	return t.Edges
}

type UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Integration struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Integration) GetID() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Integration{}
	}
	return t.ID
}

type UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Events) GetID() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Events{}
	}
	return t.ID
}

type UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken struct {
	ClaimsEmail             string                                                                  "json:\"claimsEmail\" graphql:\"claimsEmail\""
	ClaimsEmailVerified     bool                                                                    "json:\"claimsEmailVerified\" graphql:\"claimsEmailVerified\""
	ClaimsGroups            []string                                                                "json:\"claimsGroups,omitempty\" graphql:\"claimsGroups\""
	ClaimsPreferredUsername string                                                                  "json:\"claimsPreferredUsername\" graphql:\"claimsPreferredUsername\""
	ClaimsUserID            string                                                                  "json:\"claimsUserID\" graphql:\"claimsUserID\""
	ClaimsUsername          string                                                                  "json:\"claimsUsername\" graphql:\"claimsUsername\""
	ClientID                string                                                                  "json:\"clientID\" graphql:\"clientID\""
	ConnectorData           []string                                                                "json:\"connectorData,omitempty\" graphql:\"connectorData\""
	ConnectorID             string                                                                  "json:\"connectorID\" graphql:\"connectorID\""
	ID                      string                                                                  "json:\"id\" graphql:\"id\""
	LastUsed                time.Time                                                               "json:\"lastUsed\" graphql:\"lastUsed\""
	Nonce                   string                                                                  "json:\"nonce\" graphql:\"nonce\""
	Scopes                  []string                                                                "json:\"scopes,omitempty\" graphql:\"scopes\""
	Integration             []*UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Integration "json:\"integration,omitempty\" graphql:\"integration\""
	Events                  []*UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Events      "json:\"events,omitempty\" graphql:\"events\""
}

func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetClaimsEmail() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsEmail
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetClaimsEmailVerified() bool {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsEmailVerified
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetClaimsGroups() []string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsGroups
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetClaimsPreferredUsername() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsPreferredUsername
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetClaimsUserID() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsUserID
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetClaimsUsername() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClaimsUsername
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetClientID() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ClientID
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetConnectorData() []string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ConnectorData
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetConnectorID() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ConnectorID
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetID() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.ID
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetLastUsed() *time.Time {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return &t.LastUsed
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetNonce() string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Nonce
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetScopes() []string {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Scopes
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetIntegration() []*UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Integration {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Integration
}
func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken) GetEvents() []*UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken_Events {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken{}
	}
	return t.Events
}

type UpdateOhAuthTooToken_UpdateOhAuthTooToken struct {
	OhAuthTooToken UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken "json:\"ohAuthTooToken\" graphql:\"ohAuthTooToken\""
}

func (t *UpdateOhAuthTooToken_UpdateOhAuthTooToken) GetOhAuthTooToken() *UpdateOhAuthTooToken_UpdateOhAuthTooToken_OhAuthTooToken {
	if t == nil {
		t = &UpdateOhAuthTooToken_UpdateOhAuthTooToken{}
	}
	return &t.OhAuthTooToken
}

type CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations struct {
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName string   "json:\"displayName\" graphql:\"displayName\""
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	PersonalOrg *bool    "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations) GetID() string {
	if t == nil {
		t = &CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations{}
	}
	return t.ID
}
func (t *CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations) GetName() string {
	if t == nil {
		t = &CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations{}
	}
	return t.Name
}
func (t *CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations{}
	}
	return t.DisplayName
}
func (t *CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations{}
	}
	return t.Description
}
func (t *CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations) GetPersonalOrg() *bool {
	if t == nil {
		t = &CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations{}
	}
	return t.PersonalOrg
}
func (t *CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations) GetTags() []string {
	if t == nil {
		t = &CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations{}
	}
	return t.Tags
}

type CreateBulkCSVOrganization_CreateBulkCSVOrganization struct {
	Organizations []*CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *CreateBulkCSVOrganization_CreateBulkCSVOrganization) GetOrganizations() []*CreateBulkCSVOrganization_CreateBulkCSVOrganization_Organizations {
	if t == nil {
		t = &CreateBulkCSVOrganization_CreateBulkCSVOrganization{}
	}
	return t.Organizations
}

type CreateBulkOrganization_CreateBulkOrganization_Organizations struct {
	ID          string   "json:\"id\" graphql:\"id\""
	Name        string   "json:\"name\" graphql:\"name\""
	DisplayName string   "json:\"displayName\" graphql:\"displayName\""
	Description *string  "json:\"description,omitempty\" graphql:\"description\""
	PersonalOrg *bool    "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags        []string "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateBulkOrganization_CreateBulkOrganization_Organizations) GetID() string {
	if t == nil {
		t = &CreateBulkOrganization_CreateBulkOrganization_Organizations{}
	}
	return t.ID
}
func (t *CreateBulkOrganization_CreateBulkOrganization_Organizations) GetName() string {
	if t == nil {
		t = &CreateBulkOrganization_CreateBulkOrganization_Organizations{}
	}
	return t.Name
}
func (t *CreateBulkOrganization_CreateBulkOrganization_Organizations) GetDisplayName() string {
	if t == nil {
		t = &CreateBulkOrganization_CreateBulkOrganization_Organizations{}
	}
	return t.DisplayName
}
func (t *CreateBulkOrganization_CreateBulkOrganization_Organizations) GetDescription() *string {
	if t == nil {
		t = &CreateBulkOrganization_CreateBulkOrganization_Organizations{}
	}
	return t.Description
}
func (t *CreateBulkOrganization_CreateBulkOrganization_Organizations) GetPersonalOrg() *bool {
	if t == nil {
		t = &CreateBulkOrganization_CreateBulkOrganization_Organizations{}
	}
	return t.PersonalOrg
}
func (t *CreateBulkOrganization_CreateBulkOrganization_Organizations) GetTags() []string {
	if t == nil {
		t = &CreateBulkOrganization_CreateBulkOrganization_Organizations{}
	}
	return t.Tags
}

type CreateBulkOrganization_CreateBulkOrganization struct {
	Organizations []*CreateBulkOrganization_CreateBulkOrganization_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *CreateBulkOrganization_CreateBulkOrganization) GetOrganizations() []*CreateBulkOrganization_CreateBulkOrganization_Organizations {
	if t == nil {
		t = &CreateBulkOrganization_CreateBulkOrganization{}
	}
	return t.Organizations
}

type CreateOrganization_CreateOrganization_Organization_Setting struct {
	ID             string        "json:\"id\" graphql:\"id\""
	CreatedAt      *time.Time    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt      *time.Time    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy      *string       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy      *string       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Domains        []string      "json:\"domains,omitempty\" graphql:\"domains\""
	BillingContact *string       "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string       "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string       "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	BillingAddress *string       "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	TaxIdentifier  *string       "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	GeoLocation    *enums.Region "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	Tags           []string      "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.CreatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.UpdatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.CreatedBy
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.UpdatedBy
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetDomains() []string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.Domains
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingContact() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingContact
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingEmail
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingPhone
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetBillingAddress() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.BillingAddress
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.TaxIdentifier
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.GeoLocation
}
func (t *CreateOrganization_CreateOrganization_Organization_Setting) GetTags() []string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Setting{}
	}
	return t.Tags
}

type CreateOrganization_CreateOrganization_Organization_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Parent) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Parent{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization_Parent) GetName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Parent{}
	}
	return t.Name
}

type CreateOrganization_CreateOrganization_Organization_Children_Edges_Node struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges_Node{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node) GetName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges_Node{}
	}
	return t.Name
}
func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges_Node{}
	}
	return t.DisplayName
}
func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges_Node{}
	}
	return t.Description
}

type CreateOrganization_CreateOrganization_Organization_Children_Edges struct {
	Node *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Children_Edges) GetNode() *CreateOrganization_CreateOrganization_Organization_Children_Edges_Node {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children_Edges{}
	}
	return t.Node
}

type CreateOrganization_CreateOrganization_Organization_Children struct {
	Edges []*CreateOrganization_CreateOrganization_Organization_Children_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *CreateOrganization_CreateOrganization_Organization_Children) GetEdges() []*CreateOrganization_CreateOrganization_Organization_Children_Edges {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization_Children{}
	}
	return t.Edges
}

type CreateOrganization_CreateOrganization_Organization struct {
	ID          string                                                      "json:\"id\" graphql:\"id\""
	Name        string                                                      "json:\"name\" graphql:\"name\""
	DisplayName string                                                      "json:\"displayName\" graphql:\"displayName\""
	Description *string                                                     "json:\"description,omitempty\" graphql:\"description\""
	PersonalOrg *bool                                                       "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags        []string                                                    "json:\"tags,omitempty\" graphql:\"tags\""
	CreatedAt   *time.Time                                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt   *time.Time                                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	Setting     *CreateOrganization_CreateOrganization_Organization_Setting "json:\"setting,omitempty\" graphql:\"setting\""
	Parent      *CreateOrganization_CreateOrganization_Organization_Parent  "json:\"parent,omitempty\" graphql:\"parent\""
	Children    CreateOrganization_CreateOrganization_Organization_Children "json:\"children\" graphql:\"children\""
}

func (t *CreateOrganization_CreateOrganization_Organization) GetID() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.ID
}
func (t *CreateOrganization_CreateOrganization_Organization) GetName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Name
}
func (t *CreateOrganization_CreateOrganization_Organization) GetDisplayName() string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.DisplayName
}
func (t *CreateOrganization_CreateOrganization_Organization) GetDescription() *string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Description
}
func (t *CreateOrganization_CreateOrganization_Organization) GetPersonalOrg() *bool {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.PersonalOrg
}
func (t *CreateOrganization_CreateOrganization_Organization) GetTags() []string {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Tags
}
func (t *CreateOrganization_CreateOrganization_Organization) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.CreatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.UpdatedAt
}
func (t *CreateOrganization_CreateOrganization_Organization) GetSetting() *CreateOrganization_CreateOrganization_Organization_Setting {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Setting
}
func (t *CreateOrganization_CreateOrganization_Organization) GetParent() *CreateOrganization_CreateOrganization_Organization_Parent {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return t.Parent
}
func (t *CreateOrganization_CreateOrganization_Organization) GetChildren() *CreateOrganization_CreateOrganization_Organization_Children {
	if t == nil {
		t = &CreateOrganization_CreateOrganization_Organization{}
	}
	return &t.Children
}

type CreateOrganization_CreateOrganization struct {
	Organization CreateOrganization_CreateOrganization_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *CreateOrganization_CreateOrganization) GetOrganization() *CreateOrganization_CreateOrganization_Organization {
	if t == nil {
		t = &CreateOrganization_CreateOrganization{}
	}
	return &t.Organization
}

type DeleteOrganization_DeleteOrganization struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteOrganization_DeleteOrganization) GetDeletedID() string {
	if t == nil {
		t = &DeleteOrganization_DeleteOrganization{}
	}
	return t.DeletedID
}

type GetAllOrganizations_Organizations_Edges_Node_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Parent) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Parent{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Parent) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Parent{}
	}
	return t.Name
}

type GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.Description
}

type GetAllOrganizations_Organizations_Edges_Node_Children_Edges struct {
	Node *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Children_Edges) GetNode() *GetAllOrganizations_Organizations_Edges_Node_Children_Edges_Node {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children_Edges{}
	}
	return t.Node
}

type GetAllOrganizations_Organizations_Edges_Node_Children struct {
	Edges []*GetAllOrganizations_Organizations_Edges_Node_Children_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Children) GetEdges() []*GetAllOrganizations_Organizations_Edges_Node_Children_Edges {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Children{}
	}
	return t.Edges
}

type GetAllOrganizations_Organizations_Edges_Node_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Members_User) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members_User{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members_User{}
	}
	return t.FirstName
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members_User{}
	}
	return t.LastName
}

type GetAllOrganizations_Organizations_Edges_Node_Members struct {
	ID   string                                                    "json:\"id\" graphql:\"id\""
	Role enums.Role                                                "json:\"role\" graphql:\"role\""
	User GetAllOrganizations_Organizations_Edges_Node_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Members) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members{}
	}
	return &t.Role
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Members) GetUser() *GetAllOrganizations_Organizations_Edges_Node_Members_User {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Members{}
	}
	return &t.User
}

type GetAllOrganizations_Organizations_Edges_Node_Setting struct {
	ID             string        "json:\"id\" graphql:\"id\""
	CreatedAt      *time.Time    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt      *time.Time    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy      *string       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy      *string       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Domains        []string      "json:\"domains,omitempty\" graphql:\"domains\""
	BillingContact *string       "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string       "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string       "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	BillingAddress *string       "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	TaxIdentifier  *string       "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	GeoLocation    *enums.Region "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	Tags           []string      "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetDomains() []string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.Domains
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingContact() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingContact
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingEmail
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingPhone
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetBillingAddress() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingAddress
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.TaxIdentifier
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.GeoLocation
}
func (t *GetAllOrganizations_Organizations_Edges_Node_Setting) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.Tags
}

type GetAllOrganizations_Organizations_Edges_Node struct {
	ID          string                                                  "json:\"id\" graphql:\"id\""
	Name        string                                                  "json:\"name\" graphql:\"name\""
	DisplayName string                                                  "json:\"displayName\" graphql:\"displayName\""
	Description *string                                                 "json:\"description,omitempty\" graphql:\"description\""
	PersonalOrg *bool                                                   "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags        []string                                                "json:\"tags,omitempty\" graphql:\"tags\""
	Parent      *GetAllOrganizations_Organizations_Edges_Node_Parent    "json:\"parent,omitempty\" graphql:\"parent\""
	Children    GetAllOrganizations_Organizations_Edges_Node_Children   "json:\"children\" graphql:\"children\""
	Members     []*GetAllOrganizations_Organizations_Edges_Node_Members "json:\"members,omitempty\" graphql:\"members\""
	Setting     *GetAllOrganizations_Organizations_Edges_Node_Setting   "json:\"setting,omitempty\" graphql:\"setting\""
	CreatedAt   *time.Time                                              "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt   *time.Time                                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
}

func (t *GetAllOrganizations_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.PersonalOrg
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetParent() *GetAllOrganizations_Organizations_Edges_Node_Parent {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Parent
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetChildren() *GetAllOrganizations_Organizations_Edges_Node_Children {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return &t.Children
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetMembers() []*GetAllOrganizations_Organizations_Edges_Node_Members {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Members
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetSetting() *GetAllOrganizations_Organizations_Edges_Node_Setting {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.Setting
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizations_Organizations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges_Node{}
	}
	return t.UpdatedAt
}

type GetAllOrganizations_Organizations_Edges struct {
	Node *GetAllOrganizations_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizations_Organizations_Edges) GetNode() *GetAllOrganizations_Organizations_Edges_Node {
	if t == nil {
		t = &GetAllOrganizations_Organizations_Edges{}
	}
	return t.Node
}

type GetAllOrganizations_Organizations struct {
	Edges []*GetAllOrganizations_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizations_Organizations) GetEdges() []*GetAllOrganizations_Organizations_Edges {
	if t == nil {
		t = &GetAllOrganizations_Organizations{}
	}
	return t.Edges
}

type GetOrganizationByID_Organization_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizationByID_Organization_Parent) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Parent{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Parent) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Parent{}
	}
	return t.Name
}

type GetOrganizationByID_Organization_Children_Edges_Node struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
}

func (t *GetOrganizationByID_Organization_Children_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Children_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges_Node{}
	}
	return t.Name
}
func (t *GetOrganizationByID_Organization_Children_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization_Children_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges_Node{}
	}
	return t.Description
}

type GetOrganizationByID_Organization_Children_Edges struct {
	Node *GetOrganizationByID_Organization_Children_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationByID_Organization_Children_Edges) GetNode() *GetOrganizationByID_Organization_Children_Edges_Node {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children_Edges{}
	}
	return t.Node
}

type GetOrganizationByID_Organization_Children struct {
	Edges []*GetOrganizationByID_Organization_Children_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizationByID_Organization_Children) GetEdges() []*GetOrganizationByID_Organization_Children_Edges {
	if t == nil {
		t = &GetOrganizationByID_Organization_Children{}
	}
	return t.Edges
}

type GetOrganizationByID_Organization_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetOrganizationByID_Organization_Members_User) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members_User{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members_User{}
	}
	return t.FirstName
}
func (t *GetOrganizationByID_Organization_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members_User{}
	}
	return t.LastName
}

type GetOrganizationByID_Organization_Members struct {
	ID   string                                        "json:\"id\" graphql:\"id\""
	Role enums.Role                                    "json:\"role\" graphql:\"role\""
	User GetOrganizationByID_Organization_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetOrganizationByID_Organization_Members) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members{}
	}
	return &t.Role
}
func (t *GetOrganizationByID_Organization_Members) GetUser() *GetOrganizationByID_Organization_Members_User {
	if t == nil {
		t = &GetOrganizationByID_Organization_Members{}
	}
	return &t.User
}

type GetOrganizationByID_Organization_Setting struct {
	ID             string        "json:\"id\" graphql:\"id\""
	CreatedAt      *time.Time    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt      *time.Time    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy      *string       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy      *string       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Domains        []string      "json:\"domains,omitempty\" graphql:\"domains\""
	BillingContact *string       "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string       "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string       "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	BillingAddress *string       "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	TaxIdentifier  *string       "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	GeoLocation    *enums.Region "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	Tags           []string      "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetOrganizationByID_Organization_Setting) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationByID_Organization_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationByID_Organization_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationByID_Organization_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetOrganizationByID_Organization_Setting) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.Domains
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingContact
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationByID_Organization_Setting) GetBillingAddress() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationByID_Organization_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationByID_Organization_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationByID_Organization_Setting) GetTags() []string {
	if t == nil {
		t = &GetOrganizationByID_Organization_Setting{}
	}
	return t.Tags
}

type GetOrganizationByID_Organization struct {
	ID          string                                      "json:\"id\" graphql:\"id\""
	Name        string                                      "json:\"name\" graphql:\"name\""
	DisplayName string                                      "json:\"displayName\" graphql:\"displayName\""
	Description *string                                     "json:\"description,omitempty\" graphql:\"description\""
	PersonalOrg *bool                                       "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags        []string                                    "json:\"tags,omitempty\" graphql:\"tags\""
	Parent      *GetOrganizationByID_Organization_Parent    "json:\"parent,omitempty\" graphql:\"parent\""
	Children    GetOrganizationByID_Organization_Children   "json:\"children\" graphql:\"children\""
	Members     []*GetOrganizationByID_Organization_Members "json:\"members,omitempty\" graphql:\"members\""
	Setting     *GetOrganizationByID_Organization_Setting   "json:\"setting,omitempty\" graphql:\"setting\""
	CreatedAt   *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt   *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationByID_Organization) GetID() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.ID
}
func (t *GetOrganizationByID_Organization) GetName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Name
}
func (t *GetOrganizationByID_Organization) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.DisplayName
}
func (t *GetOrganizationByID_Organization) GetDescription() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Description
}
func (t *GetOrganizationByID_Organization) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.PersonalOrg
}
func (t *GetOrganizationByID_Organization) GetTags() []string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Tags
}
func (t *GetOrganizationByID_Organization) GetParent() *GetOrganizationByID_Organization_Parent {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Parent
}
func (t *GetOrganizationByID_Organization) GetChildren() *GetOrganizationByID_Organization_Children {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return &t.Children
}
func (t *GetOrganizationByID_Organization) GetMembers() []*GetOrganizationByID_Organization_Members {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Members
}
func (t *GetOrganizationByID_Organization) GetSetting() *GetOrganizationByID_Organization_Setting {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.Setting
}
func (t *GetOrganizationByID_Organization) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationByID_Organization) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationByID_Organization) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationByID_Organization) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationByID_Organization{}
	}
	return t.UpdatedBy
}

type GetOrganizations_Organizations_Edges_Node_Parent struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Parent) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Parent{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Parent) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Parent{}
	}
	return t.Name
}

type GetOrganizations_Organizations_Edges_Node_Children_Edges_Node struct {
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Description *string "json:\"description,omitempty\" graphql:\"description\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.Name
}
func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges_Node{}
	}
	return t.Description
}

type GetOrganizations_Organizations_Edges_Node_Children_Edges struct {
	Node *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Children_Edges) GetNode() *GetOrganizations_Organizations_Edges_Node_Children_Edges_Node {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children_Edges{}
	}
	return t.Node
}

type GetOrganizations_Organizations_Edges_Node_Children struct {
	Edges []*GetOrganizations_Organizations_Edges_Node_Children_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Children) GetEdges() []*GetOrganizations_Organizations_Edges_Node_Children_Edges {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Children{}
	}
	return t.Edges
}

type GetOrganizations_Organizations_Edges_Node_Members_User struct {
	ID        string  "json:\"id\" graphql:\"id\""
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Members_User) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members_User{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Members_User) GetFirstName() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members_User{}
	}
	return t.FirstName
}
func (t *GetOrganizations_Organizations_Edges_Node_Members_User) GetLastName() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members_User{}
	}
	return t.LastName
}

type GetOrganizations_Organizations_Edges_Node_Members struct {
	ID   string                                                 "json:\"id\" graphql:\"id\""
	Role enums.Role                                             "json:\"role\" graphql:\"role\""
	User GetOrganizations_Organizations_Edges_Node_Members_User "json:\"user\" graphql:\"user\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Members) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members{}
	}
	return &t.Role
}
func (t *GetOrganizations_Organizations_Edges_Node_Members) GetUser() *GetOrganizations_Organizations_Edges_Node_Members_User {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Members{}
	}
	return &t.User
}

type GetOrganizations_Organizations_Edges_Node_Setting struct {
	ID             string        "json:\"id\" graphql:\"id\""
	CreatedAt      *time.Time    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt      *time.Time    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy      *string       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy      *string       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Domains        []string      "json:\"domains,omitempty\" graphql:\"domains\""
	BillingContact *string       "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string       "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string       "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	BillingAddress *string       "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	TaxIdentifier  *string       "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	GeoLocation    *enums.Region "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	Tags           []string      "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.CreatedAt
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetDomains() []string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.Domains
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingContact
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingEmail
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingPhone
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetBillingAddress() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.BillingAddress
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.GeoLocation
}
func (t *GetOrganizations_Organizations_Edges_Node_Setting) GetTags() []string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node_Setting{}
	}
	return t.Tags
}

type GetOrganizations_Organizations_Edges_Node struct {
	ID          string                                               "json:\"id\" graphql:\"id\""
	Name        string                                               "json:\"name\" graphql:\"name\""
	DisplayName string                                               "json:\"displayName\" graphql:\"displayName\""
	Description *string                                              "json:\"description,omitempty\" graphql:\"description\""
	PersonalOrg *bool                                                "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags        []string                                             "json:\"tags,omitempty\" graphql:\"tags\""
	Parent      *GetOrganizations_Organizations_Edges_Node_Parent    "json:\"parent,omitempty\" graphql:\"parent\""
	Children    GetOrganizations_Organizations_Edges_Node_Children   "json:\"children\" graphql:\"children\""
	Members     []*GetOrganizations_Organizations_Edges_Node_Members "json:\"members,omitempty\" graphql:\"members\""
	Setting     *GetOrganizations_Organizations_Edges_Node_Setting   "json:\"setting,omitempty\" graphql:\"setting\""
	CreatedAt   *time.Time                                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt   *time.Time                                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
}

func (t *GetOrganizations_Organizations_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizations_Organizations_Edges_Node) GetName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Name
}
func (t *GetOrganizations_Organizations_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetOrganizations_Organizations_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Description
}
func (t *GetOrganizations_Organizations_Edges_Node) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.PersonalOrg
}
func (t *GetOrganizations_Organizations_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizations_Organizations_Edges_Node) GetParent() *GetOrganizations_Organizations_Edges_Node_Parent {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Parent
}
func (t *GetOrganizations_Organizations_Edges_Node) GetChildren() *GetOrganizations_Organizations_Edges_Node_Children {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return &t.Children
}
func (t *GetOrganizations_Organizations_Edges_Node) GetMembers() []*GetOrganizations_Organizations_Edges_Node_Members {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Members
}
func (t *GetOrganizations_Organizations_Edges_Node) GetSetting() *GetOrganizations_Organizations_Edges_Node_Setting {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.Setting
}
func (t *GetOrganizations_Organizations_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizations_Organizations_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges_Node{}
	}
	return t.UpdatedAt
}

type GetOrganizations_Organizations_Edges struct {
	Node *GetOrganizations_Organizations_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizations_Organizations_Edges) GetNode() *GetOrganizations_Organizations_Edges_Node {
	if t == nil {
		t = &GetOrganizations_Organizations_Edges{}
	}
	return t.Node
}

type GetOrganizations_Organizations struct {
	Edges []*GetOrganizations_Organizations_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizations_Organizations) GetEdges() []*GetOrganizations_Organizations_Edges {
	if t == nil {
		t = &GetOrganizations_Organizations{}
	}
	return t.Edges
}

type UpdateOrganization_UpdateOrganization_Organization_Members struct {
	ID     string     "json:\"id\" graphql:\"id\""
	Role   enums.Role "json:\"role\" graphql:\"role\""
	UserID string     "json:\"userID\" graphql:\"userID\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_Members) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Members{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Members) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Members{}
	}
	return &t.Role
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Members) GetUserID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Members{}
	}
	return t.UserID
}

type UpdateOrganization_UpdateOrganization_Organization_Setting struct {
	ID             string        "json:\"id\" graphql:\"id\""
	CreatedAt      *time.Time    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	UpdatedAt      *time.Time    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	CreatedBy      *string       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedBy      *string       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Domains        []string      "json:\"domains,omitempty\" graphql:\"domains\""
	BillingContact *string       "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string       "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string       "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	BillingAddress *string       "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	TaxIdentifier  *string       "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	GeoLocation    *enums.Region "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	Tags           []string      "json:\"tags,omitempty\" graphql:\"tags\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.CreatedAt
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.UpdatedAt
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.CreatedBy
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.UpdatedBy
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetDomains() []string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.Domains
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetBillingContact() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.BillingContact
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetBillingEmail() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.BillingEmail
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetBillingPhone() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.BillingPhone
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetBillingAddress() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.BillingAddress
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetTaxIdentifier() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.TaxIdentifier
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.GeoLocation
}
func (t *UpdateOrganization_UpdateOrganization_Organization_Setting) GetTags() []string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization_Setting{}
	}
	return t.Tags
}

type UpdateOrganization_UpdateOrganization_Organization struct {
	ID          string                                                        "json:\"id\" graphql:\"id\""
	Name        string                                                        "json:\"name\" graphql:\"name\""
	DisplayName string                                                        "json:\"displayName\" graphql:\"displayName\""
	Description *string                                                       "json:\"description,omitempty\" graphql:\"description\""
	PersonalOrg *bool                                                         "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Tags        []string                                                      "json:\"tags,omitempty\" graphql:\"tags\""
	Members     []*UpdateOrganization_UpdateOrganization_Organization_Members "json:\"members,omitempty\" graphql:\"members\""
	Setting     *UpdateOrganization_UpdateOrganization_Organization_Setting   "json:\"setting,omitempty\" graphql:\"setting\""
}

func (t *UpdateOrganization_UpdateOrganization_Organization) GetID() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.ID
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Name
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetDisplayName() string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.DisplayName
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetDescription() *string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Description
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetPersonalOrg() *bool {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.PersonalOrg
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetTags() []string {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Tags
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetMembers() []*UpdateOrganization_UpdateOrganization_Organization_Members {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Members
}
func (t *UpdateOrganization_UpdateOrganization_Organization) GetSetting() *UpdateOrganization_UpdateOrganization_Organization_Setting {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization_Organization{}
	}
	return t.Setting
}

type UpdateOrganization_UpdateOrganization struct {
	Organization UpdateOrganization_UpdateOrganization_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *UpdateOrganization_UpdateOrganization) GetOrganization() *UpdateOrganization_UpdateOrganization_Organization {
	if t == nil {
		t = &UpdateOrganization_UpdateOrganization{}
	}
	return &t.Organization
}

type GetOrganizationSettingByID_OrganizationSetting_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetOrganizationSettingByID_OrganizationSetting_Organization) GetID() string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting_Organization{}
	}
	return t.ID
}

type GetOrganizationSettingByID_OrganizationSetting struct {
	BillingAddress *string                                                      "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact *string                                                      "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string                                                      "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string                                                      "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt      *time.Time                                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains        []string                                                     "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation    *enums.Region                                                "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID             string                                                       "json:\"id\" graphql:\"id\""
	Tags           []string                                                     "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier  *string                                                      "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt      *time.Time                                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organization   *GetOrganizationSettingByID_OrganizationSetting_Organization "json:\"organization,omitempty\" graphql:\"organization\""
}

func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingAddress() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingContact
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.Domains
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetID() string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.ID
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetTags() []string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.Tags
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.UpdatedBy
}
func (t *GetOrganizationSettingByID_OrganizationSetting) GetOrganization() *GetOrganizationSettingByID_OrganizationSetting_Organization {
	if t == nil {
		t = &GetOrganizationSettingByID_OrganizationSetting{}
	}
	return t.Organization
}

type GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization{}
	}
	return t.ID
}

type GetAllOrganizationSettings_OrganizationSettings_Edges_Node struct {
	BillingAddress *string                                                                  "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact *string                                                                  "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string                                                                  "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string                                                                  "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt      *time.Time                                                               "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                                  "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains        []string                                                                 "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation    *enums.Region                                                            "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID             string                                                                   "json:\"id\" graphql:\"id\""
	Tags           []string                                                                 "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier  *string                                                                  "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt      *time.Time                                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organization   *GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization "json:\"organization,omitempty\" graphql:\"organization\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingAddress() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllOrganizationSettings_OrganizationSettings_Edges_Node) GetOrganization() *GetAllOrganizationSettings_OrganizationSettings_Edges_Node_Organization {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Organization
}

type GetAllOrganizationSettings_OrganizationSettings_Edges struct {
	Node *GetAllOrganizationSettings_OrganizationSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings_Edges) GetNode() *GetAllOrganizationSettings_OrganizationSettings_Edges_Node {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings_Edges{}
	}
	return t.Node
}

type GetAllOrganizationSettings_OrganizationSettings struct {
	Edges []*GetAllOrganizationSettings_OrganizationSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizationSettings_OrganizationSettings) GetEdges() []*GetAllOrganizationSettings_OrganizationSettings_Edges {
	if t == nil {
		t = &GetAllOrganizationSettings_OrganizationSettings{}
	}
	return t.Edges
}

type GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization) GetID() string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization{}
	}
	return t.ID
}

type GetOrganizationSettings_OrganizationSettings_Edges_Node struct {
	BillingAddress *string                                                               "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact *string                                                               "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string                                                               "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string                                                               "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt      *time.Time                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains        []string                                                              "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation    *enums.Region                                                         "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID             string                                                                "json:\"id\" graphql:\"id\""
	Tags           []string                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier  *string                                                               "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt      *time.Time                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organization   *GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization "json:\"organization,omitempty\" graphql:\"organization\""
}

func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingAddress() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Domains
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetOrganizationSettings_OrganizationSettings_Edges_Node) GetOrganization() *GetOrganizationSettings_OrganizationSettings_Edges_Node_Organization {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges_Node{}
	}
	return t.Organization
}

type GetOrganizationSettings_OrganizationSettings_Edges struct {
	Node *GetOrganizationSettings_OrganizationSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationSettings_OrganizationSettings_Edges) GetNode() *GetOrganizationSettings_OrganizationSettings_Edges_Node {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings_Edges{}
	}
	return t.Node
}

type GetOrganizationSettings_OrganizationSettings struct {
	Edges []*GetOrganizationSettings_OrganizationSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizationSettings_OrganizationSettings) GetEdges() []*GetOrganizationSettings_OrganizationSettings_Edges {
	if t == nil {
		t = &GetOrganizationSettings_OrganizationSettings{}
	}
	return t.Edges
}

type UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization) GetID() string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization{}
	}
	return t.ID
}

type UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting struct {
	BillingAddress *string                                                                               "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact *string                                                                               "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string                                                                               "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string                                                                               "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt      *time.Time                                                                            "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                                               "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains        []string                                                                              "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation    *enums.Region                                                                         "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	ID             string                                                                                "json:\"id\" graphql:\"id\""
	Tags           []string                                                                              "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier  *string                                                                               "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt      *time.Time                                                                            "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                                               "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organization   *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization "json:\"organization,omitempty\" graphql:\"organization\""
}

func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingAddress() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingAddress
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingContact() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingContact
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingEmail() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingEmail
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetBillingPhone() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.BillingPhone
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.CreatedAt
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.CreatedBy
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetDomains() []string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.Domains
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.GeoLocation
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetID() string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.ID
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetTags() []string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.Tags
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetTaxIdentifier() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.TaxIdentifier
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.UpdatedAt
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.UpdatedBy
}
func (t *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting) GetOrganization() *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting_Organization {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting{}
	}
	return t.Organization
}

type UpdateOrganizationSetting_UpdateOrganizationSetting struct {
	OrganizationSetting UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting "json:\"organizationSetting\" graphql:\"organizationSetting\""
}

func (t *UpdateOrganizationSetting_UpdateOrganizationSetting) GetOrganizationSetting() *UpdateOrganizationSetting_UpdateOrganizationSetting_OrganizationSetting {
	if t == nil {
		t = &UpdateOrganizationSetting_UpdateOrganizationSetting{}
	}
	return &t.OrganizationSetting
}

type GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node struct {
	BillingAddress *string           "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact *string           "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string           "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string           "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt      *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains        []string          "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation    *enums.Region     "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	HistoryTime    time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID             string            "json:\"id\" graphql:\"id\""
	Operation      enthistory.OpType "json:\"operation\" graphql:\"operation\""
	OrganizationID *string           "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Ref            *string           "json:\"ref,omitempty\" graphql:\"ref\""
	Tags           []string          "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier  *string           "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt      *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingAddress() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOrganizationID() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges struct {
	Node *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges) GetNode() *GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges{}
	}
	return t.Node
}

type GetAllOrganizationSettingHistories_OrganizationSettingHistories struct {
	Edges []*GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrganizationSettingHistories_OrganizationSettingHistories) GetEdges() []*GetAllOrganizationSettingHistories_OrganizationSettingHistories_Edges {
	if t == nil {
		t = &GetAllOrganizationSettingHistories_OrganizationSettingHistories{}
	}
	return t.Edges
}

type GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node struct {
	BillingAddress *string           "json:\"billingAddress,omitempty\" graphql:\"billingAddress\""
	BillingContact *string           "json:\"billingContact,omitempty\" graphql:\"billingContact\""
	BillingEmail   *string           "json:\"billingEmail,omitempty\" graphql:\"billingEmail\""
	BillingPhone   *string           "json:\"billingPhone,omitempty\" graphql:\"billingPhone\""
	CreatedAt      *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Domains        []string          "json:\"domains,omitempty\" graphql:\"domains\""
	GeoLocation    *enums.Region     "json:\"geoLocation,omitempty\" graphql:\"geoLocation\""
	HistoryTime    time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID             string            "json:\"id\" graphql:\"id\""
	Operation      enthistory.OpType "json:\"operation\" graphql:\"operation\""
	OrganizationID *string           "json:\"organizationID,omitempty\" graphql:\"organizationID\""
	Ref            *string           "json:\"ref,omitempty\" graphql:\"ref\""
	Tags           []string          "json:\"tags,omitempty\" graphql:\"tags\""
	TaxIdentifier  *string           "json:\"taxIdentifier,omitempty\" graphql:\"taxIdentifier\""
	UpdatedAt      *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingAddress() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingAddress
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingContact() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingContact
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingEmail() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingEmail
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetBillingPhone() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.BillingPhone
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetDomains() []string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Domains
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetGeoLocation() *enums.Region {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.GeoLocation
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetOrganizationID() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetTaxIdentifier() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.TaxIdentifier
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetOrganizationSettingHistories_OrganizationSettingHistories_Edges struct {
	Node *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges) GetNode() *GetOrganizationSettingHistories_OrganizationSettingHistories_Edges_Node {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories_Edges{}
	}
	return t.Node
}

type GetOrganizationSettingHistories_OrganizationSettingHistories struct {
	Edges []*GetOrganizationSettingHistories_OrganizationSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrganizationSettingHistories_OrganizationSettingHistories) GetEdges() []*GetOrganizationSettingHistories_OrganizationSettingHistories_Edges {
	if t == nil {
		t = &GetOrganizationSettingHistories_OrganizationSettingHistories{}
	}
	return t.Edges
}

type AddUserToOrgWithRole_CreateOrgMembership_OrgMembership struct {
	ID             string     "json:\"id\" graphql:\"id\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
}

func (t *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership) GetID() string {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership_OrgMembership{}
	}
	return t.ID
}
func (t *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership) GetRole() *enums.Role {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership_OrgMembership{}
	}
	return &t.Role
}
func (t *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership) GetUserID() string {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership_OrgMembership{}
	}
	return t.UserID
}
func (t *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership) GetOrganizationID() string {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership_OrgMembership{}
	}
	return t.OrganizationID
}

type AddUserToOrgWithRole_CreateOrgMembership struct {
	OrgMembership AddUserToOrgWithRole_CreateOrgMembership_OrgMembership "json:\"orgMembership\" graphql:\"orgMembership\""
}

func (t *AddUserToOrgWithRole_CreateOrgMembership) GetOrgMembership() *AddUserToOrgWithRole_CreateOrgMembership_OrgMembership {
	if t == nil {
		t = &AddUserToOrgWithRole_CreateOrgMembership{}
	}
	return &t.OrgMembership
}

type CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships struct {
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.ID
}
func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships) GetOrganizationID() string {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.OrganizationID
}
func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships{}
	}
	return t.UserID
}

type CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership struct {
	OrgMemberships []*CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships "json:\"orgMemberships,omitempty\" graphql:\"orgMemberships\""
}

func (t *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership) GetOrgMemberships() []*CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership_OrgMemberships {
	if t == nil {
		t = &CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership{}
	}
	return t.OrgMemberships
}

type CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships struct {
	ID             string     "json:\"id\" graphql:\"id\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
}

func (t *CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships) GetID() string {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.ID
}
func (t *CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships) GetOrganizationID() string {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.OrganizationID
}
func (t *CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships{}
	}
	return &t.Role
}
func (t *CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships) GetUserID() string {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships{}
	}
	return t.UserID
}

type CreateBulkOrgMembers_CreateBulkOrgMembership struct {
	OrgMemberships []*CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships "json:\"orgMemberships,omitempty\" graphql:\"orgMemberships\""
}

func (t *CreateBulkOrgMembers_CreateBulkOrgMembership) GetOrgMemberships() []*CreateBulkOrgMembers_CreateBulkOrgMembership_OrgMemberships {
	if t == nil {
		t = &CreateBulkOrgMembers_CreateBulkOrgMembership{}
	}
	return t.OrgMemberships
}

type GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User struct {
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
	ID          string  "json:\"id\" graphql:\"id\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
}

func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetFirstName() *string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.FirstName
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetLastName() *string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.LastName
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetID() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.ID
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetDisplayName() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.DisplayName
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User) GetEmail() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User{}
	}
	return t.Email
}

type GetOrgMembersByOrgID_OrgMemberships_Edges_Node struct {
	ID             string                                              "json:\"id\" graphql:\"id\""
	OrganizationID string                                              "json:\"organizationID\" graphql:\"organizationID\""
	UserID         string                                              "json:\"userID\" graphql:\"userID\""
	Role           enums.Role                                          "json:\"role\" graphql:\"role\""
	User           GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User "json:\"user\" graphql:\"user\""
}

func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return t.UserID
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return &t.Role
}
func (t *GetOrgMembersByOrgID_OrgMemberships_Edges_Node) GetUser() *GetOrgMembersByOrgID_OrgMemberships_Edges_Node_User {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges_Node{}
	}
	return &t.User
}

type GetOrgMembersByOrgID_OrgMemberships_Edges struct {
	Node *GetOrgMembersByOrgID_OrgMemberships_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrgMembersByOrgID_OrgMemberships_Edges) GetNode() *GetOrgMembersByOrgID_OrgMemberships_Edges_Node {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships_Edges{}
	}
	return t.Node
}

type GetOrgMembersByOrgID_OrgMemberships struct {
	Edges []*GetOrgMembersByOrgID_OrgMemberships_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrgMembersByOrgID_OrgMemberships) GetEdges() []*GetOrgMembersByOrgID_OrgMemberships_Edges {
	if t == nil {
		t = &GetOrgMembersByOrgID_OrgMemberships{}
	}
	return t.Edges
}

type RemoveUserFromOrg_DeleteOrgMembership struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *RemoveUserFromOrg_DeleteOrgMembership) GetDeletedID() string {
	if t == nil {
		t = &RemoveUserFromOrg_DeleteOrgMembership{}
	}
	return t.DeletedID
}

type UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership struct {
	ID             string     "json:\"id\" graphql:\"id\""
	Role           enums.Role "json:\"role\" graphql:\"role\""
	UserID         string     "json:\"userID\" graphql:\"userID\""
	OrganizationID string     "json:\"organizationID\" graphql:\"organizationID\""
}

func (t *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership) GetID() string {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership{}
	}
	return t.ID
}
func (t *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership) GetRole() *enums.Role {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership{}
	}
	return &t.Role
}
func (t *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership) GetUserID() string {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership{}
	}
	return t.UserID
}
func (t *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership) GetOrganizationID() string {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership{}
	}
	return t.OrganizationID
}

type UpdateUserRoleInOrg_UpdateOrgMembership struct {
	OrgMembership UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership "json:\"orgMembership\" graphql:\"orgMembership\""
}

func (t *UpdateUserRoleInOrg_UpdateOrgMembership) GetOrgMembership() *UpdateUserRoleInOrg_UpdateOrgMembership_OrgMembership {
	if t == nil {
		t = &UpdateUserRoleInOrg_UpdateOrgMembership{}
	}
	return &t.OrgMembership
}

type GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node struct {
	CreatedAt      *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime    time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID             string            "json:\"id\" graphql:\"id\""
	Operation      enthistory.OpType "json:\"operation\" graphql:\"operation\""
	OrganizationID string            "json:\"organizationID\" graphql:\"organizationID\""
	Ref            *string           "json:\"ref,omitempty\" graphql:\"ref\""
	Role           enums.Role        "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string            "json:\"userID\" graphql:\"userID\""
}

func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetAllOrgMembershipHistories_OrgMembershipHistories_Edges struct {
	Node *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges) GetNode() *GetAllOrgMembershipHistories_OrgMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories_Edges{}
	}
	return t.Node
}

type GetAllOrgMembershipHistories_OrgMembershipHistories struct {
	Edges []*GetAllOrgMembershipHistories_OrgMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllOrgMembershipHistories_OrgMembershipHistories) GetEdges() []*GetAllOrgMembershipHistories_OrgMembershipHistories_Edges {
	if t == nil {
		t = &GetAllOrgMembershipHistories_OrgMembershipHistories{}
	}
	return t.Edges
}

type GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node struct {
	CreatedAt      *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	HistoryTime    time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID             string            "json:\"id\" graphql:\"id\""
	Operation      enthistory.OpType "json:\"operation\" graphql:\"operation\""
	OrganizationID string            "json:\"organizationID\" graphql:\"organizationID\""
	Ref            *string           "json:\"ref,omitempty\" graphql:\"ref\""
	Role           enums.Role        "json:\"role\" graphql:\"role\""
	UpdatedAt      *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID         string            "json:\"userID\" graphql:\"userID\""
}

func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetOrganizationID() string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.OrganizationID
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return &t.Role
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node) GetUserID() string {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node{}
	}
	return t.UserID
}

type GetOrgMembershipHistories_OrgMembershipHistories_Edges struct {
	Node *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetOrgMembershipHistories_OrgMembershipHistories_Edges) GetNode() *GetOrgMembershipHistories_OrgMembershipHistories_Edges_Node {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories_Edges{}
	}
	return t.Node
}

type GetOrgMembershipHistories_OrgMembershipHistories struct {
	Edges []*GetOrgMembershipHistories_OrgMembershipHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetOrgMembershipHistories_OrgMembershipHistories) GetEdges() []*GetOrgMembershipHistories_OrgMembershipHistories_Edges {
	if t == nil {
		t = &GetOrgMembershipHistories_OrgMembershipHistories{}
	}
	return t.Edges
}

type CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens_Organizations struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens_Organizations) GetID() string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens_Organizations{}
	}
	return t.ID
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens_Organizations) GetName() string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens_Organizations{}
	}
	return t.Name
}

type CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens struct {
	Description   *string                                                                                                 "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     time.Time                                                                                               "json:\"expiresAt\" graphql:\"expiresAt\""
	ID            string                                                                                                  "json:\"id\" graphql:\"id\""
	LastUsedAt    *time.Time                                                                                              "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                                                                  "json:\"name\" graphql:\"name\""
	Scopes        []string                                                                                                "json:\"scopes,omitempty\" graphql:\"scopes\""
	Token         string                                                                                                  "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                                                              "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                                                 "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organizations []*CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Description
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return &t.ExpiresAt
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetID() string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.ID
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.LastUsedAt
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetName() string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Name
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetScopes() []string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Scopes
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetToken() string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Token
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens) GetOrganizations() []*CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens_Organizations {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Organizations
}

type CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken struct {
	PersonalAccessTokens []*CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens "json:\"personalAccessTokens,omitempty\" graphql:\"personalAccessTokens\""
}

func (t *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken) GetPersonalAccessTokens() []*CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken_PersonalAccessTokens {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken{}
	}
	return t.PersonalAccessTokens
}

type CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens_Organizations struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens_Organizations) GetID() string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens_Organizations{}
	}
	return t.ID
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens_Organizations) GetName() string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens_Organizations{}
	}
	return t.Name
}

type CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens struct {
	Description   *string                                                                                           "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     time.Time                                                                                         "json:\"expiresAt\" graphql:\"expiresAt\""
	ID            string                                                                                            "json:\"id\" graphql:\"id\""
	LastUsedAt    *time.Time                                                                                        "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                                                            "json:\"name\" graphql:\"name\""
	Scopes        []string                                                                                          "json:\"scopes,omitempty\" graphql:\"scopes\""
	Token         string                                                                                            "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                                                        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                                           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organizations []*CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetDescription() *string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Description
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return &t.ExpiresAt
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetID() string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.ID
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.LastUsedAt
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetName() string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Name
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetScopes() []string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Scopes
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetToken() string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Token
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.UpdatedAt
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.UpdatedBy
}
func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens) GetOrganizations() []*CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens_Organizations {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens{}
	}
	return t.Organizations
}

type CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken struct {
	PersonalAccessTokens []*CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens "json:\"personalAccessTokens,omitempty\" graphql:\"personalAccessTokens\""
}

func (t *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken) GetPersonalAccessTokens() []*CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken_PersonalAccessTokens {
	if t == nil {
		t = &CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken{}
	}
	return t.PersonalAccessTokens
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations) GetID() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations{}
	}
	return t.ID
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations) GetName() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations{}
	}
	return t.Name
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner) GetID() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner{}
	}
	return t.ID
}

type CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken struct {
	Description   *string                                                                                  "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     time.Time                                                                                "json:\"expiresAt\" graphql:\"expiresAt\""
	ID            string                                                                                   "json:\"id\" graphql:\"id\""
	LastUsedAt    *time.Time                                                                               "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                                                   "json:\"name\" graphql:\"name\""
	Scopes        []string                                                                                 "json:\"scopes,omitempty\" graphql:\"scopes\""
	Token         string                                                                                   "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organizations []*CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
	Owner         CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner            "json:\"owner\" graphql:\"owner\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetDescription() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Description
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return &t.ExpiresAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.ID
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.LastUsedAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetName() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Name
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetScopes() []string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Scopes
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetToken() string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Token
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedAt
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetUpdatedBy() *string {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedBy
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetOrganizations() []*CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Organizations {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Organizations
}
func (t *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken) GetOwner() *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken_Owner {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken{}
	}
	return &t.Owner
}

type CreatePersonalAccessToken_CreatePersonalAccessToken struct {
	PersonalAccessToken CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken "json:\"personalAccessToken\" graphql:\"personalAccessToken\""
}

func (t *CreatePersonalAccessToken_CreatePersonalAccessToken) GetPersonalAccessToken() *CreatePersonalAccessToken_CreatePersonalAccessToken_PersonalAccessToken {
	if t == nil {
		t = &CreatePersonalAccessToken_CreatePersonalAccessToken{}
	}
	return &t.PersonalAccessToken
}

type DeletePersonalAccessToken_DeletePersonalAccessToken struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeletePersonalAccessToken_DeletePersonalAccessToken) GetDeletedID() string {
	if t == nil {
		t = &DeletePersonalAccessToken_DeletePersonalAccessToken{}
	}
	return t.DeletedID
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations) GetID() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations{}
	}
	return t.ID
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations) GetName() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations{}
	}
	return t.Name
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node struct {
	Description   *string                                                                     "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     time.Time                                                                   "json:\"expiresAt\" graphql:\"expiresAt\""
	ID            string                                                                      "json:\"id\" graphql:\"id\""
	LastUsedAt    *time.Time                                                                  "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                                      "json:\"name\" graphql:\"name\""
	Scopes        []string                                                                    "json:\"scopes,omitempty\" graphql:\"scopes\""
	Token         string                                                                      "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organizations []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return &t.ExpiresAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.LastUsedAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetScopes() []string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Scopes
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetToken() string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Token
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node) GetOrganizations() []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node_Organizations {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node{}
	}
	return t.Organizations
}

type GetAllPersonalAccessTokens_PersonalAccessTokens_Edges struct {
	Node *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges) GetNode() *GetAllPersonalAccessTokens_PersonalAccessTokens_Edges_Node {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens_Edges{}
	}
	return t.Node
}

type GetAllPersonalAccessTokens_PersonalAccessTokens struct {
	Edges []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllPersonalAccessTokens_PersonalAccessTokens) GetEdges() []*GetAllPersonalAccessTokens_PersonalAccessTokens_Edges {
	if t == nil {
		t = &GetAllPersonalAccessTokens_PersonalAccessTokens{}
	}
	return t.Edges
}

type GetPersonalAccessTokenByID_PersonalAccessToken_Organizations struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations) GetID() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken_Organizations{}
	}
	return t.ID
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken_Organizations) GetName() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken_Organizations{}
	}
	return t.Name
}

type GetPersonalAccessTokenByID_PersonalAccessToken struct {
	Description   *string                                                         "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     time.Time                                                       "json:\"expiresAt\" graphql:\"expiresAt\""
	ID            string                                                          "json:\"id\" graphql:\"id\""
	LastUsedAt    *time.Time                                                      "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                          "json:\"name\" graphql:\"name\""
	Scopes        []string                                                        "json:\"scopes,omitempty\" graphql:\"scopes\""
	Token         string                                                          "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organizations []*GetPersonalAccessTokenByID_PersonalAccessToken_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetDescription() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Description
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return &t.ExpiresAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.ID
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.LastUsedAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetName() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Name
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetScopes() []string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Scopes
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetToken() string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Token
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.UpdatedAt
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetUpdatedBy() *string {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.UpdatedBy
}
func (t *GetPersonalAccessTokenByID_PersonalAccessToken) GetOrganizations() []*GetPersonalAccessTokenByID_PersonalAccessToken_Organizations {
	if t == nil {
		t = &GetPersonalAccessTokenByID_PersonalAccessToken{}
	}
	return t.Organizations
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations struct {
	ID   string "json:\"id\" graphql:\"id\""
	Name string "json:\"name\" graphql:\"name\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations) GetID() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations{}
	}
	return t.ID
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations) GetName() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations{}
	}
	return t.Name
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner) GetID() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner{}
	}
	return t.ID
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken struct {
	Description   *string                                                                                  "json:\"description,omitempty\" graphql:\"description\""
	ExpiresAt     time.Time                                                                                "json:\"expiresAt\" graphql:\"expiresAt\""
	ID            string                                                                                   "json:\"id\" graphql:\"id\""
	LastUsedAt    *time.Time                                                                               "json:\"lastUsedAt,omitempty\" graphql:\"lastUsedAt\""
	Name          string                                                                                   "json:\"name\" graphql:\"name\""
	Scopes        []string                                                                                 "json:\"scopes,omitempty\" graphql:\"scopes\""
	Token         string                                                                                   "json:\"token\" graphql:\"token\""
	UpdatedAt     *time.Time                                                                               "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string                                                                                  "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Organizations []*UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
	Owner         UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner            "json:\"owner\" graphql:\"owner\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetDescription() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Description
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetExpiresAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return &t.ExpiresAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetID() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.ID
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetLastUsedAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.LastUsedAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetName() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Name
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetScopes() []string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Scopes
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetToken() string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Token
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedAt
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.UpdatedBy
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetOrganizations() []*UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Organizations {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return t.Organizations
}
func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken) GetOwner() *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken_Owner {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken{}
	}
	return &t.Owner
}

type UpdatePersonalAccessToken_UpdatePersonalAccessToken struct {
	PersonalAccessToken UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken "json:\"personalAccessToken\" graphql:\"personalAccessToken\""
}

func (t *UpdatePersonalAccessToken_UpdatePersonalAccessToken) GetPersonalAccessToken() *UpdatePersonalAccessToken_UpdatePersonalAccessToken_PersonalAccessToken {
	if t == nil {
		t = &UpdatePersonalAccessToken_UpdatePersonalAccessToken{}
	}
	return &t.PersonalAccessToken
}

type Search_Search_Nodes_OrganizationSearchResult_Organizations struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
}

func (t *Search_Search_Nodes_OrganizationSearchResult_Organizations) GetDescription() *string {
	if t == nil {
		t = &Search_Search_Nodes_OrganizationSearchResult_Organizations{}
	}
	return t.Description
}
func (t *Search_Search_Nodes_OrganizationSearchResult_Organizations) GetDisplayName() string {
	if t == nil {
		t = &Search_Search_Nodes_OrganizationSearchResult_Organizations{}
	}
	return t.DisplayName
}
func (t *Search_Search_Nodes_OrganizationSearchResult_Organizations) GetID() string {
	if t == nil {
		t = &Search_Search_Nodes_OrganizationSearchResult_Organizations{}
	}
	return t.ID
}
func (t *Search_Search_Nodes_OrganizationSearchResult_Organizations) GetName() string {
	if t == nil {
		t = &Search_Search_Nodes_OrganizationSearchResult_Organizations{}
	}
	return t.Name
}

type Search_Search_Nodes_OrganizationSearchResult struct {
	Organizations []*Search_Search_Nodes_OrganizationSearchResult_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
}

func (t *Search_Search_Nodes_OrganizationSearchResult) GetOrganizations() []*Search_Search_Nodes_OrganizationSearchResult_Organizations {
	if t == nil {
		t = &Search_Search_Nodes_OrganizationSearchResult{}
	}
	return t.Organizations
}

type Search_Search_Nodes_GroupSearchResult_Groups struct {
	Description *string "json:\"description,omitempty\" graphql:\"description\""
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	ID          string  "json:\"id\" graphql:\"id\""
	Name        string  "json:\"name\" graphql:\"name\""
}

func (t *Search_Search_Nodes_GroupSearchResult_Groups) GetDescription() *string {
	if t == nil {
		t = &Search_Search_Nodes_GroupSearchResult_Groups{}
	}
	return t.Description
}
func (t *Search_Search_Nodes_GroupSearchResult_Groups) GetDisplayName() string {
	if t == nil {
		t = &Search_Search_Nodes_GroupSearchResult_Groups{}
	}
	return t.DisplayName
}
func (t *Search_Search_Nodes_GroupSearchResult_Groups) GetID() string {
	if t == nil {
		t = &Search_Search_Nodes_GroupSearchResult_Groups{}
	}
	return t.ID
}
func (t *Search_Search_Nodes_GroupSearchResult_Groups) GetName() string {
	if t == nil {
		t = &Search_Search_Nodes_GroupSearchResult_Groups{}
	}
	return t.Name
}

type Search_Search_Nodes_GroupSearchResult struct {
	Groups []*Search_Search_Nodes_GroupSearchResult_Groups "json:\"groups,omitempty\" graphql:\"groups\""
}

func (t *Search_Search_Nodes_GroupSearchResult) GetGroups() []*Search_Search_Nodes_GroupSearchResult_Groups {
	if t == nil {
		t = &Search_Search_Nodes_GroupSearchResult{}
	}
	return t.Groups
}

type Search_Search_Nodes_UserSearchResult_Users struct {
	DisplayName string  "json:\"displayName\" graphql:\"displayName\""
	Email       string  "json:\"email\" graphql:\"email\""
	FirstName   *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID          string  "json:\"id\" graphql:\"id\""
	LastName    *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *Search_Search_Nodes_UserSearchResult_Users) GetDisplayName() string {
	if t == nil {
		t = &Search_Search_Nodes_UserSearchResult_Users{}
	}
	return t.DisplayName
}
func (t *Search_Search_Nodes_UserSearchResult_Users) GetEmail() string {
	if t == nil {
		t = &Search_Search_Nodes_UserSearchResult_Users{}
	}
	return t.Email
}
func (t *Search_Search_Nodes_UserSearchResult_Users) GetFirstName() *string {
	if t == nil {
		t = &Search_Search_Nodes_UserSearchResult_Users{}
	}
	return t.FirstName
}
func (t *Search_Search_Nodes_UserSearchResult_Users) GetID() string {
	if t == nil {
		t = &Search_Search_Nodes_UserSearchResult_Users{}
	}
	return t.ID
}
func (t *Search_Search_Nodes_UserSearchResult_Users) GetLastName() *string {
	if t == nil {
		t = &Search_Search_Nodes_UserSearchResult_Users{}
	}
	return t.LastName
}

type Search_Search_Nodes_UserSearchResult struct {
	Users []*Search_Search_Nodes_UserSearchResult_Users "json:\"users,omitempty\" graphql:\"users\""
}

func (t *Search_Search_Nodes_UserSearchResult) GetUsers() []*Search_Search_Nodes_UserSearchResult_Users {
	if t == nil {
		t = &Search_Search_Nodes_UserSearchResult{}
	}
	return t.Users
}

type Search_Search_Nodes_SubscriberSearchResult_Subscribers struct {
	Active bool   "json:\"active\" graphql:\"active\""
	Email  string "json:\"email\" graphql:\"email\""
	ID     string "json:\"id\" graphql:\"id\""
}

func (t *Search_Search_Nodes_SubscriberSearchResult_Subscribers) GetActive() bool {
	if t == nil {
		t = &Search_Search_Nodes_SubscriberSearchResult_Subscribers{}
	}
	return t.Active
}
func (t *Search_Search_Nodes_SubscriberSearchResult_Subscribers) GetEmail() string {
	if t == nil {
		t = &Search_Search_Nodes_SubscriberSearchResult_Subscribers{}
	}
	return t.Email
}
func (t *Search_Search_Nodes_SubscriberSearchResult_Subscribers) GetID() string {
	if t == nil {
		t = &Search_Search_Nodes_SubscriberSearchResult_Subscribers{}
	}
	return t.ID
}

type Search_Search_Nodes_SubscriberSearchResult struct {
	Subscribers []*Search_Search_Nodes_SubscriberSearchResult_Subscribers "json:\"subscribers,omitempty\" graphql:\"subscribers\""
}

func (t *Search_Search_Nodes_SubscriberSearchResult) GetSubscribers() []*Search_Search_Nodes_SubscriberSearchResult_Subscribers {
	if t == nil {
		t = &Search_Search_Nodes_SubscriberSearchResult{}
	}
	return t.Subscribers
}

type Search_Search_Nodes struct {
	OrganizationSearchResult Search_Search_Nodes_OrganizationSearchResult "graphql:\"... on OrganizationSearchResult\""
	GroupSearchResult        Search_Search_Nodes_GroupSearchResult        "graphql:\"... on GroupSearchResult\""
	UserSearchResult         Search_Search_Nodes_UserSearchResult         "graphql:\"... on UserSearchResult\""
	SubscriberSearchResult   Search_Search_Nodes_SubscriberSearchResult   "graphql:\"... on SubscriberSearchResult\""
}

func (t *Search_Search_Nodes) GetOrganizationSearchResult() *Search_Search_Nodes_OrganizationSearchResult {
	if t == nil {
		t = &Search_Search_Nodes{}
	}
	return &t.OrganizationSearchResult
}
func (t *Search_Search_Nodes) GetGroupSearchResult() *Search_Search_Nodes_GroupSearchResult {
	if t == nil {
		t = &Search_Search_Nodes{}
	}
	return &t.GroupSearchResult
}
func (t *Search_Search_Nodes) GetUserSearchResult() *Search_Search_Nodes_UserSearchResult {
	if t == nil {
		t = &Search_Search_Nodes{}
	}
	return &t.UserSearchResult
}
func (t *Search_Search_Nodes) GetSubscriberSearchResult() *Search_Search_Nodes_SubscriberSearchResult {
	if t == nil {
		t = &Search_Search_Nodes{}
	}
	return &t.SubscriberSearchResult
}

type Search_Search struct {
	Nodes []*Search_Search_Nodes "json:\"nodes\" graphql:\"nodes\""
}

func (t *Search_Search) GetNodes() []*Search_Search_Nodes {
	if t == nil {
		t = &Search_Search{}
	}
	return t.Nodes
}

type CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers struct {
	Active        bool   "json:\"active\" graphql:\"active\""
	Email         string "json:\"email\" graphql:\"email\""
	ID            string "json:\"id\" graphql:\"id\""
	VerifiedEmail bool   "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetActive() bool {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.Active
}
func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetEmail() string {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.Email
}
func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetID() string {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.ID
}
func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers) GetVerifiedEmail() bool {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers{}
	}
	return t.VerifiedEmail
}

type CreateBulkCSVSubscriber_CreateBulkCSVSubscriber struct {
	Subscribers []*CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers "json:\"subscribers,omitempty\" graphql:\"subscribers\""
}

func (t *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber) GetSubscribers() []*CreateBulkCSVSubscriber_CreateBulkCSVSubscriber_Subscribers {
	if t == nil {
		t = &CreateBulkCSVSubscriber_CreateBulkCSVSubscriber{}
	}
	return t.Subscribers
}

type CreateBulkSubscriber_CreateBulkSubscriber_Subscribers struct {
	Active        bool   "json:\"active\" graphql:\"active\""
	Email         string "json:\"email\" graphql:\"email\""
	ID            string "json:\"id\" graphql:\"id\""
	VerifiedEmail bool   "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetActive() bool {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.Active
}
func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetEmail() string {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.Email
}
func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetID() string {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.ID
}
func (t *CreateBulkSubscriber_CreateBulkSubscriber_Subscribers) GetVerifiedEmail() bool {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber_Subscribers{}
	}
	return t.VerifiedEmail
}

type CreateBulkSubscriber_CreateBulkSubscriber struct {
	Subscribers []*CreateBulkSubscriber_CreateBulkSubscriber_Subscribers "json:\"subscribers,omitempty\" graphql:\"subscribers\""
}

func (t *CreateBulkSubscriber_CreateBulkSubscriber) GetSubscribers() []*CreateBulkSubscriber_CreateBulkSubscriber_Subscribers {
	if t == nil {
		t = &CreateBulkSubscriber_CreateBulkSubscriber{}
	}
	return t.Subscribers
}

type CreateSubscriber_CreateSubscriber_Subscriber struct {
	Active        bool       "json:\"active\" graphql:\"active\""
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email         string     "json:\"email\" graphql:\"email\""
	ID            string     "json:\"id\" graphql:\"id\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerifiedEmail bool       "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetActive() bool {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.Active
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.CreatedAt
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetCreatedBy() *string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.CreatedBy
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetEmail() string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.Email
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetID() string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.ID
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.UpdatedAt
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.UpdatedBy
}
func (t *CreateSubscriber_CreateSubscriber_Subscriber) GetVerifiedEmail() bool {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber_Subscriber{}
	}
	return t.VerifiedEmail
}

type CreateSubscriber_CreateSubscriber struct {
	Subscriber CreateSubscriber_CreateSubscriber_Subscriber "json:\"subscriber\" graphql:\"subscriber\""
}

func (t *CreateSubscriber_CreateSubscriber) GetSubscriber() *CreateSubscriber_CreateSubscriber_Subscriber {
	if t == nil {
		t = &CreateSubscriber_CreateSubscriber{}
	}
	return &t.Subscriber
}

type DeleteSubscriber_DeleteSubscriber struct {
	Email string "json:\"email\" graphql:\"email\""
}

func (t *DeleteSubscriber_DeleteSubscriber) GetEmail() string {
	if t == nil {
		t = &DeleteSubscriber_DeleteSubscriber{}
	}
	return t.Email
}

type GetAllSubscribers_Subscribers_Edges_Node struct {
	Active        bool    "json:\"active\" graphql:\"active\""
	Email         string  "json:\"email\" graphql:\"email\""
	ID            string  "json:\"id\" graphql:\"id\""
	OwnerID       *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	VerifiedEmail bool    "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *GetAllSubscribers_Subscribers_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.Active
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllSubscribers_Subscribers_Edges_Node) GetVerifiedEmail() bool {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges_Node{}
	}
	return t.VerifiedEmail
}

type GetAllSubscribers_Subscribers_Edges struct {
	Node *GetAllSubscribers_Subscribers_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllSubscribers_Subscribers_Edges) GetNode() *GetAllSubscribers_Subscribers_Edges_Node {
	if t == nil {
		t = &GetAllSubscribers_Subscribers_Edges{}
	}
	return t.Node
}

type GetAllSubscribers_Subscribers struct {
	Edges []*GetAllSubscribers_Subscribers_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllSubscribers_Subscribers) GetEdges() []*GetAllSubscribers_Subscribers_Edges {
	if t == nil {
		t = &GetAllSubscribers_Subscribers{}
	}
	return t.Edges
}

type GetSubscriberByEmail_Subscriber struct {
	Active        bool    "json:\"active\" graphql:\"active\""
	Email         string  "json:\"email\" graphql:\"email\""
	ID            string  "json:\"id\" graphql:\"id\""
	OwnerID       *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	VerifiedEmail bool    "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *GetSubscriberByEmail_Subscriber) GetActive() bool {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.Active
}
func (t *GetSubscriberByEmail_Subscriber) GetEmail() string {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.Email
}
func (t *GetSubscriberByEmail_Subscriber) GetID() string {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.ID
}
func (t *GetSubscriberByEmail_Subscriber) GetOwnerID() *string {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.OwnerID
}
func (t *GetSubscriberByEmail_Subscriber) GetVerifiedEmail() bool {
	if t == nil {
		t = &GetSubscriberByEmail_Subscriber{}
	}
	return t.VerifiedEmail
}

type GetSubscribers_Subscribers_Edges_Node struct {
	Active        bool    "json:\"active\" graphql:\"active\""
	Email         string  "json:\"email\" graphql:\"email\""
	ID            string  "json:\"id\" graphql:\"id\""
	OwnerID       *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	VerifiedEmail bool    "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
}

func (t *GetSubscribers_Subscribers_Edges_Node) GetActive() bool {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.Active
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.Email
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetID() string {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.ID
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetSubscribers_Subscribers_Edges_Node) GetVerifiedEmail() bool {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges_Node{}
	}
	return t.VerifiedEmail
}

type GetSubscribers_Subscribers_Edges struct {
	Node *GetSubscribers_Subscribers_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetSubscribers_Subscribers_Edges) GetNode() *GetSubscribers_Subscribers_Edges_Node {
	if t == nil {
		t = &GetSubscribers_Subscribers_Edges{}
	}
	return t.Node
}

type GetSubscribers_Subscribers struct {
	Edges []*GetSubscribers_Subscribers_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetSubscribers_Subscribers) GetEdges() []*GetSubscribers_Subscribers_Edges {
	if t == nil {
		t = &GetSubscribers_Subscribers{}
	}
	return t.Edges
}

type UpdateSubscriber_UpdateSubscriber_Subscriber struct {
	Active        bool       "json:\"active\" graphql:\"active\""
	CreatedAt     *time.Time "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy     *string    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Email         string     "json:\"email\" graphql:\"email\""
	ID            string     "json:\"id\" graphql:\"id\""
	PhoneNumber   *string    "json:\"phoneNumber,omitempty\" graphql:\"phoneNumber\""
	UpdatedAt     *time.Time "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy     *string    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	VerifiedEmail bool       "json:\"verifiedEmail\" graphql:\"verifiedEmail\""
	VerifiedPhone bool       "json:\"verifiedPhone\" graphql:\"verifiedPhone\""
}

func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetActive() bool {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.Active
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.CreatedAt
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.CreatedBy
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetEmail() string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.Email
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetID() string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.ID
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetPhoneNumber() *string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.PhoneNumber
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.UpdatedAt
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.UpdatedBy
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetVerifiedEmail() bool {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.VerifiedEmail
}
func (t *UpdateSubscriber_UpdateSubscriber_Subscriber) GetVerifiedPhone() bool {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber_Subscriber{}
	}
	return t.VerifiedPhone
}

type UpdateSubscriber_UpdateSubscriber struct {
	Subscriber UpdateSubscriber_UpdateSubscriber_Subscriber "json:\"subscriber\" graphql:\"subscriber\""
}

func (t *UpdateSubscriber_UpdateSubscriber) GetSubscriber() *UpdateSubscriber_UpdateSubscriber_Subscriber {
	if t == nil {
		t = &UpdateSubscriber_UpdateSubscriber{}
	}
	return &t.Subscriber
}

type CreateTemplate_CreateTemplate_Template_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateTemplate_CreateTemplate_Template_Owner) GetID() string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template_Owner{}
	}
	return t.ID
}

type CreateTemplate_CreateTemplate_Template struct {
	Description *string                                       "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                        "json:\"id\" graphql:\"id\""
	Jsonconfig  json.RawMessage                               "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                        "json:\"name\" graphql:\"name\""
	Uischema    json.RawMessage                               "json:\"uischema,omitempty\" graphql:\"uischema\""
	Owner       *CreateTemplate_CreateTemplate_Template_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *CreateTemplate_CreateTemplate_Template) GetDescription() *string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Description
}
func (t *CreateTemplate_CreateTemplate_Template) GetID() string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.ID
}
func (t *CreateTemplate_CreateTemplate_Template) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return &t.Jsonconfig
}
func (t *CreateTemplate_CreateTemplate_Template) GetName() string {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Name
}
func (t *CreateTemplate_CreateTemplate_Template) GetUischema() *json.RawMessage {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return &t.Uischema
}
func (t *CreateTemplate_CreateTemplate_Template) GetOwner() *CreateTemplate_CreateTemplate_Template_Owner {
	if t == nil {
		t = &CreateTemplate_CreateTemplate_Template{}
	}
	return t.Owner
}

type CreateTemplate_CreateTemplate struct {
	Template CreateTemplate_CreateTemplate_Template "json:\"template\" graphql:\"template\""
}

func (t *CreateTemplate_CreateTemplate) GetTemplate() *CreateTemplate_CreateTemplate_Template {
	if t == nil {
		t = &CreateTemplate_CreateTemplate{}
	}
	return &t.Template
}

type CreateBulkTemplate_CreateBulkTemplate_Templates_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkTemplate_CreateBulkTemplate_Templates_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates_Owner{}
	}
	return t.ID
}

type CreateBulkTemplate_CreateBulkTemplate_Templates struct {
	Description *string                                                "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                                 "json:\"id\" graphql:\"id\""
	Jsonconfig  json.RawMessage                                        "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                                 "json:\"name\" graphql:\"name\""
	Uischema    json.RawMessage                                        "json:\"uischema,omitempty\" graphql:\"uischema\""
	Owner       *CreateBulkTemplate_CreateBulkTemplate_Templates_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetDescription() *string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Description
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetID() string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.ID
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return &t.Jsonconfig
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetName() string {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Name
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetUischema() *json.RawMessage {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return &t.Uischema
}
func (t *CreateBulkTemplate_CreateBulkTemplate_Templates) GetOwner() *CreateBulkTemplate_CreateBulkTemplate_Templates_Owner {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate_Templates{}
	}
	return t.Owner
}

type CreateBulkTemplate_CreateBulkTemplate struct {
	Templates []*CreateBulkTemplate_CreateBulkTemplate_Templates "json:\"templates,omitempty\" graphql:\"templates\""
}

func (t *CreateBulkTemplate_CreateBulkTemplate) GetTemplates() []*CreateBulkTemplate_CreateBulkTemplate_Templates {
	if t == nil {
		t = &CreateBulkTemplate_CreateBulkTemplate{}
	}
	return t.Templates
}

type CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner{}
	}
	return t.ID
}

type CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates struct {
	Description *string                                                      "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                                       "json:\"id\" graphql:\"id\""
	Jsonconfig  json.RawMessage                                              "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                                       "json:\"name\" graphql:\"name\""
	Uischema    json.RawMessage                                              "json:\"uischema,omitempty\" graphql:\"uischema\""
	Owner       *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Description
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetID() string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.ID
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return &t.Jsonconfig
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetName() string {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Name
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetUischema() *json.RawMessage {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return &t.Uischema
}
func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates) GetOwner() *CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates_Owner {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates{}
	}
	return t.Owner
}

type CreateBulkCSVTemplate_CreateBulkCSVTemplate struct {
	Templates []*CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates "json:\"templates,omitempty\" graphql:\"templates\""
}

func (t *CreateBulkCSVTemplate_CreateBulkCSVTemplate) GetTemplates() []*CreateBulkCSVTemplate_CreateBulkCSVTemplate_Templates {
	if t == nil {
		t = &CreateBulkCSVTemplate_CreateBulkCSVTemplate{}
	}
	return t.Templates
}

type UpdateTemplate_UpdateTemplate_Template_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateTemplate_UpdateTemplate_Template_Owner) GetID() string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template_Owner{}
	}
	return t.ID
}

type UpdateTemplate_UpdateTemplate_Template struct {
	CreatedAt   *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                       "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                        "json:\"id\" graphql:\"id\""
	Jsonconfig  json.RawMessage                               "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                        "json:\"name\" graphql:\"name\""
	Uischema    json.RawMessage                               "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt   *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Owner       *UpdateTemplate_UpdateTemplate_Template_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *UpdateTemplate_UpdateTemplate_Template) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.CreatedAt
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.CreatedBy
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetDescription() *string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Description
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetID() string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.ID
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return &t.Jsonconfig
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetName() string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Name
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetUischema() *json.RawMessage {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return &t.Uischema
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.UpdatedAt
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.UpdatedBy
}
func (t *UpdateTemplate_UpdateTemplate_Template) GetOwner() *UpdateTemplate_UpdateTemplate_Template_Owner {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate_Template{}
	}
	return t.Owner
}

type UpdateTemplate_UpdateTemplate struct {
	Template UpdateTemplate_UpdateTemplate_Template "json:\"template\" graphql:\"template\""
}

func (t *UpdateTemplate_UpdateTemplate) GetTemplate() *UpdateTemplate_UpdateTemplate_Template {
	if t == nil {
		t = &UpdateTemplate_UpdateTemplate{}
	}
	return &t.Template
}

type GetAllTemplates_Templates_Edges_Node_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllTemplates_Templates_Edges_Node_Owner) GetID() string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node_Owner{}
	}
	return t.ID
}

type GetAllTemplates_Templates_Edges_Node struct {
	CreatedAt   *time.Time                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                                     "json:\"description,omitempty\" graphql:\"description\""
	ID          string                                      "json:\"id\" graphql:\"id\""
	Jsonconfig  json.RawMessage                             "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                                      "json:\"name\" graphql:\"name\""
	Uischema    json.RawMessage                             "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt   *time.Time                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Owner       *GetAllTemplates_Templates_Edges_Node_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *GetAllTemplates_Templates_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTemplates_Templates_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTemplates_Templates_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllTemplates_Templates_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTemplates_Templates_Edges_Node) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return &t.Jsonconfig
}
func (t *GetAllTemplates_Templates_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllTemplates_Templates_Edges_Node) GetUischema() *json.RawMessage {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return &t.Uischema
}
func (t *GetAllTemplates_Templates_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTemplates_Templates_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllTemplates_Templates_Edges_Node) GetOwner() *GetAllTemplates_Templates_Edges_Node_Owner {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges_Node{}
	}
	return t.Owner
}

type GetAllTemplates_Templates_Edges struct {
	Node *GetAllTemplates_Templates_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTemplates_Templates_Edges) GetNode() *GetAllTemplates_Templates_Edges_Node {
	if t == nil {
		t = &GetAllTemplates_Templates_Edges{}
	}
	return t.Node
}

type GetAllTemplates_Templates struct {
	Edges []*GetAllTemplates_Templates_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTemplates_Templates) GetEdges() []*GetAllTemplates_Templates_Edges {
	if t == nil {
		t = &GetAllTemplates_Templates{}
	}
	return t.Edges
}

type GetTemplateByID_Template_Owner struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetTemplateByID_Template_Owner) GetID() string {
	if t == nil {
		t = &GetTemplateByID_Template_Owner{}
	}
	return t.ID
}

type GetTemplateByID_Template struct {
	CreatedAt   *time.Time                      "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy   *string                         "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description *string                         "json:\"description,omitempty\" graphql:\"description\""
	ID          string                          "json:\"id\" graphql:\"id\""
	Jsonconfig  json.RawMessage                 "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name        string                          "json:\"name\" graphql:\"name\""
	Uischema    json.RawMessage                 "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt   *time.Time                      "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy   *string                         "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Owner       *GetTemplateByID_Template_Owner "json:\"owner,omitempty\" graphql:\"owner\""
}

func (t *GetTemplateByID_Template) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.CreatedAt
}
func (t *GetTemplateByID_Template) GetCreatedBy() *string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.CreatedBy
}
func (t *GetTemplateByID_Template) GetDescription() *string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Description
}
func (t *GetTemplateByID_Template) GetID() string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.ID
}
func (t *GetTemplateByID_Template) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return &t.Jsonconfig
}
func (t *GetTemplateByID_Template) GetName() string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Name
}
func (t *GetTemplateByID_Template) GetUischema() *json.RawMessage {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return &t.Uischema
}
func (t *GetTemplateByID_Template) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.UpdatedAt
}
func (t *GetTemplateByID_Template) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.UpdatedBy
}
func (t *GetTemplateByID_Template) GetOwner() *GetTemplateByID_Template_Owner {
	if t == nil {
		t = &GetTemplateByID_Template{}
	}
	return t.Owner
}

type GetAllTemplateHistories_TemplateHistories_Edges_Node struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string            "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime  time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID           string             "json:\"id\" graphql:\"id\""
	Jsonconfig   json.RawMessage    "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name         string             "json:\"name\" graphql:\"name\""
	Operation    enthistory.OpType  "json:\"operation\" graphql:\"operation\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref          *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Tags         []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType "json:\"templateType\" graphql:\"templateType\""
	Uischema     json.RawMessage    "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Jsonconfig
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.TemplateType
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetUischema() *json.RawMessage {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Uischema
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllTemplateHistories_TemplateHistories_Edges struct {
	Node *GetAllTemplateHistories_TemplateHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTemplateHistories_TemplateHistories_Edges) GetNode() *GetAllTemplateHistories_TemplateHistories_Edges_Node {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories_Edges{}
	}
	return t.Node
}

type GetAllTemplateHistories_TemplateHistories struct {
	Edges []*GetAllTemplateHistories_TemplateHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTemplateHistories_TemplateHistories) GetEdges() []*GetAllTemplateHistories_TemplateHistories_Edges {
	if t == nil {
		t = &GetAllTemplateHistories_TemplateHistories{}
	}
	return t.Edges
}

type GetTemplateHistories_TemplateHistories_Edges_Node struct {
	CreatedAt    *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy    *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description  *string            "json:\"description,omitempty\" graphql:\"description\""
	HistoryTime  time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID           string             "json:\"id\" graphql:\"id\""
	Jsonconfig   json.RawMessage    "json:\"jsonconfig\" graphql:\"jsonconfig\""
	Name         string             "json:\"name\" graphql:\"name\""
	Operation    enthistory.OpType  "json:\"operation\" graphql:\"operation\""
	OwnerID      *string            "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref          *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Tags         []string           "json:\"tags,omitempty\" graphql:\"tags\""
	TemplateType enums.DocumentType "json:\"templateType\" graphql:\"templateType\""
	Uischema     json.RawMessage    "json:\"uischema,omitempty\" graphql:\"uischema\""
	UpdatedAt    *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy    *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetJsonconfig() *json.RawMessage {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Jsonconfig
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetTemplateType() *enums.DocumentType {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.TemplateType
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetUischema() *json.RawMessage {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return &t.Uischema
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetTemplateHistories_TemplateHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetTemplateHistories_TemplateHistories_Edges struct {
	Node *GetTemplateHistories_TemplateHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetTemplateHistories_TemplateHistories_Edges) GetNode() *GetTemplateHistories_TemplateHistories_Edges_Node {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories_Edges{}
	}
	return t.Node
}

type GetTemplateHistories_TemplateHistories struct {
	Edges []*GetTemplateHistories_TemplateHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetTemplateHistories_TemplateHistories) GetEdges() []*GetTemplateHistories_TemplateHistories_Edges {
	if t == nil {
		t = &GetTemplateHistories_TemplateHistories{}
	}
	return t.Edges
}

type CreateTFASetting_CreateTFASetting_TfaSetting struct {
	RecoveryCodes []string "json:\"recoveryCodes,omitempty\" graphql:\"recoveryCodes\""
	TotpAllowed   *bool    "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified      bool     "json:\"verified\" graphql:\"verified\""
}

func (t *CreateTFASetting_CreateTFASetting_TfaSetting) GetRecoveryCodes() []string {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting_TfaSetting{}
	}
	return t.RecoveryCodes
}
func (t *CreateTFASetting_CreateTFASetting_TfaSetting) GetTotpAllowed() *bool {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting_TfaSetting{}
	}
	return t.TotpAllowed
}
func (t *CreateTFASetting_CreateTFASetting_TfaSetting) GetVerified() bool {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting_TfaSetting{}
	}
	return t.Verified
}

type CreateTFASetting_CreateTFASetting struct {
	TfaSetting CreateTFASetting_CreateTFASetting_TfaSetting "json:\"tfaSetting\" graphql:\"tfaSetting\""
}

func (t *CreateTFASetting_CreateTFASetting) GetTfaSetting() *CreateTFASetting_CreateTFASetting_TfaSetting {
	if t == nil {
		t = &CreateTFASetting_CreateTFASetting{}
	}
	return &t.TfaSetting
}

type GetTFASetting_TfaSetting struct {
	RecoveryCodes []string "json:\"recoveryCodes,omitempty\" graphql:\"recoveryCodes\""
	TotpAllowed   *bool    "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified      bool     "json:\"verified\" graphql:\"verified\""
}

func (t *GetTFASetting_TfaSetting) GetRecoveryCodes() []string {
	if t == nil {
		t = &GetTFASetting_TfaSetting{}
	}
	return t.RecoveryCodes
}
func (t *GetTFASetting_TfaSetting) GetTotpAllowed() *bool {
	if t == nil {
		t = &GetTFASetting_TfaSetting{}
	}
	return t.TotpAllowed
}
func (t *GetTFASetting_TfaSetting) GetVerified() bool {
	if t == nil {
		t = &GetTFASetting_TfaSetting{}
	}
	return t.Verified
}

type GetAllTFASettings_TfaSettings_Edges_Node struct {
	RecoveryCodes []string "json:\"recoveryCodes,omitempty\" graphql:\"recoveryCodes\""
	TotpAllowed   *bool    "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified      bool     "json:\"verified\" graphql:\"verified\""
}

func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetRecoveryCodes() []string {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.RecoveryCodes
}
func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetTotpAllowed() *bool {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.TotpAllowed
}
func (t *GetAllTFASettings_TfaSettings_Edges_Node) GetVerified() bool {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges_Node{}
	}
	return t.Verified
}

type GetAllTFASettings_TfaSettings_Edges struct {
	Node *GetAllTFASettings_TfaSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllTFASettings_TfaSettings_Edges) GetNode() *GetAllTFASettings_TfaSettings_Edges_Node {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings_Edges{}
	}
	return t.Node
}

type GetAllTFASettings_TfaSettings struct {
	Edges []*GetAllTFASettings_TfaSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllTFASettings_TfaSettings) GetEdges() []*GetAllTFASettings_TfaSettings_Edges {
	if t == nil {
		t = &GetAllTFASettings_TfaSettings{}
	}
	return t.Edges
}

type UpdateTFASetting_UpdateTFASetting_TfaSetting struct {
	RecoveryCodes []string "json:\"recoveryCodes,omitempty\" graphql:\"recoveryCodes\""
	TotpAllowed   *bool    "json:\"totpAllowed,omitempty\" graphql:\"totpAllowed\""
	Verified      bool     "json:\"verified\" graphql:\"verified\""
}

func (t *UpdateTFASetting_UpdateTFASetting_TfaSetting) GetRecoveryCodes() []string {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting_TfaSetting{}
	}
	return t.RecoveryCodes
}
func (t *UpdateTFASetting_UpdateTFASetting_TfaSetting) GetTotpAllowed() *bool {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting_TfaSetting{}
	}
	return t.TotpAllowed
}
func (t *UpdateTFASetting_UpdateTFASetting_TfaSetting) GetVerified() bool {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting_TfaSetting{}
	}
	return t.Verified
}

type UpdateTFASetting_UpdateTFASetting struct {
	TfaSetting UpdateTFASetting_UpdateTFASetting_TfaSetting "json:\"tfaSetting\" graphql:\"tfaSetting\""
}

func (t *UpdateTFASetting_UpdateTFASetting) GetTfaSetting() *UpdateTFASetting_UpdateTFASetting_TfaSetting {
	if t == nil {
		t = &UpdateTFASetting_UpdateTFASetting{}
	}
	return &t.TfaSetting
}

type CreateUser_CreateUser_User_OrgMemberships struct {
	ID             string "json:\"id\" graphql:\"id\""
	OrganizationID string "json:\"organizationID\" graphql:\"organizationID\""
}

func (t *CreateUser_CreateUser_User_OrgMemberships) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_OrgMemberships{}
	}
	return t.ID
}
func (t *CreateUser_CreateUser_User_OrgMemberships) GetOrganizationID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_OrgMemberships{}
	}
	return t.OrganizationID
}

type CreateUser_CreateUser_User_GroupMemberships struct {
	ID      string "json:\"id\" graphql:\"id\""
	GroupID string "json:\"groupID\" graphql:\"groupID\""
}

func (t *CreateUser_CreateUser_User_GroupMemberships) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_GroupMemberships{}
	}
	return t.ID
}
func (t *CreateUser_CreateUser_User_GroupMemberships) GetGroupID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_GroupMemberships{}
	}
	return t.GroupID
}

type CreateUser_CreateUser_User_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *CreateUser_CreateUser_User_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *CreateUser_CreateUser_User_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *CreateUser_CreateUser_User_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type CreateUser_CreateUser_User_Setting struct {
	DefaultOrg     *CreateUser_CreateUser_User_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	CreatedAt      *time.Time                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed bool                                           "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                                           "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                     "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                               "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                                     "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                                       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *CreateUser_CreateUser_User_Setting) GetDefaultOrg() *CreateUser_CreateUser_User_Setting_DefaultOrg {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.DefaultOrg
}
func (t *CreateUser_CreateUser_User_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.CreatedAt
}
func (t *CreateUser_CreateUser_User_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.CreatedBy
}
func (t *CreateUser_CreateUser_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.EmailConfirmed
}
func (t *CreateUser_CreateUser_User_Setting) GetLocked() bool {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.Locked
}
func (t *CreateUser_CreateUser_User_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.SilencedAt
}
func (t *CreateUser_CreateUser_User_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return &t.Status
}
func (t *CreateUser_CreateUser_User_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.SuspendedAt
}
func (t *CreateUser_CreateUser_User_Setting) GetTags() []string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.Tags
}
func (t *CreateUser_CreateUser_User_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.UpdatedAt
}
func (t *CreateUser_CreateUser_User_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User_Setting{}
	}
	return t.UpdatedBy
}

type CreateUser_CreateUser_User struct {
	AuthProvider     enums.AuthProvider                             "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFile  *string                                        "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarRemoteURL  *string                                        "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	DisplayName      string                                         "json:\"displayName\" graphql:\"displayName\""
	Email            string                                         "json:\"email\" graphql:\"email\""
	FirstName        *string                                        "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID               string                                         "json:\"id\" graphql:\"id\""
	LastName         *string                                        "json:\"lastName,omitempty\" graphql:\"lastName\""
	Sub              *string                                        "json:\"sub,omitempty\" graphql:\"sub\""
	Tags             []string                                       "json:\"tags,omitempty\" graphql:\"tags\""
	OrgMemberships   []*CreateUser_CreateUser_User_OrgMemberships   "json:\"orgMemberships,omitempty\" graphql:\"orgMemberships\""
	GroupMemberships []*CreateUser_CreateUser_User_GroupMemberships "json:\"groupMemberships,omitempty\" graphql:\"groupMemberships\""
	Setting          CreateUser_CreateUser_User_Setting             "json:\"setting\" graphql:\"setting\""
}

func (t *CreateUser_CreateUser_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return &t.AuthProvider
}
func (t *CreateUser_CreateUser_User) GetAvatarLocalFile() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.AvatarLocalFile
}
func (t *CreateUser_CreateUser_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.AvatarRemoteURL
}
func (t *CreateUser_CreateUser_User) GetDisplayName() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.DisplayName
}
func (t *CreateUser_CreateUser_User) GetEmail() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Email
}
func (t *CreateUser_CreateUser_User) GetFirstName() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.FirstName
}
func (t *CreateUser_CreateUser_User) GetID() string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.ID
}
func (t *CreateUser_CreateUser_User) GetLastName() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.LastName
}
func (t *CreateUser_CreateUser_User) GetSub() *string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Sub
}
func (t *CreateUser_CreateUser_User) GetTags() []string {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.Tags
}
func (t *CreateUser_CreateUser_User) GetOrgMemberships() []*CreateUser_CreateUser_User_OrgMemberships {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.OrgMemberships
}
func (t *CreateUser_CreateUser_User) GetGroupMemberships() []*CreateUser_CreateUser_User_GroupMemberships {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return t.GroupMemberships
}
func (t *CreateUser_CreateUser_User) GetSetting() *CreateUser_CreateUser_User_Setting {
	if t == nil {
		t = &CreateUser_CreateUser_User{}
	}
	return &t.Setting
}

type CreateUser_CreateUser struct {
	User CreateUser_CreateUser_User "json:\"user\" graphql:\"user\""
}

func (t *CreateUser_CreateUser) GetUser() *CreateUser_CreateUser_User {
	if t == nil {
		t = &CreateUser_CreateUser{}
	}
	return &t.User
}

type DeleteUser_DeleteUser struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteUser_DeleteUser) GetDeletedID() string {
	if t == nil {
		t = &DeleteUser_DeleteUser{}
	}
	return t.DeletedID
}

type GetAllUsers_Users_Edges_Node_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetAllUsers_Users_Edges_Node_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *GetAllUsers_Users_Edges_Node_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *GetAllUsers_Users_Edges_Node_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetAllUsers_Users_Edges_Node_Setting struct {
	DefaultOrg     *GetAllUsers_Users_Edges_Node_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	CreatedAt      *time.Time                                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed bool                                             "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                                             "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                       "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                                 "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                                       "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                                         "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllUsers_Users_Edges_Node_Setting) GetDefaultOrg() *GetAllUsers_Users_Edges_Node_Setting_DefaultOrg {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.DefaultOrg
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.CreatedAt
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.CreatedBy
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.EmailConfirmed
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetLocked() bool {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.Locked
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.SilencedAt
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return &t.Status
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.SuspendedAt
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetTags() []string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.Tags
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetAllUsers_Users_Edges_Node_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node_Setting{}
	}
	return t.UpdatedBy
}

type GetAllUsers_Users_Edges_Node struct {
	AuthProvider    enums.AuthProvider                   "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFile *string                              "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarRemoteURL *string                              "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	DisplayName     string                               "json:\"displayName\" graphql:\"displayName\""
	Email           string                               "json:\"email\" graphql:\"email\""
	FirstName       *string                              "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID              string                               "json:\"id\" graphql:\"id\""
	LastName        *string                              "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen        *time.Time                           "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Sub             *string                              "json:\"sub,omitempty\" graphql:\"sub\""
	Tags            []string                             "json:\"tags,omitempty\" graphql:\"tags\""
	Setting         GetAllUsers_Users_Edges_Node_Setting "json:\"setting\" graphql:\"setting\""
	CreatedAt       *time.Time                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt       *time.Time                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllUsers_Users_Edges_Node) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return &t.AuthProvider
}
func (t *GetAllUsers_Users_Edges_Node) GetAvatarLocalFile() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.AvatarLocalFile
}
func (t *GetAllUsers_Users_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetAllUsers_Users_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllUsers_Users_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllUsers_Users_Edges_Node) GetFirstName() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.FirstName
}
func (t *GetAllUsers_Users_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUsers_Users_Edges_Node) GetLastName() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.LastName
}
func (t *GetAllUsers_Users_Edges_Node) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.LastSeen
}
func (t *GetAllUsers_Users_Edges_Node) GetSub() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.Sub
}
func (t *GetAllUsers_Users_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUsers_Users_Edges_Node) GetSetting() *GetAllUsers_Users_Edges_Node_Setting {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return &t.Setting
}
func (t *GetAllUsers_Users_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUsers_Users_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUsers_Users_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUsers_Users_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUsers_Users_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllUsers_Users_Edges struct {
	Node *GetAllUsers_Users_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUsers_Users_Edges) GetNode() *GetAllUsers_Users_Edges_Node {
	if t == nil {
		t = &GetAllUsers_Users_Edges{}
	}
	return t.Node
}

type GetAllUsers_Users struct {
	Edges []*GetAllUsers_Users_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllUsers_Users) GetEdges() []*GetAllUsers_Users_Edges {
	if t == nil {
		t = &GetAllUsers_Users{}
	}
	return t.Edges
}

type GetUserByID_User_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetUserByID_User_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetUserByID_User_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *GetUserByID_User_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetUserByID_User_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *GetUserByID_User_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserByID_User_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetUserByID_User_Setting struct {
	DefaultOrg     *GetUserByID_User_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	CreatedAt      *time.Time                           "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                              "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed bool                                 "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                                 "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                           "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                     "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                           "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                             "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                           "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                              "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserByID_User_Setting) GetDefaultOrg() *GetUserByID_User_Setting_DefaultOrg {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.DefaultOrg
}
func (t *GetUserByID_User_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.CreatedAt
}
func (t *GetUserByID_User_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.CreatedBy
}
func (t *GetUserByID_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.EmailConfirmed
}
func (t *GetUserByID_User_Setting) GetLocked() bool {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.Locked
}
func (t *GetUserByID_User_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.SilencedAt
}
func (t *GetUserByID_User_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return &t.Status
}
func (t *GetUserByID_User_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.SuspendedAt
}
func (t *GetUserByID_User_Setting) GetTags() []string {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.Tags
}
func (t *GetUserByID_User_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetUserByID_User_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserByID_User_Setting{}
	}
	return t.UpdatedBy
}

type GetUserByID_User_Organizations_Members struct {
	ID   string     "json:\"id\" graphql:\"id\""
	Role enums.Role "json:\"role\" graphql:\"role\""
}

func (t *GetUserByID_User_Organizations_Members) GetID() string {
	if t == nil {
		t = &GetUserByID_User_Organizations_Members{}
	}
	return t.ID
}
func (t *GetUserByID_User_Organizations_Members) GetRole() *enums.Role {
	if t == nil {
		t = &GetUserByID_User_Organizations_Members{}
	}
	return &t.Role
}

type GetUserByID_User_Organizations struct {
	ID          string                                    "json:\"id\" graphql:\"id\""
	Name        string                                    "json:\"name\" graphql:\"name\""
	PersonalOrg *bool                                     "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
	Members     []*GetUserByID_User_Organizations_Members "json:\"members,omitempty\" graphql:\"members\""
}

func (t *GetUserByID_User_Organizations) GetID() string {
	if t == nil {
		t = &GetUserByID_User_Organizations{}
	}
	return t.ID
}
func (t *GetUserByID_User_Organizations) GetName() string {
	if t == nil {
		t = &GetUserByID_User_Organizations{}
	}
	return t.Name
}
func (t *GetUserByID_User_Organizations) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserByID_User_Organizations{}
	}
	return t.PersonalOrg
}
func (t *GetUserByID_User_Organizations) GetMembers() []*GetUserByID_User_Organizations_Members {
	if t == nil {
		t = &GetUserByID_User_Organizations{}
	}
	return t.Members
}

type GetUserByID_User struct {
	AuthProvider    enums.AuthProvider                "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFile *string                           "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarRemoteURL *string                           "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	DisplayName     string                            "json:\"displayName\" graphql:\"displayName\""
	Email           string                            "json:\"email\" graphql:\"email\""
	FirstName       *string                           "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID              string                            "json:\"id\" graphql:\"id\""
	LastName        *string                           "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen        *time.Time                        "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Sub             *string                           "json:\"sub,omitempty\" graphql:\"sub\""
	Tags            []string                          "json:\"tags,omitempty\" graphql:\"tags\""
	Setting         GetUserByID_User_Setting          "json:\"setting\" graphql:\"setting\""
	Organizations   []*GetUserByID_User_Organizations "json:\"organizations,omitempty\" graphql:\"organizations\""
	UpdatedAt       *time.Time                        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	CreatedAt       *time.Time                        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
}

func (t *GetUserByID_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return &t.AuthProvider
}
func (t *GetUserByID_User) GetAvatarLocalFile() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.AvatarLocalFile
}
func (t *GetUserByID_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.AvatarRemoteURL
}
func (t *GetUserByID_User) GetDisplayName() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.DisplayName
}
func (t *GetUserByID_User) GetEmail() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Email
}
func (t *GetUserByID_User) GetFirstName() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.FirstName
}
func (t *GetUserByID_User) GetID() string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.ID
}
func (t *GetUserByID_User) GetLastName() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.LastName
}
func (t *GetUserByID_User) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.LastSeen
}
func (t *GetUserByID_User) GetSub() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Sub
}
func (t *GetUserByID_User) GetTags() []string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Tags
}
func (t *GetUserByID_User) GetSetting() *GetUserByID_User_Setting {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return &t.Setting
}
func (t *GetUserByID_User) GetOrganizations() []*GetUserByID_User_Organizations {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.Organizations
}
func (t *GetUserByID_User) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.UpdatedAt
}
func (t *GetUserByID_User) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.UpdatedBy
}
func (t *GetUserByID_User) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.CreatedAt
}
func (t *GetUserByID_User) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserByID_User{}
	}
	return t.CreatedBy
}

type GetUserByIDWithOrgs_User_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetUserByIDWithOrgs_User_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *GetUserByIDWithOrgs_User_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *GetUserByIDWithOrgs_User_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetUserByIDWithOrgs_User_Setting struct {
	DefaultOrg     *GetUserByIDWithOrgs_User_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	CreatedAt      *time.Time                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed bool                                         "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                                         "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                   "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                             "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                                   "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                                     "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserByIDWithOrgs_User_Setting) GetDefaultOrg() *GetUserByIDWithOrgs_User_Setting_DefaultOrg {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.DefaultOrg
}
func (t *GetUserByIDWithOrgs_User_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.CreatedAt
}
func (t *GetUserByIDWithOrgs_User_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.CreatedBy
}
func (t *GetUserByIDWithOrgs_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.EmailConfirmed
}
func (t *GetUserByIDWithOrgs_User_Setting) GetLocked() bool {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.Locked
}
func (t *GetUserByIDWithOrgs_User_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.SilencedAt
}
func (t *GetUserByIDWithOrgs_User_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return &t.Status
}
func (t *GetUserByIDWithOrgs_User_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.SuspendedAt
}
func (t *GetUserByIDWithOrgs_User_Setting) GetTags() []string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.Tags
}
func (t *GetUserByIDWithOrgs_User_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.UpdatedAt
}
func (t *GetUserByIDWithOrgs_User_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_Setting{}
	}
	return t.UpdatedBy
}

type GetUserByIDWithOrgs_User_OrgMemberships_User struct {
	FirstName *string "json:\"firstName,omitempty\" graphql:\"firstName\""
	LastName  *string "json:\"lastName,omitempty\" graphql:\"lastName\""
}

func (t *GetUserByIDWithOrgs_User_OrgMemberships_User) GetFirstName() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships_User{}
	}
	return t.FirstName
}
func (t *GetUserByIDWithOrgs_User_OrgMemberships_User) GetLastName() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships_User{}
	}
	return t.LastName
}

type GetUserByIDWithOrgs_User_OrgMemberships struct {
	ID   string                                       "json:\"id\" graphql:\"id\""
	Role enums.Role                                   "json:\"role\" graphql:\"role\""
	User GetUserByIDWithOrgs_User_OrgMemberships_User "json:\"user\" graphql:\"user\""
}

func (t *GetUserByIDWithOrgs_User_OrgMemberships) GetID() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships{}
	}
	return t.ID
}
func (t *GetUserByIDWithOrgs_User_OrgMemberships) GetRole() *enums.Role {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships{}
	}
	return &t.Role
}
func (t *GetUserByIDWithOrgs_User_OrgMemberships) GetUser() *GetUserByIDWithOrgs_User_OrgMemberships_User {
	if t == nil {
		t = &GetUserByIDWithOrgs_User_OrgMemberships{}
	}
	return &t.User
}

type GetUserByIDWithOrgs_User struct {
	AuthProvider    enums.AuthProvider                         "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFile *string                                    "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarRemoteURL *string                                    "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	DisplayName     string                                     "json:\"displayName\" graphql:\"displayName\""
	Email           string                                     "json:\"email\" graphql:\"email\""
	FirstName       *string                                    "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID              string                                     "json:\"id\" graphql:\"id\""
	LastName        *string                                    "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen        *time.Time                                 "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Sub             *string                                    "json:\"sub,omitempty\" graphql:\"sub\""
	Tags            []string                                   "json:\"tags,omitempty\" graphql:\"tags\""
	Setting         GetUserByIDWithOrgs_User_Setting           "json:\"setting\" graphql:\"setting\""
	OrgMemberships  []*GetUserByIDWithOrgs_User_OrgMemberships "json:\"orgMemberships,omitempty\" graphql:\"orgMemberships\""
	CreatedAt       *time.Time                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	UpdatedAt       *time.Time                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserByIDWithOrgs_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return &t.AuthProvider
}
func (t *GetUserByIDWithOrgs_User) GetAvatarLocalFile() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.AvatarLocalFile
}
func (t *GetUserByIDWithOrgs_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.AvatarRemoteURL
}
func (t *GetUserByIDWithOrgs_User) GetDisplayName() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.DisplayName
}
func (t *GetUserByIDWithOrgs_User) GetEmail() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.Email
}
func (t *GetUserByIDWithOrgs_User) GetFirstName() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.FirstName
}
func (t *GetUserByIDWithOrgs_User) GetID() string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.ID
}
func (t *GetUserByIDWithOrgs_User) GetLastName() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.LastName
}
func (t *GetUserByIDWithOrgs_User) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.LastSeen
}
func (t *GetUserByIDWithOrgs_User) GetSub() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.Sub
}
func (t *GetUserByIDWithOrgs_User) GetTags() []string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.Tags
}
func (t *GetUserByIDWithOrgs_User) GetSetting() *GetUserByIDWithOrgs_User_Setting {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return &t.Setting
}
func (t *GetUserByIDWithOrgs_User) GetOrgMemberships() []*GetUserByIDWithOrgs_User_OrgMemberships {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.OrgMemberships
}
func (t *GetUserByIDWithOrgs_User) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.CreatedAt
}
func (t *GetUserByIDWithOrgs_User) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.CreatedBy
}
func (t *GetUserByIDWithOrgs_User) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.UpdatedAt
}
func (t *GetUserByIDWithOrgs_User) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserByIDWithOrgs_User{}
	}
	return t.UpdatedBy
}

type UpdateUser_UpdateUser_User_GroupMemberships struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateUser_UpdateUser_User_GroupMemberships) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_GroupMemberships{}
	}
	return t.ID
}

type UpdateUser_UpdateUser_User_OrgMemberships struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateUser_UpdateUser_User_OrgMemberships) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_OrgMemberships{}
	}
	return t.ID
}

type UpdateUser_UpdateUser_User_Setting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *UpdateUser_UpdateUser_User_Setting_DefaultOrg) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting_DefaultOrg{}
	}
	return t.ID
}
func (t *UpdateUser_UpdateUser_User_Setting_DefaultOrg) GetName() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting_DefaultOrg{}
	}
	return t.Name
}
func (t *UpdateUser_UpdateUser_User_Setting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type UpdateUser_UpdateUser_User_Setting struct {
	DefaultOrg     *UpdateUser_UpdateUser_User_Setting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	CreatedAt      *time.Time                                     "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                        "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed bool                                           "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	Locked         bool                                           "json:\"locked\" graphql:\"locked\""
	SilencedAt     *time.Time                                     "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                               "json:\"status\" graphql:\"status\""
	SuspendedAt    *time.Time                                     "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags           []string                                       "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time                                     "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                        "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateUser_UpdateUser_User_Setting) GetDefaultOrg() *UpdateUser_UpdateUser_User_Setting_DefaultOrg {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.DefaultOrg
}
func (t *UpdateUser_UpdateUser_User_Setting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.CreatedAt
}
func (t *UpdateUser_UpdateUser_User_Setting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.CreatedBy
}
func (t *UpdateUser_UpdateUser_User_Setting) GetEmailConfirmed() bool {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.EmailConfirmed
}
func (t *UpdateUser_UpdateUser_User_Setting) GetLocked() bool {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.Locked
}
func (t *UpdateUser_UpdateUser_User_Setting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.SilencedAt
}
func (t *UpdateUser_UpdateUser_User_Setting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return &t.Status
}
func (t *UpdateUser_UpdateUser_User_Setting) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.SuspendedAt
}
func (t *UpdateUser_UpdateUser_User_Setting) GetTags() []string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.Tags
}
func (t *UpdateUser_UpdateUser_User_Setting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.UpdatedAt
}
func (t *UpdateUser_UpdateUser_User_Setting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User_Setting{}
	}
	return t.UpdatedBy
}

type UpdateUser_UpdateUser_User struct {
	AuthProvider     enums.AuthProvider                             "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFile  *string                                        "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarRemoteURL  *string                                        "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	DisplayName      string                                         "json:\"displayName\" graphql:\"displayName\""
	Email            string                                         "json:\"email\" graphql:\"email\""
	FirstName        *string                                        "json:\"firstName,omitempty\" graphql:\"firstName\""
	ID               string                                         "json:\"id\" graphql:\"id\""
	LastName         *string                                        "json:\"lastName,omitempty\" graphql:\"lastName\""
	Sub              *string                                        "json:\"sub,omitempty\" graphql:\"sub\""
	Tags             []string                                       "json:\"tags,omitempty\" graphql:\"tags\""
	GroupMemberships []*UpdateUser_UpdateUser_User_GroupMemberships "json:\"groupMemberships,omitempty\" graphql:\"groupMemberships\""
	OrgMemberships   []*UpdateUser_UpdateUser_User_OrgMemberships   "json:\"orgMemberships,omitempty\" graphql:\"orgMemberships\""
	Setting          UpdateUser_UpdateUser_User_Setting             "json:\"setting\" graphql:\"setting\""
}

func (t *UpdateUser_UpdateUser_User) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return &t.AuthProvider
}
func (t *UpdateUser_UpdateUser_User) GetAvatarLocalFile() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.AvatarLocalFile
}
func (t *UpdateUser_UpdateUser_User) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.AvatarRemoteURL
}
func (t *UpdateUser_UpdateUser_User) GetDisplayName() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.DisplayName
}
func (t *UpdateUser_UpdateUser_User) GetEmail() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Email
}
func (t *UpdateUser_UpdateUser_User) GetFirstName() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.FirstName
}
func (t *UpdateUser_UpdateUser_User) GetID() string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.ID
}
func (t *UpdateUser_UpdateUser_User) GetLastName() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.LastName
}
func (t *UpdateUser_UpdateUser_User) GetSub() *string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Sub
}
func (t *UpdateUser_UpdateUser_User) GetTags() []string {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.Tags
}
func (t *UpdateUser_UpdateUser_User) GetGroupMemberships() []*UpdateUser_UpdateUser_User_GroupMemberships {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.GroupMemberships
}
func (t *UpdateUser_UpdateUser_User) GetOrgMemberships() []*UpdateUser_UpdateUser_User_OrgMemberships {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return t.OrgMemberships
}
func (t *UpdateUser_UpdateUser_User) GetSetting() *UpdateUser_UpdateUser_User_Setting {
	if t == nil {
		t = &UpdateUser_UpdateUser_User{}
	}
	return &t.Setting
}

type UpdateUser_UpdateUser struct {
	User UpdateUser_UpdateUser_User "json:\"user\" graphql:\"user\""
}

func (t *UpdateUser_UpdateUser) GetUser() *UpdateUser_UpdateUser_User {
	if t == nil {
		t = &UpdateUser_UpdateUser{}
	}
	return &t.User
}

type GetAllUserHistories_UserHistories_Edges_Node struct {
	AuthProvider    enums.AuthProvider "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFile *string            "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarRemoteURL *string            "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt *time.Time         "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt       *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayName     string             "json:\"displayName\" graphql:\"displayName\""
	Email           string             "json:\"email\" graphql:\"email\""
	FirstName       *string            "json:\"firstName,omitempty\" graphql:\"firstName\""
	HistoryTime     time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID              string             "json:\"id\" graphql:\"id\""
	LastName        *string            "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen        *time.Time         "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Operation       enthistory.OpType  "json:\"operation\" graphql:\"operation\""
	Ref             *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Role            *enums.Role        "json:\"role,omitempty\" graphql:\"role\""
	Sub             *string            "json:\"sub,omitempty\" graphql:\"sub\""
	Tags            []string           "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return &t.AuthProvider
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAvatarLocalFile() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarLocalFile
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Email
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetFirstName() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.FirstName
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetLastName() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastName
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastSeen
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Role
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetSub() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Sub
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUserHistories_UserHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllUserHistories_UserHistories_Edges struct {
	Node *GetAllUserHistories_UserHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUserHistories_UserHistories_Edges) GetNode() *GetAllUserHistories_UserHistories_Edges_Node {
	if t == nil {
		t = &GetAllUserHistories_UserHistories_Edges{}
	}
	return t.Node
}

type GetAllUserHistories_UserHistories struct {
	Edges []*GetAllUserHistories_UserHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllUserHistories_UserHistories) GetEdges() []*GetAllUserHistories_UserHistories_Edges {
	if t == nil {
		t = &GetAllUserHistories_UserHistories{}
	}
	return t.Edges
}

type GetUserHistories_UserHistories_Edges_Node struct {
	AuthProvider    enums.AuthProvider "json:\"authProvider\" graphql:\"authProvider\""
	AvatarLocalFile *string            "json:\"avatarLocalFile,omitempty\" graphql:\"avatarLocalFile\""
	AvatarRemoteURL *string            "json:\"avatarRemoteURL,omitempty\" graphql:\"avatarRemoteURL\""
	AvatarUpdatedAt *time.Time         "json:\"avatarUpdatedAt,omitempty\" graphql:\"avatarUpdatedAt\""
	CreatedAt       *time.Time         "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy       *string            "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DisplayName     string             "json:\"displayName\" graphql:\"displayName\""
	Email           string             "json:\"email\" graphql:\"email\""
	FirstName       *string            "json:\"firstName,omitempty\" graphql:\"firstName\""
	HistoryTime     time.Time          "json:\"historyTime\" graphql:\"historyTime\""
	ID              string             "json:\"id\" graphql:\"id\""
	LastName        *string            "json:\"lastName,omitempty\" graphql:\"lastName\""
	LastSeen        *time.Time         "json:\"lastSeen,omitempty\" graphql:\"lastSeen\""
	Operation       enthistory.OpType  "json:\"operation\" graphql:\"operation\""
	Ref             *string            "json:\"ref,omitempty\" graphql:\"ref\""
	Role            *enums.Role        "json:\"role,omitempty\" graphql:\"role\""
	Sub             *string            "json:\"sub,omitempty\" graphql:\"sub\""
	Tags            []string           "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt       *time.Time         "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy       *string            "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserHistories_UserHistories_Edges_Node) GetAuthProvider() *enums.AuthProvider {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return &t.AuthProvider
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetAvatarLocalFile() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarLocalFile
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetAvatarRemoteURL() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarRemoteURL
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetAvatarUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.AvatarUpdatedAt
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetDisplayName() string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.DisplayName
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetEmail() string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Email
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetFirstName() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.FirstName
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetLastName() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastName
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetLastSeen() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.LastSeen
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetRole() *enums.Role {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Role
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetSub() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Sub
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetUserHistories_UserHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetUserHistories_UserHistories_Edges struct {
	Node *GetUserHistories_UserHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserHistories_UserHistories_Edges) GetNode() *GetUserHistories_UserHistories_Edges_Node {
	if t == nil {
		t = &GetUserHistories_UserHistories_Edges{}
	}
	return t.Node
}

type GetUserHistories_UserHistories struct {
	Edges []*GetUserHistories_UserHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetUserHistories_UserHistories) GetEdges() []*GetUserHistories_UserHistories_Edges {
	if t == nil {
		t = &GetUserHistories_UserHistories{}
	}
	return t.Edges
}

type GetUserSettingByID_UserSetting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetUserSettingByID_UserSetting_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting_DefaultOrg{}
	}
	return t.ID
}
func (t *GetUserSettingByID_UserSetting_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting_DefaultOrg{}
	}
	return t.Name
}
func (t *GetUserSettingByID_UserSetting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetUserSettingByID_UserSetting struct {
	ID             string                                     "json:\"id\" graphql:\"id\""
	SilencedAt     *time.Time                                 "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                           "json:\"status\" graphql:\"status\""
	DefaultOrg     *GetUserSettingByID_UserSetting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	Tags           []string                                   "json:\"tags,omitempty\" graphql:\"tags\""
	Locked         bool                                       "json:\"locked\" graphql:\"locked\""
	IsTfaEnabled   *bool                                      "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	EmailConfirmed bool                                       "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	CreatedAt      *time.Time                                 "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                    "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DeletedAt      *time.Time                                 "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	DeletedBy      *string                                    "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	UpdatedAt      *time.Time                                 "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                    "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserSettingByID_UserSetting) GetID() string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.ID
}
func (t *GetUserSettingByID_UserSetting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.SilencedAt
}
func (t *GetUserSettingByID_UserSetting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return &t.Status
}
func (t *GetUserSettingByID_UserSetting) GetDefaultOrg() *GetUserSettingByID_UserSetting_DefaultOrg {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.DefaultOrg
}
func (t *GetUserSettingByID_UserSetting) GetTags() []string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.Tags
}
func (t *GetUserSettingByID_UserSetting) GetLocked() bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.Locked
}
func (t *GetUserSettingByID_UserSetting) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.IsTfaEnabled
}
func (t *GetUserSettingByID_UserSetting) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.EmailConfirmed
}
func (t *GetUserSettingByID_UserSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.CreatedAt
}
func (t *GetUserSettingByID_UserSetting) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.CreatedBy
}
func (t *GetUserSettingByID_UserSetting) GetDeletedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.DeletedAt
}
func (t *GetUserSettingByID_UserSetting) GetDeletedBy() *string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.DeletedBy
}
func (t *GetUserSettingByID_UserSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.UpdatedAt
}
func (t *GetUserSettingByID_UserSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserSettingByID_UserSetting{}
	}
	return t.UpdatedBy
}

type GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.ID
}
func (t *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.Name
}
func (t *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetAllUserSettings_UserSettings_Edges_Node struct {
	ID             string                                                 "json:\"id\" graphql:\"id\""
	SilencedAt     *time.Time                                             "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                                       "json:\"status\" graphql:\"status\""
	DefaultOrg     *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	Tags           []string                                               "json:\"tags,omitempty\" graphql:\"tags\""
	Locked         bool                                                   "json:\"locked\" graphql:\"locked\""
	IsTfaEnabled   *bool                                                  "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	EmailConfirmed bool                                                   "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	CreatedAt      *time.Time                                             "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DeletedAt      *time.Time                                             "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	DeletedBy      *string                                                "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	UpdatedAt      *time.Time                                             "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllUserSettings_UserSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetDefaultOrg() *GetAllUserSettings_UserSettings_Edges_Node_DefaultOrg {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.DefaultOrg
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.Locked
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetDeletedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.DeletedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUserSettings_UserSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllUserSettings_UserSettings_Edges struct {
	Node *GetAllUserSettings_UserSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUserSettings_UserSettings_Edges) GetNode() *GetAllUserSettings_UserSettings_Edges_Node {
	if t == nil {
		t = &GetAllUserSettings_UserSettings_Edges{}
	}
	return t.Node
}

type GetAllUserSettings_UserSettings struct {
	Edges []*GetAllUserSettings_UserSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllUserSettings_UserSettings) GetEdges() []*GetAllUserSettings_UserSettings_Edges {
	if t == nil {
		t = &GetAllUserSettings_UserSettings{}
	}
	return t.Edges
}

type GetUserSettings_UserSettings_Edges_Node_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *GetUserSettings_UserSettings_Edges_Node_DefaultOrg) GetID() string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.ID
}
func (t *GetUserSettings_UserSettings_Edges_Node_DefaultOrg) GetName() string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.Name
}
func (t *GetUserSettings_UserSettings_Edges_Node_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node_DefaultOrg{}
	}
	return t.PersonalOrg
}

type GetUserSettings_UserSettings_Edges_Node struct {
	ID             string                                              "json:\"id\" graphql:\"id\""
	SilencedAt     *time.Time                                          "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                                    "json:\"status\" graphql:\"status\""
	DefaultOrg     *GetUserSettings_UserSettings_Edges_Node_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	Tags           []string                                            "json:\"tags,omitempty\" graphql:\"tags\""
	Locked         bool                                                "json:\"locked\" graphql:\"locked\""
	IsTfaEnabled   *bool                                               "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	EmailConfirmed bool                                                "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	CreatedAt      *time.Time                                          "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                             "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DeletedAt      *time.Time                                          "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	DeletedBy      *string                                             "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	UpdatedAt      *time.Time                                          "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                             "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetUserSettings_UserSettings_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return &t.Status
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetDefaultOrg() *GetUserSettings_UserSettings_Edges_Node_DefaultOrg {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.DefaultOrg
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.Tags
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.Locked
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetDeletedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.DeletedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetDeletedBy() *string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.DeletedBy
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetUserSettings_UserSettings_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetUserSettings_UserSettings_Edges struct {
	Node *GetUserSettings_UserSettings_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserSettings_UserSettings_Edges) GetNode() *GetUserSettings_UserSettings_Edges_Node {
	if t == nil {
		t = &GetUserSettings_UserSettings_Edges{}
	}
	return t.Node
}

type GetUserSettings_UserSettings struct {
	Edges []*GetUserSettings_UserSettings_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetUserSettings_UserSettings) GetEdges() []*GetUserSettings_UserSettings_Edges {
	if t == nil {
		t = &GetUserSettings_UserSettings{}
	}
	return t.Edges
}

type UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg struct {
	ID          string "json:\"id\" graphql:\"id\""
	Name        string "json:\"name\" graphql:\"name\""
	PersonalOrg *bool  "json:\"personalOrg,omitempty\" graphql:\"personalOrg\""
}

func (t *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg) GetID() string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg{}
	}
	return t.ID
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg) GetName() string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg{}
	}
	return t.Name
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg) GetPersonalOrg() *bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg{}
	}
	return t.PersonalOrg
}

type UpdateUserSetting_UpdateUserSetting_UserSetting struct {
	ID             string                                                      "json:\"id\" graphql:\"id\""
	SilencedAt     *time.Time                                                  "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status         enums.UserStatus                                            "json:\"status\" graphql:\"status\""
	DefaultOrg     *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg "json:\"defaultOrg,omitempty\" graphql:\"defaultOrg\""
	Tags           []string                                                    "json:\"tags,omitempty\" graphql:\"tags\""
	Locked         bool                                                        "json:\"locked\" graphql:\"locked\""
	IsTfaEnabled   *bool                                                       "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	EmailConfirmed bool                                                        "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	CreatedAt      *time.Time                                                  "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                                     "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	DeletedAt      *time.Time                                                  "json:\"deletedAt,omitempty\" graphql:\"deletedAt\""
	DeletedBy      *string                                                     "json:\"deletedBy,omitempty\" graphql:\"deletedBy\""
	UpdatedAt      *time.Time                                                  "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                                     "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetID() string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.ID
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetSilencedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.SilencedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return &t.Status
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetDefaultOrg() *UpdateUserSetting_UpdateUserSetting_UserSetting_DefaultOrg {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.DefaultOrg
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetTags() []string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.Tags
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetLocked() bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.Locked
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.IsTfaEnabled
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetEmailConfirmed() bool {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.EmailConfirmed
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.CreatedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.CreatedBy
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetDeletedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.DeletedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetDeletedBy() *string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.DeletedBy
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.UpdatedAt
}
func (t *UpdateUserSetting_UpdateUserSetting_UserSetting) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting_UserSetting{}
	}
	return t.UpdatedBy
}

type UpdateUserSetting_UpdateUserSetting struct {
	UserSetting UpdateUserSetting_UpdateUserSetting_UserSetting "json:\"userSetting\" graphql:\"userSetting\""
}

func (t *UpdateUserSetting_UpdateUserSetting) GetUserSetting() *UpdateUserSetting_UpdateUserSetting_UserSetting {
	if t == nil {
		t = &UpdateUserSetting_UpdateUserSetting{}
	}
	return &t.UserSetting
}

type GetAllUserSettingHistories_UserSettingHistories_Edges_Node struct {
	CreatedAt         *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed    bool              "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	HistoryTime       time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID                string            "json:\"id\" graphql:\"id\""
	IsTfaEnabled      *bool             "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	IsWebauthnAllowed *bool             "json:\"isWebauthnAllowed,omitempty\" graphql:\"isWebauthnAllowed\""
	Locked            bool              "json:\"locked\" graphql:\"locked\""
	Operation         enthistory.OpType "json:\"operation\" graphql:\"operation\""
	Ref               *string           "json:\"ref,omitempty\" graphql:\"ref\""
	SilencedAt        *time.Time        "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status            enums.UserStatus  "json:\"status\" graphql:\"status\""
	SuspendedAt       *time.Time        "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags              []string          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID            *string           "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetIsWebauthnAllowed() *bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsWebauthnAllowed
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Locked
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SuspendedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllUserSettingHistories_UserSettingHistories_Edges_Node) GetUserID() *string {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UserID
}

type GetAllUserSettingHistories_UserSettingHistories_Edges struct {
	Node *GetAllUserSettingHistories_UserSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllUserSettingHistories_UserSettingHistories_Edges) GetNode() *GetAllUserSettingHistories_UserSettingHistories_Edges_Node {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories_Edges{}
	}
	return t.Node
}

type GetAllUserSettingHistories_UserSettingHistories struct {
	Edges []*GetAllUserSettingHistories_UserSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllUserSettingHistories_UserSettingHistories) GetEdges() []*GetAllUserSettingHistories_UserSettingHistories_Edges {
	if t == nil {
		t = &GetAllUserSettingHistories_UserSettingHistories{}
	}
	return t.Edges
}

type GetUserSettingHistories_UserSettingHistories_Edges_Node struct {
	CreatedAt         *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy         *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	EmailConfirmed    bool              "json:\"emailConfirmed\" graphql:\"emailConfirmed\""
	HistoryTime       time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID                string            "json:\"id\" graphql:\"id\""
	IsTfaEnabled      *bool             "json:\"isTfaEnabled,omitempty\" graphql:\"isTfaEnabled\""
	IsWebauthnAllowed *bool             "json:\"isWebauthnAllowed,omitempty\" graphql:\"isWebauthnAllowed\""
	Locked            bool              "json:\"locked\" graphql:\"locked\""
	Operation         enthistory.OpType "json:\"operation\" graphql:\"operation\""
	Ref               *string           "json:\"ref,omitempty\" graphql:\"ref\""
	SilencedAt        *time.Time        "json:\"silencedAt,omitempty\" graphql:\"silencedAt\""
	Status            enums.UserStatus  "json:\"status\" graphql:\"status\""
	SuspendedAt       *time.Time        "json:\"suspendedAt,omitempty\" graphql:\"suspendedAt\""
	Tags              []string          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt         *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy         *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	UserID            *string           "json:\"userID,omitempty\" graphql:\"userID\""
}

func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetEmailConfirmed() bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.EmailConfirmed
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetIsTfaEnabled() *bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsTfaEnabled
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetIsWebauthnAllowed() *bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.IsWebauthnAllowed
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetLocked() bool {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Locked
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetSilencedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SilencedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetStatus() *enums.UserStatus {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return &t.Status
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetSuspendedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.SuspendedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetUserSettingHistories_UserSettingHistories_Edges_Node) GetUserID() *string {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges_Node{}
	}
	return t.UserID
}

type GetUserSettingHistories_UserSettingHistories_Edges struct {
	Node *GetUserSettingHistories_UserSettingHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetUserSettingHistories_UserSettingHistories_Edges) GetNode() *GetUserSettingHistories_UserSettingHistories_Edges_Node {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories_Edges{}
	}
	return t.Node
}

type GetUserSettingHistories_UserSettingHistories struct {
	Edges []*GetUserSettingHistories_UserSettingHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetUserSettingHistories_UserSettingHistories) GetEdges() []*GetUserSettingHistories_UserSettingHistories_Edges {
	if t == nil {
		t = &GetUserSettingHistories_UserSettingHistories{}
	}
	return t.Edges
}

type GetWebhookByID_Webhook_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetWebhookByID_Webhook_Events) GetID() string {
	if t == nil {
		t = &GetWebhookByID_Webhook_Events{}
	}
	return t.ID
}

type GetWebhookByID_Webhook struct {
	CreatedAt      *time.Time                       "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                          "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description    *string                          "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string                           "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool                             "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64                           "json:\"failures,omitempty\" graphql:\"failures\""
	ID             string                           "json:\"id\" graphql:\"id\""
	LastError      *string                          "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string                          "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string                           "json:\"name\" graphql:\"name\""
	OwnerID        *string                          "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	UpdatedAt      *time.Time                       "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                          "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Events         []*GetWebhookByID_Webhook_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *GetWebhookByID_Webhook) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.CreatedAt
}
func (t *GetWebhookByID_Webhook) GetCreatedBy() *string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.CreatedBy
}
func (t *GetWebhookByID_Webhook) GetDescription() *string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.Description
}
func (t *GetWebhookByID_Webhook) GetDestinationURL() string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.DestinationURL
}
func (t *GetWebhookByID_Webhook) GetEnabled() bool {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.Enabled
}
func (t *GetWebhookByID_Webhook) GetFailures() *int64 {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.Failures
}
func (t *GetWebhookByID_Webhook) GetID() string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.ID
}
func (t *GetWebhookByID_Webhook) GetLastError() *string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.LastError
}
func (t *GetWebhookByID_Webhook) GetLastResponse() *string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.LastResponse
}
func (t *GetWebhookByID_Webhook) GetName() string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.Name
}
func (t *GetWebhookByID_Webhook) GetOwnerID() *string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.OwnerID
}
func (t *GetWebhookByID_Webhook) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.UpdatedAt
}
func (t *GetWebhookByID_Webhook) GetUpdatedBy() *string {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.UpdatedBy
}
func (t *GetWebhookByID_Webhook) GetEvents() []*GetWebhookByID_Webhook_Events {
	if t == nil {
		t = &GetWebhookByID_Webhook{}
	}
	return t.Events
}

type GetAllWebhooks_Webhooks_Edges_Node_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *GetAllWebhooks_Webhooks_Edges_Node_Events) GetID() string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node_Events{}
	}
	return t.ID
}

type GetAllWebhooks_Webhooks_Edges_Node struct {
	CreatedAt      *time.Time                                   "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                      "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description    *string                                      "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string                                       "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool                                         "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64                                       "json:\"failures,omitempty\" graphql:\"failures\""
	ID             string                                       "json:\"id\" graphql:\"id\""
	LastError      *string                                      "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string                                      "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string                                       "json:\"name\" graphql:\"name\""
	OwnerID        *string                                      "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	UpdatedAt      *time.Time                                   "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                      "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Events         []*GetAllWebhooks_Webhooks_Edges_Node_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *GetAllWebhooks_Webhooks_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetDestinationURL() string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.DestinationURL
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetEnabled() bool {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.Enabled
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetFailures() *int64 {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.Failures
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetLastError() *string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.LastError
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetLastResponse() *string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.LastResponse
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.UpdatedBy
}
func (t *GetAllWebhooks_Webhooks_Edges_Node) GetEvents() []*GetAllWebhooks_Webhooks_Edges_Node_Events {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges_Node{}
	}
	return t.Events
}

type GetAllWebhooks_Webhooks_Edges struct {
	Node *GetAllWebhooks_Webhooks_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllWebhooks_Webhooks_Edges) GetNode() *GetAllWebhooks_Webhooks_Edges_Node {
	if t == nil {
		t = &GetAllWebhooks_Webhooks_Edges{}
	}
	return t.Node
}

type GetAllWebhooks_Webhooks struct {
	Edges []*GetAllWebhooks_Webhooks_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllWebhooks_Webhooks) GetEdges() []*GetAllWebhooks_Webhooks_Edges {
	if t == nil {
		t = &GetAllWebhooks_Webhooks{}
	}
	return t.Edges
}

type CreateWebhook_CreateWebhook_Webhook_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *CreateWebhook_CreateWebhook_Webhook_Events) GetID() string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook_Events{}
	}
	return t.ID
}

type CreateWebhook_CreateWebhook_Webhook struct {
	Description    *string                                       "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string                                        "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool                                          "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64                                        "json:\"failures,omitempty\" graphql:\"failures\""
	ID             string                                        "json:\"id\" graphql:\"id\""
	LastError      *string                                       "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string                                       "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string                                        "json:\"name\" graphql:\"name\""
	OwnerID        *string                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Events         []*CreateWebhook_CreateWebhook_Webhook_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *CreateWebhook_CreateWebhook_Webhook) GetDescription() *string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.Description
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetDestinationURL() string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.DestinationURL
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetEnabled() bool {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.Enabled
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetFailures() *int64 {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.Failures
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetID() string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.ID
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetLastError() *string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.LastError
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetLastResponse() *string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.LastResponse
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetName() string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.Name
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetOwnerID() *string {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.OwnerID
}
func (t *CreateWebhook_CreateWebhook_Webhook) GetEvents() []*CreateWebhook_CreateWebhook_Webhook_Events {
	if t == nil {
		t = &CreateWebhook_CreateWebhook_Webhook{}
	}
	return t.Events
}

type CreateWebhook_CreateWebhook struct {
	Webhook CreateWebhook_CreateWebhook_Webhook "json:\"webhook\" graphql:\"webhook\""
}

func (t *CreateWebhook_CreateWebhook) GetWebhook() *CreateWebhook_CreateWebhook_Webhook {
	if t == nil {
		t = &CreateWebhook_CreateWebhook{}
	}
	return &t.Webhook
}

type CreateBulkWebhook_CreateBulkWebhook_Webhooks struct {
	Description    *string "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string  "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool    "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64  "json:\"failures,omitempty\" graphql:\"failures\""
	ID             string  "json:\"id\" graphql:\"id\""
	LastError      *string "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string  "json:\"name\" graphql:\"name\""
	OwnerID        *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
}

func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetDescription() *string {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.Description
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.DestinationURL
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.Enabled
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetFailures() *int64 {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.Failures
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetID() string {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.ID
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetLastError() *string {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.LastError
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetLastResponse() *string {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.LastResponse
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetName() string {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.Name
}
func (t *CreateBulkWebhook_CreateBulkWebhook_Webhooks) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook_Webhooks{}
	}
	return t.OwnerID
}

type CreateBulkWebhook_CreateBulkWebhook struct {
	Webhooks []*CreateBulkWebhook_CreateBulkWebhook_Webhooks "json:\"webhooks,omitempty\" graphql:\"webhooks\""
}

func (t *CreateBulkWebhook_CreateBulkWebhook) GetWebhooks() []*CreateBulkWebhook_CreateBulkWebhook_Webhooks {
	if t == nil {
		t = &CreateBulkWebhook_CreateBulkWebhook{}
	}
	return t.Webhooks
}

type CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks struct {
	Description    *string "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string  "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool    "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64  "json:\"failures,omitempty\" graphql:\"failures\""
	ID             string  "json:\"id\" graphql:\"id\""
	LastError      *string "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string  "json:\"name\" graphql:\"name\""
	OwnerID        *string "json:\"ownerID,omitempty\" graphql:\"ownerID\""
}

func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetDescription() *string {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.Description
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetDestinationURL() string {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.DestinationURL
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetEnabled() bool {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.Enabled
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetFailures() *int64 {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.Failures
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetID() string {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.ID
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetLastError() *string {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.LastError
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetLastResponse() *string {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.LastResponse
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetName() string {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.Name
}
func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks) GetOwnerID() *string {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks{}
	}
	return t.OwnerID
}

type CreateBulkCSVWebhook_CreateBulkCSVWebhook struct {
	Webhooks []*CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks "json:\"webhooks,omitempty\" graphql:\"webhooks\""
}

func (t *CreateBulkCSVWebhook_CreateBulkCSVWebhook) GetWebhooks() []*CreateBulkCSVWebhook_CreateBulkCSVWebhook_Webhooks {
	if t == nil {
		t = &CreateBulkCSVWebhook_CreateBulkCSVWebhook{}
	}
	return t.Webhooks
}

type UpdateWebhook_UpdateWebhook_Webhook_Events struct {
	ID string "json:\"id\" graphql:\"id\""
}

func (t *UpdateWebhook_UpdateWebhook_Webhook_Events) GetID() string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook_Events{}
	}
	return t.ID
}

type UpdateWebhook_UpdateWebhook_Webhook struct {
	CreatedAt      *time.Time                                    "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string                                       "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description    *string                                       "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string                                        "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool                                          "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64                                        "json:\"failures,omitempty\" graphql:\"failures\""
	ID             string                                        "json:\"id\" graphql:\"id\""
	LastError      *string                                       "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string                                       "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string                                        "json:\"name\" graphql:\"name\""
	OwnerID        *string                                       "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	UpdatedAt      *time.Time                                    "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string                                       "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
	Events         []*UpdateWebhook_UpdateWebhook_Webhook_Events "json:\"events,omitempty\" graphql:\"events\""
}

func (t *UpdateWebhook_UpdateWebhook_Webhook) GetCreatedAt() *time.Time {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.CreatedAt
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetCreatedBy() *string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.CreatedBy
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetDescription() *string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.Description
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetDestinationURL() string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.DestinationURL
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetEnabled() bool {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.Enabled
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetFailures() *int64 {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.Failures
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetID() string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.ID
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetLastError() *string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.LastError
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetLastResponse() *string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.LastResponse
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetName() string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.Name
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetOwnerID() *string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.OwnerID
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.UpdatedAt
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetUpdatedBy() *string {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.UpdatedBy
}
func (t *UpdateWebhook_UpdateWebhook_Webhook) GetEvents() []*UpdateWebhook_UpdateWebhook_Webhook_Events {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook_Webhook{}
	}
	return t.Events
}

type UpdateWebhook_UpdateWebhook struct {
	Webhook UpdateWebhook_UpdateWebhook_Webhook "json:\"webhook\" graphql:\"webhook\""
}

func (t *UpdateWebhook_UpdateWebhook) GetWebhook() *UpdateWebhook_UpdateWebhook_Webhook {
	if t == nil {
		t = &UpdateWebhook_UpdateWebhook{}
	}
	return &t.Webhook
}

type DeleteWebhook_DeleteWebhook struct {
	DeletedID string "json:\"deletedID\" graphql:\"deletedID\""
}

func (t *DeleteWebhook_DeleteWebhook) GetDeletedID() string {
	if t == nil {
		t = &DeleteWebhook_DeleteWebhook{}
	}
	return t.DeletedID
}

type GetAllWebhookHistories_WebhookHistories_Edges_Node struct {
	CreatedAt      *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description    *string           "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string            "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool              "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64            "json:\"failures,omitempty\" graphql:\"failures\""
	HistoryTime    time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID             string            "json:\"id\" graphql:\"id\""
	LastError      *string           "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string           "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string            "json:\"name\" graphql:\"name\""
	Operation      enthistory.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID        *string           "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref            *string           "json:\"ref,omitempty\" graphql:\"ref\""
	Tags           []string          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetDestinationURL() string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.DestinationURL
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetEnabled() bool {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Enabled
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetFailures() *int64 {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Failures
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetLastError() *string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.LastError
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetLastResponse() *string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.LastResponse
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetAllWebhookHistories_WebhookHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetAllWebhookHistories_WebhookHistories_Edges struct {
	Node *GetAllWebhookHistories_WebhookHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetAllWebhookHistories_WebhookHistories_Edges) GetNode() *GetAllWebhookHistories_WebhookHistories_Edges_Node {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories_Edges{}
	}
	return t.Node
}

type GetAllWebhookHistories_WebhookHistories struct {
	Edges []*GetAllWebhookHistories_WebhookHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetAllWebhookHistories_WebhookHistories) GetEdges() []*GetAllWebhookHistories_WebhookHistories_Edges {
	if t == nil {
		t = &GetAllWebhookHistories_WebhookHistories{}
	}
	return t.Edges
}

type GetWebhookHistories_WebhookHistories_Edges_Node struct {
	CreatedAt      *time.Time        "json:\"createdAt,omitempty\" graphql:\"createdAt\""
	CreatedBy      *string           "json:\"createdBy,omitempty\" graphql:\"createdBy\""
	Description    *string           "json:\"description,omitempty\" graphql:\"description\""
	DestinationURL string            "json:\"destinationURL\" graphql:\"destinationURL\""
	Enabled        bool              "json:\"enabled\" graphql:\"enabled\""
	Failures       *int64            "json:\"failures,omitempty\" graphql:\"failures\""
	HistoryTime    time.Time         "json:\"historyTime\" graphql:\"historyTime\""
	ID             string            "json:\"id\" graphql:\"id\""
	LastError      *string           "json:\"lastError,omitempty\" graphql:\"lastError\""
	LastResponse   *string           "json:\"lastResponse,omitempty\" graphql:\"lastResponse\""
	Name           string            "json:\"name\" graphql:\"name\""
	Operation      enthistory.OpType "json:\"operation\" graphql:\"operation\""
	OwnerID        *string           "json:\"ownerID,omitempty\" graphql:\"ownerID\""
	Ref            *string           "json:\"ref,omitempty\" graphql:\"ref\""
	Tags           []string          "json:\"tags,omitempty\" graphql:\"tags\""
	UpdatedAt      *time.Time        "json:\"updatedAt,omitempty\" graphql:\"updatedAt\""
	UpdatedBy      *string           "json:\"updatedBy,omitempty\" graphql:\"updatedBy\""
}

func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetCreatedAt() *time.Time {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.CreatedAt
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetCreatedBy() *string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.CreatedBy
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetDescription() *string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Description
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetDestinationURL() string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.DestinationURL
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetEnabled() bool {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Enabled
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetFailures() *int64 {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Failures
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetHistoryTime() *time.Time {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return &t.HistoryTime
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetID() string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.ID
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetLastError() *string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.LastError
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetLastResponse() *string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.LastResponse
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetName() string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Name
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetOperation() *enthistory.OpType {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return &t.Operation
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetOwnerID() *string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.OwnerID
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetRef() *string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Ref
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetTags() []string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.Tags
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetUpdatedAt() *time.Time {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.UpdatedAt
}
func (t *GetWebhookHistories_WebhookHistories_Edges_Node) GetUpdatedBy() *string {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges_Node{}
	}
	return t.UpdatedBy
}

type GetWebhookHistories_WebhookHistories_Edges struct {
	Node *GetWebhookHistories_WebhookHistories_Edges_Node "json:\"node,omitempty\" graphql:\"node\""
}

func (t *GetWebhookHistories_WebhookHistories_Edges) GetNode() *GetWebhookHistories_WebhookHistories_Edges_Node {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories_Edges{}
	}
	return t.Node
}

type GetWebhookHistories_WebhookHistories struct {
	Edges []*GetWebhookHistories_WebhookHistories_Edges "json:\"edges,omitempty\" graphql:\"edges\""
}

func (t *GetWebhookHistories_WebhookHistories) GetEdges() []*GetWebhookHistories_WebhookHistories_Edges {
	if t == nil {
		t = &GetWebhookHistories_WebhookHistories{}
	}
	return t.Edges
}

type CreateAPIToken struct {
	CreateAPIToken CreateAPIToken_CreateAPIToken "json:\"createAPIToken\" graphql:\"createAPIToken\""
}

func (t *CreateAPIToken) GetCreateAPIToken() *CreateAPIToken_CreateAPIToken {
	if t == nil {
		t = &CreateAPIToken{}
	}
	return &t.CreateAPIToken
}

type UpdateAPIToken struct {
	UpdateAPIToken UpdateAPIToken_UpdateAPIToken "json:\"updateAPIToken\" graphql:\"updateAPIToken\""
}

func (t *UpdateAPIToken) GetUpdateAPIToken() *UpdateAPIToken_UpdateAPIToken {
	if t == nil {
		t = &UpdateAPIToken{}
	}
	return &t.UpdateAPIToken
}

type GetAllAPITokens struct {
	APITokens GetAllAPITokens_APITokens "json:\"apiTokens\" graphql:\"apiTokens\""
}

func (t *GetAllAPITokens) GetAPITokens() *GetAllAPITokens_APITokens {
	if t == nil {
		t = &GetAllAPITokens{}
	}
	return &t.APITokens
}

type GetAPITokenByID struct {
	APIToken GetAPITokenByID_APIToken "json:\"apiToken\" graphql:\"apiToken\""
}

func (t *GetAPITokenByID) GetAPIToken() *GetAPITokenByID_APIToken {
	if t == nil {
		t = &GetAPITokenByID{}
	}
	return &t.APIToken
}

type DeleteAPIToken struct {
	DeleteAPIToken DeleteAPIToken_DeleteAPIToken "json:\"deleteAPIToken\" graphql:\"deleteAPIToken\""
}

func (t *DeleteAPIToken) GetDeleteAPIToken() *DeleteAPIToken_DeleteAPIToken {
	if t == nil {
		t = &DeleteAPIToken{}
	}
	return &t.DeleteAPIToken
}

type GetDocumentDataByID struct {
	DocumentData GetDocumentDataByID_DocumentData "json:\"documentData\" graphql:\"documentData\""
}

func (t *GetDocumentDataByID) GetDocumentData() *GetDocumentDataByID_DocumentData {
	if t == nil {
		t = &GetDocumentDataByID{}
	}
	return &t.DocumentData
}

type CreateDocumentData struct {
	CreateDocumentData CreateDocumentData_CreateDocumentData "json:\"createDocumentData\" graphql:\"createDocumentData\""
}

func (t *CreateDocumentData) GetCreateDocumentData() *CreateDocumentData_CreateDocumentData {
	if t == nil {
		t = &CreateDocumentData{}
	}
	return &t.CreateDocumentData
}

type UpdateDocumentData struct {
	UpdateDocumentData UpdateDocumentData_UpdateDocumentData "json:\"updateDocumentData\" graphql:\"updateDocumentData\""
}

func (t *UpdateDocumentData) GetUpdateDocumentData() *UpdateDocumentData_UpdateDocumentData {
	if t == nil {
		t = &UpdateDocumentData{}
	}
	return &t.UpdateDocumentData
}

type DeleteDocumentData struct {
	DeleteDocumentData DeleteDocumentData_DeleteDocumentData "json:\"deleteDocumentData\" graphql:\"deleteDocumentData\""
}

func (t *DeleteDocumentData) GetDeleteDocumentData() *DeleteDocumentData_DeleteDocumentData {
	if t == nil {
		t = &DeleteDocumentData{}
	}
	return &t.DeleteDocumentData
}

type CreateBulkCSVEntitlement struct {
	CreateBulkCSVEntitlement CreateBulkCSVEntitlement_CreateBulkCSVEntitlement "json:\"createBulkCSVEntitlement\" graphql:\"createBulkCSVEntitlement\""
}

func (t *CreateBulkCSVEntitlement) GetCreateBulkCSVEntitlement() *CreateBulkCSVEntitlement_CreateBulkCSVEntitlement {
	if t == nil {
		t = &CreateBulkCSVEntitlement{}
	}
	return &t.CreateBulkCSVEntitlement
}

type CreateBulkEntitlement struct {
	CreateBulkEntitlement CreateBulkEntitlement_CreateBulkEntitlement "json:\"createBulkEntitlement\" graphql:\"createBulkEntitlement\""
}

func (t *CreateBulkEntitlement) GetCreateBulkEntitlement() *CreateBulkEntitlement_CreateBulkEntitlement {
	if t == nil {
		t = &CreateBulkEntitlement{}
	}
	return &t.CreateBulkEntitlement
}

type CreateEntitlement struct {
	CreateEntitlement CreateEntitlement_CreateEntitlement "json:\"createEntitlement\" graphql:\"createEntitlement\""
}

func (t *CreateEntitlement) GetCreateEntitlement() *CreateEntitlement_CreateEntitlement {
	if t == nil {
		t = &CreateEntitlement{}
	}
	return &t.CreateEntitlement
}

type DeleteEntitlement struct {
	DeleteEntitlement DeleteEntitlement_DeleteEntitlement "json:\"deleteEntitlement\" graphql:\"deleteEntitlement\""
}

func (t *DeleteEntitlement) GetDeleteEntitlement() *DeleteEntitlement_DeleteEntitlement {
	if t == nil {
		t = &DeleteEntitlement{}
	}
	return &t.DeleteEntitlement
}

type GetAllEntitlements struct {
	Entitlements GetAllEntitlements_Entitlements "json:\"entitlements\" graphql:\"entitlements\""
}

func (t *GetAllEntitlements) GetEntitlements() *GetAllEntitlements_Entitlements {
	if t == nil {
		t = &GetAllEntitlements{}
	}
	return &t.Entitlements
}

type GetEntitlementByID struct {
	Entitlement GetEntitlementByID_Entitlement "json:\"entitlement\" graphql:\"entitlement\""
}

func (t *GetEntitlementByID) GetEntitlement() *GetEntitlementByID_Entitlement {
	if t == nil {
		t = &GetEntitlementByID{}
	}
	return &t.Entitlement
}

type GetEntitlements struct {
	Entitlements GetEntitlements_Entitlements "json:\"entitlements\" graphql:\"entitlements\""
}

func (t *GetEntitlements) GetEntitlements() *GetEntitlements_Entitlements {
	if t == nil {
		t = &GetEntitlements{}
	}
	return &t.Entitlements
}

type UpdateEntitlement struct {
	UpdateEntitlement UpdateEntitlement_UpdateEntitlement "json:\"updateEntitlement\" graphql:\"updateEntitlement\""
}

func (t *UpdateEntitlement) GetUpdateEntitlement() *UpdateEntitlement_UpdateEntitlement {
	if t == nil {
		t = &UpdateEntitlement{}
	}
	return &t.UpdateEntitlement
}

type CreateBulkCSVEntitlementPlan struct {
	CreateBulkCSVEntitlementPlan CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan "json:\"createBulkCSVEntitlementPlan\" graphql:\"createBulkCSVEntitlementPlan\""
}

func (t *CreateBulkCSVEntitlementPlan) GetCreateBulkCSVEntitlementPlan() *CreateBulkCSVEntitlementPlan_CreateBulkCSVEntitlementPlan {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlan{}
	}
	return &t.CreateBulkCSVEntitlementPlan
}

type CreateBulkEntitlementPlan struct {
	CreateBulkEntitlementPlan CreateBulkEntitlementPlan_CreateBulkEntitlementPlan "json:\"createBulkEntitlementPlan\" graphql:\"createBulkEntitlementPlan\""
}

func (t *CreateBulkEntitlementPlan) GetCreateBulkEntitlementPlan() *CreateBulkEntitlementPlan_CreateBulkEntitlementPlan {
	if t == nil {
		t = &CreateBulkEntitlementPlan{}
	}
	return &t.CreateBulkEntitlementPlan
}

type CreateEntitlementPlan struct {
	CreateEntitlementPlan CreateEntitlementPlan_CreateEntitlementPlan "json:\"createEntitlementPlan\" graphql:\"createEntitlementPlan\""
}

func (t *CreateEntitlementPlan) GetCreateEntitlementPlan() *CreateEntitlementPlan_CreateEntitlementPlan {
	if t == nil {
		t = &CreateEntitlementPlan{}
	}
	return &t.CreateEntitlementPlan
}

type DeleteEntitlementPlan struct {
	DeleteEntitlementPlan DeleteEntitlementPlan_DeleteEntitlementPlan "json:\"deleteEntitlementPlan\" graphql:\"deleteEntitlementPlan\""
}

func (t *DeleteEntitlementPlan) GetDeleteEntitlementPlan() *DeleteEntitlementPlan_DeleteEntitlementPlan {
	if t == nil {
		t = &DeleteEntitlementPlan{}
	}
	return &t.DeleteEntitlementPlan
}

type GetAllEntitlementPlans struct {
	EntitlementPlans GetAllEntitlementPlans_EntitlementPlans "json:\"entitlementPlans\" graphql:\"entitlementPlans\""
}

func (t *GetAllEntitlementPlans) GetEntitlementPlans() *GetAllEntitlementPlans_EntitlementPlans {
	if t == nil {
		t = &GetAllEntitlementPlans{}
	}
	return &t.EntitlementPlans
}

type GetEntitlementPlanByID struct {
	EntitlementPlan GetEntitlementPlanByID_EntitlementPlan "json:\"entitlementPlan\" graphql:\"entitlementPlan\""
}

func (t *GetEntitlementPlanByID) GetEntitlementPlan() *GetEntitlementPlanByID_EntitlementPlan {
	if t == nil {
		t = &GetEntitlementPlanByID{}
	}
	return &t.EntitlementPlan
}

type GetEntitlementPlans struct {
	EntitlementPlans GetEntitlementPlans_EntitlementPlans "json:\"entitlementPlans\" graphql:\"entitlementPlans\""
}

func (t *GetEntitlementPlans) GetEntitlementPlans() *GetEntitlementPlans_EntitlementPlans {
	if t == nil {
		t = &GetEntitlementPlans{}
	}
	return &t.EntitlementPlans
}

type UpdateEntitlementPlan struct {
	UpdateEntitlementPlan UpdateEntitlementPlan_UpdateEntitlementPlan "json:\"updateEntitlementPlan\" graphql:\"updateEntitlementPlan\""
}

func (t *UpdateEntitlementPlan) GetUpdateEntitlementPlan() *UpdateEntitlementPlan_UpdateEntitlementPlan {
	if t == nil {
		t = &UpdateEntitlementPlan{}
	}
	return &t.UpdateEntitlementPlan
}

type GetAllEntitlementPlanFeatures struct {
	EntitlementPlanFeatures GetAllEntitlementPlanFeatures_EntitlementPlanFeatures "json:\"entitlementPlanFeatures\" graphql:\"entitlementPlanFeatures\""
}

func (t *GetAllEntitlementPlanFeatures) GetEntitlementPlanFeatures() *GetAllEntitlementPlanFeatures_EntitlementPlanFeatures {
	if t == nil {
		t = &GetAllEntitlementPlanFeatures{}
	}
	return &t.EntitlementPlanFeatures
}

type GetEntitlementPlanFeatureByID struct {
	EntitlementPlanFeature GetEntitlementPlanFeatureByID_EntitlementPlanFeature "json:\"entitlementPlanFeature\" graphql:\"entitlementPlanFeature\""
}

func (t *GetEntitlementPlanFeatureByID) GetEntitlementPlanFeature() *GetEntitlementPlanFeatureByID_EntitlementPlanFeature {
	if t == nil {
		t = &GetEntitlementPlanFeatureByID{}
	}
	return &t.EntitlementPlanFeature
}

type GetEntitlementPlanFeatures struct {
	EntitlementPlanFeatures GetEntitlementPlanFeatures_EntitlementPlanFeatures "json:\"entitlementPlanFeatures\" graphql:\"entitlementPlanFeatures\""
}

func (t *GetEntitlementPlanFeatures) GetEntitlementPlanFeatures() *GetEntitlementPlanFeatures_EntitlementPlanFeatures {
	if t == nil {
		t = &GetEntitlementPlanFeatures{}
	}
	return &t.EntitlementPlanFeatures
}

type CreateEntitlementPlanFeature struct {
	CreateEntitlementPlanFeature CreateEntitlementPlanFeature_CreateEntitlementPlanFeature "json:\"createEntitlementPlanFeature\" graphql:\"createEntitlementPlanFeature\""
}

func (t *CreateEntitlementPlanFeature) GetCreateEntitlementPlanFeature() *CreateEntitlementPlanFeature_CreateEntitlementPlanFeature {
	if t == nil {
		t = &CreateEntitlementPlanFeature{}
	}
	return &t.CreateEntitlementPlanFeature
}

type CreateBulkCSVEntitlementPlanFeature struct {
	CreateBulkCSVEntitlementPlanFeature CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature "json:\"createBulkCSVEntitlementPlanFeature\" graphql:\"createBulkCSVEntitlementPlanFeature\""
}

func (t *CreateBulkCSVEntitlementPlanFeature) GetCreateBulkCSVEntitlementPlanFeature() *CreateBulkCSVEntitlementPlanFeature_CreateBulkCSVEntitlementPlanFeature {
	if t == nil {
		t = &CreateBulkCSVEntitlementPlanFeature{}
	}
	return &t.CreateBulkCSVEntitlementPlanFeature
}

type CreateBulkEntitlementPlanFeature struct {
	CreateBulkEntitlementPlanFeature CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature "json:\"createBulkEntitlementPlanFeature\" graphql:\"createBulkEntitlementPlanFeature\""
}

func (t *CreateBulkEntitlementPlanFeature) GetCreateBulkEntitlementPlanFeature() *CreateBulkEntitlementPlanFeature_CreateBulkEntitlementPlanFeature {
	if t == nil {
		t = &CreateBulkEntitlementPlanFeature{}
	}
	return &t.CreateBulkEntitlementPlanFeature
}

type UpdateEntitlementPlanFeature struct {
	UpdateEntitlementPlanFeature UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature "json:\"updateEntitlementPlanFeature\" graphql:\"updateEntitlementPlanFeature\""
}

func (t *UpdateEntitlementPlanFeature) GetUpdateEntitlementPlanFeature() *UpdateEntitlementPlanFeature_UpdateEntitlementPlanFeature {
	if t == nil {
		t = &UpdateEntitlementPlanFeature{}
	}
	return &t.UpdateEntitlementPlanFeature
}

type DeleteEntitlementPlanFeature struct {
	DeleteEntitlementPlanFeature DeleteEntitlementPlanFeature_DeleteEntitlementPlanFeature "json:\"deleteEntitlementPlanFeature\" graphql:\"deleteEntitlementPlanFeature\""
}

func (t *DeleteEntitlementPlanFeature) GetDeleteEntitlementPlanFeature() *DeleteEntitlementPlanFeature_DeleteEntitlementPlanFeature {
	if t == nil {
		t = &DeleteEntitlementPlanFeature{}
	}
	return &t.DeleteEntitlementPlanFeature
}

type GetEvents struct {
	Events GetEvents_Events "json:\"events\" graphql:\"events\""
}

func (t *GetEvents) GetEvents() *GetEvents_Events {
	if t == nil {
		t = &GetEvents{}
	}
	return &t.Events
}

type GetEventByID struct {
	Event GetEventByID_Event "json:\"event\" graphql:\"event\""
}

func (t *GetEventByID) GetEvent() *GetEventByID_Event {
	if t == nil {
		t = &GetEventByID{}
	}
	return &t.Event
}

type GetAllEvents struct {
	Events GetAllEvents_Events "json:\"events\" graphql:\"events\""
}

func (t *GetAllEvents) GetEvents() *GetAllEvents_Events {
	if t == nil {
		t = &GetAllEvents{}
	}
	return &t.Events
}

type CreateEvent struct {
	CreateEvent CreateEvent_CreateEvent "json:\"createEvent\" graphql:\"createEvent\""
}

func (t *CreateEvent) GetCreateEvent() *CreateEvent_CreateEvent {
	if t == nil {
		t = &CreateEvent{}
	}
	return &t.CreateEvent
}

type CreateBulkEvent struct {
	CreateBulkEvent CreateBulkEvent_CreateBulkEvent "json:\"createBulkEvent\" graphql:\"createBulkEvent\""
}

func (t *CreateBulkEvent) GetCreateBulkEvent() *CreateBulkEvent_CreateBulkEvent {
	if t == nil {
		t = &CreateBulkEvent{}
	}
	return &t.CreateBulkEvent
}

type CreateBulkCSVEvent struct {
	CreateBulkCSVEvent CreateBulkCSVEvent_CreateBulkCSVEvent "json:\"createBulkCSVEvent\" graphql:\"createBulkCSVEvent\""
}

func (t *CreateBulkCSVEvent) GetCreateBulkCSVEvent() *CreateBulkCSVEvent_CreateBulkCSVEvent {
	if t == nil {
		t = &CreateBulkCSVEvent{}
	}
	return &t.CreateBulkCSVEvent
}

type UpdateEvent struct {
	UpdateEvent UpdateEvent_UpdateEvent "json:\"updateEvent\" graphql:\"updateEvent\""
}

func (t *UpdateEvent) GetUpdateEvent() *UpdateEvent_UpdateEvent {
	if t == nil {
		t = &UpdateEvent{}
	}
	return &t.UpdateEvent
}

type DeleteEvent struct {
	DeleteEvent DeleteEvent_DeleteEvent "json:\"deleteEvent\" graphql:\"deleteEvent\""
}

func (t *DeleteEvent) GetDeleteEvent() *DeleteEvent_DeleteEvent {
	if t == nil {
		t = &DeleteEvent{}
	}
	return &t.DeleteEvent
}

type CreateBulkCSVFeature struct {
	CreateBulkCSVFeature CreateBulkCSVFeature_CreateBulkCSVFeature "json:\"createBulkCSVFeature\" graphql:\"createBulkCSVFeature\""
}

func (t *CreateBulkCSVFeature) GetCreateBulkCSVFeature() *CreateBulkCSVFeature_CreateBulkCSVFeature {
	if t == nil {
		t = &CreateBulkCSVFeature{}
	}
	return &t.CreateBulkCSVFeature
}

type CreateBulkFeature struct {
	CreateBulkFeature CreateBulkFeature_CreateBulkFeature "json:\"createBulkFeature\" graphql:\"createBulkFeature\""
}

func (t *CreateBulkFeature) GetCreateBulkFeature() *CreateBulkFeature_CreateBulkFeature {
	if t == nil {
		t = &CreateBulkFeature{}
	}
	return &t.CreateBulkFeature
}

type CreateFeature struct {
	CreateFeature CreateFeature_CreateFeature "json:\"createFeature\" graphql:\"createFeature\""
}

func (t *CreateFeature) GetCreateFeature() *CreateFeature_CreateFeature {
	if t == nil {
		t = &CreateFeature{}
	}
	return &t.CreateFeature
}

type DeleteFeature struct {
	DeleteFeature DeleteFeature_DeleteFeature "json:\"deleteFeature\" graphql:\"deleteFeature\""
}

func (t *DeleteFeature) GetDeleteFeature() *DeleteFeature_DeleteFeature {
	if t == nil {
		t = &DeleteFeature{}
	}
	return &t.DeleteFeature
}

type GetFeatureByID struct {
	Feature GetFeatureByID_Feature "json:\"feature\" graphql:\"feature\""
}

func (t *GetFeatureByID) GetFeature() *GetFeatureByID_Feature {
	if t == nil {
		t = &GetFeatureByID{}
	}
	return &t.Feature
}

type GetAllFeatures struct {
	Features GetAllFeatures_Features "json:\"features\" graphql:\"features\""
}

func (t *GetAllFeatures) GetFeatures() *GetAllFeatures_Features {
	if t == nil {
		t = &GetAllFeatures{}
	}
	return &t.Features
}

type GetFeatures struct {
	Features GetFeatures_Features "json:\"features\" graphql:\"features\""
}

func (t *GetFeatures) GetFeatures() *GetFeatures_Features {
	if t == nil {
		t = &GetFeatures{}
	}
	return &t.Features
}

type UpdateFeature struct {
	UpdateFeature UpdateFeature_UpdateFeature "json:\"updateFeature\" graphql:\"updateFeature\""
}

func (t *UpdateFeature) GetUpdateFeature() *UpdateFeature_UpdateFeature {
	if t == nil {
		t = &UpdateFeature{}
	}
	return &t.UpdateFeature
}

type CreateBulkCSVFile struct {
	CreateBulkCSVFile CreateBulkCSVFile_CreateBulkCSVFile "json:\"createBulkCSVFile\" graphql:\"createBulkCSVFile\""
}

func (t *CreateBulkCSVFile) GetCreateBulkCSVFile() *CreateBulkCSVFile_CreateBulkCSVFile {
	if t == nil {
		t = &CreateBulkCSVFile{}
	}
	return &t.CreateBulkCSVFile
}

type CreateBulkFile struct {
	CreateBulkFile CreateBulkFile_CreateBulkFile "json:\"createBulkFile\" graphql:\"createBulkFile\""
}

func (t *CreateBulkFile) GetCreateBulkFile() *CreateBulkFile_CreateBulkFile {
	if t == nil {
		t = &CreateBulkFile{}
	}
	return &t.CreateBulkFile
}

type CreateFile struct {
	CreateFile CreateFile_CreateFile "json:\"createFile\" graphql:\"createFile\""
}

func (t *CreateFile) GetCreateFile() *CreateFile_CreateFile {
	if t == nil {
		t = &CreateFile{}
	}
	return &t.CreateFile
}

type DeleteFile struct {
	DeleteFile DeleteFile_DeleteFile "json:\"deleteFile\" graphql:\"deleteFile\""
}

func (t *DeleteFile) GetDeleteFile() *DeleteFile_DeleteFile {
	if t == nil {
		t = &DeleteFile{}
	}
	return &t.DeleteFile
}

type GetFiles struct {
	Files GetFiles_Files "json:\"files\" graphql:\"files\""
}

func (t *GetFiles) GetFiles() *GetFiles_Files {
	if t == nil {
		t = &GetFiles{}
	}
	return &t.Files
}

type GetAllFiles struct {
	Files GetAllFiles_Files "json:\"files\" graphql:\"files\""
}

func (t *GetAllFiles) GetFiles() *GetAllFiles_Files {
	if t == nil {
		t = &GetAllFiles{}
	}
	return &t.Files
}

type UpdateFile struct {
	UpdateFile UpdateFile_UpdateFile "json:\"updateFile\" graphql:\"updateFile\""
}

func (t *UpdateFile) GetUpdateFile() *UpdateFile_UpdateFile {
	if t == nil {
		t = &UpdateFile{}
	}
	return &t.UpdateFile
}

type GetAllFileHistories struct {
	FileHistories GetAllFileHistories_FileHistories "json:\"fileHistories\" graphql:\"fileHistories\""
}

func (t *GetAllFileHistories) GetFileHistories() *GetAllFileHistories_FileHistories {
	if t == nil {
		t = &GetAllFileHistories{}
	}
	return &t.FileHistories
}

type GetFileHistories struct {
	FileHistories GetFileHistories_FileHistories "json:\"fileHistories\" graphql:\"fileHistories\""
}

func (t *GetFileHistories) GetFileHistories() *GetFileHistories_FileHistories {
	if t == nil {
		t = &GetFileHistories{}
	}
	return &t.FileHistories
}

type CreateBulkCSVGroup struct {
	CreateBulkCSVGroup CreateBulkCSVGroup_CreateBulkCSVGroup "json:\"createBulkCSVGroup\" graphql:\"createBulkCSVGroup\""
}

func (t *CreateBulkCSVGroup) GetCreateBulkCSVGroup() *CreateBulkCSVGroup_CreateBulkCSVGroup {
	if t == nil {
		t = &CreateBulkCSVGroup{}
	}
	return &t.CreateBulkCSVGroup
}

type CreateBulkGroup struct {
	CreateBulkGroup CreateBulkGroup_CreateBulkGroup "json:\"createBulkGroup\" graphql:\"createBulkGroup\""
}

func (t *CreateBulkGroup) GetCreateBulkGroup() *CreateBulkGroup_CreateBulkGroup {
	if t == nil {
		t = &CreateBulkGroup{}
	}
	return &t.CreateBulkGroup
}

type CreateGroup struct {
	CreateGroup CreateGroup_CreateGroup "json:\"createGroup\" graphql:\"createGroup\""
}

func (t *CreateGroup) GetCreateGroup() *CreateGroup_CreateGroup {
	if t == nil {
		t = &CreateGroup{}
	}
	return &t.CreateGroup
}

type DeleteGroup struct {
	DeleteGroup DeleteGroup_DeleteGroup "json:\"deleteGroup\" graphql:\"deleteGroup\""
}

func (t *DeleteGroup) GetDeleteGroup() *DeleteGroup_DeleteGroup {
	if t == nil {
		t = &DeleteGroup{}
	}
	return &t.DeleteGroup
}

type GetAllGroups struct {
	Groups GetAllGroups_Groups "json:\"groups\" graphql:\"groups\""
}

func (t *GetAllGroups) GetGroups() *GetAllGroups_Groups {
	if t == nil {
		t = &GetAllGroups{}
	}
	return &t.Groups
}

type GetGroupByID struct {
	Group GetGroupByID_Group "json:\"group\" graphql:\"group\""
}

func (t *GetGroupByID) GetGroup() *GetGroupByID_Group {
	if t == nil {
		t = &GetGroupByID{}
	}
	return &t.Group
}

type GetGroups struct {
	Groups GetGroups_Groups "json:\"groups\" graphql:\"groups\""
}

func (t *GetGroups) GetGroups() *GetGroups_Groups {
	if t == nil {
		t = &GetGroups{}
	}
	return &t.Groups
}

type UpdateGroup struct {
	UpdateGroup UpdateGroup_UpdateGroup "json:\"updateGroup\" graphql:\"updateGroup\""
}

func (t *UpdateGroup) GetUpdateGroup() *UpdateGroup_UpdateGroup {
	if t == nil {
		t = &UpdateGroup{}
	}
	return &t.UpdateGroup
}

type GetAllGroupHistories struct {
	GroupHistories GetAllGroupHistories_GroupHistories "json:\"groupHistories\" graphql:\"groupHistories\""
}

func (t *GetAllGroupHistories) GetGroupHistories() *GetAllGroupHistories_GroupHistories {
	if t == nil {
		t = &GetAllGroupHistories{}
	}
	return &t.GroupHistories
}

type GetGroupHistories struct {
	GroupHistories GetGroupHistories_GroupHistories "json:\"groupHistories\" graphql:\"groupHistories\""
}

func (t *GetGroupHistories) GetGroupHistories() *GetGroupHistories_GroupHistories {
	if t == nil {
		t = &GetGroupHistories{}
	}
	return &t.GroupHistories
}

type GetGroupMembersByGroupID struct {
	GroupMemberships GetGroupMembersByGroupID_GroupMemberships "json:\"groupMemberships\" graphql:\"groupMemberships\""
}

func (t *GetGroupMembersByGroupID) GetGroupMemberships() *GetGroupMembersByGroupID_GroupMemberships {
	if t == nil {
		t = &GetGroupMembersByGroupID{}
	}
	return &t.GroupMemberships
}

type AddUserToGroupWithRole struct {
	CreateGroupMembership AddUserToGroupWithRole_CreateGroupMembership "json:\"createGroupMembership\" graphql:\"createGroupMembership\""
}

func (t *AddUserToGroupWithRole) GetCreateGroupMembership() *AddUserToGroupWithRole_CreateGroupMembership {
	if t == nil {
		t = &AddUserToGroupWithRole{}
	}
	return &t.CreateGroupMembership
}

type CreateBulkGroupMembers struct {
	CreateBulkGroupMembership CreateBulkGroupMembers_CreateBulkGroupMembership "json:\"createBulkGroupMembership\" graphql:\"createBulkGroupMembership\""
}

func (t *CreateBulkGroupMembers) GetCreateBulkGroupMembership() *CreateBulkGroupMembers_CreateBulkGroupMembership {
	if t == nil {
		t = &CreateBulkGroupMembers{}
	}
	return &t.CreateBulkGroupMembership
}

type CreateBulkCSVGroupMembers struct {
	CreateBulkCSVGroupMembership CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership "json:\"createBulkCSVGroupMembership\" graphql:\"createBulkCSVGroupMembership\""
}

func (t *CreateBulkCSVGroupMembers) GetCreateBulkCSVGroupMembership() *CreateBulkCSVGroupMembers_CreateBulkCSVGroupMembership {
	if t == nil {
		t = &CreateBulkCSVGroupMembers{}
	}
	return &t.CreateBulkCSVGroupMembership
}

type UpdateUserRoleInGroup struct {
	UpdateGroupMembership UpdateUserRoleInGroup_UpdateGroupMembership "json:\"updateGroupMembership\" graphql:\"updateGroupMembership\""
}

func (t *UpdateUserRoleInGroup) GetUpdateGroupMembership() *UpdateUserRoleInGroup_UpdateGroupMembership {
	if t == nil {
		t = &UpdateUserRoleInGroup{}
	}
	return &t.UpdateGroupMembership
}

type RemoveUserFromGroup struct {
	DeleteGroupMembership RemoveUserFromGroup_DeleteGroupMembership "json:\"deleteGroupMembership\" graphql:\"deleteGroupMembership\""
}

func (t *RemoveUserFromGroup) GetDeleteGroupMembership() *RemoveUserFromGroup_DeleteGroupMembership {
	if t == nil {
		t = &RemoveUserFromGroup{}
	}
	return &t.DeleteGroupMembership
}

type GetAllGroupSettings struct {
	GroupSettings GetAllGroupSettings_GroupSettings "json:\"groupSettings\" graphql:\"groupSettings\""
}

func (t *GetAllGroupSettings) GetGroupSettings() *GetAllGroupSettings_GroupSettings {
	if t == nil {
		t = &GetAllGroupSettings{}
	}
	return &t.GroupSettings
}

type GetGroupSettingByID struct {
	GroupSetting GetGroupSettingByID_GroupSetting "json:\"groupSetting\" graphql:\"groupSetting\""
}

func (t *GetGroupSettingByID) GetGroupSetting() *GetGroupSettingByID_GroupSetting {
	if t == nil {
		t = &GetGroupSettingByID{}
	}
	return &t.GroupSetting
}

type GetGroupSettings struct {
	GroupSettings GetGroupSettings_GroupSettings "json:\"groupSettings\" graphql:\"groupSettings\""
}

func (t *GetGroupSettings) GetGroupSettings() *GetGroupSettings_GroupSettings {
	if t == nil {
		t = &GetGroupSettings{}
	}
	return &t.GroupSettings
}

type UpdateGroupSetting struct {
	UpdateGroupSetting UpdateGroupSetting_UpdateGroupSetting "json:\"updateGroupSetting\" graphql:\"updateGroupSetting\""
}

func (t *UpdateGroupSetting) GetUpdateGroupSetting() *UpdateGroupSetting_UpdateGroupSetting {
	if t == nil {
		t = &UpdateGroupSetting{}
	}
	return &t.UpdateGroupSetting
}

type CreateBulkCSVHush struct {
	CreateBulkCSVHush CreateBulkCSVHush_CreateBulkCSVHush "json:\"createBulkCSVHush\" graphql:\"createBulkCSVHush\""
}

func (t *CreateBulkCSVHush) GetCreateBulkCSVHush() *CreateBulkCSVHush_CreateBulkCSVHush {
	if t == nil {
		t = &CreateBulkCSVHush{}
	}
	return &t.CreateBulkCSVHush
}

type CreateBulkHush struct {
	CreateBulkHush CreateBulkHush_CreateBulkHush "json:\"createBulkHush\" graphql:\"createBulkHush\""
}

func (t *CreateBulkHush) GetCreateBulkHush() *CreateBulkHush_CreateBulkHush {
	if t == nil {
		t = &CreateBulkHush{}
	}
	return &t.CreateBulkHush
}

type CreateHush struct {
	CreateHush CreateHush_CreateHush "json:\"createHush\" graphql:\"createHush\""
}

func (t *CreateHush) GetCreateHush() *CreateHush_CreateHush {
	if t == nil {
		t = &CreateHush{}
	}
	return &t.CreateHush
}

type GetAllHushes struct {
	Hushes GetAllHushes_Hushes "json:\"hushes\" graphql:\"hushes\""
}

func (t *GetAllHushes) GetHushes() *GetAllHushes_Hushes {
	if t == nil {
		t = &GetAllHushes{}
	}
	return &t.Hushes
}

type GetHushByID struct {
	Hush GetHushByID_Hush "json:\"hush\" graphql:\"hush\""
}

func (t *GetHushByID) GetHush() *GetHushByID_Hush {
	if t == nil {
		t = &GetHushByID{}
	}
	return &t.Hush
}

type GetHushes struct {
	Hushes GetHushes_Hushes "json:\"hushes\" graphql:\"hushes\""
}

func (t *GetHushes) GetHushes() *GetHushes_Hushes {
	if t == nil {
		t = &GetHushes{}
	}
	return &t.Hushes
}

type UpdateHush struct {
	UpdateHush UpdateHush_UpdateHush "json:\"updateHush\" graphql:\"updateHush\""
}

func (t *UpdateHush) GetUpdateHush() *UpdateHush_UpdateHush {
	if t == nil {
		t = &UpdateHush{}
	}
	return &t.UpdateHush
}

type GetAllHushHistories struct {
	HushHistories GetAllHushHistories_HushHistories "json:\"hushHistories\" graphql:\"hushHistories\""
}

func (t *GetAllHushHistories) GetHushHistories() *GetAllHushHistories_HushHistories {
	if t == nil {
		t = &GetAllHushHistories{}
	}
	return &t.HushHistories
}

type GetHushHistories struct {
	HushHistories GetHushHistories_HushHistories "json:\"hushHistories\" graphql:\"hushHistories\""
}

func (t *GetHushHistories) GetHushHistories() *GetHushHistories_HushHistories {
	if t == nil {
		t = &GetHushHistories{}
	}
	return &t.HushHistories
}

type CreateBulkCSVIntegration struct {
	CreateBulkCSVIntegration CreateBulkCSVIntegration_CreateBulkCSVIntegration "json:\"createBulkCSVIntegration\" graphql:\"createBulkCSVIntegration\""
}

func (t *CreateBulkCSVIntegration) GetCreateBulkCSVIntegration() *CreateBulkCSVIntegration_CreateBulkCSVIntegration {
	if t == nil {
		t = &CreateBulkCSVIntegration{}
	}
	return &t.CreateBulkCSVIntegration
}

type CreateBulkIntegration struct {
	CreateBulkIntegration CreateBulkIntegration_CreateBulkIntegration "json:\"createBulkIntegration\" graphql:\"createBulkIntegration\""
}

func (t *CreateBulkIntegration) GetCreateBulkIntegration() *CreateBulkIntegration_CreateBulkIntegration {
	if t == nil {
		t = &CreateBulkIntegration{}
	}
	return &t.CreateBulkIntegration
}

type CreateIntegration struct {
	CreateIntegration CreateIntegration_CreateIntegration "json:\"createIntegration\" graphql:\"createIntegration\""
}

func (t *CreateIntegration) GetCreateIntegration() *CreateIntegration_CreateIntegration {
	if t == nil {
		t = &CreateIntegration{}
	}
	return &t.CreateIntegration
}

type DeleteIntegration struct {
	DeleteIntegration DeleteIntegration_DeleteIntegration "json:\"deleteIntegration\" graphql:\"deleteIntegration\""
}

func (t *DeleteIntegration) GetDeleteIntegration() *DeleteIntegration_DeleteIntegration {
	if t == nil {
		t = &DeleteIntegration{}
	}
	return &t.DeleteIntegration
}

type GetAllIntegrations struct {
	Integrations GetAllIntegrations_Integrations "json:\"integrations\" graphql:\"integrations\""
}

func (t *GetAllIntegrations) GetIntegrations() *GetAllIntegrations_Integrations {
	if t == nil {
		t = &GetAllIntegrations{}
	}
	return &t.Integrations
}

type GetIntegrationByID struct {
	Integration GetIntegrationByID_Integration "json:\"integration\" graphql:\"integration\""
}

func (t *GetIntegrationByID) GetIntegration() *GetIntegrationByID_Integration {
	if t == nil {
		t = &GetIntegrationByID{}
	}
	return &t.Integration
}

type GetIntegrations struct {
	Integrations GetIntegrations_Integrations "json:\"integrations\" graphql:\"integrations\""
}

func (t *GetIntegrations) GetIntegrations() *GetIntegrations_Integrations {
	if t == nil {
		t = &GetIntegrations{}
	}
	return &t.Integrations
}

type UpdateIntegration struct {
	UpdateIntegration UpdateIntegration_UpdateIntegration "json:\"updateIntegration\" graphql:\"updateIntegration\""
}

func (t *UpdateIntegration) GetUpdateIntegration() *UpdateIntegration_UpdateIntegration {
	if t == nil {
		t = &UpdateIntegration{}
	}
	return &t.UpdateIntegration
}

type GetAllIntegrationHistories struct {
	IntegrationHistories GetAllIntegrationHistories_IntegrationHistories "json:\"integrationHistories\" graphql:\"integrationHistories\""
}

func (t *GetAllIntegrationHistories) GetIntegrationHistories() *GetAllIntegrationHistories_IntegrationHistories {
	if t == nil {
		t = &GetAllIntegrationHistories{}
	}
	return &t.IntegrationHistories
}

type GetIntegrationHistories struct {
	IntegrationHistories GetIntegrationHistories_IntegrationHistories "json:\"integrationHistories\" graphql:\"integrationHistories\""
}

func (t *GetIntegrationHistories) GetIntegrationHistories() *GetIntegrationHistories_IntegrationHistories {
	if t == nil {
		t = &GetIntegrationHistories{}
	}
	return &t.IntegrationHistories
}

type CreateBulkCSVInvite struct {
	CreateBulkCSVInvite CreateBulkCSVInvite_CreateBulkCSVInvite "json:\"createBulkCSVInvite\" graphql:\"createBulkCSVInvite\""
}

func (t *CreateBulkCSVInvite) GetCreateBulkCSVInvite() *CreateBulkCSVInvite_CreateBulkCSVInvite {
	if t == nil {
		t = &CreateBulkCSVInvite{}
	}
	return &t.CreateBulkCSVInvite
}

type CreateBulkInvite struct {
	CreateBulkInvite CreateBulkInvite_CreateBulkInvite "json:\"createBulkInvite\" graphql:\"createBulkInvite\""
}

func (t *CreateBulkInvite) GetCreateBulkInvite() *CreateBulkInvite_CreateBulkInvite {
	if t == nil {
		t = &CreateBulkInvite{}
	}
	return &t.CreateBulkInvite
}

type CreateInvite struct {
	CreateInvite CreateInvite_CreateInvite "json:\"createInvite\" graphql:\"createInvite\""
}

func (t *CreateInvite) GetCreateInvite() *CreateInvite_CreateInvite {
	if t == nil {
		t = &CreateInvite{}
	}
	return &t.CreateInvite
}

type DeleteInvite struct {
	DeleteInvite DeleteInvite_DeleteInvite "json:\"deleteInvite\" graphql:\"deleteInvite\""
}

func (t *DeleteInvite) GetDeleteInvite() *DeleteInvite_DeleteInvite {
	if t == nil {
		t = &DeleteInvite{}
	}
	return &t.DeleteInvite
}

type GetInviteByID struct {
	Invite GetInviteByID_Invite "json:\"invite\" graphql:\"invite\""
}

func (t *GetInviteByID) GetInvite() *GetInviteByID_Invite {
	if t == nil {
		t = &GetInviteByID{}
	}
	return &t.Invite
}

type GetAllInvites struct {
	Invites GetAllInvites_Invites "json:\"invites\" graphql:\"invites\""
}

func (t *GetAllInvites) GetInvites() *GetAllInvites_Invites {
	if t == nil {
		t = &GetAllInvites{}
	}
	return &t.Invites
}

type InvitesByOrgID struct {
	Invites InvitesByOrgID_Invites "json:\"invites\" graphql:\"invites\""
}

func (t *InvitesByOrgID) GetInvites() *InvitesByOrgID_Invites {
	if t == nil {
		t = &InvitesByOrgID{}
	}
	return &t.Invites
}

type GetAllOauthProviderHistories struct {
	OauthProviderHistories GetAllOauthProviderHistories_OauthProviderHistories "json:\"oauthProviderHistories\" graphql:\"oauthProviderHistories\""
}

func (t *GetAllOauthProviderHistories) GetOauthProviderHistories() *GetAllOauthProviderHistories_OauthProviderHistories {
	if t == nil {
		t = &GetAllOauthProviderHistories{}
	}
	return &t.OauthProviderHistories
}

type GetOauthProviderHistories struct {
	OauthProviderHistories GetOauthProviderHistories_OauthProviderHistories "json:\"oauthProviderHistories\" graphql:\"oauthProviderHistories\""
}

func (t *GetOauthProviderHistories) GetOauthProviderHistories() *GetOauthProviderHistories_OauthProviderHistories {
	if t == nil {
		t = &GetOauthProviderHistories{}
	}
	return &t.OauthProviderHistories
}

type CreateBulkCSVOhAuthTooToken struct {
	CreateBulkCSVOhAuthTooToken CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken "json:\"createBulkCSVOhAuthTooToken\" graphql:\"createBulkCSVOhAuthTooToken\""
}

func (t *CreateBulkCSVOhAuthTooToken) GetCreateBulkCSVOhAuthTooToken() *CreateBulkCSVOhAuthTooToken_CreateBulkCSVOhAuthTooToken {
	if t == nil {
		t = &CreateBulkCSVOhAuthTooToken{}
	}
	return &t.CreateBulkCSVOhAuthTooToken
}

type CreateBulkOhAuthTooToken struct {
	CreateBulkOhAuthTooToken CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken "json:\"createBulkOhAuthTooToken\" graphql:\"createBulkOhAuthTooToken\""
}

func (t *CreateBulkOhAuthTooToken) GetCreateBulkOhAuthTooToken() *CreateBulkOhAuthTooToken_CreateBulkOhAuthTooToken {
	if t == nil {
		t = &CreateBulkOhAuthTooToken{}
	}
	return &t.CreateBulkOhAuthTooToken
}

type CreateOhAuthTooToken struct {
	CreateOhAuthTooToken CreateOhAuthTooToken_CreateOhAuthTooToken "json:\"createOhAuthTooToken\" graphql:\"createOhAuthTooToken\""
}

func (t *CreateOhAuthTooToken) GetCreateOhAuthTooToken() *CreateOhAuthTooToken_CreateOhAuthTooToken {
	if t == nil {
		t = &CreateOhAuthTooToken{}
	}
	return &t.CreateOhAuthTooToken
}

type DeleteOhAuthTooToken struct {
	DeleteOhAuthTooToken DeleteOhAuthTooToken_DeleteOhAuthTooToken "json:\"deleteOhAuthTooToken\" graphql:\"deleteOhAuthTooToken\""
}

func (t *DeleteOhAuthTooToken) GetDeleteOhAuthTooToken() *DeleteOhAuthTooToken_DeleteOhAuthTooToken {
	if t == nil {
		t = &DeleteOhAuthTooToken{}
	}
	return &t.DeleteOhAuthTooToken
}

type GetOhAuthTooTokens struct {
	OhAuthTooTokens GetOhAuthTooTokens_OhAuthTooTokens "json:\"ohAuthTooTokens\" graphql:\"ohAuthTooTokens\""
}

func (t *GetOhAuthTooTokens) GetOhAuthTooTokens() *GetOhAuthTooTokens_OhAuthTooTokens {
	if t == nil {
		t = &GetOhAuthTooTokens{}
	}
	return &t.OhAuthTooTokens
}

type UpdateOhAuthTooToken struct {
	UpdateOhAuthTooToken UpdateOhAuthTooToken_UpdateOhAuthTooToken "json:\"updateOhAuthTooToken\" graphql:\"updateOhAuthTooToken\""
}

func (t *UpdateOhAuthTooToken) GetUpdateOhAuthTooToken() *UpdateOhAuthTooToken_UpdateOhAuthTooToken {
	if t == nil {
		t = &UpdateOhAuthTooToken{}
	}
	return &t.UpdateOhAuthTooToken
}

type CreateBulkCSVOrganization struct {
	CreateBulkCSVOrganization CreateBulkCSVOrganization_CreateBulkCSVOrganization "json:\"createBulkCSVOrganization\" graphql:\"createBulkCSVOrganization\""
}

func (t *CreateBulkCSVOrganization) GetCreateBulkCSVOrganization() *CreateBulkCSVOrganization_CreateBulkCSVOrganization {
	if t == nil {
		t = &CreateBulkCSVOrganization{}
	}
	return &t.CreateBulkCSVOrganization
}

type CreateBulkOrganization struct {
	CreateBulkOrganization CreateBulkOrganization_CreateBulkOrganization "json:\"createBulkOrganization\" graphql:\"createBulkOrganization\""
}

func (t *CreateBulkOrganization) GetCreateBulkOrganization() *CreateBulkOrganization_CreateBulkOrganization {
	if t == nil {
		t = &CreateBulkOrganization{}
	}
	return &t.CreateBulkOrganization
}

type CreateOrganization struct {
	CreateOrganization CreateOrganization_CreateOrganization "json:\"createOrganization\" graphql:\"createOrganization\""
}

func (t *CreateOrganization) GetCreateOrganization() *CreateOrganization_CreateOrganization {
	if t == nil {
		t = &CreateOrganization{}
	}
	return &t.CreateOrganization
}

type DeleteOrganization struct {
	DeleteOrganization DeleteOrganization_DeleteOrganization "json:\"deleteOrganization\" graphql:\"deleteOrganization\""
}

func (t *DeleteOrganization) GetDeleteOrganization() *DeleteOrganization_DeleteOrganization {
	if t == nil {
		t = &DeleteOrganization{}
	}
	return &t.DeleteOrganization
}

type GetAllOrganizations struct {
	Organizations GetAllOrganizations_Organizations "json:\"organizations\" graphql:\"organizations\""
}

func (t *GetAllOrganizations) GetOrganizations() *GetAllOrganizations_Organizations {
	if t == nil {
		t = &GetAllOrganizations{}
	}
	return &t.Organizations
}

type GetOrganizationByID struct {
	Organization GetOrganizationByID_Organization "json:\"organization\" graphql:\"organization\""
}

func (t *GetOrganizationByID) GetOrganization() *GetOrganizationByID_Organization {
	if t == nil {
		t = &GetOrganizationByID{}
	}
	return &t.Organization
}

type GetOrganizations struct {
	Organizations GetOrganizations_Organizations "json:\"organizations\" graphql:\"organizations\""
}

func (t *GetOrganizations) GetOrganizations() *GetOrganizations_Organizations {
	if t == nil {
		t = &GetOrganizations{}
	}
	return &t.Organizations
}

type UpdateOrganization struct {
	UpdateOrganization UpdateOrganization_UpdateOrganization "json:\"updateOrganization\" graphql:\"updateOrganization\""
}

func (t *UpdateOrganization) GetUpdateOrganization() *UpdateOrganization_UpdateOrganization {
	if t == nil {
		t = &UpdateOrganization{}
	}
	return &t.UpdateOrganization
}

type GetOrganizationSettingByID struct {
	OrganizationSetting GetOrganizationSettingByID_OrganizationSetting "json:\"organizationSetting\" graphql:\"organizationSetting\""
}

func (t *GetOrganizationSettingByID) GetOrganizationSetting() *GetOrganizationSettingByID_OrganizationSetting {
	if t == nil {
		t = &GetOrganizationSettingByID{}
	}
	return &t.OrganizationSetting
}

type GetAllOrganizationSettings struct {
	OrganizationSettings GetAllOrganizationSettings_OrganizationSettings "json:\"organizationSettings\" graphql:\"organizationSettings\""
}

func (t *GetAllOrganizationSettings) GetOrganizationSettings() *GetAllOrganizationSettings_OrganizationSettings {
	if t == nil {
		t = &GetAllOrganizationSettings{}
	}
	return &t.OrganizationSettings
}

type GetOrganizationSettings struct {
	OrganizationSettings GetOrganizationSettings_OrganizationSettings "json:\"organizationSettings\" graphql:\"organizationSettings\""
}

func (t *GetOrganizationSettings) GetOrganizationSettings() *GetOrganizationSettings_OrganizationSettings {
	if t == nil {
		t = &GetOrganizationSettings{}
	}
	return &t.OrganizationSettings
}

type UpdateOrganizationSetting struct {
	UpdateOrganizationSetting UpdateOrganizationSetting_UpdateOrganizationSetting "json:\"updateOrganizationSetting\" graphql:\"updateOrganizationSetting\""
}

func (t *UpdateOrganizationSetting) GetUpdateOrganizationSetting() *UpdateOrganizationSetting_UpdateOrganizationSetting {
	if t == nil {
		t = &UpdateOrganizationSetting{}
	}
	return &t.UpdateOrganizationSetting
}

type GetAllOrganizationSettingHistories struct {
	OrganizationSettingHistories GetAllOrganizationSettingHistories_OrganizationSettingHistories "json:\"organizationSettingHistories\" graphql:\"organizationSettingHistories\""
}

func (t *GetAllOrganizationSettingHistories) GetOrganizationSettingHistories() *GetAllOrganizationSettingHistories_OrganizationSettingHistories {
	if t == nil {
		t = &GetAllOrganizationSettingHistories{}
	}
	return &t.OrganizationSettingHistories
}

type GetOrganizationSettingHistories struct {
	OrganizationSettingHistories GetOrganizationSettingHistories_OrganizationSettingHistories "json:\"organizationSettingHistories\" graphql:\"organizationSettingHistories\""
}

func (t *GetOrganizationSettingHistories) GetOrganizationSettingHistories() *GetOrganizationSettingHistories_OrganizationSettingHistories {
	if t == nil {
		t = &GetOrganizationSettingHistories{}
	}
	return &t.OrganizationSettingHistories
}

type AddUserToOrgWithRole struct {
	CreateOrgMembership AddUserToOrgWithRole_CreateOrgMembership "json:\"createOrgMembership\" graphql:\"createOrgMembership\""
}

func (t *AddUserToOrgWithRole) GetCreateOrgMembership() *AddUserToOrgWithRole_CreateOrgMembership {
	if t == nil {
		t = &AddUserToOrgWithRole{}
	}
	return &t.CreateOrgMembership
}

type CreateBulkCSVOrgMembers struct {
	CreateBulkCSVOrgMembership CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership "json:\"createBulkCSVOrgMembership\" graphql:\"createBulkCSVOrgMembership\""
}

func (t *CreateBulkCSVOrgMembers) GetCreateBulkCSVOrgMembership() *CreateBulkCSVOrgMembers_CreateBulkCSVOrgMembership {
	if t == nil {
		t = &CreateBulkCSVOrgMembers{}
	}
	return &t.CreateBulkCSVOrgMembership
}

type CreateBulkOrgMembers struct {
	CreateBulkOrgMembership CreateBulkOrgMembers_CreateBulkOrgMembership "json:\"createBulkOrgMembership\" graphql:\"createBulkOrgMembership\""
}

func (t *CreateBulkOrgMembers) GetCreateBulkOrgMembership() *CreateBulkOrgMembers_CreateBulkOrgMembership {
	if t == nil {
		t = &CreateBulkOrgMembers{}
	}
	return &t.CreateBulkOrgMembership
}

type GetOrgMembersByOrgID struct {
	OrgMemberships GetOrgMembersByOrgID_OrgMemberships "json:\"orgMemberships\" graphql:\"orgMemberships\""
}

func (t *GetOrgMembersByOrgID) GetOrgMemberships() *GetOrgMembersByOrgID_OrgMemberships {
	if t == nil {
		t = &GetOrgMembersByOrgID{}
	}
	return &t.OrgMemberships
}

type RemoveUserFromOrg struct {
	DeleteOrgMembership RemoveUserFromOrg_DeleteOrgMembership "json:\"deleteOrgMembership\" graphql:\"deleteOrgMembership\""
}

func (t *RemoveUserFromOrg) GetDeleteOrgMembership() *RemoveUserFromOrg_DeleteOrgMembership {
	if t == nil {
		t = &RemoveUserFromOrg{}
	}
	return &t.DeleteOrgMembership
}

type UpdateUserRoleInOrg struct {
	UpdateOrgMembership UpdateUserRoleInOrg_UpdateOrgMembership "json:\"updateOrgMembership\" graphql:\"updateOrgMembership\""
}

func (t *UpdateUserRoleInOrg) GetUpdateOrgMembership() *UpdateUserRoleInOrg_UpdateOrgMembership {
	if t == nil {
		t = &UpdateUserRoleInOrg{}
	}
	return &t.UpdateOrgMembership
}

type GetAllOrgMembershipHistories struct {
	OrgMembershipHistories GetAllOrgMembershipHistories_OrgMembershipHistories "json:\"orgMembershipHistories\" graphql:\"orgMembershipHistories\""
}

func (t *GetAllOrgMembershipHistories) GetOrgMembershipHistories() *GetAllOrgMembershipHistories_OrgMembershipHistories {
	if t == nil {
		t = &GetAllOrgMembershipHistories{}
	}
	return &t.OrgMembershipHistories
}

type GetOrgMembershipHistories struct {
	OrgMembershipHistories GetOrgMembershipHistories_OrgMembershipHistories "json:\"orgMembershipHistories\" graphql:\"orgMembershipHistories\""
}

func (t *GetOrgMembershipHistories) GetOrgMembershipHistories() *GetOrgMembershipHistories_OrgMembershipHistories {
	if t == nil {
		t = &GetOrgMembershipHistories{}
	}
	return &t.OrgMembershipHistories
}

type CreateBulkCSVPersonalAccessToken struct {
	CreateBulkCSVPersonalAccessToken CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken "json:\"createBulkCSVPersonalAccessToken\" graphql:\"createBulkCSVPersonalAccessToken\""
}

func (t *CreateBulkCSVPersonalAccessToken) GetCreateBulkCSVPersonalAccessToken() *CreateBulkCSVPersonalAccessToken_CreateBulkCSVPersonalAccessToken {
	if t == nil {
		t = &CreateBulkCSVPersonalAccessToken{}
	}
	return &t.CreateBulkCSVPersonalAccessToken
}

type CreateBulkPersonalAccessToken struct {
	CreateBulkPersonalAccessToken CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken "json:\"createBulkPersonalAccessToken\" graphql:\"createBulkPersonalAccessToken\""
}

func (t *CreateBulkPersonalAccessToken) GetCreateBulkPersonalAccessToken() *CreateBulkPersonalAccessToken_CreateBulkPersonalAccessToken {
	if t == nil {
		t = &CreateBulkPersonalAccessToken{}
	}
	return &t.CreateBulkPersonalAccessToken
}

type CreatePersonalAccessToken struct {
	CreatePersonalAccessToken CreatePersonalAccessToken_CreatePersonalAccessToken "json:\"createPersonalAccessToken\" graphql:\"createPersonalAccessToken\""
}

func (t *CreatePersonalAccessToken) GetCreatePersonalAccessToken() *CreatePersonalAccessToken_CreatePersonalAccessToken {
	if t == nil {
		t = &CreatePersonalAccessToken{}
	}
	return &t.CreatePersonalAccessToken
}

type DeletePersonalAccessToken struct {
	DeletePersonalAccessToken DeletePersonalAccessToken_DeletePersonalAccessToken "json:\"deletePersonalAccessToken\" graphql:\"deletePersonalAccessToken\""
}

func (t *DeletePersonalAccessToken) GetDeletePersonalAccessToken() *DeletePersonalAccessToken_DeletePersonalAccessToken {
	if t == nil {
		t = &DeletePersonalAccessToken{}
	}
	return &t.DeletePersonalAccessToken
}

type GetAllPersonalAccessTokens struct {
	PersonalAccessTokens GetAllPersonalAccessTokens_PersonalAccessTokens "json:\"personalAccessTokens\" graphql:\"personalAccessTokens\""
}

func (t *GetAllPersonalAccessTokens) GetPersonalAccessTokens() *GetAllPersonalAccessTokens_PersonalAccessTokens {
	if t == nil {
		t = &GetAllPersonalAccessTokens{}
	}
	return &t.PersonalAccessTokens
}

type GetPersonalAccessTokenByID struct {
	PersonalAccessToken GetPersonalAccessTokenByID_PersonalAccessToken "json:\"personalAccessToken\" graphql:\"personalAccessToken\""
}

func (t *GetPersonalAccessTokenByID) GetPersonalAccessToken() *GetPersonalAccessTokenByID_PersonalAccessToken {
	if t == nil {
		t = &GetPersonalAccessTokenByID{}
	}
	return &t.PersonalAccessToken
}

type UpdatePersonalAccessToken struct {
	UpdatePersonalAccessToken UpdatePersonalAccessToken_UpdatePersonalAccessToken "json:\"updatePersonalAccessToken\" graphql:\"updatePersonalAccessToken\""
}

func (t *UpdatePersonalAccessToken) GetUpdatePersonalAccessToken() *UpdatePersonalAccessToken_UpdatePersonalAccessToken {
	if t == nil {
		t = &UpdatePersonalAccessToken{}
	}
	return &t.UpdatePersonalAccessToken
}

type Search struct {
	Search *Search_Search "json:\"search,omitempty\" graphql:\"search\""
}

func (t *Search) GetSearch() *Search_Search {
	if t == nil {
		t = &Search{}
	}
	return t.Search
}

type CreateBulkCSVSubscriber struct {
	CreateBulkCSVSubscriber CreateBulkCSVSubscriber_CreateBulkCSVSubscriber "json:\"createBulkCSVSubscriber\" graphql:\"createBulkCSVSubscriber\""
}

func (t *CreateBulkCSVSubscriber) GetCreateBulkCSVSubscriber() *CreateBulkCSVSubscriber_CreateBulkCSVSubscriber {
	if t == nil {
		t = &CreateBulkCSVSubscriber{}
	}
	return &t.CreateBulkCSVSubscriber
}

type CreateBulkSubscriber struct {
	CreateBulkSubscriber CreateBulkSubscriber_CreateBulkSubscriber "json:\"createBulkSubscriber\" graphql:\"createBulkSubscriber\""
}

func (t *CreateBulkSubscriber) GetCreateBulkSubscriber() *CreateBulkSubscriber_CreateBulkSubscriber {
	if t == nil {
		t = &CreateBulkSubscriber{}
	}
	return &t.CreateBulkSubscriber
}

type CreateSubscriber struct {
	CreateSubscriber CreateSubscriber_CreateSubscriber "json:\"createSubscriber\" graphql:\"createSubscriber\""
}

func (t *CreateSubscriber) GetCreateSubscriber() *CreateSubscriber_CreateSubscriber {
	if t == nil {
		t = &CreateSubscriber{}
	}
	return &t.CreateSubscriber
}

type DeleteSubscriber struct {
	DeleteSubscriber DeleteSubscriber_DeleteSubscriber "json:\"deleteSubscriber\" graphql:\"deleteSubscriber\""
}

func (t *DeleteSubscriber) GetDeleteSubscriber() *DeleteSubscriber_DeleteSubscriber {
	if t == nil {
		t = &DeleteSubscriber{}
	}
	return &t.DeleteSubscriber
}

type GetAllSubscribers struct {
	Subscribers GetAllSubscribers_Subscribers "json:\"subscribers\" graphql:\"subscribers\""
}

func (t *GetAllSubscribers) GetSubscribers() *GetAllSubscribers_Subscribers {
	if t == nil {
		t = &GetAllSubscribers{}
	}
	return &t.Subscribers
}

type GetSubscriberByEmail struct {
	Subscriber GetSubscriberByEmail_Subscriber "json:\"subscriber\" graphql:\"subscriber\""
}

func (t *GetSubscriberByEmail) GetSubscriber() *GetSubscriberByEmail_Subscriber {
	if t == nil {
		t = &GetSubscriberByEmail{}
	}
	return &t.Subscriber
}

type GetSubscribers struct {
	Subscribers GetSubscribers_Subscribers "json:\"subscribers\" graphql:\"subscribers\""
}

func (t *GetSubscribers) GetSubscribers() *GetSubscribers_Subscribers {
	if t == nil {
		t = &GetSubscribers{}
	}
	return &t.Subscribers
}

type UpdateSubscriber struct {
	UpdateSubscriber UpdateSubscriber_UpdateSubscriber "json:\"updateSubscriber\" graphql:\"updateSubscriber\""
}

func (t *UpdateSubscriber) GetUpdateSubscriber() *UpdateSubscriber_UpdateSubscriber {
	if t == nil {
		t = &UpdateSubscriber{}
	}
	return &t.UpdateSubscriber
}

type CreateTemplate struct {
	CreateTemplate CreateTemplate_CreateTemplate "json:\"createTemplate\" graphql:\"createTemplate\""
}

func (t *CreateTemplate) GetCreateTemplate() *CreateTemplate_CreateTemplate {
	if t == nil {
		t = &CreateTemplate{}
	}
	return &t.CreateTemplate
}

type CreateBulkTemplate struct {
	CreateBulkTemplate CreateBulkTemplate_CreateBulkTemplate "json:\"createBulkTemplate\" graphql:\"createBulkTemplate\""
}

func (t *CreateBulkTemplate) GetCreateBulkTemplate() *CreateBulkTemplate_CreateBulkTemplate {
	if t == nil {
		t = &CreateBulkTemplate{}
	}
	return &t.CreateBulkTemplate
}

type CreateBulkCSVTemplate struct {
	CreateBulkCSVTemplate CreateBulkCSVTemplate_CreateBulkCSVTemplate "json:\"createBulkCSVTemplate\" graphql:\"createBulkCSVTemplate\""
}

func (t *CreateBulkCSVTemplate) GetCreateBulkCSVTemplate() *CreateBulkCSVTemplate_CreateBulkCSVTemplate {
	if t == nil {
		t = &CreateBulkCSVTemplate{}
	}
	return &t.CreateBulkCSVTemplate
}

type UpdateTemplate struct {
	UpdateTemplate UpdateTemplate_UpdateTemplate "json:\"updateTemplate\" graphql:\"updateTemplate\""
}

func (t *UpdateTemplate) GetUpdateTemplate() *UpdateTemplate_UpdateTemplate {
	if t == nil {
		t = &UpdateTemplate{}
	}
	return &t.UpdateTemplate
}

type GetAllTemplates struct {
	Templates GetAllTemplates_Templates "json:\"templates\" graphql:\"templates\""
}

func (t *GetAllTemplates) GetTemplates() *GetAllTemplates_Templates {
	if t == nil {
		t = &GetAllTemplates{}
	}
	return &t.Templates
}

type GetTemplateByID struct {
	Template GetTemplateByID_Template "json:\"template\" graphql:\"template\""
}

func (t *GetTemplateByID) GetTemplate() *GetTemplateByID_Template {
	if t == nil {
		t = &GetTemplateByID{}
	}
	return &t.Template
}

type GetAllTemplateHistories struct {
	TemplateHistories GetAllTemplateHistories_TemplateHistories "json:\"templateHistories\" graphql:\"templateHistories\""
}

func (t *GetAllTemplateHistories) GetTemplateHistories() *GetAllTemplateHistories_TemplateHistories {
	if t == nil {
		t = &GetAllTemplateHistories{}
	}
	return &t.TemplateHistories
}

type GetTemplateHistories struct {
	TemplateHistories GetTemplateHistories_TemplateHistories "json:\"templateHistories\" graphql:\"templateHistories\""
}

func (t *GetTemplateHistories) GetTemplateHistories() *GetTemplateHistories_TemplateHistories {
	if t == nil {
		t = &GetTemplateHistories{}
	}
	return &t.TemplateHistories
}

type CreateTFASetting struct {
	CreateTFASetting CreateTFASetting_CreateTFASetting "json:\"createTFASetting\" graphql:\"createTFASetting\""
}

func (t *CreateTFASetting) GetCreateTFASetting() *CreateTFASetting_CreateTFASetting {
	if t == nil {
		t = &CreateTFASetting{}
	}
	return &t.CreateTFASetting
}

type GetTFASetting struct {
	TfaSetting GetTFASetting_TfaSetting "json:\"tfaSetting\" graphql:\"tfaSetting\""
}

func (t *GetTFASetting) GetTfaSetting() *GetTFASetting_TfaSetting {
	if t == nil {
		t = &GetTFASetting{}
	}
	return &t.TfaSetting
}

type GetAllTFASettings struct {
	TfaSettings GetAllTFASettings_TfaSettings "json:\"tfaSettings\" graphql:\"tfaSettings\""
}

func (t *GetAllTFASettings) GetTfaSettings() *GetAllTFASettings_TfaSettings {
	if t == nil {
		t = &GetAllTFASettings{}
	}
	return &t.TfaSettings
}

type UpdateTFASetting struct {
	UpdateTFASetting UpdateTFASetting_UpdateTFASetting "json:\"updateTFASetting\" graphql:\"updateTFASetting\""
}

func (t *UpdateTFASetting) GetUpdateTFASetting() *UpdateTFASetting_UpdateTFASetting {
	if t == nil {
		t = &UpdateTFASetting{}
	}
	return &t.UpdateTFASetting
}

type CreateUser struct {
	CreateUser CreateUser_CreateUser "json:\"createUser\" graphql:\"createUser\""
}

func (t *CreateUser) GetCreateUser() *CreateUser_CreateUser {
	if t == nil {
		t = &CreateUser{}
	}
	return &t.CreateUser
}

type DeleteUser struct {
	DeleteUser DeleteUser_DeleteUser "json:\"deleteUser\" graphql:\"deleteUser\""
}

func (t *DeleteUser) GetDeleteUser() *DeleteUser_DeleteUser {
	if t == nil {
		t = &DeleteUser{}
	}
	return &t.DeleteUser
}

type GetAllUsers struct {
	Users GetAllUsers_Users "json:\"users\" graphql:\"users\""
}

func (t *GetAllUsers) GetUsers() *GetAllUsers_Users {
	if t == nil {
		t = &GetAllUsers{}
	}
	return &t.Users
}

type GetUserByID struct {
	User GetUserByID_User "json:\"user\" graphql:\"user\""
}

func (t *GetUserByID) GetUser() *GetUserByID_User {
	if t == nil {
		t = &GetUserByID{}
	}
	return &t.User
}

type GetUserByIDWithOrgs struct {
	User GetUserByIDWithOrgs_User "json:\"user\" graphql:\"user\""
}

func (t *GetUserByIDWithOrgs) GetUser() *GetUserByIDWithOrgs_User {
	if t == nil {
		t = &GetUserByIDWithOrgs{}
	}
	return &t.User
}

type UpdateUser struct {
	UpdateUser UpdateUser_UpdateUser "json:\"updateUser\" graphql:\"updateUser\""
}

func (t *UpdateUser) GetUpdateUser() *UpdateUser_UpdateUser {
	if t == nil {
		t = &UpdateUser{}
	}
	return &t.UpdateUser
}

type GetAllUserHistories struct {
	UserHistories GetAllUserHistories_UserHistories "json:\"userHistories\" graphql:\"userHistories\""
}

func (t *GetAllUserHistories) GetUserHistories() *GetAllUserHistories_UserHistories {
	if t == nil {
		t = &GetAllUserHistories{}
	}
	return &t.UserHistories
}

type GetUserHistories struct {
	UserHistories GetUserHistories_UserHistories "json:\"userHistories\" graphql:\"userHistories\""
}

func (t *GetUserHistories) GetUserHistories() *GetUserHistories_UserHistories {
	if t == nil {
		t = &GetUserHistories{}
	}
	return &t.UserHistories
}

type GetUserSettingByID struct {
	UserSetting GetUserSettingByID_UserSetting "json:\"userSetting\" graphql:\"userSetting\""
}

func (t *GetUserSettingByID) GetUserSetting() *GetUserSettingByID_UserSetting {
	if t == nil {
		t = &GetUserSettingByID{}
	}
	return &t.UserSetting
}

type GetAllUserSettings struct {
	UserSettings GetAllUserSettings_UserSettings "json:\"userSettings\" graphql:\"userSettings\""
}

func (t *GetAllUserSettings) GetUserSettings() *GetAllUserSettings_UserSettings {
	if t == nil {
		t = &GetAllUserSettings{}
	}
	return &t.UserSettings
}

type GetUserSettings struct {
	UserSettings GetUserSettings_UserSettings "json:\"userSettings\" graphql:\"userSettings\""
}

func (t *GetUserSettings) GetUserSettings() *GetUserSettings_UserSettings {
	if t == nil {
		t = &GetUserSettings{}
	}
	return &t.UserSettings
}

type UpdateUserSetting struct {
	UpdateUserSetting UpdateUserSetting_UpdateUserSetting "json:\"updateUserSetting\" graphql:\"updateUserSetting\""
}

func (t *UpdateUserSetting) GetUpdateUserSetting() *UpdateUserSetting_UpdateUserSetting {
	if t == nil {
		t = &UpdateUserSetting{}
	}
	return &t.UpdateUserSetting
}

type GetAllUserSettingHistories struct {
	UserSettingHistories GetAllUserSettingHistories_UserSettingHistories "json:\"userSettingHistories\" graphql:\"userSettingHistories\""
}

func (t *GetAllUserSettingHistories) GetUserSettingHistories() *GetAllUserSettingHistories_UserSettingHistories {
	if t == nil {
		t = &GetAllUserSettingHistories{}
	}
	return &t.UserSettingHistories
}

type GetUserSettingHistories struct {
	UserSettingHistories GetUserSettingHistories_UserSettingHistories "json:\"userSettingHistories\" graphql:\"userSettingHistories\""
}

func (t *GetUserSettingHistories) GetUserSettingHistories() *GetUserSettingHistories_UserSettingHistories {
	if t == nil {
		t = &GetUserSettingHistories{}
	}
	return &t.UserSettingHistories
}

type GetWebhookByID struct {
	Webhook GetWebhookByID_Webhook "json:\"webhook\" graphql:\"webhook\""
}

func (t *GetWebhookByID) GetWebhook() *GetWebhookByID_Webhook {
	if t == nil {
		t = &GetWebhookByID{}
	}
	return &t.Webhook
}

type GetAllWebhooks struct {
	Webhooks GetAllWebhooks_Webhooks "json:\"webhooks\" graphql:\"webhooks\""
}

func (t *GetAllWebhooks) GetWebhooks() *GetAllWebhooks_Webhooks {
	if t == nil {
		t = &GetAllWebhooks{}
	}
	return &t.Webhooks
}

type CreateWebhook struct {
	CreateWebhook CreateWebhook_CreateWebhook "json:\"createWebhook\" graphql:\"createWebhook\""
}

func (t *CreateWebhook) GetCreateWebhook() *CreateWebhook_CreateWebhook {
	if t == nil {
		t = &CreateWebhook{}
	}
	return &t.CreateWebhook
}

type CreateBulkWebhook struct {
	CreateBulkWebhook CreateBulkWebhook_CreateBulkWebhook "json:\"createBulkWebhook\" graphql:\"createBulkWebhook\""
}

func (t *CreateBulkWebhook) GetCreateBulkWebhook() *CreateBulkWebhook_CreateBulkWebhook {
	if t == nil {
		t = &CreateBulkWebhook{}
	}
	return &t.CreateBulkWebhook
}

type CreateBulkCSVWebhook struct {
	CreateBulkCSVWebhook CreateBulkCSVWebhook_CreateBulkCSVWebhook "json:\"createBulkCSVWebhook\" graphql:\"createBulkCSVWebhook\""
}

func (t *CreateBulkCSVWebhook) GetCreateBulkCSVWebhook() *CreateBulkCSVWebhook_CreateBulkCSVWebhook {
	if t == nil {
		t = &CreateBulkCSVWebhook{}
	}
	return &t.CreateBulkCSVWebhook
}

type UpdateWebhook struct {
	UpdateWebhook UpdateWebhook_UpdateWebhook "json:\"updateWebhook\" graphql:\"updateWebhook\""
}

func (t *UpdateWebhook) GetUpdateWebhook() *UpdateWebhook_UpdateWebhook {
	if t == nil {
		t = &UpdateWebhook{}
	}
	return &t.UpdateWebhook
}

type DeleteWebhook struct {
	DeleteWebhook DeleteWebhook_DeleteWebhook "json:\"deleteWebhook\" graphql:\"deleteWebhook\""
}

func (t *DeleteWebhook) GetDeleteWebhook() *DeleteWebhook_DeleteWebhook {
	if t == nil {
		t = &DeleteWebhook{}
	}
	return &t.DeleteWebhook
}

type GetAllWebhookHistories struct {
	WebhookHistories GetAllWebhookHistories_WebhookHistories "json:\"webhookHistories\" graphql:\"webhookHistories\""
}

func (t *GetAllWebhookHistories) GetWebhookHistories() *GetAllWebhookHistories_WebhookHistories {
	if t == nil {
		t = &GetAllWebhookHistories{}
	}
	return &t.WebhookHistories
}

type GetWebhookHistories struct {
	WebhookHistories GetWebhookHistories_WebhookHistories "json:\"webhookHistories\" graphql:\"webhookHistories\""
}

func (t *GetWebhookHistories) GetWebhookHistories() *GetWebhookHistories_WebhookHistories {
	if t == nil {
		t = &GetWebhookHistories{}
	}
	return &t.WebhookHistories
}

const CreateAPITokenDocument = `mutation CreateAPIToken ($input: CreateAPITokenInput!) {
	createAPIToken(input: $input) {
		apiToken {
			id
			token
			scopes
			owner {
				id
			}
			createdAt
			updatedAt
			createdBy
			updatedBy
			name
			expiresAt
			description
			lastUsedAt
		}
	}
}
`

func (c *Client) CreateAPIToken(ctx context.Context, input CreateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateAPIToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateAPIToken
	if err := c.Client.Post(ctx, "CreateAPIToken", CreateAPITokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateAPITokenDocument = `mutation UpdateAPIToken ($updateAPITokenId: ID!, $input: UpdateAPITokenInput!) {
	updateAPIToken(id: $updateAPITokenId, input: $input) {
		apiToken {
			id
			token
			scopes
			owner {
				id
			}
			createdAt
			updatedAt
			createdBy
			updatedBy
			name
			expiresAt
			description
			lastUsedAt
		}
	}
}
`

func (c *Client) UpdateAPIToken(ctx context.Context, updateAPITokenID string, input UpdateAPITokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdateAPIToken, error) {
	vars := map[string]any{
		"updateAPITokenId": updateAPITokenID,
		"input":            input,
	}

	var res UpdateAPIToken
	if err := c.Client.Post(ctx, "UpdateAPIToken", UpdateAPITokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllAPITokensDocument = `query GetAllAPITokens {
	apiTokens {
		edges {
			node {
				id
				token
				scopes
				owner {
					id
				}
				createdAt
				updatedAt
				createdBy
				updatedBy
				name
				expiresAt
				description
				lastUsedAt
			}
		}
	}
}
`

func (c *Client) GetAllAPITokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllAPITokens, error) {
	vars := map[string]any{}

	var res GetAllAPITokens
	if err := c.Client.Post(ctx, "GetAllAPITokens", GetAllAPITokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAPITokenByIDDocument = `query GetAPITokenByID ($apiTokenId: ID!) {
	apiToken(id: $apiTokenId) {
		id
		token
		scopes
		owner {
			id
		}
		createdAt
		updatedAt
		createdBy
		updatedBy
		name
		expiresAt
		description
		lastUsedAt
	}
}
`

func (c *Client) GetAPITokenByID(ctx context.Context, apiTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetAPITokenByID, error) {
	vars := map[string]any{
		"apiTokenId": apiTokenID,
	}

	var res GetAPITokenByID
	if err := c.Client.Post(ctx, "GetAPITokenByID", GetAPITokenByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteAPITokenDocument = `mutation DeleteAPIToken ($deleteAPITokenId: ID!) {
	deleteAPIToken(id: $deleteAPITokenId) {
		deletedID
	}
}
`

func (c *Client) DeleteAPIToken(ctx context.Context, deleteAPITokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteAPIToken, error) {
	vars := map[string]any{
		"deleteAPITokenId": deleteAPITokenID,
	}

	var res DeleteAPIToken
	if err := c.Client.Post(ctx, "DeleteAPIToken", DeleteAPITokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetDocumentDataByIDDocument = `query GetDocumentDataByID ($documentDataId: ID!) {
	documentData(id: $documentDataId) {
		id
		templateID
		data
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetDocumentDataByID(ctx context.Context, documentDataID string, interceptors ...clientv2.RequestInterceptor) (*GetDocumentDataByID, error) {
	vars := map[string]any{
		"documentDataId": documentDataID,
	}

	var res GetDocumentDataByID
	if err := c.Client.Post(ctx, "GetDocumentDataByID", GetDocumentDataByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateDocumentDataDocument = `mutation CreateDocumentData ($input: CreateDocumentDataInput!) {
	createDocumentData(input: $input) {
		documentData {
			id
			templateID
			data
			createdAt
			createdBy
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) CreateDocumentData(ctx context.Context, input CreateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*CreateDocumentData, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateDocumentData
	if err := c.Client.Post(ctx, "CreateDocumentData", CreateDocumentDataDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateDocumentDataDocument = `mutation UpdateDocumentData ($updateDocumentDataId: ID!, $input: UpdateDocumentDataInput!) {
	updateDocumentData(id: $updateDocumentDataId, input: $input) {
		documentData {
			id
			templateID
			data
			createdAt
			createdBy
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateDocumentData(ctx context.Context, updateDocumentDataID string, input UpdateDocumentDataInput, interceptors ...clientv2.RequestInterceptor) (*UpdateDocumentData, error) {
	vars := map[string]any{
		"updateDocumentDataId": updateDocumentDataID,
		"input":                input,
	}

	var res UpdateDocumentData
	if err := c.Client.Post(ctx, "UpdateDocumentData", UpdateDocumentDataDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteDocumentDataDocument = `mutation DeleteDocumentData ($deleteDocumentDataId: ID!) {
	deleteDocumentData(id: $deleteDocumentDataId) {
		deletedID
	}
}
`

func (c *Client) DeleteDocumentData(ctx context.Context, deleteDocumentDataID string, interceptors ...clientv2.RequestInterceptor) (*DeleteDocumentData, error) {
	vars := map[string]any{
		"deleteDocumentDataId": deleteDocumentDataID,
	}

	var res DeleteDocumentData
	if err := c.Client.Post(ctx, "DeleteDocumentData", DeleteDocumentDataDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEntitlementDocument = `mutation CreateBulkCSVEntitlement ($input: Upload!) {
	createBulkCSVEntitlement(input: $input) {
		entitlements {
			id
			plan {
				id
				name
			}
			expires
			expiresAt
			cancelled
			externalCustomerID
			externalSubscriptionID
			organization {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVEntitlement(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntitlement, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEntitlement
	if err := c.Client.Post(ctx, "CreateBulkCSVEntitlement", CreateBulkCSVEntitlementDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEntitlementDocument = `mutation CreateBulkEntitlement ($input: [CreateEntitlementInput!]) {
	createBulkEntitlement(input: $input) {
		entitlements {
			id
			plan {
				id
				name
			}
			organization {
				id
				name
			}
			expires
			expiresAt
			cancelled
			externalCustomerID
			externalSubscriptionID
		}
	}
}
`

func (c *Client) CreateBulkEntitlement(ctx context.Context, input []*CreateEntitlementInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntitlement, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEntitlement
	if err := c.Client.Post(ctx, "CreateBulkEntitlement", CreateBulkEntitlementDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEntitlementDocument = `mutation CreateEntitlement ($input: CreateEntitlementInput!) {
	createEntitlement(input: $input) {
		entitlement {
			id
			plan {
				id
				name
			}
			organization {
				id
				name
			}
			expires
			expiresAt
			cancelled
			externalCustomerID
			externalSubscriptionID
		}
	}
}
`

func (c *Client) CreateEntitlement(ctx context.Context, input CreateEntitlementInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntitlement, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEntitlement
	if err := c.Client.Post(ctx, "CreateEntitlement", CreateEntitlementDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEntitlementDocument = `mutation DeleteEntitlement ($deleteEntitlementId: ID!) {
	deleteEntitlement(id: $deleteEntitlementId) {
		deletedID
	}
}
`

func (c *Client) DeleteEntitlement(ctx context.Context, deleteEntitlementID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntitlement, error) {
	vars := map[string]any{
		"deleteEntitlementId": deleteEntitlementID,
	}

	var res DeleteEntitlement
	if err := c.Client.Post(ctx, "DeleteEntitlement", DeleteEntitlementDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntitlementsDocument = `query GetAllEntitlements {
	entitlements {
		edges {
			node {
				id
				plan {
					id
					name
					features {
						metadata
						feature {
							id
							name
						}
					}
				}
				organization {
					id
					name
				}
				expires
				expiresAt
				cancelled
				externalCustomerID
				externalSubscriptionID
			}
		}
	}
}
`

func (c *Client) GetAllEntitlements(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlements, error) {
	vars := map[string]any{}

	var res GetAllEntitlements
	if err := c.Client.Post(ctx, "GetAllEntitlements", GetAllEntitlementsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementByIDDocument = `query GetEntitlementByID ($entitlementId: ID!) {
	entitlement(id: $entitlementId) {
		id
		plan {
			id
			name
			features {
				metadata
				feature {
					id
					name
				}
			}
		}
		organization {
			id
			name
		}
		expires
		expiresAt
		cancelled
		externalCustomerID
		externalSubscriptionID
	}
}
`

func (c *Client) GetEntitlementByID(ctx context.Context, entitlementID string, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementByID, error) {
	vars := map[string]any{
		"entitlementId": entitlementID,
	}

	var res GetEntitlementByID
	if err := c.Client.Post(ctx, "GetEntitlementByID", GetEntitlementByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementsDocument = `query GetEntitlements ($where: EntitlementWhereInput) {
	entitlements(where: $where) {
		edges {
			node {
				id
				plan {
					id
					name
					features {
						metadata
						feature {
							id
							name
						}
					}
				}
				organization {
					id
					name
				}
				expires
				expiresAt
				cancelled
				externalCustomerID
				externalSubscriptionID
			}
		}
	}
}
`

func (c *Client) GetEntitlements(ctx context.Context, where *EntitlementWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlements, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntitlements
	if err := c.Client.Post(ctx, "GetEntitlements", GetEntitlementsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEntitlementDocument = `mutation UpdateEntitlement ($updateEntitlementId: ID!, $input: UpdateEntitlementInput!) {
	updateEntitlement(id: $updateEntitlementId, input: $input) {
		entitlement {
			id
			plan {
				id
				name
			}
			expires
			expiresAt
			cancelled
			externalCustomerID
			externalSubscriptionID
		}
	}
}
`

func (c *Client) UpdateEntitlement(ctx context.Context, updateEntitlementID string, input UpdateEntitlementInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntitlement, error) {
	vars := map[string]any{
		"updateEntitlementId": updateEntitlementID,
		"input":               input,
	}

	var res UpdateEntitlement
	if err := c.Client.Post(ctx, "UpdateEntitlement", UpdateEntitlementDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEntitlementPlanDocument = `mutation CreateBulkCSVEntitlementPlan ($input: Upload!) {
	createBulkCSVEntitlementPlan(input: $input) {
		entitlementPlans {
			id
			name
			displayName
			metadata
			tags
			version
			description
		}
	}
}
`

func (c *Client) CreateBulkCSVEntitlementPlan(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntitlementPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEntitlementPlan
	if err := c.Client.Post(ctx, "CreateBulkCSVEntitlementPlan", CreateBulkCSVEntitlementPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEntitlementPlanDocument = `mutation CreateBulkEntitlementPlan ($input: [CreateEntitlementPlanInput!]) {
	createBulkEntitlementPlan(input: $input) {
		entitlementPlans {
			id
			name
			displayName
			metadata
			tags
			version
			description
		}
	}
}
`

func (c *Client) CreateBulkEntitlementPlan(ctx context.Context, input []*CreateEntitlementPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntitlementPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEntitlementPlan
	if err := c.Client.Post(ctx, "CreateBulkEntitlementPlan", CreateBulkEntitlementPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEntitlementPlanDocument = `mutation CreateEntitlementPlan ($input: CreateEntitlementPlanInput!) {
	createEntitlementPlan(input: $input) {
		entitlementPlan {
			id
			name
			displayName
			metadata
			tags
			version
			description
		}
	}
}
`

func (c *Client) CreateEntitlementPlan(ctx context.Context, input CreateEntitlementPlanInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntitlementPlan, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEntitlementPlan
	if err := c.Client.Post(ctx, "CreateEntitlementPlan", CreateEntitlementPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEntitlementPlanDocument = `mutation DeleteEntitlementPlan ($deleteEntitlementPlanId: ID!) {
	deleteEntitlementPlan(id: $deleteEntitlementPlanId) {
		deletedID
	}
}
`

func (c *Client) DeleteEntitlementPlan(ctx context.Context, deleteEntitlementPlanID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntitlementPlan, error) {
	vars := map[string]any{
		"deleteEntitlementPlanId": deleteEntitlementPlanID,
	}

	var res DeleteEntitlementPlan
	if err := c.Client.Post(ctx, "DeleteEntitlementPlan", DeleteEntitlementPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntitlementPlansDocument = `query GetAllEntitlementPlans {
	entitlementPlans {
		edges {
			node {
				id
				name
				displayName
				metadata
				tags
				version
				description
				features {
					feature {
						id
						metadata
						name
					}
					metadata
					tags
				}
			}
		}
	}
}
`

func (c *Client) GetAllEntitlementPlans(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlementPlans, error) {
	vars := map[string]any{}

	var res GetAllEntitlementPlans
	if err := c.Client.Post(ctx, "GetAllEntitlementPlans", GetAllEntitlementPlansDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementPlanByIDDocument = `query GetEntitlementPlanByID ($entitlementPlanId: ID!) {
	entitlementPlan(id: $entitlementPlanId) {
		id
		name
		displayName
		metadata
		tags
		version
		description
		features {
			feature {
				id
				metadata
				name
			}
			metadata
			tags
		}
	}
}
`

func (c *Client) GetEntitlementPlanByID(ctx context.Context, entitlementPlanID string, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanByID, error) {
	vars := map[string]any{
		"entitlementPlanId": entitlementPlanID,
	}

	var res GetEntitlementPlanByID
	if err := c.Client.Post(ctx, "GetEntitlementPlanByID", GetEntitlementPlanByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementPlansDocument = `query GetEntitlementPlans ($where: EntitlementPlanWhereInput) {
	entitlementPlans(where: $where) {
		edges {
			node {
				id
				name
				displayName
				metadata
				tags
				version
				description
				features {
					feature {
						id
						metadata
						name
					}
					metadata
					tags
				}
			}
		}
	}
}
`

func (c *Client) GetEntitlementPlans(ctx context.Context, where *EntitlementPlanWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlans, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntitlementPlans
	if err := c.Client.Post(ctx, "GetEntitlementPlans", GetEntitlementPlansDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEntitlementPlanDocument = `mutation UpdateEntitlementPlan ($updateEntitlementPlanId: ID!, $input: UpdateEntitlementPlanInput!) {
	updateEntitlementPlan(id: $updateEntitlementPlanId, input: $input) {
		entitlementPlan {
			id
			name
			displayName
			metadata
			tags
			version
			description
		}
	}
}
`

func (c *Client) UpdateEntitlementPlan(ctx context.Context, updateEntitlementPlanID string, input UpdateEntitlementPlanInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntitlementPlan, error) {
	vars := map[string]any{
		"updateEntitlementPlanId": updateEntitlementPlanID,
		"input":                   input,
	}

	var res UpdateEntitlementPlan
	if err := c.Client.Post(ctx, "UpdateEntitlementPlan", UpdateEntitlementPlanDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEntitlementPlanFeaturesDocument = `query GetAllEntitlementPlanFeatures {
	entitlementPlanFeatures {
		edges {
			node {
				id
				feature {
					id
					name
				}
				metadata
				plan {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetAllEntitlementPlanFeatures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEntitlementPlanFeatures, error) {
	vars := map[string]any{}

	var res GetAllEntitlementPlanFeatures
	if err := c.Client.Post(ctx, "GetAllEntitlementPlanFeatures", GetAllEntitlementPlanFeaturesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementPlanFeatureByIDDocument = `query GetEntitlementPlanFeatureByID ($entitlementPlanFeatureId: ID!) {
	entitlementPlanFeature(id: $entitlementPlanFeatureId) {
		id
		metadata
		plan {
			id
			name
		}
		feature {
			id
			name
		}
	}
}
`

func (c *Client) GetEntitlementPlanFeatureByID(ctx context.Context, entitlementPlanFeatureID string, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanFeatureByID, error) {
	vars := map[string]any{
		"entitlementPlanFeatureId": entitlementPlanFeatureID,
	}

	var res GetEntitlementPlanFeatureByID
	if err := c.Client.Post(ctx, "GetEntitlementPlanFeatureByID", GetEntitlementPlanFeatureByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEntitlementPlanFeaturesDocument = `query GetEntitlementPlanFeatures ($where: EntitlementPlanFeatureWhereInput) {
	entitlementPlanFeatures(where: $where) {
		edges {
			node {
				id
				metadata
				plan {
					id
					name
				}
				feature {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetEntitlementPlanFeatures(ctx context.Context, where *EntitlementPlanFeatureWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEntitlementPlanFeatures, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEntitlementPlanFeatures
	if err := c.Client.Post(ctx, "GetEntitlementPlanFeatures", GetEntitlementPlanFeaturesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEntitlementPlanFeatureDocument = `mutation CreateEntitlementPlanFeature ($input: CreateEntitlementPlanFeatureInput!) {
	createEntitlementPlanFeature(input: $input) {
		entitlementPlanFeature {
			id
			metadata
			plan {
				id
				name
			}
			feature {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateEntitlementPlanFeature(ctx context.Context, input CreateEntitlementPlanFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateEntitlementPlanFeature, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEntitlementPlanFeature
	if err := c.Client.Post(ctx, "CreateEntitlementPlanFeature", CreateEntitlementPlanFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEntitlementPlanFeatureDocument = `mutation CreateBulkCSVEntitlementPlanFeature ($input: Upload!) {
	createBulkCSVEntitlementPlanFeature(input: $input) {
		entitlementPlanFeatures {
			id
			metadata
			plan {
				id
				name
			}
			feature {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVEntitlementPlanFeature(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEntitlementPlanFeature, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEntitlementPlanFeature
	if err := c.Client.Post(ctx, "CreateBulkCSVEntitlementPlanFeature", CreateBulkCSVEntitlementPlanFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEntitlementPlanFeatureDocument = `mutation CreateBulkEntitlementPlanFeature ($input: [CreateEntitlementPlanFeatureInput!]) {
	createBulkEntitlementPlanFeature(input: $input) {
		entitlementPlanFeatures {
			id
			metadata
			plan {
				id
				name
			}
			feature {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkEntitlementPlanFeature(ctx context.Context, input []*CreateEntitlementPlanFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEntitlementPlanFeature, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEntitlementPlanFeature
	if err := c.Client.Post(ctx, "CreateBulkEntitlementPlanFeature", CreateBulkEntitlementPlanFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEntitlementPlanFeatureDocument = `mutation UpdateEntitlementPlanFeature ($updateEntitlementPlanFeatureId: ID!, $input: UpdateEntitlementPlanFeatureInput!) {
	updateEntitlementPlanFeature(id: $updateEntitlementPlanFeatureId, input: $input) {
		entitlementPlanFeature {
			id
			metadata
			plan {
				id
				name
			}
			feature {
				id
				name
			}
		}
	}
}
`

func (c *Client) UpdateEntitlementPlanFeature(ctx context.Context, updateEntitlementPlanFeatureID string, input UpdateEntitlementPlanFeatureInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEntitlementPlanFeature, error) {
	vars := map[string]any{
		"updateEntitlementPlanFeatureId": updateEntitlementPlanFeatureID,
		"input":                          input,
	}

	var res UpdateEntitlementPlanFeature
	if err := c.Client.Post(ctx, "UpdateEntitlementPlanFeature", UpdateEntitlementPlanFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEntitlementPlanFeatureDocument = `mutation DeleteEntitlementPlanFeature ($deleteEntitlementPlanFeatureId: ID!) {
	deleteEntitlementPlanFeature(id: $deleteEntitlementPlanFeatureId) {
		deletedID
	}
}
`

func (c *Client) DeleteEntitlementPlanFeature(ctx context.Context, deleteEntitlementPlanFeatureID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEntitlementPlanFeature, error) {
	vars := map[string]any{
		"deleteEntitlementPlanFeatureId": deleteEntitlementPlanFeatureID,
	}

	var res DeleteEntitlementPlanFeature
	if err := c.Client.Post(ctx, "DeleteEntitlementPlanFeature", DeleteEntitlementPlanFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEventsDocument = `query GetEvents ($where: EventWhereInput) {
	events(where: $where) {
		edges {
			node {
				eventID
				id
				correlationID
				eventType
				metadata
			}
		}
	}
}
`

func (c *Client) GetEvents(ctx context.Context, where *EventWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetEvents, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetEvents
	if err := c.Client.Post(ctx, "GetEvents", GetEventsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetEventByIDDocument = `query GetEventByID ($eventId: ID!) {
	event(id: $eventId) {
		id
		createdAt
		updatedAt
		createdBy
		updatedBy
		eventID
		correlationID
		eventType
		metadata
		user {
			id
		}
		group {
			id
		}
		integration {
			id
		}
		organization {
			id
		}
		invite {
			id
		}
		feature {
			id
		}
		personalAccessToken {
			id
		}
		oauth2token {
			id
		}
		hush {
			id
		}
		orgmembership {
			id
		}
		groupmembership {
			id
		}
		entitlement {
			id
		}
		webhook {
			id
		}
	}
}
`

func (c *Client) GetEventByID(ctx context.Context, eventID string, interceptors ...clientv2.RequestInterceptor) (*GetEventByID, error) {
	vars := map[string]any{
		"eventId": eventID,
	}

	var res GetEventByID
	if err := c.Client.Post(ctx, "GetEventByID", GetEventByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllEventsDocument = `query GetAllEvents {
	events {
		edges {
			node {
				id
				createdAt
				updatedAt
				createdBy
				updatedBy
				eventID
				correlationID
				eventType
				metadata
				user {
					id
				}
				group {
					id
				}
				integration {
					id
				}
				organization {
					id
				}
				invite {
					id
				}
				feature {
					id
				}
				personalAccessToken {
					id
				}
				oauth2token {
					id
				}
				hush {
					id
				}
				orgmembership {
					id
				}
				groupmembership {
					id
				}
				entitlement {
					id
				}
				webhook {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetAllEvents(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllEvents, error) {
	vars := map[string]any{}

	var res GetAllEvents
	if err := c.Client.Post(ctx, "GetAllEvents", GetAllEventsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateEventDocument = `mutation CreateEvent ($input: CreateEventInput!) {
	createEvent(input: $input) {
		event {
			id
			eventID
			correlationID
			eventType
			metadata
			user {
				id
			}
			group {
				id
			}
			integration {
				id
			}
			organization {
				id
			}
			invite {
				id
			}
			feature {
				id
			}
			personalAccessToken {
				id
			}
			oauth2token {
				id
			}
			hush {
				id
			}
			orgmembership {
				id
			}
			groupmembership {
				id
			}
			entitlement {
				id
			}
			webhook {
				id
			}
		}
	}
}
`

func (c *Client) CreateEvent(ctx context.Context, input CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateEvent, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateEvent
	if err := c.Client.Post(ctx, "CreateEvent", CreateEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkEventDocument = `mutation CreateBulkEvent ($input: [CreateEventInput!]) {
	createBulkEvent(input: $input) {
		events {
			id
			eventID
			correlationID
			eventType
			metadata
			user {
				id
			}
			group {
				id
			}
			integration {
				id
			}
			organization {
				id
			}
			invite {
				id
			}
			feature {
				id
			}
			personalAccessToken {
				id
			}
			oauth2token {
				id
			}
			hush {
				id
			}
			orgmembership {
				id
			}
			groupmembership {
				id
			}
			entitlement {
				id
			}
			webhook {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkEvent(ctx context.Context, input []*CreateEventInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkEvent, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkEvent
	if err := c.Client.Post(ctx, "CreateBulkEvent", CreateBulkEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVEventDocument = `mutation CreateBulkCSVEvent ($input: Upload!) {
	createBulkCSVEvent(input: $input) {
		events {
			id
			eventID
			correlationID
			eventType
			metadata
			user {
				id
			}
			group {
				id
			}
			integration {
				id
			}
			organization {
				id
			}
			invite {
				id
			}
			feature {
				id
			}
			personalAccessToken {
				id
			}
			oauth2token {
				id
			}
			hush {
				id
			}
			orgmembership {
				id
			}
			groupmembership {
				id
			}
			entitlement {
				id
			}
			webhook {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVEvent(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVEvent, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVEvent
	if err := c.Client.Post(ctx, "CreateBulkCSVEvent", CreateBulkCSVEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateEventDocument = `mutation UpdateEvent ($updateEventId: ID!, $input: UpdateEventInput!) {
	updateEvent(id: $updateEventId, input: $input) {
		event {
			id
			createdAt
			updatedAt
			createdBy
			updatedBy
			eventID
			correlationID
			eventType
			metadata
			user {
				id
			}
			group {
				id
			}
			integration {
				id
			}
			organization {
				id
			}
			invite {
				id
			}
			feature {
				id
			}
			personalAccessToken {
				id
			}
			oauth2token {
				id
			}
			hush {
				id
			}
			orgmembership {
				id
			}
			groupmembership {
				id
			}
			entitlement {
				id
			}
			webhook {
				id
			}
		}
	}
}
`

func (c *Client) UpdateEvent(ctx context.Context, updateEventID string, input UpdateEventInput, interceptors ...clientv2.RequestInterceptor) (*UpdateEvent, error) {
	vars := map[string]any{
		"updateEventId": updateEventID,
		"input":         input,
	}

	var res UpdateEvent
	if err := c.Client.Post(ctx, "UpdateEvent", UpdateEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteEventDocument = `mutation DeleteEvent ($deleteEventId: ID!) {
	deleteEvent(id: $deleteEventId) {
		deletedID
	}
}
`

func (c *Client) DeleteEvent(ctx context.Context, deleteEventID string, interceptors ...clientv2.RequestInterceptor) (*DeleteEvent, error) {
	vars := map[string]any{
		"deleteEventId": deleteEventID,
	}

	var res DeleteEvent
	if err := c.Client.Post(ctx, "DeleteEvent", DeleteEventDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVFeatureDocument = `mutation CreateBulkCSVFeature ($input: Upload!) {
	createBulkCSVFeature(input: $input) {
		features {
			description
			enabled
			id
			name
			displayName
			tags
		}
	}
}
`

func (c *Client) CreateBulkCSVFeature(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVFeature, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVFeature
	if err := c.Client.Post(ctx, "CreateBulkCSVFeature", CreateBulkCSVFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkFeatureDocument = `mutation CreateBulkFeature ($input: [CreateFeatureInput!]) {
	createBulkFeature(input: $input) {
		features {
			description
			enabled
			id
			name
			displayName
			tags
		}
	}
}
`

func (c *Client) CreateBulkFeature(ctx context.Context, input []*CreateFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkFeature, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkFeature
	if err := c.Client.Post(ctx, "CreateBulkFeature", CreateBulkFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateFeatureDocument = `mutation CreateFeature ($input: CreateFeatureInput!) {
	createFeature(input: $input) {
		feature {
			description
			enabled
			id
			name
			displayName
			tags
		}
	}
}
`

func (c *Client) CreateFeature(ctx context.Context, input CreateFeatureInput, interceptors ...clientv2.RequestInterceptor) (*CreateFeature, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateFeature
	if err := c.Client.Post(ctx, "CreateFeature", CreateFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteFeatureDocument = `mutation DeleteFeature ($deleteFeatureId: ID!) {
	deleteFeature(id: $deleteFeatureId) {
		deletedID
	}
}
`

func (c *Client) DeleteFeature(ctx context.Context, deleteFeatureID string, interceptors ...clientv2.RequestInterceptor) (*DeleteFeature, error) {
	vars := map[string]any{
		"deleteFeatureId": deleteFeatureID,
	}

	var res DeleteFeature
	if err := c.Client.Post(ctx, "DeleteFeature", DeleteFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFeatureByIDDocument = `query GetFeatureByID ($featureId: ID!) {
	feature(id: $featureId) {
		description
		enabled
		id
		name
		displayName
		tags
	}
}
`

func (c *Client) GetFeatureByID(ctx context.Context, featureID string, interceptors ...clientv2.RequestInterceptor) (*GetFeatureByID, error) {
	vars := map[string]any{
		"featureId": featureID,
	}

	var res GetFeatureByID
	if err := c.Client.Post(ctx, "GetFeatureByID", GetFeatureByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllFeaturesDocument = `query GetAllFeatures {
	features {
		edges {
			node {
				description
				enabled
				id
				name
				displayName
				tags
			}
		}
	}
}
`

func (c *Client) GetAllFeatures(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFeatures, error) {
	vars := map[string]any{}

	var res GetAllFeatures
	if err := c.Client.Post(ctx, "GetAllFeatures", GetAllFeaturesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFeaturesDocument = `query GetFeatures ($where: FeatureWhereInput) {
	features(where: $where) {
		edges {
			node {
				description
				enabled
				id
				name
				displayName
				tags
			}
		}
	}
}
`

func (c *Client) GetFeatures(ctx context.Context, where *FeatureWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFeatures, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetFeatures
	if err := c.Client.Post(ctx, "GetFeatures", GetFeaturesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateFeatureDocument = `mutation UpdateFeature ($updateFeatureId: ID!, $input: UpdateFeatureInput!) {
	updateFeature(id: $updateFeatureId, input: $input) {
		feature {
			description
			enabled
			id
			name
			displayName
			tags
		}
	}
}
`

func (c *Client) UpdateFeature(ctx context.Context, updateFeatureID string, input UpdateFeatureInput, interceptors ...clientv2.RequestInterceptor) (*UpdateFeature, error) {
	vars := map[string]any{
		"updateFeatureId": updateFeatureID,
		"input":           input,
	}

	var res UpdateFeature
	if err := c.Client.Post(ctx, "UpdateFeature", UpdateFeatureDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVFileDocument = `mutation CreateBulkCSVFile ($input: Upload!) {
	createBulkCSVFile(input: $input) {
		files {
			annotation
			category
			contentType
			fileExtension
			fileName
			fileSize
			id
			storeKey
			user {
				id
			}
			organization {
				id
			}
			group {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVFile(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVFile, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVFile
	if err := c.Client.Post(ctx, "CreateBulkCSVFile", CreateBulkCSVFileDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkFileDocument = `mutation CreateBulkFile ($input: [CreateFileInput!]) {
	createBulkFile(input: $input) {
		files {
			annotation
			category
			contentType
			fileExtension
			fileName
			fileSize
			id
			storeKey
			user {
				id
			}
			organization {
				id
			}
			group {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkFile(ctx context.Context, input []*CreateFileInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkFile, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkFile
	if err := c.Client.Post(ctx, "CreateBulkFile", CreateBulkFileDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateFileDocument = `mutation CreateFile ($input: CreateFileInput!) {
	createFile(input: $input) {
		file {
			annotation
			category
			contentType
			fileExtension
			fileName
			fileSize
			id
			storeKey
			user {
				id
			}
			organization {
				id
			}
			group {
				id
			}
		}
	}
}
`

func (c *Client) CreateFile(ctx context.Context, input CreateFileInput, interceptors ...clientv2.RequestInterceptor) (*CreateFile, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateFile
	if err := c.Client.Post(ctx, "CreateFile", CreateFileDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteFileDocument = `mutation DeleteFile ($deleteFileId: ID!) {
	deleteFile(id: $deleteFileId) {
		deletedID
	}
}
`

func (c *Client) DeleteFile(ctx context.Context, deleteFileID string, interceptors ...clientv2.RequestInterceptor) (*DeleteFile, error) {
	vars := map[string]any{
		"deleteFileId": deleteFileID,
	}

	var res DeleteFile
	if err := c.Client.Post(ctx, "DeleteFile", DeleteFileDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFilesDocument = `query GetFiles ($where: FileWhereInput) {
	files(where: $where) {
		edges {
			node {
				annotation
				category
				contentType
				createdAt
				createdBy
				fileExtension
				fileName
				fileSize
				id
				storeKey
				updatedAt
				updatedBy
				user {
					id
				}
				organization {
					id
				}
				group {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetFiles(ctx context.Context, where *FileWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFiles, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetFiles
	if err := c.Client.Post(ctx, "GetFiles", GetFilesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllFilesDocument = `query GetAllFiles {
	files {
		edges {
			node {
				annotation
				category
				contentType
				createdAt
				createdBy
				fileExtension
				fileName
				fileSize
				id
				storeKey
				updatedAt
				updatedBy
				user {
					id
				}
				organization {
					id
				}
				group {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetAllFiles(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFiles, error) {
	vars := map[string]any{}

	var res GetAllFiles
	if err := c.Client.Post(ctx, "GetAllFiles", GetAllFilesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateFileDocument = `mutation UpdateFile ($updateFileId: ID!, $input: UpdateFileInput!) {
	updateFile(id: $updateFileId, input: $input) {
		file {
			id
			fileName
			fileExtension
			fileSize
			contentType
			storeKey
			category
			annotation
			user {
				id
			}
			organization {
				id
			}
			group {
				id
			}
		}
	}
}
`

func (c *Client) UpdateFile(ctx context.Context, updateFileID string, input UpdateFileInput, interceptors ...clientv2.RequestInterceptor) (*UpdateFile, error) {
	vars := map[string]any{
		"updateFileId": updateFileID,
		"input":        input,
	}

	var res UpdateFile
	if err := c.Client.Post(ctx, "UpdateFile", UpdateFileDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllFileHistoriesDocument = `query GetAllFileHistories {
	fileHistories {
		edges {
			node {
				annotation
				category
				contentType
				createdAt
				createdBy
				fileExtension
				fileName
				fileSize
				historyTime
				id
				operation
				ref
				storeKey
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllFileHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllFileHistories, error) {
	vars := map[string]any{}

	var res GetAllFileHistories
	if err := c.Client.Post(ctx, "GetAllFileHistories", GetAllFileHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetFileHistoriesDocument = `query GetFileHistories ($where: FileHistoryWhereInput) {
	fileHistories(where: $where) {
		edges {
			node {
				annotation
				category
				contentType
				createdAt
				createdBy
				fileExtension
				fileName
				fileSize
				historyTime
				id
				operation
				ref
				storeKey
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetFileHistories(ctx context.Context, where *FileHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetFileHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetFileHistories
	if err := c.Client.Post(ctx, "GetFileHistories", GetFileHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVGroupDocument = `mutation CreateBulkCSVGroup ($input: Upload!) {
	createBulkCSVGroup(input: $input) {
		groups {
			description
			displayName
			id
			logoURL
			name
			tags
			owner {
				id
				displayName
			}
			setting {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				tags
				visibility
			}
			members {
				id
				role
				user {
					id
					firstName
					lastName
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVGroup(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroup, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVGroup
	if err := c.Client.Post(ctx, "CreateBulkCSVGroup", CreateBulkCSVGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkGroupDocument = `mutation CreateBulkGroup ($input: [CreateGroupInput!]) {
	createBulkGroup(input: $input) {
		groups {
			description
			displayName
			id
			logoURL
			name
			tags
			owner {
				id
				displayName
			}
			setting {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				tags
				visibility
			}
			members {
				id
				role
				user {
					id
					firstName
					lastName
				}
			}
		}
	}
}
`

func (c *Client) CreateBulkGroup(ctx context.Context, input []*CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroup, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkGroup
	if err := c.Client.Post(ctx, "CreateBulkGroup", CreateBulkGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateGroupDocument = `mutation CreateGroup ($input: CreateGroupInput!) {
	createGroup(input: $input) {
		group {
			description
			displayName
			id
			logoURL
			name
			tags
			owner {
				id
				displayName
			}
			setting {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				tags
				visibility
			}
			members {
				id
				role
				user {
					id
					firstName
					lastName
				}
			}
		}
	}
}
`

func (c *Client) CreateGroup(ctx context.Context, input CreateGroupInput, interceptors ...clientv2.RequestInterceptor) (*CreateGroup, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateGroup
	if err := c.Client.Post(ctx, "CreateGroup", CreateGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteGroupDocument = `mutation DeleteGroup ($deleteGroupId: ID!) {
	deleteGroup(id: $deleteGroupId) {
		deletedID
	}
}
`

func (c *Client) DeleteGroup(ctx context.Context, deleteGroupID string, interceptors ...clientv2.RequestInterceptor) (*DeleteGroup, error) {
	vars := map[string]any{
		"deleteGroupId": deleteGroupID,
	}

	var res DeleteGroup
	if err := c.Client.Post(ctx, "DeleteGroup", DeleteGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupsDocument = `query GetAllGroups {
	groups {
		edges {
			node {
				description
				displayName
				id
				logoURL
				name
				tags
				owner {
					id
					displayName
				}
				setting {
					createdAt
					createdBy
					id
					joinPolicy
					syncToGithub
					syncToSlack
					tags
					updatedAt
					updatedBy
					visibility
				}
				members {
					id
					role
					user {
						id
						firstName
						lastName
					}
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllGroups(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroups, error) {
	vars := map[string]any{}

	var res GetAllGroups
	if err := c.Client.Post(ctx, "GetAllGroups", GetAllGroupsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupByIDDocument = `query GetGroupByID ($groupId: ID!) {
	group(id: $groupId) {
		description
		displayName
		id
		logoURL
		name
		tags
		owner {
			id
			displayName
		}
		setting {
			createdAt
			createdBy
			id
			joinPolicy
			syncToGithub
			syncToSlack
			tags
			updatedAt
			updatedBy
			visibility
		}
		members {
			id
			role
			user {
				id
				firstName
				lastName
			}
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetGroupByID(ctx context.Context, groupID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupByID, error) {
	vars := map[string]any{
		"groupId": groupID,
	}

	var res GetGroupByID
	if err := c.Client.Post(ctx, "GetGroupByID", GetGroupByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupsDocument = `query GetGroups ($where: GroupWhereInput) {
	groups(where: $where) {
		edges {
			node {
				description
				displayName
				id
				logoURL
				name
				tags
				owner {
					id
					displayName
				}
				setting {
					createdAt
					createdBy
					id
					joinPolicy
					syncToGithub
					syncToSlack
					tags
					updatedAt
					updatedBy
					visibility
				}
				members {
					id
					role
					user {
						id
						firstName
						lastName
					}
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetGroups(ctx context.Context, where *GroupWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroups, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroups
	if err := c.Client.Post(ctx, "GetGroups", GetGroupsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGroupDocument = `mutation UpdateGroup ($updateGroupId: ID!, $input: UpdateGroupInput!) {
	updateGroup(id: $updateGroupId, input: $input) {
		group {
			description
			displayName
			id
			logoURL
			name
			tags
			owner {
				id
				displayName
			}
			setting {
				createdAt
				createdBy
				id
				joinPolicy
				syncToGithub
				syncToSlack
				tags
				updatedAt
				updatedBy
				visibility
			}
			members {
				id
				role
				user {
					id
					firstName
					lastName
				}
			}
		}
	}
}
`

func (c *Client) UpdateGroup(ctx context.Context, updateGroupID string, input UpdateGroupInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroup, error) {
	vars := map[string]any{
		"updateGroupId": updateGroupID,
		"input":         input,
	}

	var res UpdateGroup
	if err := c.Client.Post(ctx, "UpdateGroup", UpdateGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupHistoriesDocument = `query GetAllGroupHistories {
	groupHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				gravatarLogoURL
				historyTime
				id
				logoURL
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllGroupHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupHistories, error) {
	vars := map[string]any{}

	var res GetAllGroupHistories
	if err := c.Client.Post(ctx, "GetAllGroupHistories", GetAllGroupHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupHistoriesDocument = `query GetGroupHistories ($where: GroupHistoryWhereInput) {
	groupHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				displayName
				gravatarLogoURL
				historyTime
				id
				logoURL
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetGroupHistories(ctx context.Context, where *GroupHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroupHistories
	if err := c.Client.Post(ctx, "GetGroupHistories", GetGroupHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupMembersByGroupIDDocument = `query GetGroupMembersByGroupID ($where: GroupMembershipWhereInput) {
	groupMemberships(where: $where) {
		edges {
			node {
				groupID
				id
				role
				userID
				user {
					displayName
					email
					firstName
					id
					lastName
				}
			}
		}
	}
}
`

func (c *Client) GetGroupMembersByGroupID(ctx context.Context, where *GroupMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupMembersByGroupID, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroupMembersByGroupID
	if err := c.Client.Post(ctx, "GetGroupMembersByGroupID", GetGroupMembersByGroupIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AddUserToGroupWithRoleDocument = `mutation AddUserToGroupWithRole ($input: CreateGroupMembershipInput!) {
	createGroupMembership(input: $input) {
		groupMembership {
			groupID
			id
			role
			userID
		}
	}
}
`

func (c *Client) AddUserToGroupWithRole(ctx context.Context, input CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*AddUserToGroupWithRole, error) {
	vars := map[string]any{
		"input": input,
	}

	var res AddUserToGroupWithRole
	if err := c.Client.Post(ctx, "AddUserToGroupWithRole", AddUserToGroupWithRoleDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkGroupMembersDocument = `mutation CreateBulkGroupMembers ($input: [CreateGroupMembershipInput!]) {
	createBulkGroupMembership(input: $input) {
		groupMemberships {
			groupID
			id
			role
			userID
		}
	}
}
`

func (c *Client) CreateBulkGroupMembers(ctx context.Context, input []*CreateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkGroupMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkGroupMembers
	if err := c.Client.Post(ctx, "CreateBulkGroupMembers", CreateBulkGroupMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVGroupMembersDocument = `mutation CreateBulkCSVGroupMembers ($input: Upload!) {
	createBulkCSVGroupMembership(input: $input) {
		groupMemberships {
			groupID
			id
			role
			userID
		}
	}
}
`

func (c *Client) CreateBulkCSVGroupMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVGroupMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVGroupMembers
	if err := c.Client.Post(ctx, "CreateBulkCSVGroupMembers", CreateBulkCSVGroupMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserRoleInGroupDocument = `mutation UpdateUserRoleInGroup ($updateGroupMemberId: ID!, $input: UpdateGroupMembershipInput!) {
	updateGroupMembership(id: $updateGroupMemberId, input: $input) {
		groupMembership {
			groupID
			id
			role
			userID
		}
	}
}
`

func (c *Client) UpdateUserRoleInGroup(ctx context.Context, updateGroupMemberID string, input UpdateGroupMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserRoleInGroup, error) {
	vars := map[string]any{
		"updateGroupMemberId": updateGroupMemberID,
		"input":               input,
	}

	var res UpdateUserRoleInGroup
	if err := c.Client.Post(ctx, "UpdateUserRoleInGroup", UpdateUserRoleInGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const RemoveUserFromGroupDocument = `mutation RemoveUserFromGroup ($deleteGroupMembershipId: ID!) {
	deleteGroupMembership(id: $deleteGroupMembershipId) {
		deletedID
	}
}
`

func (c *Client) RemoveUserFromGroup(ctx context.Context, deleteGroupMembershipID string, interceptors ...clientv2.RequestInterceptor) (*RemoveUserFromGroup, error) {
	vars := map[string]any{
		"deleteGroupMembershipId": deleteGroupMembershipID,
	}

	var res RemoveUserFromGroup
	if err := c.Client.Post(ctx, "RemoveUserFromGroup", RemoveUserFromGroupDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllGroupSettingsDocument = `query GetAllGroupSettings {
	groupSettings {
		edges {
			node {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				tags
				visibility
				group {
					id
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllGroupSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllGroupSettings, error) {
	vars := map[string]any{}

	var res GetAllGroupSettings
	if err := c.Client.Post(ctx, "GetAllGroupSettings", GetAllGroupSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupSettingByIDDocument = `query GetGroupSettingByID ($groupSettingId: ID!) {
	groupSetting(id: $groupSettingId) {
		id
		joinPolicy
		syncToGithub
		syncToSlack
		tags
		visibility
		group {
			id
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetGroupSettingByID(ctx context.Context, groupSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettingByID, error) {
	vars := map[string]any{
		"groupSettingId": groupSettingID,
	}

	var res GetGroupSettingByID
	if err := c.Client.Post(ctx, "GetGroupSettingByID", GetGroupSettingByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetGroupSettingsDocument = `query GetGroupSettings ($where: GroupSettingWhereInput!) {
	groupSettings(where: $where) {
		edges {
			node {
				id
				joinPolicy
				syncToGithub
				syncToSlack
				tags
				visibility
				group {
					id
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetGroupSettings(ctx context.Context, where GroupSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetGroupSettings, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetGroupSettings
	if err := c.Client.Post(ctx, "GetGroupSettings", GetGroupSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateGroupSettingDocument = `mutation UpdateGroupSetting ($updateGroupSettingId: ID!, $input: UpdateGroupSettingInput!) {
	updateGroupSetting(id: $updateGroupSettingId, input: $input) {
		groupSetting {
			id
			joinPolicy
			syncToGithub
			syncToSlack
			tags
			visibility
			group {
				id
			}
			createdAt
			createdBy
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateGroupSetting(ctx context.Context, updateGroupSettingID string, input UpdateGroupSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateGroupSetting, error) {
	vars := map[string]any{
		"updateGroupSettingId": updateGroupSettingID,
		"input":                input,
	}

	var res UpdateGroupSetting
	if err := c.Client.Post(ctx, "UpdateGroupSetting", UpdateGroupSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVHushDocument = `mutation CreateBulkCSVHush ($input: Upload!) {
	createBulkCSVHush(input: $input) {
		hushes {
			description
			id
			kind
			name
			secretName
			integrations {
				id
			}
			organization {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVHush(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVHush, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVHush
	if err := c.Client.Post(ctx, "CreateBulkCSVHush", CreateBulkCSVHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkHushDocument = `mutation CreateBulkHush ($input: [CreateHushInput!]) {
	createBulkHush(input: $input) {
		hushes {
			description
			id
			kind
			name
			secretName
			integrations {
				id
			}
			organization {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkHush(ctx context.Context, input []*CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkHush, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkHush
	if err := c.Client.Post(ctx, "CreateBulkHush", CreateBulkHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateHushDocument = `mutation CreateHush ($input: CreateHushInput!) {
	createHush(input: $input) {
		hush {
			description
			id
			kind
			name
			secretName
			integrations {
				id
			}
			organization {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) CreateHush(ctx context.Context, input CreateHushInput, interceptors ...clientv2.RequestInterceptor) (*CreateHush, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateHush
	if err := c.Client.Post(ctx, "CreateHush", CreateHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllHushesDocument = `query GetAllHushes {
	hushes {
		edges {
			node {
				description
				id
				kind
				name
				secretName
				integrations {
					id
				}
				organization {
					id
				}
				events {
					id
				}
				createdAt
				updatedAt
				createdBy
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllHushes(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushes, error) {
	vars := map[string]any{}

	var res GetAllHushes
	if err := c.Client.Post(ctx, "GetAllHushes", GetAllHushesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHushByIDDocument = `query GetHushByID ($hushId: ID!) {
	hush(id: $hushId) {
		description
		id
		kind
		name
		secretName
		integrations {
			id
		}
		organization {
			id
		}
		events {
			id
		}
		createdAt
		updatedAt
		createdBy
		updatedBy
	}
}
`

func (c *Client) GetHushByID(ctx context.Context, hushID string, interceptors ...clientv2.RequestInterceptor) (*GetHushByID, error) {
	vars := map[string]any{
		"hushId": hushID,
	}

	var res GetHushByID
	if err := c.Client.Post(ctx, "GetHushByID", GetHushByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHushesDocument = `query GetHushes ($where: HushWhereInput) {
	hushes(where: $where) {
		edges {
			node {
				description
				id
				kind
				name
				secretName
				integrations {
					id
				}
				organization {
					id
				}
				events {
					id
				}
				createdAt
				updatedAt
				createdBy
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetHushes(ctx context.Context, where *HushWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushes, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetHushes
	if err := c.Client.Post(ctx, "GetHushes", GetHushesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateHushDocument = `mutation UpdateHush ($updateHushId: ID!, $input: UpdateHushInput!) {
	updateHush(id: $updateHushId, input: $input) {
		hush {
			description
			id
			kind
			name
			secretName
			integrations {
				id
			}
			organization {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) UpdateHush(ctx context.Context, updateHushID string, input UpdateHushInput, interceptors ...clientv2.RequestInterceptor) (*UpdateHush, error) {
	vars := map[string]any{
		"updateHushId": updateHushID,
		"input":        input,
	}

	var res UpdateHush
	if err := c.Client.Post(ctx, "UpdateHush", UpdateHushDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllHushHistoriesDocument = `query GetAllHushHistories {
	hushHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ref
				secretName
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllHushHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllHushHistories, error) {
	vars := map[string]any{}

	var res GetAllHushHistories
	if err := c.Client.Post(ctx, "GetAllHushHistories", GetAllHushHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetHushHistoriesDocument = `query GetHushHistories ($where: HushHistoryWhereInput) {
	hushHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ref
				secretName
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetHushHistories(ctx context.Context, where *HushHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetHushHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetHushHistories
	if err := c.Client.Post(ctx, "GetHushHistories", GetHushHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVIntegrationDocument = `mutation CreateBulkCSVIntegration ($input: Upload!) {
	createBulkCSVIntegration(input: $input) {
		integrations {
			description
			id
			kind
			name
			ownerID
			owner {
				id
			}
			secrets {
				id
			}
			oauth2tokens {
				id
			}
			events {
				id
			}
			webhooks {
				id
				destinationURL
				enabled
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVIntegration(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVIntegration, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVIntegration
	if err := c.Client.Post(ctx, "CreateBulkCSVIntegration", CreateBulkCSVIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkIntegrationDocument = `mutation CreateBulkIntegration ($input: [CreateIntegrationInput!]) {
	createBulkIntegration(input: $input) {
		integrations {
			description
			id
			kind
			name
			ownerID
			owner {
				id
			}
			secrets {
				id
			}
			oauth2tokens {
				id
			}
			events {
				id
			}
			webhooks {
				id
				destinationURL
				enabled
			}
		}
	}
}
`

func (c *Client) CreateBulkIntegration(ctx context.Context, input []*CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkIntegration, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkIntegration
	if err := c.Client.Post(ctx, "CreateBulkIntegration", CreateBulkIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateIntegrationDocument = `mutation CreateIntegration ($input: CreateIntegrationInput!) {
	createIntegration(input: $input) {
		integration {
			description
			id
			kind
			name
			ownerID
			owner {
				id
			}
			secrets {
				id
			}
			oauth2tokens {
				id
			}
			events {
				id
			}
			webhooks {
				id
				destinationURL
				enabled
			}
		}
	}
}
`

func (c *Client) CreateIntegration(ctx context.Context, input CreateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*CreateIntegration, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateIntegration
	if err := c.Client.Post(ctx, "CreateIntegration", CreateIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteIntegrationDocument = `mutation DeleteIntegration ($deleteIntegrationId: ID!) {
	deleteIntegration(id: $deleteIntegrationId) {
		deletedID
	}
}
`

func (c *Client) DeleteIntegration(ctx context.Context, deleteIntegrationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteIntegration, error) {
	vars := map[string]any{
		"deleteIntegrationId": deleteIntegrationID,
	}

	var res DeleteIntegration
	if err := c.Client.Post(ctx, "DeleteIntegration", DeleteIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllIntegrationsDocument = `query GetAllIntegrations {
	integrations {
		edges {
			node {
				description
				id
				kind
				name
				ownerID
				owner {
					id
				}
				secrets {
					id
				}
				oauth2tokens {
					id
				}
				events {
					id
				}
				webhooks {
					id
					destinationURL
					enabled
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllIntegrations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrations, error) {
	vars := map[string]any{}

	var res GetAllIntegrations
	if err := c.Client.Post(ctx, "GetAllIntegrations", GetAllIntegrationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetIntegrationByIDDocument = `query GetIntegrationByID ($integrationId: ID!) {
	integration(id: $integrationId) {
		description
		id
		kind
		name
		ownerID
		owner {
			id
		}
		secrets {
			id
		}
		oauth2tokens {
			id
		}
		events {
			id
		}
		webhooks {
			id
			destinationURL
			enabled
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetIntegrationByID(ctx context.Context, integrationID string, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationByID, error) {
	vars := map[string]any{
		"integrationId": integrationID,
	}

	var res GetIntegrationByID
	if err := c.Client.Post(ctx, "GetIntegrationByID", GetIntegrationByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetIntegrationsDocument = `query GetIntegrations ($where: IntegrationWhereInput) {
	integrations(where: $where) {
		edges {
			node {
				description
				id
				kind
				name
				ownerID
				owner {
					id
				}
				secrets {
					id
				}
				oauth2tokens {
					id
				}
				events {
					id
				}
				webhooks {
					id
					destinationURL
					enabled
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetIntegrations(ctx context.Context, where *IntegrationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrations, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetIntegrations
	if err := c.Client.Post(ctx, "GetIntegrations", GetIntegrationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateIntegrationDocument = `mutation UpdateIntegration ($updateIntegrationId: ID!, $input: UpdateIntegrationInput!) {
	updateIntegration(id: $updateIntegrationId, input: $input) {
		integration {
			description
			id
			kind
			name
			ownerID
			owner {
				id
			}
			secrets {
				id
			}
			oauth2tokens {
				id
			}
			events {
				id
			}
			webhooks {
				id
				destinationURL
				enabled
			}
		}
	}
}
`

func (c *Client) UpdateIntegration(ctx context.Context, updateIntegrationID string, input UpdateIntegrationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateIntegration, error) {
	vars := map[string]any{
		"updateIntegrationId": updateIntegrationID,
		"input":               input,
	}

	var res UpdateIntegration
	if err := c.Client.Post(ctx, "UpdateIntegration", UpdateIntegrationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllIntegrationHistoriesDocument = `query GetAllIntegrationHistories {
	integrationHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllIntegrationHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllIntegrationHistories, error) {
	vars := map[string]any{}

	var res GetAllIntegrationHistories
	if err := c.Client.Post(ctx, "GetAllIntegrationHistories", GetAllIntegrationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetIntegrationHistoriesDocument = `query GetIntegrationHistories ($where: IntegrationHistoryWhereInput) {
	integrationHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				kind
				name
				operation
				ownerID
				ref
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetIntegrationHistories(ctx context.Context, where *IntegrationHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetIntegrationHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetIntegrationHistories
	if err := c.Client.Post(ctx, "GetIntegrationHistories", GetIntegrationHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVInviteDocument = `mutation CreateBulkCSVInvite ($input: Upload!) {
	createBulkCSVInvite(input: $input) {
		invites {
			expires
			id
			recipient
			requestorID
			role
			sendAttempts
			status
		}
	}
}
`

func (c *Client) CreateBulkCSVInvite(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVInvite, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVInvite
	if err := c.Client.Post(ctx, "CreateBulkCSVInvite", CreateBulkCSVInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkInviteDocument = `mutation CreateBulkInvite ($input: [CreateInviteInput!]) {
	createBulkInvite(input: $input) {
		invites {
			expires
			id
			recipient
			requestorID
			role
			sendAttempts
			status
		}
	}
}
`

func (c *Client) CreateBulkInvite(ctx context.Context, input []*CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkInvite, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkInvite
	if err := c.Client.Post(ctx, "CreateBulkInvite", CreateBulkInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateInviteDocument = `mutation CreateInvite ($input: CreateInviteInput!) {
	createInvite(input: $input) {
		invite {
			expires
			id
			recipient
			requestorID
			role
			sendAttempts
			status
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreateInvite(ctx context.Context, input CreateInviteInput, interceptors ...clientv2.RequestInterceptor) (*CreateInvite, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateInvite
	if err := c.Client.Post(ctx, "CreateInvite", CreateInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteInviteDocument = `mutation DeleteInvite ($deleteInviteId: ID!) {
	deleteInvite(id: $deleteInviteId) {
		deletedID
	}
}
`

func (c *Client) DeleteInvite(ctx context.Context, deleteInviteID string, interceptors ...clientv2.RequestInterceptor) (*DeleteInvite, error) {
	vars := map[string]any{
		"deleteInviteId": deleteInviteID,
	}

	var res DeleteInvite
	if err := c.Client.Post(ctx, "DeleteInvite", DeleteInviteDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetInviteByIDDocument = `query GetInviteByID ($inviteId: ID!) {
	invite(id: $inviteId) {
		expires
		id
		recipient
		requestorID
		role
		sendAttempts
		status
		owner {
			displayName
			id
			name
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetInviteByID(ctx context.Context, inviteID string, interceptors ...clientv2.RequestInterceptor) (*GetInviteByID, error) {
	vars := map[string]any{
		"inviteId": inviteID,
	}

	var res GetInviteByID
	if err := c.Client.Post(ctx, "GetInviteByID", GetInviteByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllInvitesDocument = `query GetAllInvites {
	invites {
		edges {
			node {
				id
				recipient
				role
				status
			}
		}
	}
}
`

func (c *Client) GetAllInvites(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllInvites, error) {
	vars := map[string]any{}

	var res GetAllInvites
	if err := c.Client.Post(ctx, "GetAllInvites", GetAllInvitesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const InvitesByOrgIDDocument = `query InvitesByOrgID ($where: InviteWhereInput) {
	invites(where: $where) {
		edges {
			node {
				owner {
					id
					invites {
						recipient
						requestorID
						role
						sendAttempts
						status
					}
				}
			}
		}
	}
}
`

func (c *Client) InvitesByOrgID(ctx context.Context, where *InviteWhereInput, interceptors ...clientv2.RequestInterceptor) (*InvitesByOrgID, error) {
	vars := map[string]any{
		"where": where,
	}

	var res InvitesByOrgID
	if err := c.Client.Post(ctx, "InvitesByOrgID", InvitesByOrgIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOauthProviderHistoriesDocument = `query GetAllOauthProviderHistories {
	oauthProviderHistories {
		edges {
			node {
				authStyle
				authURL
				clientID
				clientSecret
				createdAt
				createdBy
				historyTime
				id
				infoURL
				name
				operation
				ownerID
				redirectURL
				ref
				scopes
				tags
				tokenURL
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOauthProviderHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOauthProviderHistories, error) {
	vars := map[string]any{}

	var res GetAllOauthProviderHistories
	if err := c.Client.Post(ctx, "GetAllOauthProviderHistories", GetAllOauthProviderHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOauthProviderHistoriesDocument = `query GetOauthProviderHistories ($where: OauthProviderHistoryWhereInput) {
	oauthProviderHistories(where: $where) {
		edges {
			node {
				authStyle
				authURL
				clientID
				clientSecret
				createdAt
				createdBy
				historyTime
				id
				infoURL
				name
				operation
				ownerID
				redirectURL
				ref
				scopes
				tags
				tokenURL
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOauthProviderHistories(ctx context.Context, where *OauthProviderHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOauthProviderHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOauthProviderHistories
	if err := c.Client.Post(ctx, "GetOauthProviderHistories", GetOauthProviderHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVOhAuthTooTokenDocument = `mutation CreateBulkCSVOhAuthTooToken ($input: Upload!) {
	createBulkCSVOhAuthTooToken(input: $input) {
		ohAuthTooTokens {
			claimsEmail
			claimsEmailVerified
			claimsGroups
			claimsPreferredUsername
			claimsUserID
			claimsUsername
			clientID
			connectorData
			connectorID
			id
			lastUsed
			nonce
			scopes
			integration {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVOhAuthTooToken(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOhAuthTooToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVOhAuthTooToken
	if err := c.Client.Post(ctx, "CreateBulkCSVOhAuthTooToken", CreateBulkCSVOhAuthTooTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkOhAuthTooTokenDocument = `mutation CreateBulkOhAuthTooToken ($input: [CreateOhAuthTooTokenInput!]) {
	createBulkOhAuthTooToken(input: $input) {
		ohAuthTooTokens {
			claimsEmail
			claimsEmailVerified
			claimsGroups
			claimsPreferredUsername
			claimsUserID
			claimsUsername
			clientID
			connectorData
			connectorID
			id
			lastUsed
			nonce
			scopes
			integration {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkOhAuthTooToken(ctx context.Context, input []*CreateOhAuthTooTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOhAuthTooToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkOhAuthTooToken
	if err := c.Client.Post(ctx, "CreateBulkOhAuthTooToken", CreateBulkOhAuthTooTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateOhAuthTooTokenDocument = `mutation CreateOhAuthTooToken ($input: CreateOhAuthTooTokenInput!) {
	createOhAuthTooToken(input: $input) {
		ohAuthTooToken {
			claimsEmail
			claimsEmailVerified
			claimsGroups
			claimsPreferredUsername
			claimsUserID
			claimsUsername
			clientID
			connectorData
			connectorID
			id
			lastUsed
			nonce
			scopes
			integration {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) CreateOhAuthTooToken(ctx context.Context, input CreateOhAuthTooTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateOhAuthTooToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateOhAuthTooToken
	if err := c.Client.Post(ctx, "CreateOhAuthTooToken", CreateOhAuthTooTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteOhAuthTooTokenDocument = `mutation DeleteOhAuthTooToken ($deleteOhAuthTooTokenId: ID!) {
	deleteOhAuthTooToken(id: $deleteOhAuthTooTokenId) {
		deletedID
	}
}
`

func (c *Client) DeleteOhAuthTooToken(ctx context.Context, deleteOhAuthTooTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOhAuthTooToken, error) {
	vars := map[string]any{
		"deleteOhAuthTooTokenId": deleteOhAuthTooTokenID,
	}

	var res DeleteOhAuthTooToken
	if err := c.Client.Post(ctx, "DeleteOhAuthTooToken", DeleteOhAuthTooTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOhAuthTooTokensDocument = `query GetOhAuthTooTokens ($where: OhAuthTooTokenWhereInput) {
	ohAuthTooTokens(where: $where) {
		edges {
			node {
				claimsEmail
				claimsEmailVerified
				claimsGroups
				claimsPreferredUsername
				claimsUserID
				claimsUsername
				clientID
				connectorData
				connectorID
				id
				lastUsed
				nonce
				scopes
				integration {
					id
				}
				events {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetOhAuthTooTokens(ctx context.Context, where *OhAuthTooTokenWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOhAuthTooTokens, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOhAuthTooTokens
	if err := c.Client.Post(ctx, "GetOhAuthTooTokens", GetOhAuthTooTokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateOhAuthTooTokenDocument = `mutation UpdateOhAuthTooToken ($updateOhAuthTooTokenId: ID!, $input: UpdateOhAuthTooTokenInput!) {
	updateOhAuthTooToken(id: $updateOhAuthTooTokenId, input: $input) {
		ohAuthTooToken {
			claimsEmail
			claimsEmailVerified
			claimsGroups
			claimsPreferredUsername
			claimsUserID
			claimsUsername
			clientID
			connectorData
			connectorID
			id
			lastUsed
			nonce
			scopes
			integration {
				id
			}
			events {
				id
			}
		}
	}
}
`

func (c *Client) UpdateOhAuthTooToken(ctx context.Context, updateOhAuthTooTokenID string, input UpdateOhAuthTooTokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOhAuthTooToken, error) {
	vars := map[string]any{
		"updateOhAuthTooTokenId": updateOhAuthTooTokenID,
		"input":                  input,
	}

	var res UpdateOhAuthTooToken
	if err := c.Client.Post(ctx, "UpdateOhAuthTooToken", UpdateOhAuthTooTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVOrganizationDocument = `mutation CreateBulkCSVOrganization ($input: Upload!) {
	createBulkCSVOrganization(input: $input) {
		organizations {
			id
			name
			displayName
			description
			personalOrg
			tags
		}
	}
}
`

func (c *Client) CreateBulkCSVOrganization(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOrganization, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVOrganization
	if err := c.Client.Post(ctx, "CreateBulkCSVOrganization", CreateBulkCSVOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkOrganizationDocument = `mutation CreateBulkOrganization ($input: [CreateOrganizationInput!]) {
	createBulkOrganization(input: $input) {
		organizations {
			id
			name
			displayName
			description
			personalOrg
			tags
		}
	}
}
`

func (c *Client) CreateBulkOrganization(ctx context.Context, input []*CreateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOrganization, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkOrganization
	if err := c.Client.Post(ctx, "CreateBulkOrganization", CreateBulkOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateOrganizationDocument = `mutation CreateOrganization ($input: CreateOrganizationInput!) {
	createOrganization(input: $input) {
		organization {
			id
			name
			displayName
			description
			personalOrg
			tags
			createdAt
			updatedAt
			setting {
				id
				createdAt
				updatedAt
				createdBy
				updatedBy
				domains
				billingContact
				billingEmail
				billingPhone
				billingAddress
				taxIdentifier
				geoLocation
				tags
			}
			parent {
				id
				name
			}
			children {
				edges {
					node {
						id
						name
						displayName
						description
					}
				}
			}
		}
	}
}
`

func (c *Client) CreateOrganization(ctx context.Context, input CreateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*CreateOrganization, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateOrganization
	if err := c.Client.Post(ctx, "CreateOrganization", CreateOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteOrganizationDocument = `mutation DeleteOrganization ($deleteOrganizationId: ID!) {
	deleteOrganization(id: $deleteOrganizationId) {
		deletedID
	}
}
`

func (c *Client) DeleteOrganization(ctx context.Context, deleteOrganizationID string, interceptors ...clientv2.RequestInterceptor) (*DeleteOrganization, error) {
	vars := map[string]any{
		"deleteOrganizationId": deleteOrganizationID,
	}

	var res DeleteOrganization
	if err := c.Client.Post(ctx, "DeleteOrganization", DeleteOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationsDocument = `query GetAllOrganizations {
	organizations {
		edges {
			node {
				id
				name
				displayName
				description
				personalOrg
				tags
				parent {
					id
					name
				}
				children {
					edges {
						node {
							id
							name
							displayName
							description
						}
					}
				}
				members {
					id
					role
					user {
						id
						firstName
						lastName
					}
				}
				setting {
					id
					createdAt
					updatedAt
					createdBy
					updatedBy
					domains
					billingContact
					billingEmail
					billingPhone
					billingAddress
					taxIdentifier
					geoLocation
					tags
				}
				createdAt
				updatedAt
			}
		}
	}
}
`

func (c *Client) GetAllOrganizations(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizations, error) {
	vars := map[string]any{}

	var res GetAllOrganizations
	if err := c.Client.Post(ctx, "GetAllOrganizations", GetAllOrganizationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationByIDDocument = `query GetOrganizationByID ($organizationId: ID!) {
	organization(id: $organizationId) {
		id
		name
		displayName
		description
		personalOrg
		tags
		parent {
			id
			name
		}
		children {
			edges {
				node {
					id
					name
					displayName
					description
				}
			}
		}
		members {
			id
			role
			user {
				id
				firstName
				lastName
			}
		}
		setting {
			id
			createdAt
			updatedAt
			createdBy
			updatedBy
			domains
			billingContact
			billingEmail
			billingPhone
			billingAddress
			taxIdentifier
			geoLocation
			tags
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetOrganizationByID(ctx context.Context, organizationID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationByID, error) {
	vars := map[string]any{
		"organizationId": organizationID,
	}

	var res GetOrganizationByID
	if err := c.Client.Post(ctx, "GetOrganizationByID", GetOrganizationByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationsDocument = `query GetOrganizations ($where: OrganizationWhereInput) {
	organizations(where: $where) {
		edges {
			node {
				id
				name
				displayName
				description
				personalOrg
				tags
				parent {
					id
					name
				}
				children {
					edges {
						node {
							id
							name
							displayName
							description
						}
					}
				}
				members {
					id
					role
					user {
						id
						firstName
						lastName
					}
				}
				setting {
					id
					createdAt
					updatedAt
					createdBy
					updatedBy
					domains
					billingContact
					billingEmail
					billingPhone
					billingAddress
					taxIdentifier
					geoLocation
					tags
				}
				createdAt
				updatedAt
			}
		}
	}
}
`

func (c *Client) GetOrganizations(ctx context.Context, where *OrganizationWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizations, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrganizations
	if err := c.Client.Post(ctx, "GetOrganizations", GetOrganizationsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateOrganizationDocument = `mutation UpdateOrganization ($updateOrganizationId: ID!, $input: UpdateOrganizationInput!) {
	updateOrganization(id: $updateOrganizationId, input: $input) {
		organization {
			id
			name
			displayName
			description
			personalOrg
			tags
			members {
				id
				role
				userID
			}
			setting {
				id
				createdAt
				updatedAt
				createdBy
				updatedBy
				domains
				billingContact
				billingEmail
				billingPhone
				billingAddress
				taxIdentifier
				geoLocation
				tags
			}
		}
	}
}
`

func (c *Client) UpdateOrganization(ctx context.Context, updateOrganizationID string, input UpdateOrganizationInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganization, error) {
	vars := map[string]any{
		"updateOrganizationId": updateOrganizationID,
		"input":                input,
	}

	var res UpdateOrganization
	if err := c.Client.Post(ctx, "UpdateOrganization", UpdateOrganizationDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationSettingByIDDocument = `query GetOrganizationSettingByID ($organizationSettingId: ID!) {
	organizationSetting(id: $organizationSettingId) {
		billingAddress
		billingContact
		billingEmail
		billingPhone
		createdAt
		createdBy
		domains
		geoLocation
		id
		tags
		taxIdentifier
		updatedAt
		updatedBy
		organization {
			id
		}
	}
}
`

func (c *Client) GetOrganizationSettingByID(ctx context.Context, organizationSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingByID, error) {
	vars := map[string]any{
		"organizationSettingId": organizationSettingID,
	}

	var res GetOrganizationSettingByID
	if err := c.Client.Post(ctx, "GetOrganizationSettingByID", GetOrganizationSettingByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationSettingsDocument = `query GetAllOrganizationSettings {
	organizationSettings {
		edges {
			node {
				billingAddress
				billingContact
				billingEmail
				billingPhone
				createdAt
				createdBy
				domains
				geoLocation
				id
				tags
				taxIdentifier
				updatedAt
				updatedBy
				organization {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetAllOrganizationSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettings, error) {
	vars := map[string]any{}

	var res GetAllOrganizationSettings
	if err := c.Client.Post(ctx, "GetAllOrganizationSettings", GetAllOrganizationSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationSettingsDocument = `query GetOrganizationSettings ($where: OrganizationSettingWhereInput!) {
	organizationSettings(where: $where) {
		edges {
			node {
				billingAddress
				billingContact
				billingEmail
				billingPhone
				createdAt
				createdBy
				domains
				geoLocation
				id
				tags
				taxIdentifier
				updatedAt
				updatedBy
				organization {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetOrganizationSettings(ctx context.Context, where OrganizationSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettings, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrganizationSettings
	if err := c.Client.Post(ctx, "GetOrganizationSettings", GetOrganizationSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateOrganizationSettingDocument = `mutation UpdateOrganizationSetting ($updateOrganizationSettingId: ID!, $input: UpdateOrganizationSettingInput!) {
	updateOrganizationSetting(id: $updateOrganizationSettingId, input: $input) {
		organizationSetting {
			billingAddress
			billingContact
			billingEmail
			billingPhone
			createdAt
			createdBy
			domains
			geoLocation
			id
			tags
			taxIdentifier
			updatedAt
			updatedBy
			organization {
				id
			}
		}
	}
}
`

func (c *Client) UpdateOrganizationSetting(ctx context.Context, updateOrganizationSettingID string, input UpdateOrganizationSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateOrganizationSetting, error) {
	vars := map[string]any{
		"updateOrganizationSettingId": updateOrganizationSettingID,
		"input":                       input,
	}

	var res UpdateOrganizationSetting
	if err := c.Client.Post(ctx, "UpdateOrganizationSetting", UpdateOrganizationSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrganizationSettingHistoriesDocument = `query GetAllOrganizationSettingHistories {
	organizationSettingHistories {
		edges {
			node {
				billingAddress
				billingContact
				billingEmail
				billingPhone
				createdAt
				createdBy
				domains
				geoLocation
				historyTime
				id
				operation
				organizationID
				ref
				tags
				taxIdentifier
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllOrganizationSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrganizationSettingHistories, error) {
	vars := map[string]any{}

	var res GetAllOrganizationSettingHistories
	if err := c.Client.Post(ctx, "GetAllOrganizationSettingHistories", GetAllOrganizationSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrganizationSettingHistoriesDocument = `query GetOrganizationSettingHistories ($where: OrganizationSettingHistoryWhereInput) {
	organizationSettingHistories(where: $where) {
		edges {
			node {
				billingAddress
				billingContact
				billingEmail
				billingPhone
				createdAt
				createdBy
				domains
				geoLocation
				historyTime
				id
				operation
				organizationID
				ref
				tags
				taxIdentifier
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetOrganizationSettingHistories(ctx context.Context, where *OrganizationSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrganizationSettingHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrganizationSettingHistories
	if err := c.Client.Post(ctx, "GetOrganizationSettingHistories", GetOrganizationSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const AddUserToOrgWithRoleDocument = `mutation AddUserToOrgWithRole ($input: CreateOrgMembershipInput!) {
	createOrgMembership(input: $input) {
		orgMembership {
			id
			role
			userID
			organizationID
		}
	}
}
`

func (c *Client) AddUserToOrgWithRole(ctx context.Context, input CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*AddUserToOrgWithRole, error) {
	vars := map[string]any{
		"input": input,
	}

	var res AddUserToOrgWithRole
	if err := c.Client.Post(ctx, "AddUserToOrgWithRole", AddUserToOrgWithRoleDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVOrgMembersDocument = `mutation CreateBulkCSVOrgMembers ($input: Upload!) {
	createBulkCSVOrgMembership(input: $input) {
		orgMemberships {
			id
			organizationID
			role
			userID
		}
	}
}
`

func (c *Client) CreateBulkCSVOrgMembers(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVOrgMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVOrgMembers
	if err := c.Client.Post(ctx, "CreateBulkCSVOrgMembers", CreateBulkCSVOrgMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkOrgMembersDocument = `mutation CreateBulkOrgMembers ($input: [CreateOrgMembershipInput!]) {
	createBulkOrgMembership(input: $input) {
		orgMemberships {
			id
			organizationID
			role
			userID
		}
	}
}
`

func (c *Client) CreateBulkOrgMembers(ctx context.Context, input []*CreateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkOrgMembers, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkOrgMembers
	if err := c.Client.Post(ctx, "CreateBulkOrgMembers", CreateBulkOrgMembersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgMembersByOrgIDDocument = `query GetOrgMembersByOrgID ($where: OrgMembershipWhereInput) {
	orgMemberships(where: $where) {
		edges {
			node {
				id
				organizationID
				userID
				role
				user {
					firstName
					lastName
					id
					displayName
					email
				}
			}
		}
	}
}
`

func (c *Client) GetOrgMembersByOrgID(ctx context.Context, where *OrgMembershipWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembersByOrgID, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrgMembersByOrgID
	if err := c.Client.Post(ctx, "GetOrgMembersByOrgID", GetOrgMembersByOrgIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const RemoveUserFromOrgDocument = `mutation RemoveUserFromOrg ($deleteOrgMembershipId: ID!) {
	deleteOrgMembership(id: $deleteOrgMembershipId) {
		deletedID
	}
}
`

func (c *Client) RemoveUserFromOrg(ctx context.Context, deleteOrgMembershipID string, interceptors ...clientv2.RequestInterceptor) (*RemoveUserFromOrg, error) {
	vars := map[string]any{
		"deleteOrgMembershipId": deleteOrgMembershipID,
	}

	var res RemoveUserFromOrg
	if err := c.Client.Post(ctx, "RemoveUserFromOrg", RemoveUserFromOrgDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserRoleInOrgDocument = `mutation UpdateUserRoleInOrg ($updateOrgMemberId: ID!, $input: UpdateOrgMembershipInput!) {
	updateOrgMembership(id: $updateOrgMemberId, input: $input) {
		orgMembership {
			id
			role
			userID
			organizationID
		}
	}
}
`

func (c *Client) UpdateUserRoleInOrg(ctx context.Context, updateOrgMemberID string, input UpdateOrgMembershipInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserRoleInOrg, error) {
	vars := map[string]any{
		"updateOrgMemberId": updateOrgMemberID,
		"input":             input,
	}

	var res UpdateUserRoleInOrg
	if err := c.Client.Post(ctx, "UpdateUserRoleInOrg", UpdateUserRoleInOrgDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllOrgMembershipHistoriesDocument = `query GetAllOrgMembershipHistories {
	orgMembershipHistories {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				organizationID
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllOrgMembershipHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllOrgMembershipHistories, error) {
	vars := map[string]any{}

	var res GetAllOrgMembershipHistories
	if err := c.Client.Post(ctx, "GetAllOrgMembershipHistories", GetAllOrgMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetOrgMembershipHistoriesDocument = `query GetOrgMembershipHistories ($where: OrgMembershipHistoryWhereInput) {
	orgMembershipHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				historyTime
				id
				operation
				organizationID
				ref
				role
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetOrgMembershipHistories(ctx context.Context, where *OrgMembershipHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetOrgMembershipHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetOrgMembershipHistories
	if err := c.Client.Post(ctx, "GetOrgMembershipHistories", GetOrgMembershipHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVPersonalAccessTokenDocument = `mutation CreateBulkCSVPersonalAccessToken ($input: Upload!) {
	createBulkCSVPersonalAccessToken(input: $input) {
		personalAccessTokens {
			description
			expiresAt
			id
			lastUsedAt
			name
			scopes
			token
			updatedAt
			updatedBy
			organizations {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVPersonalAccessToken(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVPersonalAccessToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVPersonalAccessToken
	if err := c.Client.Post(ctx, "CreateBulkCSVPersonalAccessToken", CreateBulkCSVPersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkPersonalAccessTokenDocument = `mutation CreateBulkPersonalAccessToken ($input: [CreatePersonalAccessTokenInput!]) {
	createBulkPersonalAccessToken(input: $input) {
		personalAccessTokens {
			description
			expiresAt
			id
			lastUsedAt
			name
			scopes
			token
			updatedAt
			updatedBy
			organizations {
				id
				name
			}
		}
	}
}
`

func (c *Client) CreateBulkPersonalAccessToken(ctx context.Context, input []*CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkPersonalAccessToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkPersonalAccessToken
	if err := c.Client.Post(ctx, "CreateBulkPersonalAccessToken", CreateBulkPersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreatePersonalAccessTokenDocument = `mutation CreatePersonalAccessToken ($input: CreatePersonalAccessTokenInput!) {
	createPersonalAccessToken(input: $input) {
		personalAccessToken {
			description
			expiresAt
			id
			lastUsedAt
			name
			scopes
			token
			updatedAt
			updatedBy
			organizations {
				id
				name
			}
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreatePersonalAccessToken(ctx context.Context, input CreatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*CreatePersonalAccessToken, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreatePersonalAccessToken
	if err := c.Client.Post(ctx, "CreatePersonalAccessToken", CreatePersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeletePersonalAccessTokenDocument = `mutation DeletePersonalAccessToken ($deletePersonalAccessTokenId: ID!) {
	deletePersonalAccessToken(id: $deletePersonalAccessTokenId) {
		deletedID
	}
}
`

func (c *Client) DeletePersonalAccessToken(ctx context.Context, deletePersonalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*DeletePersonalAccessToken, error) {
	vars := map[string]any{
		"deletePersonalAccessTokenId": deletePersonalAccessTokenID,
	}

	var res DeletePersonalAccessToken
	if err := c.Client.Post(ctx, "DeletePersonalAccessToken", DeletePersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllPersonalAccessTokensDocument = `query GetAllPersonalAccessTokens {
	personalAccessTokens {
		edges {
			node {
				description
				expiresAt
				id
				lastUsedAt
				name
				scopes
				token
				updatedAt
				updatedBy
				organizations {
					id
					name
				}
			}
		}
	}
}
`

func (c *Client) GetAllPersonalAccessTokens(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllPersonalAccessTokens, error) {
	vars := map[string]any{}

	var res GetAllPersonalAccessTokens
	if err := c.Client.Post(ctx, "GetAllPersonalAccessTokens", GetAllPersonalAccessTokensDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetPersonalAccessTokenByIDDocument = `query GetPersonalAccessTokenByID ($personalAccessTokenId: ID!) {
	personalAccessToken(id: $personalAccessTokenId) {
		description
		expiresAt
		id
		lastUsedAt
		name
		scopes
		token
		updatedAt
		updatedBy
		organizations {
			id
			name
		}
	}
}
`

func (c *Client) GetPersonalAccessTokenByID(ctx context.Context, personalAccessTokenID string, interceptors ...clientv2.RequestInterceptor) (*GetPersonalAccessTokenByID, error) {
	vars := map[string]any{
		"personalAccessTokenId": personalAccessTokenID,
	}

	var res GetPersonalAccessTokenByID
	if err := c.Client.Post(ctx, "GetPersonalAccessTokenByID", GetPersonalAccessTokenByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdatePersonalAccessTokenDocument = `mutation UpdatePersonalAccessToken ($updatePersonalAccessTokenId: ID!, $input: UpdatePersonalAccessTokenInput!) {
	updatePersonalAccessToken(id: $updatePersonalAccessTokenId, input: $input) {
		personalAccessToken {
			description
			expiresAt
			id
			lastUsedAt
			name
			scopes
			token
			updatedAt
			updatedBy
			organizations {
				id
				name
			}
			owner {
				id
			}
		}
	}
}
`

func (c *Client) UpdatePersonalAccessToken(ctx context.Context, updatePersonalAccessTokenID string, input UpdatePersonalAccessTokenInput, interceptors ...clientv2.RequestInterceptor) (*UpdatePersonalAccessToken, error) {
	vars := map[string]any{
		"updatePersonalAccessTokenId": updatePersonalAccessTokenID,
		"input":                       input,
	}

	var res UpdatePersonalAccessToken
	if err := c.Client.Post(ctx, "UpdatePersonalAccessToken", UpdatePersonalAccessTokenDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const SearchDocument = `query Search ($query: String!) {
	search(query: $query) {
		nodes {
			... on OrganizationSearchResult {
				organizations {
					description
					displayName
					id
					name
				}
			}
			... on GroupSearchResult {
				groups {
					description
					displayName
					id
					name
				}
			}
			... on UserSearchResult {
				users {
					displayName
					email
					firstName
					id
					lastName
				}
			}
			... on SubscriberSearchResult {
				subscribers {
					active
					email
					id
				}
			}
		}
	}
}
`

func (c *Client) Search(ctx context.Context, query string, interceptors ...clientv2.RequestInterceptor) (*Search, error) {
	vars := map[string]any{
		"query": query,
	}

	var res Search
	if err := c.Client.Post(ctx, "Search", SearchDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVSubscriberDocument = `mutation CreateBulkCSVSubscriber ($input: Upload!) {
	createBulkCSVSubscriber(input: $input) {
		subscribers {
			active
			email
			id
			verifiedEmail
		}
	}
}
`

func (c *Client) CreateBulkCSVSubscriber(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVSubscriber, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVSubscriber
	if err := c.Client.Post(ctx, "CreateBulkCSVSubscriber", CreateBulkCSVSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkSubscriberDocument = `mutation CreateBulkSubscriber ($input: [CreateSubscriberInput!]) {
	createBulkSubscriber(input: $input) {
		subscribers {
			active
			email
			id
			verifiedEmail
		}
	}
}
`

func (c *Client) CreateBulkSubscriber(ctx context.Context, input []*CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkSubscriber, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkSubscriber
	if err := c.Client.Post(ctx, "CreateBulkSubscriber", CreateBulkSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateSubscriberDocument = `mutation CreateSubscriber ($input: CreateSubscriberInput!) {
	createSubscriber(input: $input) {
		subscriber {
			active
			createdAt
			createdBy
			email
			id
			updatedAt
			updatedBy
			verifiedEmail
		}
	}
}
`

func (c *Client) CreateSubscriber(ctx context.Context, input CreateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*CreateSubscriber, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateSubscriber
	if err := c.Client.Post(ctx, "CreateSubscriber", CreateSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteSubscriberDocument = `mutation DeleteSubscriber ($deleteSubscriberEmail: String!) {
	deleteSubscriber(email: $deleteSubscriberEmail) {
		email
	}
}
`

func (c *Client) DeleteSubscriber(ctx context.Context, deleteSubscriberEmail string, interceptors ...clientv2.RequestInterceptor) (*DeleteSubscriber, error) {
	vars := map[string]any{
		"deleteSubscriberEmail": deleteSubscriberEmail,
	}

	var res DeleteSubscriber
	if err := c.Client.Post(ctx, "DeleteSubscriber", DeleteSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllSubscribersDocument = `query GetAllSubscribers {
	subscribers {
		edges {
			node {
				active
				email
				id
				ownerID
				verifiedEmail
			}
		}
	}
}
`

func (c *Client) GetAllSubscribers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllSubscribers, error) {
	vars := map[string]any{}

	var res GetAllSubscribers
	if err := c.Client.Post(ctx, "GetAllSubscribers", GetAllSubscribersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubscriberByEmailDocument = `query GetSubscriberByEmail ($email: String!) {
	subscriber(email: $email) {
		active
		email
		id
		ownerID
		verifiedEmail
	}
}
`

func (c *Client) GetSubscriberByEmail(ctx context.Context, email string, interceptors ...clientv2.RequestInterceptor) (*GetSubscriberByEmail, error) {
	vars := map[string]any{
		"email": email,
	}

	var res GetSubscriberByEmail
	if err := c.Client.Post(ctx, "GetSubscriberByEmail", GetSubscriberByEmailDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetSubscribersDocument = `query GetSubscribers ($where: SubscriberWhereInput) {
	subscribers(where: $where) {
		edges {
			node {
				active
				email
				id
				ownerID
				verifiedEmail
			}
		}
	}
}
`

func (c *Client) GetSubscribers(ctx context.Context, where *SubscriberWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetSubscribers, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetSubscribers
	if err := c.Client.Post(ctx, "GetSubscribers", GetSubscribersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateSubscriberDocument = `mutation UpdateSubscriber ($email: String!, $input: UpdateSubscriberInput!) {
	updateSubscriber(email: $email, input: $input) {
		subscriber {
			active
			createdAt
			createdBy
			email
			id
			phoneNumber
			updatedAt
			updatedBy
			verifiedEmail
			verifiedPhone
		}
	}
}
`

func (c *Client) UpdateSubscriber(ctx context.Context, email string, input UpdateSubscriberInput, interceptors ...clientv2.RequestInterceptor) (*UpdateSubscriber, error) {
	vars := map[string]any{
		"email": email,
		"input": input,
	}

	var res UpdateSubscriber
	if err := c.Client.Post(ctx, "UpdateSubscriber", UpdateSubscriberDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTemplateDocument = `mutation CreateTemplate ($input: CreateTemplateInput!) {
	createTemplate(input: $input) {
		template {
			description
			id
			jsonconfig
			name
			uischema
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreateTemplate(ctx context.Context, input CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateTemplate, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTemplate
	if err := c.Client.Post(ctx, "CreateTemplate", CreateTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkTemplateDocument = `mutation CreateBulkTemplate ($input: [CreateTemplateInput!]) {
	createBulkTemplate(input: $input) {
		templates {
			description
			id
			jsonconfig
			name
			uischema
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkTemplate(ctx context.Context, input []*CreateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkTemplate, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkTemplate
	if err := c.Client.Post(ctx, "CreateBulkTemplate", CreateBulkTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVTemplateDocument = `mutation CreateBulkCSVTemplate ($input: Upload!) {
	createBulkCSVTemplate(input: $input) {
		templates {
			description
			id
			jsonconfig
			name
			uischema
			owner {
				id
			}
		}
	}
}
`

func (c *Client) CreateBulkCSVTemplate(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVTemplate, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVTemplate
	if err := c.Client.Post(ctx, "CreateBulkCSVTemplate", CreateBulkCSVTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTemplateDocument = `mutation UpdateTemplate ($updateTemplateId: ID!, $input: UpdateTemplateInput!) {
	updateTemplate(id: $updateTemplateId, input: $input) {
		template {
			createdAt
			createdBy
			description
			id
			jsonconfig
			name
			uischema
			updatedAt
			updatedBy
			owner {
				id
			}
		}
	}
}
`

func (c *Client) UpdateTemplate(ctx context.Context, updateTemplateID string, input UpdateTemplateInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTemplate, error) {
	vars := map[string]any{
		"updateTemplateId": updateTemplateID,
		"input":            input,
	}

	var res UpdateTemplate
	if err := c.Client.Post(ctx, "UpdateTemplate", UpdateTemplateDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTemplatesDocument = `query GetAllTemplates {
	templates {
		edges {
			node {
				createdAt
				createdBy
				description
				id
				jsonconfig
				name
				uischema
				updatedAt
				updatedBy
				owner {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetAllTemplates(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplates, error) {
	vars := map[string]any{}

	var res GetAllTemplates
	if err := c.Client.Post(ctx, "GetAllTemplates", GetAllTemplatesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTemplateByIDDocument = `query GetTemplateByID ($getTemplateId: ID!) {
	template(id: $getTemplateId) {
		createdAt
		createdBy
		description
		id
		jsonconfig
		name
		uischema
		updatedAt
		updatedBy
		owner {
			id
		}
	}
}
`

func (c *Client) GetTemplateByID(ctx context.Context, getTemplateID string, interceptors ...clientv2.RequestInterceptor) (*GetTemplateByID, error) {
	vars := map[string]any{
		"getTemplateId": getTemplateID,
	}

	var res GetTemplateByID
	if err := c.Client.Post(ctx, "GetTemplateByID", GetTemplateByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTemplateHistoriesDocument = `query GetAllTemplateHistories {
	templateHistories {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				jsonconfig
				name
				operation
				ownerID
				ref
				tags
				templateType
				uischema
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllTemplateHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTemplateHistories, error) {
	vars := map[string]any{}

	var res GetAllTemplateHistories
	if err := c.Client.Post(ctx, "GetAllTemplateHistories", GetAllTemplateHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTemplateHistoriesDocument = `query GetTemplateHistories ($where: TemplateHistoryWhereInput) {
	templateHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				description
				historyTime
				id
				jsonconfig
				name
				operation
				ownerID
				ref
				tags
				templateType
				uischema
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetTemplateHistories(ctx context.Context, where *TemplateHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetTemplateHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetTemplateHistories
	if err := c.Client.Post(ctx, "GetTemplateHistories", GetTemplateHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateTFASettingDocument = `mutation CreateTFASetting ($input: CreateTFASettingInput!) {
	createTFASetting(input: $input) {
		tfaSetting {
			recoveryCodes
			totpAllowed
			verified
		}
	}
}
`

func (c *Client) CreateTFASetting(ctx context.Context, input CreateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*CreateTFASetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateTFASetting
	if err := c.Client.Post(ctx, "CreateTFASetting", CreateTFASettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetTFASettingDocument = `query GetTFASetting {
	tfaSetting {
		recoveryCodes
		totpAllowed
		verified
	}
}
`

func (c *Client) GetTFASetting(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetTFASetting, error) {
	vars := map[string]any{}

	var res GetTFASetting
	if err := c.Client.Post(ctx, "GetTFASetting", GetTFASettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllTFASettingsDocument = `query GetAllTFASettings {
	tfaSettings {
		edges {
			node {
				recoveryCodes
				totpAllowed
				verified
			}
		}
	}
}
`

func (c *Client) GetAllTFASettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllTFASettings, error) {
	vars := map[string]any{}

	var res GetAllTFASettings
	if err := c.Client.Post(ctx, "GetAllTFASettings", GetAllTFASettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateTFASettingDocument = `mutation UpdateTFASetting ($input: UpdateTFASettingInput!) {
	updateTFASetting(input: $input) {
		tfaSetting {
			recoveryCodes
			totpAllowed
			verified
		}
	}
}
`

func (c *Client) UpdateTFASetting(ctx context.Context, input UpdateTFASettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateTFASetting, error) {
	vars := map[string]any{
		"input": input,
	}

	var res UpdateTFASetting
	if err := c.Client.Post(ctx, "UpdateTFASetting", UpdateTFASettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateUserDocument = `mutation CreateUser ($input: CreateUserInput!) {
	createUser(input: $input) {
		user {
			authProvider
			avatarLocalFile
			avatarRemoteURL
			displayName
			email
			firstName
			id
			lastName
			sub
			tags
			orgMemberships {
				id
				organizationID
			}
			groupMemberships {
				id
				groupID
			}
			setting {
				defaultOrg {
					id
					name
					personalOrg
				}
				createdAt
				createdBy
				emailConfirmed
				locked
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) CreateUser(ctx context.Context, input CreateUserInput, interceptors ...clientv2.RequestInterceptor) (*CreateUser, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateUser
	if err := c.Client.Post(ctx, "CreateUser", CreateUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteUserDocument = `mutation DeleteUser ($deleteUserId: ID!) {
	deleteUser(id: $deleteUserId) {
		deletedID
	}
}
`

func (c *Client) DeleteUser(ctx context.Context, deleteUserID string, interceptors ...clientv2.RequestInterceptor) (*DeleteUser, error) {
	vars := map[string]any{
		"deleteUserId": deleteUserID,
	}

	var res DeleteUser
	if err := c.Client.Post(ctx, "DeleteUser", DeleteUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUsersDocument = `query GetAllUsers {
	users {
		edges {
			node {
				authProvider
				avatarLocalFile
				avatarRemoteURL
				displayName
				email
				firstName
				id
				lastName
				lastSeen
				sub
				tags
				setting {
					defaultOrg {
						id
						name
						personalOrg
					}
					createdAt
					createdBy
					emailConfirmed
					locked
					silencedAt
					status
					suspendedAt
					tags
					updatedAt
					updatedBy
				}
				createdAt
				createdBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllUsers(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUsers, error) {
	vars := map[string]any{}

	var res GetAllUsers
	if err := c.Client.Post(ctx, "GetAllUsers", GetAllUsersDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserByIDDocument = `query GetUserByID ($userId: ID!) {
	user(id: $userId) {
		authProvider
		avatarLocalFile
		avatarRemoteURL
		displayName
		email
		firstName
		id
		lastName
		lastSeen
		sub
		tags
		setting {
			defaultOrg {
				id
				name
				personalOrg
			}
			createdAt
			createdBy
			emailConfirmed
			locked
			silencedAt
			status
			suspendedAt
			tags
			updatedAt
			updatedBy
		}
		organizations {
			id
			name
			personalOrg
			members {
				id
				role
			}
		}
		updatedAt
		updatedBy
		createdAt
		createdBy
	}
}
`

func (c *Client) GetUserByID(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByID, error) {
	vars := map[string]any{
		"userId": userID,
	}

	var res GetUserByID
	if err := c.Client.Post(ctx, "GetUserByID", GetUserByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserByIDWithOrgsDocument = `query GetUserByIDWithOrgs ($userId: ID!) {
	user(id: $userId) {
		authProvider
		avatarLocalFile
		avatarRemoteURL
		displayName
		email
		firstName
		id
		lastName
		lastSeen
		sub
		tags
		setting {
			defaultOrg {
				id
				name
				personalOrg
			}
			createdAt
			createdBy
			emailConfirmed
			locked
			silencedAt
			status
			suspendedAt
			tags
			updatedAt
			updatedBy
		}
		orgMemberships {
			id
			role
			user {
				firstName
				lastName
			}
		}
		createdAt
		createdBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetUserByIDWithOrgs(ctx context.Context, userID string, interceptors ...clientv2.RequestInterceptor) (*GetUserByIDWithOrgs, error) {
	vars := map[string]any{
		"userId": userID,
	}

	var res GetUserByIDWithOrgs
	if err := c.Client.Post(ctx, "GetUserByIDWithOrgs", GetUserByIDWithOrgsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserDocument = `mutation UpdateUser ($updateUserId: ID!, $input: UpdateUserInput!) {
	updateUser(id: $updateUserId, input: $input) {
		user {
			authProvider
			avatarLocalFile
			avatarRemoteURL
			displayName
			email
			firstName
			id
			lastName
			sub
			tags
			groupMemberships {
				id
			}
			orgMemberships {
				id
			}
			setting {
				defaultOrg {
					id
					name
					personalOrg
				}
				createdAt
				createdBy
				emailConfirmed
				locked
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) UpdateUser(ctx context.Context, updateUserID string, input UpdateUserInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUser, error) {
	vars := map[string]any{
		"updateUserId": updateUserID,
		"input":        input,
	}

	var res UpdateUser
	if err := c.Client.Post(ctx, "UpdateUser", UpdateUserDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUserHistoriesDocument = `query GetAllUserHistories {
	userHistories {
		edges {
			node {
				authProvider
				avatarLocalFile
				avatarRemoteURL
				avatarUpdatedAt
				createdAt
				createdBy
				displayName
				email
				firstName
				historyTime
				id
				lastName
				lastSeen
				operation
				ref
				role
				sub
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllUserHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserHistories, error) {
	vars := map[string]any{}

	var res GetAllUserHistories
	if err := c.Client.Post(ctx, "GetAllUserHistories", GetAllUserHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserHistoriesDocument = `query GetUserHistories ($where: UserHistoryWhereInput) {
	userHistories(where: $where) {
		edges {
			node {
				authProvider
				avatarLocalFile
				avatarRemoteURL
				avatarUpdatedAt
				createdAt
				createdBy
				displayName
				email
				firstName
				historyTime
				id
				lastName
				lastSeen
				operation
				ref
				role
				sub
				tags
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetUserHistories(ctx context.Context, where *UserHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetUserHistories
	if err := c.Client.Post(ctx, "GetUserHistories", GetUserHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserSettingByIDDocument = `query GetUserSettingByID ($userSettingId: ID!) {
	userSetting(id: $userSettingId) {
		id
		silencedAt
		status
		defaultOrg {
			id
			name
			personalOrg
		}
		tags
		locked
		isTfaEnabled
		emailConfirmed
		createdAt
		createdBy
		deletedAt
		deletedBy
		updatedAt
		updatedBy
	}
}
`

func (c *Client) GetUserSettingByID(ctx context.Context, userSettingID string, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingByID, error) {
	vars := map[string]any{
		"userSettingId": userSettingID,
	}

	var res GetUserSettingByID
	if err := c.Client.Post(ctx, "GetUserSettingByID", GetUserSettingByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUserSettingsDocument = `query GetAllUserSettings {
	userSettings {
		edges {
			node {
				id
				silencedAt
				status
				defaultOrg {
					id
					name
					personalOrg
				}
				tags
				locked
				isTfaEnabled
				emailConfirmed
				createdAt
				createdBy
				deletedAt
				deletedBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetAllUserSettings(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettings, error) {
	vars := map[string]any{}

	var res GetAllUserSettings
	if err := c.Client.Post(ctx, "GetAllUserSettings", GetAllUserSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserSettingsDocument = `query GetUserSettings ($where: UserSettingWhereInput!) {
	userSettings(where: $where) {
		edges {
			node {
				id
				silencedAt
				status
				defaultOrg {
					id
					name
					personalOrg
				}
				tags
				locked
				isTfaEnabled
				emailConfirmed
				createdAt
				createdBy
				deletedAt
				deletedBy
				updatedAt
				updatedBy
			}
		}
	}
}
`

func (c *Client) GetUserSettings(ctx context.Context, where UserSettingWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettings, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetUserSettings
	if err := c.Client.Post(ctx, "GetUserSettings", GetUserSettingsDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateUserSettingDocument = `mutation UpdateUserSetting ($updateUserSettingId: ID!, $input: UpdateUserSettingInput!) {
	updateUserSetting(id: $updateUserSettingId, input: $input) {
		userSetting {
			id
			silencedAt
			status
			defaultOrg {
				id
				name
				personalOrg
			}
			tags
			locked
			isTfaEnabled
			emailConfirmed
			createdAt
			createdBy
			deletedAt
			deletedBy
			updatedAt
			updatedBy
		}
	}
}
`

func (c *Client) UpdateUserSetting(ctx context.Context, updateUserSettingID string, input UpdateUserSettingInput, interceptors ...clientv2.RequestInterceptor) (*UpdateUserSetting, error) {
	vars := map[string]any{
		"updateUserSettingId": updateUserSettingID,
		"input":               input,
	}

	var res UpdateUserSetting
	if err := c.Client.Post(ctx, "UpdateUserSetting", UpdateUserSettingDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllUserSettingHistoriesDocument = `query GetAllUserSettingHistories {
	userSettingHistories {
		edges {
			node {
				createdAt
				createdBy
				emailConfirmed
				historyTime
				id
				isTfaEnabled
				isWebauthnAllowed
				locked
				operation
				ref
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetAllUserSettingHistories(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllUserSettingHistories, error) {
	vars := map[string]any{}

	var res GetAllUserSettingHistories
	if err := c.Client.Post(ctx, "GetAllUserSettingHistories", GetAllUserSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetUserSettingHistoriesDocument = `query GetUserSettingHistories ($where: UserSettingHistoryWhereInput) {
	userSettingHistories(where: $where) {
		edges {
			node {
				createdAt
				createdBy
				emailConfirmed
				historyTime
				id
				isTfaEnabled
				isWebauthnAllowed
				locked
				operation
				ref
				silencedAt
				status
				suspendedAt
				tags
				updatedAt
				updatedBy
				userID
			}
		}
	}
}
`

func (c *Client) GetUserSettingHistories(ctx context.Context, where *UserSettingHistoryWhereInput, interceptors ...clientv2.RequestInterceptor) (*GetUserSettingHistories, error) {
	vars := map[string]any{
		"where": where,
	}

	var res GetUserSettingHistories
	if err := c.Client.Post(ctx, "GetUserSettingHistories", GetUserSettingHistoriesDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetWebhookByIDDocument = `query GetWebhookByID ($webhookId: ID!) {
	webhook(id: $webhookId) {
		createdAt
		createdBy
		description
		destinationURL
		enabled
		failures
		id
		lastError
		lastResponse
		name
		ownerID
		updatedAt
		updatedBy
		events {
			id
		}
	}
}
`

func (c *Client) GetWebhookByID(ctx context.Context, webhookID string, interceptors ...clientv2.RequestInterceptor) (*GetWebhookByID, error) {
	vars := map[string]any{
		"webhookId": webhookID,
	}

	var res GetWebhookByID
	if err := c.Client.Post(ctx, "GetWebhookByID", GetWebhookByIDDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const GetAllWebhooksDocument = `query GetAllWebhooks {
	webhooks {
		edges {
			node {
				createdAt
				createdBy
				description
				destinationURL
				enabled
				failures
				id
				lastError
				lastResponse
				name
				ownerID
				updatedAt
				updatedBy
				events {
					id
				}
			}
		}
	}
}
`

func (c *Client) GetAllWebhooks(ctx context.Context, interceptors ...clientv2.RequestInterceptor) (*GetAllWebhooks, error) {
	vars := map[string]any{}

	var res GetAllWebhooks
	if err := c.Client.Post(ctx, "GetAllWebhooks", GetAllWebhooksDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateWebhookDocument = `mutation CreateWebhook ($input: CreateWebhookInput!) {
	createWebhook(input: $input) {
		webhook {
			description
			destinationURL
			enabled
			failures
			id
			lastError
			lastResponse
			name
			ownerID
			events {
				id
			}
		}
	}
}
`

func (c *Client) CreateWebhook(ctx context.Context, input CreateWebhookInput, interceptors ...clientv2.RequestInterceptor) (*CreateWebhook, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateWebhook
	if err := c.Client.Post(ctx, "CreateWebhook", CreateWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkWebhookDocument = `mutation CreateBulkWebhook ($input: [CreateWebhookInput!]) {
	createBulkWebhook(input: $input) {
		webhooks {
			description
			destinationURL
			enabled
			failures
			id
			lastError
			lastResponse
			name
			ownerID
		}
	}
}
`

func (c *Client) CreateBulkWebhook(ctx context.Context, input []*CreateWebhookInput, interceptors ...clientv2.RequestInterceptor) (*CreateBulkWebhook, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkWebhook
	if err := c.Client.Post(ctx, "CreateBulkWebhook", CreateBulkWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const CreateBulkCSVWebhookDocument = `mutation CreateBulkCSVWebhook ($input: Upload!) {
	createBulkCSVWebhook(input: $input) {
		webhooks {
			description
			destinationURL
			enabled
			failures
			id
			lastError
			lastResponse
			name
			ownerID
		}
	}
}
`

func (c *Client) CreateBulkCSVWebhook(ctx context.Context, input graphql.Upload, interceptors ...clientv2.RequestInterceptor) (*CreateBulkCSVWebhook, error) {
	vars := map[string]any{
		"input": input,
	}

	var res CreateBulkCSVWebhook
	if err := c.Client.Post(ctx, "CreateBulkCSVWebhook", CreateBulkCSVWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const UpdateWebhookDocument = `mutation UpdateWebhook ($updateWebhookId: ID!, $input: UpdateWebhookInput!) {
	updateWebhook(id: $updateWebhookId, input: $input) {
		webhook {
			createdAt
			createdBy
			description
			destinationURL
			enabled
			failures
			id
			lastError
			lastResponse
			name
			ownerID
			updatedAt
			updatedBy
			events {
				id
			}
		}
	}
}
`

func (c *Client) UpdateWebhook(ctx context.Context, updateWebhookID string, input UpdateWebhookInput, interceptors ...clientv2.RequestInterceptor) (*UpdateWebhook, error) {
	vars := map[string]any{
		"updateWebhookId": updateWebhookID,
		"input":           input,
	}

	var res UpdateWebhook
	if err := c.Client.Post(ctx, "UpdateWebhook", UpdateWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

const DeleteWebhookDocument = `mutation DeleteWebhook ($deleteWebhookId: ID!) {
	deleteWebhook(id: $deleteWebhookId) {
		deletedID
	}
}
`

func (c *Client) DeleteWebhook(ctx context.Context, deleteWebhookID string, interceptors ...clientv2.RequestInterceptor) (*DeleteWebhook, error) {
	vars := map[string]any{
		"deleteWebhookId": deleteWebhookID,
	}

	var res DeleteWebhook
	if err := c.Client.Post(ctx, "DeleteWebhook", DeleteWebhookDocument, &res, vars, interceptors...); err != nil {
		if c.Client.ParseDataWhenErrors {
			return &res, err
		}

		return nil, err
	}

	return &res, nil
}

var DocumentOperationNames = map[string]string{
	CreateAPITokenDocument:                      "CreateAPIToken",
	UpdateAPITokenDocument:                      "UpdateAPIToken",
	GetAllAPITokensDocument:                     "GetAllAPITokens",
	GetAPITokenByIDDocument:                     "GetAPITokenByID",
	DeleteAPITokenDocument:                      "DeleteAPIToken",
	GetDocumentDataByIDDocument:                 "GetDocumentDataByID",
	CreateDocumentDataDocument:                  "CreateDocumentData",
	UpdateDocumentDataDocument:                  "UpdateDocumentData",
	DeleteDocumentDataDocument:                  "DeleteDocumentData",
	CreateBulkCSVEntitlementDocument:            "CreateBulkCSVEntitlement",
	CreateBulkEntitlementDocument:               "CreateBulkEntitlement",
	CreateEntitlementDocument:                   "CreateEntitlement",
	DeleteEntitlementDocument:                   "DeleteEntitlement",
	GetAllEntitlementsDocument:                  "GetAllEntitlements",
	GetEntitlementByIDDocument:                  "GetEntitlementByID",
	GetEntitlementsDocument:                     "GetEntitlements",
	UpdateEntitlementDocument:                   "UpdateEntitlement",
	CreateBulkCSVEntitlementPlanDocument:        "CreateBulkCSVEntitlementPlan",
	CreateBulkEntitlementPlanDocument:           "CreateBulkEntitlementPlan",
	CreateEntitlementPlanDocument:               "CreateEntitlementPlan",
	DeleteEntitlementPlanDocument:               "DeleteEntitlementPlan",
	GetAllEntitlementPlansDocument:              "GetAllEntitlementPlans",
	GetEntitlementPlanByIDDocument:              "GetEntitlementPlanByID",
	GetEntitlementPlansDocument:                 "GetEntitlementPlans",
	UpdateEntitlementPlanDocument:               "UpdateEntitlementPlan",
	GetAllEntitlementPlanFeaturesDocument:       "GetAllEntitlementPlanFeatures",
	GetEntitlementPlanFeatureByIDDocument:       "GetEntitlementPlanFeatureByID",
	GetEntitlementPlanFeaturesDocument:          "GetEntitlementPlanFeatures",
	CreateEntitlementPlanFeatureDocument:        "CreateEntitlementPlanFeature",
	CreateBulkCSVEntitlementPlanFeatureDocument: "CreateBulkCSVEntitlementPlanFeature",
	CreateBulkEntitlementPlanFeatureDocument:    "CreateBulkEntitlementPlanFeature",
	UpdateEntitlementPlanFeatureDocument:        "UpdateEntitlementPlanFeature",
	DeleteEntitlementPlanFeatureDocument:        "DeleteEntitlementPlanFeature",
	GetEventsDocument:                           "GetEvents",
	GetEventByIDDocument:                        "GetEventByID",
	GetAllEventsDocument:                        "GetAllEvents",
	CreateEventDocument:                         "CreateEvent",
	CreateBulkEventDocument:                     "CreateBulkEvent",
	CreateBulkCSVEventDocument:                  "CreateBulkCSVEvent",
	UpdateEventDocument:                         "UpdateEvent",
	DeleteEventDocument:                         "DeleteEvent",
	CreateBulkCSVFeatureDocument:                "CreateBulkCSVFeature",
	CreateBulkFeatureDocument:                   "CreateBulkFeature",
	CreateFeatureDocument:                       "CreateFeature",
	DeleteFeatureDocument:                       "DeleteFeature",
	GetFeatureByIDDocument:                      "GetFeatureByID",
	GetAllFeaturesDocument:                      "GetAllFeatures",
	GetFeaturesDocument:                         "GetFeatures",
	UpdateFeatureDocument:                       "UpdateFeature",
	CreateBulkCSVFileDocument:                   "CreateBulkCSVFile",
	CreateBulkFileDocument:                      "CreateBulkFile",
	CreateFileDocument:                          "CreateFile",
	DeleteFileDocument:                          "DeleteFile",
	GetFilesDocument:                            "GetFiles",
	GetAllFilesDocument:                         "GetAllFiles",
	UpdateFileDocument:                          "UpdateFile",
	CreateBulkCSVGroupDocument:                  "CreateBulkCSVGroup",
	CreateBulkGroupDocument:                     "CreateBulkGroup",
	CreateGroupDocument:                         "CreateGroup",
	DeleteGroupDocument:                         "DeleteGroup",
	GetAllGroupsDocument:                        "GetAllGroups",
	GetGroupByIDDocument:                        "GetGroupByID",
	GetGroupsDocument:                           "GetGroups",
	UpdateGroupDocument:                         "UpdateGroup",
	GetGroupMembersByGroupIDDocument:            "GetGroupMembersByGroupID",
	AddUserToGroupWithRoleDocument:              "AddUserToGroupWithRole",
	CreateBulkGroupMembersDocument:              "CreateBulkGroupMembers",
	CreateBulkCSVGroupMembersDocument:           "CreateBulkCSVGroupMembers",
	UpdateUserRoleInGroupDocument:               "UpdateUserRoleInGroup",
	RemoveUserFromGroupDocument:                 "RemoveUserFromGroup",
	GetAllGroupSettingsDocument:                 "GetAllGroupSettings",
	GetGroupSettingByIDDocument:                 "GetGroupSettingByID",
	GetGroupSettingsDocument:                    "GetGroupSettings",
	UpdateGroupSettingDocument:                  "UpdateGroupSetting",
	CreateBulkCSVHushDocument:                   "CreateBulkCSVHush",
	CreateBulkHushDocument:                      "CreateBulkHush",
	CreateHushDocument:                          "CreateHush",
	GetAllHushesDocument:                        "GetAllHushes",
	GetHushByIDDocument:                         "GetHushByID",
	GetHushesDocument:                           "GetHushes",
	UpdateHushDocument:                          "UpdateHush",
	CreateBulkCSVIntegrationDocument:            "CreateBulkCSVIntegration",
	CreateBulkIntegrationDocument:               "CreateBulkIntegration",
	CreateIntegrationDocument:                   "CreateIntegration",
	DeleteIntegrationDocument:                   "DeleteIntegration",
	GetAllIntegrationsDocument:                  "GetAllIntegrations",
	GetIntegrationByIDDocument:                  "GetIntegrationByID",
	GetIntegrationsDocument:                     "GetIntegrations",
	UpdateIntegrationDocument:                   "UpdateIntegration",
	CreateBulkCSVInviteDocument:                 "CreateBulkCSVInvite",
	CreateBulkInviteDocument:                    "CreateBulkInvite",
	CreateInviteDocument:                        "CreateInvite",
	DeleteInviteDocument:                        "DeleteInvite",
	GetInviteByIDDocument:                       "GetInviteByID",
	GetAllInvitesDocument:                       "GetAllInvites",
	InvitesByOrgIDDocument:                      "InvitesByOrgID",
	CreateBulkCSVOhAuthTooTokenDocument:         "CreateBulkCSVOhAuthTooToken",
	CreateBulkOhAuthTooTokenDocument:            "CreateBulkOhAuthTooToken",
	CreateOhAuthTooTokenDocument:                "CreateOhAuthTooToken",
	DeleteOhAuthTooTokenDocument:                "DeleteOhAuthTooToken",
	GetOhAuthTooTokensDocument:                  "GetOhAuthTooTokens",
	UpdateOhAuthTooTokenDocument:                "UpdateOhAuthTooToken",
	CreateBulkCSVOrganizationDocument:           "CreateBulkCSVOrganization",
	CreateBulkOrganizationDocument:              "CreateBulkOrganization",
	CreateOrganizationDocument:                  "CreateOrganization",
	DeleteOrganizationDocument:                  "DeleteOrganization",
	GetAllOrganizationsDocument:                 "GetAllOrganizations",
	GetOrganizationByIDDocument:                 "GetOrganizationByID",
	GetOrganizationsDocument:                    "GetOrganizations",
	UpdateOrganizationDocument:                  "UpdateOrganization",
	GetOrganizationSettingByIDDocument:          "GetOrganizationSettingByID",
	GetAllOrganizationSettingsDocument:          "GetAllOrganizationSettings",
	GetOrganizationSettingsDocument:             "GetOrganizationSettings",
	UpdateOrganizationSettingDocument:           "UpdateOrganizationSetting",
	AddUserToOrgWithRoleDocument:                "AddUserToOrgWithRole",
	CreateBulkCSVOrgMembersDocument:             "CreateBulkCSVOrgMembers",
	CreateBulkOrgMembersDocument:                "CreateBulkOrgMembers",
	GetOrgMembersByOrgIDDocument:                "GetOrgMembersByOrgID",
	RemoveUserFromOrgDocument:                   "RemoveUserFromOrg",
	UpdateUserRoleInOrgDocument:                 "UpdateUserRoleInOrg",
	CreateBulkCSVPersonalAccessTokenDocument:    "CreateBulkCSVPersonalAccessToken",
	CreateBulkPersonalAccessTokenDocument:       "CreateBulkPersonalAccessToken",
	CreatePersonalAccessTokenDocument:           "CreatePersonalAccessToken",
	DeletePersonalAccessTokenDocument:           "DeletePersonalAccessToken",
	GetAllPersonalAccessTokensDocument:          "GetAllPersonalAccessTokens",
	GetPersonalAccessTokenByIDDocument:          "GetPersonalAccessTokenByID",
	UpdatePersonalAccessTokenDocument:           "UpdatePersonalAccessToken",
	SearchDocument:                              "Search",
	CreateBulkCSVSubscriberDocument:             "CreateBulkCSVSubscriber",
	CreateBulkSubscriberDocument:                "CreateBulkSubscriber",
	CreateSubscriberDocument:                    "CreateSubscriber",
	DeleteSubscriberDocument:                    "DeleteSubscriber",
	GetAllSubscribersDocument:                   "GetAllSubscribers",
	GetSubscriberByEmailDocument:                "GetSubscriberByEmail",
	GetSubscribersDocument:                      "GetSubscribers",
	UpdateSubscriberDocument:                    "UpdateSubscriber",
	CreateTemplateDocument:                      "CreateTemplate",
	CreateBulkTemplateDocument:                  "CreateBulkTemplate",
	CreateBulkCSVTemplateDocument:               "CreateBulkCSVTemplate",
	UpdateTemplateDocument:                      "UpdateTemplate",
	GetAllTemplatesDocument:                     "GetAllTemplates",
	GetTemplateByIDDocument:                     "GetTemplateByID",
	CreateTFASettingDocument:                    "CreateTFASetting",
	GetTFASettingDocument:                       "GetTFASetting",
	GetAllTFASettingsDocument:                   "GetAllTFASettings",
	UpdateTFASettingDocument:                    "UpdateTFASetting",
	CreateUserDocument:                          "CreateUser",
	DeleteUserDocument:                          "DeleteUser",
	GetAllUsersDocument:                         "GetAllUsers",
	GetUserByIDDocument:                         "GetUserByID",
	GetUserByIDWithOrgsDocument:                 "GetUserByIDWithOrgs",
	UpdateUserDocument:                          "UpdateUser",
	GetUserSettingByIDDocument:                  "GetUserSettingByID",
	GetAllUserSettingsDocument:                  "GetAllUserSettings",
	GetUserSettingsDocument:                     "GetUserSettings",
	UpdateUserSettingDocument:                   "UpdateUserSetting",
	GetWebhookByIDDocument:                      "GetWebhookByID",
	GetAllWebhooksDocument:                      "GetAllWebhooks",
	CreateWebhookDocument:                       "CreateWebhook",
	CreateBulkWebhookDocument:                   "CreateBulkWebhook",
	CreateBulkCSVWebhookDocument:                "CreateBulkCSVWebhook",
	UpdateWebhookDocument:                       "UpdateWebhook",
	DeleteWebhookDocument:                       "DeleteWebhook",
}
