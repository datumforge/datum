package bulkgen

import (
	_ "embed"
	"strings"

	"github.com/99designs/gqlgen/codegen"
	"github.com/99designs/gqlgen/codegen/templates"
	"github.com/99designs/gqlgen/plugin"
	"github.com/gertd/go-pluralize"
)

//go:embed bulk.gotpl
var bulkTemplate string

func New() plugin.Plugin {
	return &Plugin{}
}

type Plugin struct{}

func (m *Plugin) Name() string {
	return "bulkgen"
}

// BulkResolverBuild is a struct to hold the objects for the bulk resolver
type BulkResolverBuild struct {
	// Objects is a list of objects to generate bulk resolvers for
	Objects []Object
}

// Object is a struct to hold the object name for the bulk resolver
type Object struct {
	// Name of the object
	Name string
	// PluralName of the object
	PluralName string
}

func (m *Plugin) GenerateCode(data *codegen.Data) error {
	if !data.Config.Resolver.IsDefined() {
		return nil
	}

	return m.generateSingleFile(*data)
}

func (m *Plugin) generateSingleFile(data codegen.Data) error {
	inputData := BulkResolverBuild{
		Objects: []Object{},
	}

	for _, f := range data.Schema.Mutation.Fields {
		lowerName := strings.ToLower(f.Name)
		if strings.Contains(lowerName, "bulk") && !strings.Contains(lowerName, "csv") {
			objectName := strings.Replace(f.Name, "createBulk", "", 1)

			inputData.Objects = append(inputData.Objects, Object{
				Name:       objectName,
				PluralName: pluralize.NewClient().Plural(objectName),
			})
		}
	}

	return templates.Render(templates.Options{
		PackageName: data.Config.Resolver.Package,            // use the resolver package
		Filename:    data.Config.Resolver.Dir() + "/bulk.go", // write to the resolver directory
		FileNotice:  `// THIS CODE IS REGENERATED BY github.com/datumforge/datum/pkg/gqlplugin. DO NOT EDIT.`,
		Data:        inputData,
		Packages:    data.Config.Packages,
		Template:    bulkTemplate,
	})
}
