{{ $entity := .Field.TypeReference.Definition.Name | getEntityName  -}}

res, err := withTransactionalMutation(ctx).{{ $entity }}.Create().SetInput(input).Save(ctx)
if err != nil {
	if generated.IsValidationError(err) {
		validationError := err.(*generated.ValidationError)

		r.logger.Debugw("validation error", "field", validationError.Name, "error", validationError.Error())

		return nil, validationError
	}

	if generated.IsConstraintError(err) {
		constraintError := err.(*generated.ConstraintError)

		r.logger.Debugw("constraint error", "error", constraintError.Error())

		return nil, constraintError
	}

	if errors.Is(err, privacy.Deny) {
		return nil, newPermissionDeniedError(ActionCreate, "{{ $entity | toLower }}")
	}

	r.logger.Errorw("failed to create {{ $entity | toLower }}", "error", err)

	return nil, ErrInternalServerError
}

return &{{ $entity }}CreatePayload{
	{{ $entity }}: res,
}, nil
