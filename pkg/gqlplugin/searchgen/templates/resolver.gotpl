package {{ .ResolverPackageName }}

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen

import (
	"context"

	"github.com/datumforge/datum/internal/ent/generated"
)

// Search is the resolver for the search field.
func (r *queryResolver) Search(ctx context.Context, query string) (*GlobalSearchResultConnection, error) {
	var (
        {{- range $entity := $.Entities }}
		{{ $entity }}Results []*generated.{{ $entity }}
		{{ $entity }}Err     error
        {{- end }}
	)

	r.withPool().SubmitMultipleAndWait([]func(){
        {{- range $entity := $.Entities }}
		func() {
			{{ $entity }}Results, orgErr = search{{ $entity }}(ctx, query)
		},
        {{- end }}
	})

	// Check all errors and return a single error if any of the searches failed
	if orgErr != nil || groupErr != nil || userErr != nil || subscriberErr != nil || entityErr != nil {
		r.logger.Errorw("search failed", "error",
			"org", orgErr,
			"group", groupErr,
			"user", userErr,
			"subscriber", subscriberErr,
			"entity", entityErr,
		)

		return nil, ErrSearchFailed
	}

	// return the results
	return &GlobalSearchResultConnection{
		Nodes: []GlobalSearchResult{
            {{- range $entity := $.Entities }}
			{{ $entity }}SearchResult{
				{{ $entity | ToPlural }}: {{ $entity }}Results,
			},
            {{- end }}
		},
	}, nil
}
