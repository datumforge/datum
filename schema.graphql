directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateIntegrationInput is used for create Integration object.
Input was generated by ent.
"""
input CreateIntegrationInput {
	kind: String!
	description: String
	secretName: String!
	createdAt: Time
	deletedAt: Time
	organizationID: ID!
}
"""
CreateMembershipInput is used for create Membership object.
Input was generated by ent.
"""
input CreateMembershipInput {
	current: Boolean
	createdAt: Time
	updatedAt: Time
	organizationID: ID!
	userID: ID!
}
"""
CreateOrganizationInput is used for create Organization object.
Input was generated by ent.
"""
input CreateOrganizationInput {
	name: String
	createdAt: Time
	membershipIDs: [ID!]
	integrationIDs: [ID!]
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
	email: String!
	createdAt: Time
	membershipIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Integration implements Node {
	id: ID!
	kind: String!
	description: String
	secretName: String!
	createdAt: Time!
	deletedAt: Time
	organization: Organization!
}
"""Return response for createIntegration mutation"""
type IntegrationCreatePayload {
	"""Created integration"""
	integration: Integration!
}
"""Return response for deleteIntegration mutation"""
type IntegrationDeletePayload {
	"""Deleted integration ID"""
	deletedID: ID!
}
"""Return response for updateIntegration mutation"""
type IntegrationUpdatePayload {
	"""Updated integration"""
	integration: Integration!
}
"""
IntegrationWhereInput is used for filtering Integration objects.
Input was generated by ent.
"""
input IntegrationWhereInput {
	not: IntegrationWhereInput
	and: [IntegrationWhereInput!]
	or: [IntegrationWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""kind field predicates"""
	kind: String
	kindNEQ: String
	kindIn: [String!]
	kindNotIn: [String!]
	kindGT: String
	kindGTE: String
	kindLT: String
	kindLTE: String
	kindContains: String
	kindHasPrefix: String
	kindHasSuffix: String
	kindEqualFold: String
	kindContainsFold: String
	"""description field predicates"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""secret_name field predicates"""
	secretName: String
	secretNameNEQ: String
	secretNameIn: [String!]
	secretNameNotIn: [String!]
	secretNameGT: String
	secretNameGTE: String
	secretNameLT: String
	secretNameLTE: String
	secretNameContains: String
	secretNameHasPrefix: String
	secretNameHasSuffix: String
	secretNameEqualFold: String
	secretNameContainsFold: String
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""deleted_at field predicates"""
	deletedAt: Time
	deletedAtNEQ: Time
	deletedAtIn: [Time!]
	deletedAtNotIn: [Time!]
	deletedAtGT: Time
	deletedAtGTE: Time
	deletedAtLT: Time
	deletedAtLTE: Time
	deletedAtIsNil: Boolean
	deletedAtNotNil: Boolean
	"""organization edge predicates"""
	hasOrganization: Boolean
	hasOrganizationWith: [OrganizationWhereInput!]
}
type Membership implements Node {
	id: ID!
	current: Boolean!
	createdAt: Time!
	updatedAt: Time!
	organization: Organization!
	user: User!
}
"""Return response for createMembership mutation"""
type MembershipCreatePayload {
	"""Created membership"""
	membership: Membership!
}
"""Return response for deleteMembership mutation"""
type MembershipDeletePayload {
	"""Deleted membership ID"""
	deletedID: ID!
}
"""Return response for updateMembership mutation"""
type MembershipUpdatePayload {
	"""Updated membership"""
	membership: Membership!
}
"""
MembershipWhereInput is used for filtering Membership objects.
Input was generated by ent.
"""
input MembershipWhereInput {
	not: MembershipWhereInput
	and: [MembershipWhereInput!]
	or: [MembershipWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""current field predicates"""
	current: Boolean
	currentNEQ: Boolean
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""organization edge predicates"""
	hasOrganization: Boolean
	hasOrganizationWith: [OrganizationWhereInput!]
	"""user edge predicates"""
	hasUser: Boolean
	hasUserWith: [UserWhereInput!]
}
type Mutation {
	"""Create a new integration"""
	createIntegration(
		"""values of the integration"""
		input: CreateIntegrationInput!
	): IntegrationCreatePayload!
	"""Update an existing integration"""
	updateIntegration(
		"""ID of the integration"""
		id: ID!

		"""New values for the integration"""
		input: UpdateIntegrationInput!
	): IntegrationUpdatePayload!
	"""Delete an existing integration"""
	deleteIntegration(
		"""ID of the integration"""
		id: ID!
	): IntegrationDeletePayload!
	"""Create a new membership"""
	createMembership(
		"""values of the membership"""
		input: CreateMembershipInput!
	): MembershipCreatePayload!
	"""Update an existing membership"""
	updateMembership(
		"""ID of the membership"""
		id: ID!

		"""New values for the membership"""
		input: UpdateMembershipInput!
	): MembershipUpdatePayload!
	"""Delete an existing membership"""
	deleteMembership(
		"""ID of the membership"""
		id: ID!
	): MembershipDeletePayload!
	"""Create a new organization"""
	createOrganization(
		"""values of the organization"""
		input: CreateOrganizationInput!
	): OrganizationCreatePayload!
	"""Update an existing organization"""
	updateOrganization(
		"""ID of the organization"""
		id: ID!

		"""New values for the organization"""
		input: UpdateOrganizationInput!
	): OrganizationUpdatePayload!
	"""Delete an existing organization"""
	deleteOrganization(
		"""ID of the organization"""
		id: ID!
	): OrganizationDeletePayload!
	"""Create a new user"""
	createUser(
		"""values of the user"""
		input: CreateUserInput!
	): UserCreatePayload!
	"""Update an existing user"""
	updateUser(
		"""ID of the user"""
		id: ID!

		"""New values for the user"""
		input: UpdateUserInput!
	): UserUpdatePayload!
	"""Delete an existing user"""
	deleteUser(
		"""ID of the user"""
		id: ID!
	): UserDeletePayload!
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/datumforge/datum/internal/ent/generated.Noder") {
	"""The id of the object."""
	id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
	"""Specifies an ascending order for a given `orderBy` argument."""
	ASC
	"""Specifies a descending order for a given `orderBy` argument."""
	DESC
}
type Organization implements Node {
	id: ID!
	name: String!
	createdAt: Time!
	memberships: [Membership!]
	integrations: [Integration!]
}
"""Return response for createOrganization mutation"""
type OrganizationCreatePayload {
	"""Created organization"""
	organization: Organization!
}
"""Return response for deleteOrganization mutation"""
type OrganizationDeletePayload {
	"""Deleted organization ID"""
	deletedID: ID!
}
"""Return response for updateOrganization mutation"""
type OrganizationUpdatePayload {
	"""Updated organization"""
	organization: Organization!
}
"""
OrganizationWhereInput is used for filtering Organization objects.
Input was generated by ent.
"""
input OrganizationWhereInput {
	not: OrganizationWhereInput
	and: [OrganizationWhereInput!]
	or: [OrganizationWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""memberships edge predicates"""
	hasMemberships: Boolean
	hasMembershipsWith: [MembershipWhereInput!]
	"""integrations edge predicates"""
	hasIntegrations: Boolean
	hasIntegrationsWith: [IntegrationWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
	"""When paginating forwards, are there more items?"""
	hasNextPage: Boolean!
	"""When paginating backwards, are there more items?"""
	hasPreviousPage: Boolean!
	"""When paginating backwards, the cursor to continue."""
	startCursor: Cursor
	"""When paginating forwards, the cursor to continue."""
	endCursor: Cursor
}
type Query {
	"""Fetches an object given its ID."""
	node(
		"""ID of the object."""
		id: ID!
	): Node
	"""Lookup nodes by a list of IDs."""
	nodes(
		"""The list of node IDs."""
		ids: [ID!]!
	): [Node]!
	integrations: [Integration!]!
	memberships: [Membership!]!
	organizations: [Organization!]!
	users: [User!]!
	"""Look up integration by ID"""
	integration(
		"""ID of the integration"""
		id: ID!
	): Integration!
	"""Look up membership by ID"""
	membership(
		"""ID of the membership"""
		id: ID!
	): Membership!
	"""Look up organization by ID"""
	organization(
		"""ID of the organization"""
		id: ID!
	): Organization!
	"""Look up user by ID"""
	user(
		"""ID of the user"""
		id: ID!
	): User!
	_service: _Service!
}
"""The builtin Time type"""
scalar Time
"""
UpdateIntegrationInput is used for update Integration object.
Input was generated by ent.
"""
input UpdateIntegrationInput {
	description: String
	clearDescription: Boolean
	deletedAt: Time
	clearDeletedAt: Boolean
	organizationID: ID
}
"""
UpdateMembershipInput is used for update Membership object.
Input was generated by ent.
"""
input UpdateMembershipInput {
	current: Boolean
	updatedAt: Time
	organizationID: ID
	userID: ID
}
"""
UpdateOrganizationInput is used for update Organization object.
Input was generated by ent.
"""
input UpdateOrganizationInput {
	name: String
	addMembershipIDs: [ID!]
	removeMembershipIDs: [ID!]
	clearMemberships: Boolean
	addIntegrationIDs: [ID!]
	removeIntegrationIDs: [ID!]
	clearIntegrations: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
	email: String
	addMembershipIDs: [ID!]
	removeMembershipIDs: [ID!]
	clearMemberships: Boolean
}
type User implements Node {
	id: ID!
	email: String!
	createdAt: Time!
	memberships: [Membership!]
}
"""Return response for createUser mutation"""
type UserCreatePayload {
	"""Created user"""
	user: User!
}
"""Return response for deleteUser mutation"""
type UserDeletePayload {
	"""Deleted user ID"""
	deletedID: ID!
}
"""Return response for updateUser mutation"""
type UserUpdatePayload {
	"""Updated user"""
	user: User!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
	not: UserWhereInput
	and: [UserWhereInput!]
	or: [UserWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	"""email field predicates"""
	email: String
	emailNEQ: String
	emailIn: [String!]
	emailNotIn: [String!]
	emailGT: String
	emailGTE: String
	emailLT: String
	emailLTE: String
	emailContains: String
	emailHasPrefix: String
	emailHasSuffix: String
	emailEqualFold: String
	emailContainsFold: String
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""memberships edge predicates"""
	hasMemberships: Boolean
	hasMembershipsWith: [MembershipWhereInput!]
}
type _Service {
	sdl: String
}
scalar _Any
scalar FieldSet
directive @requires(fields: FieldSet!) on FIELD_DEFINITION
directive @provides(fields: FieldSet!) on FIELD_DEFINITION
directive @extends on OBJECT | INTERFACE
directive @key(fields: FieldSet!, resolvable: Boolean = true) repeatable on OBJECT | INTERFACE
directive @link(import: [String!], url: String!) repeatable on SCHEMA
directive @external on FIELD_DEFINITION | OBJECT
directive @shareable on OBJECT | FIELD_DEFINITION
directive @tag(name: String!) repeatable on FIELD_DEFINITION | INTERFACE | OBJECT | UNION | ARGUMENT_DEFINITION | SCALAR | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
directive @override(from: String!) on FIELD_DEFINITION
directive @inaccessible on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION
#directive @interfaceObject on OBJECT
extend schema
  @link(
	url: "https://specs.apollo.dev/federation/v2.3"
	import: [
	  "@key",
	  "@external",
	  "@shareable",
	  "@tag",
	  "@override",
	  "@inaccessible",
	  "@interfaceObject"
	  ]
  )
