directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateEntitlementInput is used for create Entitlement object.
Input was generated by ent.
"""
input CreateEntitlementInput {
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	tier: EntitlementTier
	stripeCustomerID: String
	stripeSubscriptionID: String
	expiresAt: Time
	cancelled: Boolean
}
"""
CreateGroupInput is used for create Group object.
Input was generated by ent.
"""
input CreateGroupInput {
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	name: String!
	description: String
	logoURL: String!
	settingID: ID!
	userIDs: [ID!]
	ownerID: ID
}
"""
CreateGroupSettingsInput is used for create GroupSettings object.
Input was generated by ent.
"""
input CreateGroupSettingsInput {
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	visibility: GroupSettingsVisibility
	joinPolicy: GroupSettingsJoinPolicy
}
"""
CreateIntegrationInput is used for create Integration object.
Input was generated by ent.
"""
input CreateIntegrationInput {
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	name: String!
	kind: String!
	description: String
	secretName: String!
	ownerID: ID
}
"""
CreateOrganizationInput is used for create Organization object.
Input was generated by ent.
"""
input CreateOrganizationInput {
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	name: String!
	"""An optional description of the Organization"""
	description: String
	parentID: ID
	userIDs: [ID!]
	groupIDs: [ID!]
	integrationIDs: [ID!]
}
"""
CreateOrganizationSettingsInput is used for create OrganizationSettings object.
Input was generated by ent.
"""
input CreateOrganizationSettingsInput {
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	domains: [String!]!
	ssoCert: String
	ssoEntrypoint: String
	ssoIssuer: String
	"""Name of the person to contact for billing"""
	billingContact: String!
	billingEmail: String!
	billingPhone: String!
	billingAddress: String!
	"""Usually government-issued tax ID or business ID such as ABN in Australia"""
	taxIdentifier: String!
}
"""
CreatePersonalAccessTokenInput is used for create PersonalAccessToken object.
Input was generated by ent.
"""
input CreatePersonalAccessTokenInput {
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	name: String!
	token: String!
	abilities: [String!]
	expirationAt: Time!
	lastUsedAt: Time
	userID: ID!
}
"""
CreateSessionInput is used for create Session object.
Input was generated by ent.
"""
input CreateSessionInput {
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	"""Sessions can derrive from the local (password auth), oauth, or app_password"""
	type: SessionType!
	"""The session may be disabled by the user or by automatic security policy"""
	disabled: Boolean!
	"""random 32 bytes encoded as base64"""
	token: String
	"""The last known user-agent"""
	userAgent: String
	"""All IPs that have been associated with this session. Reverse-chronological order. The current IP is the first item in the slice"""
	ips: String!
	usersID: ID
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
	createdAt: Time
	updatedAt: Time
	createdBy: String
	updatedBy: String
	email: String!
	firstName: String!
	lastName: String!
	"""The user's displayed 'friendly' name"""
	displayName: String
	"""user account is locked if unconfirmed or explicitly locked"""
	locked: Boolean
	"""URL of the user's remote avatar"""
	avatarRemoteURL: String
	"""The user's local avatar file"""
	avatarLocalFile: String
	"""The time the user's (local) avatar was last updated"""
	avatarUpdatedAt: Time
	"""The time the user was silenced"""
	silencedAt: Time
	"""The time the user was suspended"""
	suspendedAt: Time
	"""local Actor password recovery code generated during account creation"""
	recoveryCode: String
	organizationIDs: [ID!]
	sessionIDs: [ID!]
	groupIDs: [ID!]
	personalAccessTokenIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type Entitlement implements Node {
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	createdBy: String
	updatedBy: String
	tier: EntitlementTier!
	stripeCustomerID: String
	stripeSubscriptionID: String
	expiresAt: Time
	cancelled: Boolean!
}
"""A connection to a list of items."""
type EntitlementConnection {
	"""A list of edges."""
	edges: [EntitlementEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response for createEntitlement mutation"""
type EntitlementCreatePayload {
	"""Created entitlement"""
	entitlement: Entitlement!
}
"""Return response for deleteEntitlement mutation"""
type EntitlementDeletePayload {
	"""Deleted entitlement ID"""
	deletedID: ID!
}
"""An edge in a connection."""
type EntitlementEdge {
	"""The item at the end of the edge."""
	node: Entitlement
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""EntitlementTier is enum for the field tier"""
enum EntitlementTier @goModel(model: "github.com/datumforge/datum/internal/ent/generated/entitlement.Tier") {
	free
	pro
	enterprise
}
"""Return response for updateEntitlement mutation"""
type EntitlementUpdatePayload {
	"""Updated entitlement"""
	entitlement: Entitlement!
}
"""
EntitlementWhereInput is used for filtering Entitlement objects.
Input was generated by ent.
"""
input EntitlementWhereInput {
	not: EntitlementWhereInput
	and: [EntitlementWhereInput!]
	or: [EntitlementWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""created_by field predicates"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""updated_by field predicates"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""tier field predicates"""
	tier: EntitlementTier
	tierNEQ: EntitlementTier
	tierIn: [EntitlementTier!]
	tierNotIn: [EntitlementTier!]
	"""stripe_customer_id field predicates"""
	stripeCustomerID: String
	stripeCustomerIDNEQ: String
	stripeCustomerIDIn: [String!]
	stripeCustomerIDNotIn: [String!]
	stripeCustomerIDGT: String
	stripeCustomerIDGTE: String
	stripeCustomerIDLT: String
	stripeCustomerIDLTE: String
	stripeCustomerIDContains: String
	stripeCustomerIDHasPrefix: String
	stripeCustomerIDHasSuffix: String
	stripeCustomerIDIsNil: Boolean
	stripeCustomerIDNotNil: Boolean
	stripeCustomerIDEqualFold: String
	stripeCustomerIDContainsFold: String
	"""stripe_subscription_id field predicates"""
	stripeSubscriptionID: String
	stripeSubscriptionIDNEQ: String
	stripeSubscriptionIDIn: [String!]
	stripeSubscriptionIDNotIn: [String!]
	stripeSubscriptionIDGT: String
	stripeSubscriptionIDGTE: String
	stripeSubscriptionIDLT: String
	stripeSubscriptionIDLTE: String
	stripeSubscriptionIDContains: String
	stripeSubscriptionIDHasPrefix: String
	stripeSubscriptionIDHasSuffix: String
	stripeSubscriptionIDIsNil: Boolean
	stripeSubscriptionIDNotNil: Boolean
	stripeSubscriptionIDEqualFold: String
	stripeSubscriptionIDContainsFold: String
	"""expires_at field predicates"""
	expiresAt: Time
	expiresAtNEQ: Time
	expiresAtIn: [Time!]
	expiresAtNotIn: [Time!]
	expiresAtGT: Time
	expiresAtGTE: Time
	expiresAtLT: Time
	expiresAtLTE: Time
	expiresAtIsNil: Boolean
	expiresAtNotNil: Boolean
	"""cancelled field predicates"""
	cancelled: Boolean
	cancelledNEQ: Boolean
}
type Group implements Node {
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	createdBy: String
	updatedBy: String
	name: String!
	description: String!
	logoURL: String!
	setting: GroupSettings!
	users: [User!]
	owner: Organization
}
"""A connection to a list of items."""
type GroupConnection {
	"""A list of edges."""
	edges: [GroupEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response for createGroup mutation"""
type GroupCreatePayload {
	"""Created group"""
	group: Group!
}
"""Return response for deleteGroup mutation"""
type GroupDeletePayload {
	"""Deleted group ID"""
	deletedID: ID!
}
"""An edge in a connection."""
type GroupEdge {
	"""The item at the end of the edge."""
	node: Group
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for Group connections"""
input GroupOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order Groups."""
	field: GroupOrderField!
}
"""Properties by which Group connections can be ordered."""
enum GroupOrderField {
	name
}
type GroupSettings implements Node {
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	createdBy: String
	updatedBy: String
	visibility: GroupSettingsVisibility!
	joinPolicy: GroupSettingsJoinPolicy!
}
"""A connection to a list of items."""
type GroupSettingsConnection {
	"""A list of edges."""
	edges: [GroupSettingsEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""An edge in a connection."""
type GroupSettingsEdge {
	"""The item at the end of the edge."""
	node: GroupSettings
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""GroupSettingsJoinPolicy is enum for the field join_policy"""
enum GroupSettingsJoinPolicy @goModel(model: "github.com/datumforge/datum/internal/ent/generated/groupsettings.JoinPolicy") {
	OPEN
	INVITE_ONLY
	APPLICATION_ONLY
	INVITE_OR_APPLICATION
}
"""GroupSettingsVisibility is enum for the field visibility"""
enum GroupSettingsVisibility @goModel(model: "github.com/datumforge/datum/internal/ent/generated/groupsettings.Visibility") {
	PUBLIC
	PRIVATE
}
"""
GroupSettingsWhereInput is used for filtering GroupSettings objects.
Input was generated by ent.
"""
input GroupSettingsWhereInput {
	not: GroupSettingsWhereInput
	and: [GroupSettingsWhereInput!]
	or: [GroupSettingsWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""created_by field predicates"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""updated_by field predicates"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""visibility field predicates"""
	visibility: GroupSettingsVisibility
	visibilityNEQ: GroupSettingsVisibility
	visibilityIn: [GroupSettingsVisibility!]
	visibilityNotIn: [GroupSettingsVisibility!]
	"""join_policy field predicates"""
	joinPolicy: GroupSettingsJoinPolicy
	joinPolicyNEQ: GroupSettingsJoinPolicy
	joinPolicyIn: [GroupSettingsJoinPolicy!]
	joinPolicyNotIn: [GroupSettingsJoinPolicy!]
}
"""Return response for updateGroup mutation"""
type GroupUpdatePayload {
	"""Updated group"""
	group: Group!
}
"""
GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
	not: GroupWhereInput
	and: [GroupWhereInput!]
	or: [GroupWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""created_by field predicates"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""updated_by field predicates"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""setting edge predicates"""
	hasSetting: Boolean
	hasSettingWith: [GroupSettingsWhereInput!]
	"""users edge predicates"""
	hasUsers: Boolean
	hasUsersWith: [UserWhereInput!]
	"""owner edge predicates"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
}
type Integration implements Node {
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	createdBy: String
	updatedBy: String
	name: String!
	kind: String!
	description: String
	secretName: String!
	owner: Organization
}
"""A connection to a list of items."""
type IntegrationConnection {
	"""A list of edges."""
	edges: [IntegrationEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response for createIntegration mutation"""
type IntegrationCreatePayload {
	"""Created integration"""
	integration: Integration!
}
"""Return response for deleteIntegration mutation"""
type IntegrationDeletePayload {
	"""Deleted integration ID"""
	deletedID: ID!
}
"""An edge in a connection."""
type IntegrationEdge {
	"""The item at the end of the edge."""
	node: Integration
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for Integration connections"""
input IntegrationOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order Integrations."""
	field: IntegrationOrderField!
}
"""Properties by which Integration connections can be ordered."""
enum IntegrationOrderField {
	name
	kind
}
"""Return response for updateIntegration mutation"""
type IntegrationUpdatePayload {
	"""Updated integration"""
	integration: Integration!
}
"""
IntegrationWhereInput is used for filtering Integration objects.
Input was generated by ent.
"""
input IntegrationWhereInput {
	not: IntegrationWhereInput
	and: [IntegrationWhereInput!]
	or: [IntegrationWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""created_by field predicates"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""updated_by field predicates"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""kind field predicates"""
	kind: String
	kindNEQ: String
	kindIn: [String!]
	kindNotIn: [String!]
	kindGT: String
	kindGTE: String
	kindLT: String
	kindLTE: String
	kindContains: String
	kindHasPrefix: String
	kindHasSuffix: String
	kindEqualFold: String
	kindContainsFold: String
	"""description field predicates"""
	description: String
	descriptionNEQ: String
	descriptionIn: [String!]
	descriptionNotIn: [String!]
	descriptionGT: String
	descriptionGTE: String
	descriptionLT: String
	descriptionLTE: String
	descriptionContains: String
	descriptionHasPrefix: String
	descriptionHasSuffix: String
	descriptionIsNil: Boolean
	descriptionNotNil: Boolean
	descriptionEqualFold: String
	descriptionContainsFold: String
	"""secret_name field predicates"""
	secretName: String
	secretNameNEQ: String
	secretNameIn: [String!]
	secretNameNotIn: [String!]
	secretNameGT: String
	secretNameGTE: String
	secretNameLT: String
	secretNameLTE: String
	secretNameContains: String
	secretNameHasPrefix: String
	secretNameHasSuffix: String
	secretNameEqualFold: String
	secretNameContainsFold: String
	"""owner edge predicates"""
	hasOwner: Boolean
	hasOwnerWith: [OrganizationWhereInput!]
}
"""A valid JSON string."""
scalar JSON
type Mutation {
	"""Create a new entitlement"""
	createEntitlement(
		"""values of the entitlement"""
		input: CreateEntitlementInput!
	): EntitlementCreatePayload!
	"""Update an existing entitlement"""
	updateEntitlement(
		"""ID of the entitlement"""
		id: ID!

		"""New values for the entitlement"""
		input: UpdateEntitlementInput!
	): EntitlementUpdatePayload!
	"""Delete an existing entitlement"""
	deleteEntitlement(
		"""ID of the entitlement"""
		id: ID!
	): EntitlementDeletePayload!
	"""Create a new group"""
	createGroup(
		"""values of the group"""
		input: CreateGroupInput!
	): GroupCreatePayload!
	"""Update an existing group"""
	updateGroup(
		"""ID of the group"""
		id: ID!

		"""New values for the group"""
		input: UpdateGroupInput!
	): GroupUpdatePayload!
	"""Delete an existing group"""
	deleteGroup(
		"""ID of the group"""
		id: ID!
	): GroupDeletePayload!
	"""Create a new integration"""
	createIntegration(
		"""values of the integration"""
		input: CreateIntegrationInput!
	): IntegrationCreatePayload!
	"""Update an existing integration"""
	updateIntegration(
		"""ID of the integration"""
		id: ID!

		"""New values for the integration"""
		input: UpdateIntegrationInput!
	): IntegrationUpdatePayload!
	"""Delete an existing integration"""
	deleteIntegration(
		"""ID of the integration"""
		id: ID!
	): IntegrationDeletePayload!
	"""Create a new organization"""
	createOrganization(
		"""values of the organization"""
		input: CreateOrganizationInput!
	): OrganizationCreatePayload!
	"""Update an existing organization"""
	updateOrganization(
		"""ID of the organization"""
		id: ID!

		"""New values for the organization"""
		input: UpdateOrganizationInput!
	): OrganizationUpdatePayload!
	"""Delete an existing organization"""
	deleteOrganization(
		"""ID of the organization"""
		id: ID!
	): OrganizationDeletePayload!
	"""Create a new PersonalAccessToken"""
	createPersonalAccessToken(
		"""values of the PersonalAccessToken"""
		input: CreatePersonalAccessTokenInput!
	): PersonalAccessTokenCreatePayload!
	"""Update an existing PersonalAccessToken"""
	updatePersonalAccessToken(
		"""ID of the PersonalAccessToken"""
		id: ID!

		"""New values for the PersonalAccessToken"""
		input: UpdatePersonalAccessTokenInput!
	): PersonalAccessTokenUpdatePayload!
	"""Delete an existing PersonalAccessToken"""
	deletePersonalAccessToken(
		"""ID of the PersonalAccessToken"""
		id: ID!
	): PersonalAccessTokenDeletePayload!
	"""Create a new session"""
	createSession(
		"""values of the session"""
		input: CreateSessionInput!
	): SessionCreatePayload!
	"""Update an existing session"""
	updateSession(
		"""ID of the session"""
		id: ID!

		"""New values for the session"""
		input: UpdateSessionInput!
	): SessionUpdatePayload!
	"""Delete an existing session"""
	deleteSession(
		"""ID of the session"""
		id: ID!
	): SessionDeletePayload!
	"""Create a new user"""
	createUser(
		"""values of the user"""
		input: CreateUserInput!
	): UserCreatePayload!
	"""Update an existing user"""
	updateUser(
		"""ID of the user"""
		id: ID!

		"""New values for the user"""
		input: UpdateUserInput!
	): UserUpdatePayload!
	"""Delete an existing user"""
	deleteUser(
		"""ID of the user"""
		id: ID!
	): UserDeletePayload!
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/datumforge/datum/internal/ent/generated.Noder") {
	"""The id of the object."""
	id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
	"""Specifies an ascending order for a given `orderBy` argument."""
	ASC
	"""Specifies a descending order for a given `orderBy` argument."""
	DESC
}
type Organization implements Node {
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	createdBy: String
	updatedBy: String
	name: String!
	"""An optional description of the Organization"""
	description: String
	parent: Organization
	children(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for Organizations returned from the connection."""
		orderBy: OrganizationOrder

		"""Filtering options for Organizations returned from the connection."""
		where: OrganizationWhereInput
	): OrganizationConnection!
	users: [User!]
	groups: [Group!]
	integrations: [Integration!]
}
"""A connection to a list of items."""
type OrganizationConnection {
	"""A list of edges."""
	edges: [OrganizationEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response for createOrganization mutation"""
type OrganizationCreatePayload {
	"""Created organization"""
	organization: Organization!
}
"""Return response for deleteOrganization mutation"""
type OrganizationDeletePayload {
	"""Deleted organization ID"""
	deletedID: ID!
}
"""An edge in a connection."""
type OrganizationEdge {
	"""The item at the end of the edge."""
	node: Organization
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for Organization connections"""
input OrganizationOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order Organizations."""
	field: OrganizationOrderField!
}
"""Properties by which Organization connections can be ordered."""
enum OrganizationOrderField {
	name
}
type OrganizationSettings implements Node {
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	createdBy: String
	updatedBy: String
	domains: [String!]!
	ssoCert: String!
	ssoEntrypoint: String!
	ssoIssuer: String!
	"""Name of the person to contact for billing"""
	billingContact: String!
	billingEmail: String!
	billingPhone: String!
	billingAddress: String!
	"""Usually government-issued tax ID or business ID such as ABN in Australia"""
	taxIdentifier: String!
}
"""A connection to a list of items."""
type OrganizationSettingsConnection {
	"""A list of edges."""
	edges: [OrganizationSettingsEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""An edge in a connection."""
type OrganizationSettingsEdge {
	"""The item at the end of the edge."""
	node: OrganizationSettings
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""
OrganizationSettingsWhereInput is used for filtering OrganizationSettings objects.
Input was generated by ent.
"""
input OrganizationSettingsWhereInput {
	not: OrganizationSettingsWhereInput
	and: [OrganizationSettingsWhereInput!]
	or: [OrganizationSettingsWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""created_by field predicates"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""updated_by field predicates"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""sso_cert field predicates"""
	ssoCert: String
	ssoCertNEQ: String
	ssoCertIn: [String!]
	ssoCertNotIn: [String!]
	ssoCertGT: String
	ssoCertGTE: String
	ssoCertLT: String
	ssoCertLTE: String
	ssoCertContains: String
	ssoCertHasPrefix: String
	ssoCertHasSuffix: String
	ssoCertEqualFold: String
	ssoCertContainsFold: String
	"""sso_entrypoint field predicates"""
	ssoEntrypoint: String
	ssoEntrypointNEQ: String
	ssoEntrypointIn: [String!]
	ssoEntrypointNotIn: [String!]
	ssoEntrypointGT: String
	ssoEntrypointGTE: String
	ssoEntrypointLT: String
	ssoEntrypointLTE: String
	ssoEntrypointContains: String
	ssoEntrypointHasPrefix: String
	ssoEntrypointHasSuffix: String
	ssoEntrypointEqualFold: String
	ssoEntrypointContainsFold: String
	"""sso_issuer field predicates"""
	ssoIssuer: String
	ssoIssuerNEQ: String
	ssoIssuerIn: [String!]
	ssoIssuerNotIn: [String!]
	ssoIssuerGT: String
	ssoIssuerGTE: String
	ssoIssuerLT: String
	ssoIssuerLTE: String
	ssoIssuerContains: String
	ssoIssuerHasPrefix: String
	ssoIssuerHasSuffix: String
	ssoIssuerEqualFold: String
	ssoIssuerContainsFold: String
	"""billing_contact field predicates"""
	billingContact: String
	billingContactNEQ: String
	billingContactIn: [String!]
	billingContactNotIn: [String!]
	billingContactGT: String
	billingContactGTE: String
	billingContactLT: String
	billingContactLTE: String
	billingContactContains: String
	billingContactHasPrefix: String
	billingContactHasSuffix: String
	billingContactEqualFold: String
	billingContactContainsFold: String
	"""billing_email field predicates"""
	billingEmail: String
	billingEmailNEQ: String
	billingEmailIn: [String!]
	billingEmailNotIn: [String!]
	billingEmailGT: String
	billingEmailGTE: String
	billingEmailLT: String
	billingEmailLTE: String
	billingEmailContains: String
	billingEmailHasPrefix: String
	billingEmailHasSuffix: String
	billingEmailEqualFold: String
	billingEmailContainsFold: String
	"""billing_phone field predicates"""
	billingPhone: String
	billingPhoneNEQ: String
	billingPhoneIn: [String!]
	billingPhoneNotIn: [String!]
	billingPhoneGT: String
	billingPhoneGTE: String
	billingPhoneLT: String
	billingPhoneLTE: String
	billingPhoneContains: String
	billingPhoneHasPrefix: String
	billingPhoneHasSuffix: String
	billingPhoneEqualFold: String
	billingPhoneContainsFold: String
	"""billing_address field predicates"""
	billingAddress: String
	billingAddressNEQ: String
	billingAddressIn: [String!]
	billingAddressNotIn: [String!]
	billingAddressGT: String
	billingAddressGTE: String
	billingAddressLT: String
	billingAddressLTE: String
	billingAddressContains: String
	billingAddressHasPrefix: String
	billingAddressHasSuffix: String
	billingAddressEqualFold: String
	billingAddressContainsFold: String
	"""tax_identifier field predicates"""
	taxIdentifier: String
	taxIdentifierNEQ: String
	taxIdentifierIn: [String!]
	taxIdentifierNotIn: [String!]
	taxIdentifierGT: String
	taxIdentifierGTE: String
	taxIdentifierLT: String
	taxIdentifierLTE: String
	taxIdentifierContains: String
	taxIdentifierHasPrefix: String
	taxIdentifierHasSuffix: String
	taxIdentifierEqualFold: String
	taxIdentifierContainsFold: String
}
"""Return response for updateOrganization mutation"""
type OrganizationUpdatePayload {
	"""Updated organization"""
	organization: Organization!
}
"""
OrganizationWhereInput is used for filtering Organization objects.
Input was generated by ent.
"""
input OrganizationWhereInput {
	not: OrganizationWhereInput
	and: [OrganizationWhereInput!]
	or: [OrganizationWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""created_by field predicates"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""updated_by field predicates"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""parent_organization_id field predicates"""
	parentOrganizationID: ID
	parentOrganizationIDNEQ: ID
	parentOrganizationIDIn: [ID!]
	parentOrganizationIDNotIn: [ID!]
	parentOrganizationIDGT: ID
	parentOrganizationIDGTE: ID
	parentOrganizationIDLT: ID
	parentOrganizationIDLTE: ID
	parentOrganizationIDContains: ID
	parentOrganizationIDHasPrefix: ID
	parentOrganizationIDHasSuffix: ID
	parentOrganizationIDIsNil: Boolean
	parentOrganizationIDNotNil: Boolean
	parentOrganizationIDEqualFold: ID
	parentOrganizationIDContainsFold: ID
	"""parent edge predicates"""
	hasParent: Boolean
	hasParentWith: [OrganizationWhereInput!]
	"""children edge predicates"""
	hasChildren: Boolean
	hasChildrenWith: [OrganizationWhereInput!]
	"""users edge predicates"""
	hasUsers: Boolean
	hasUsersWith: [UserWhereInput!]
	"""groups edge predicates"""
	hasGroups: Boolean
	hasGroupsWith: [GroupWhereInput!]
	"""integrations edge predicates"""
	hasIntegrations: Boolean
	hasIntegrationsWith: [IntegrationWhereInput!]
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
	"""When paginating forwards, are there more items?"""
	hasNextPage: Boolean!
	"""When paginating backwards, are there more items?"""
	hasPreviousPage: Boolean!
	"""When paginating backwards, the cursor to continue."""
	startCursor: Cursor
	"""When paginating forwards, the cursor to continue."""
	endCursor: Cursor
}
type PersonalAccessToken implements Node {
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	createdBy: String
	updatedBy: String
	name: String!
	userID: ID!
	abilities: [String!]
	expirationAt: Time!
	lastUsedAt: Time
	user: User!
}
"""A connection to a list of items."""
type PersonalAccessTokenConnection {
	"""A list of edges."""
	edges: [PersonalAccessTokenEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response for createPersonalAccessToken mutation"""
type PersonalAccessTokenCreatePayload {
	"""Created PersonalAccessToken"""
	PersonalAccessToken: PersonalAccessToken!
}
"""Return response for deletePersonalAccessToken mutation"""
type PersonalAccessTokenDeletePayload {
	"""Deleted PersonalAccessToken ID"""
	deletedID: ID!
}
"""An edge in a connection."""
type PersonalAccessTokenEdge {
	"""The item at the end of the edge."""
	node: PersonalAccessToken
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Return response for updatePersonalAccessToken mutation"""
type PersonalAccessTokenUpdatePayload {
	"""Updated PersonalAccessToken"""
	PersonalAccessToken: PersonalAccessToken!
}
"""
PersonalAccessTokenWhereInput is used for filtering PersonalAccessToken objects.
Input was generated by ent.
"""
input PersonalAccessTokenWhereInput {
	not: PersonalAccessTokenWhereInput
	and: [PersonalAccessTokenWhereInput!]
	or: [PersonalAccessTokenWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""created_by field predicates"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""updated_by field predicates"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""name field predicates"""
	name: String
	nameNEQ: String
	nameIn: [String!]
	nameNotIn: [String!]
	nameGT: String
	nameGTE: String
	nameLT: String
	nameLTE: String
	nameContains: String
	nameHasPrefix: String
	nameHasSuffix: String
	nameEqualFold: String
	nameContainsFold: String
	"""user_id field predicates"""
	userID: ID
	userIDNEQ: ID
	userIDIn: [ID!]
	userIDNotIn: [ID!]
	userIDGT: ID
	userIDGTE: ID
	userIDLT: ID
	userIDLTE: ID
	userIDContains: ID
	userIDHasPrefix: ID
	userIDHasSuffix: ID
	userIDEqualFold: ID
	userIDContainsFold: ID
	"""expiration_at field predicates"""
	expirationAt: Time
	expirationAtNEQ: Time
	expirationAtIn: [Time!]
	expirationAtNotIn: [Time!]
	expirationAtGT: Time
	expirationAtGTE: Time
	expirationAtLT: Time
	expirationAtLTE: Time
	"""last_used_at field predicates"""
	lastUsedAt: Time
	lastUsedAtNEQ: Time
	lastUsedAtIn: [Time!]
	lastUsedAtNotIn: [Time!]
	lastUsedAtGT: Time
	lastUsedAtGTE: Time
	lastUsedAtLT: Time
	lastUsedAtLTE: Time
	lastUsedAtIsNil: Boolean
	lastUsedAtNotNil: Boolean
	"""user edge predicates"""
	hasUser: Boolean
	hasUserWith: [UserWhereInput!]
}
type Query {
	"""Fetches an object given its ID."""
	node(
		"""ID of the object."""
		id: ID!
	): Node
	"""Lookup nodes by a list of IDs."""
	nodes(
		"""The list of node IDs."""
		ids: [ID!]!
	): [Node]!
	entitlements(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Filtering options for Entitlements returned from the connection."""
		where: EntitlementWhereInput
	): EntitlementConnection!
	groups(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for Groups returned from the connection."""
		orderBy: GroupOrder

		"""Filtering options for Groups returned from the connection."""
		where: GroupWhereInput
	): GroupConnection!
	groupSettingsSlice(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Filtering options for GroupSettingsSlice returned from the connection."""
		where: GroupSettingsWhereInput
	): GroupSettingsConnection!
	integrations(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for Integrations returned from the connection."""
		orderBy: IntegrationOrder

		"""Filtering options for Integrations returned from the connection."""
		where: IntegrationWhereInput
	): IntegrationConnection!
	organizations(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for Organizations returned from the connection."""
		orderBy: OrganizationOrder

		"""Filtering options for Organizations returned from the connection."""
		where: OrganizationWhereInput
	): OrganizationConnection!
	organizationSettingsSlice(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Filtering options for OrganizationSettingsSlice returned from the connection."""
		where: OrganizationSettingsWhereInput
	): OrganizationSettingsConnection!
	personalAccessTokens(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Filtering options for PersonalAccessTokens returned from the connection."""
		where: PersonalAccessTokenWhereInput
	): PersonalAccessTokenConnection!
	sessions(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Filtering options for Sessions returned from the connection."""
		where: SessionWhereInput
	): SessionConnection!
	users(
		"""Returns the elements in the list that come after the specified cursor."""
		after: Cursor

		"""Returns the first _n_ elements from the list."""
		first: Int

		"""Returns the elements in the list that come before the specified cursor."""
		before: Cursor

		"""Returns the last _n_ elements from the list."""
		last: Int

		"""Ordering options for Users returned from the connection."""
		orderBy: UserOrder

		"""Filtering options for Users returned from the connection."""
		where: UserWhereInput
	): UserConnection!
	"""Look up entitlement by ID"""
	entitlement(
		"""ID of the entitlement"""
		id: ID!
	): Entitlement!
	"""Look up group by ID"""
	group(
		"""ID of the group"""
		id: ID!
	): Group!
	"""Look up integration by ID"""
	integration(
		"""ID of the integration"""
		id: ID!
	): Integration!
	"""Look up organization by ID"""
	organization(
		"""ID of the organization"""
		id: ID!
	): Organization!
	"""Look up PersonalAccessToken by ID"""
	PersonalAccessToken(
		"""ID of the PersonalAccessToken"""
		id: ID!
	): PersonalAccessToken!
	"""Look up session by ID"""
	session(
		"""ID of the session"""
		id: ID!
	): Session!
	"""Look up user by ID"""
	user(
		"""ID of the user"""
		id: ID!
	): User!
	_service: _Service!
}
type RefreshToken implements Node {
	id: ID!
	clientID: String!
	scopes: [String!]
	nonce: String!
	claimsUserID: String!
	claimsUsername: String!
	claimsEmail: String!
	claimsEmailVerified: Boolean!
	claimsGroups: [String!]
	claimsPreferredUsername: String!
	connectorID: String!
	connectorData: [String!]
	token: String!
	obsoleteToken: String!
	lastUsed: Time!
}
"""
RefreshTokenWhereInput is used for filtering RefreshToken objects.
Input was generated by ent.
"""
input RefreshTokenWhereInput {
	not: RefreshTokenWhereInput
	and: [RefreshTokenWhereInput!]
	or: [RefreshTokenWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""client_id field predicates"""
	clientID: String
	clientIDNEQ: String
	clientIDIn: [String!]
	clientIDNotIn: [String!]
	clientIDGT: String
	clientIDGTE: String
	clientIDLT: String
	clientIDLTE: String
	clientIDContains: String
	clientIDHasPrefix: String
	clientIDHasSuffix: String
	clientIDEqualFold: String
	clientIDContainsFold: String
	"""nonce field predicates"""
	nonce: String
	nonceNEQ: String
	nonceIn: [String!]
	nonceNotIn: [String!]
	nonceGT: String
	nonceGTE: String
	nonceLT: String
	nonceLTE: String
	nonceContains: String
	nonceHasPrefix: String
	nonceHasSuffix: String
	nonceEqualFold: String
	nonceContainsFold: String
	"""claims_user_id field predicates"""
	claimsUserID: String
	claimsUserIDNEQ: String
	claimsUserIDIn: [String!]
	claimsUserIDNotIn: [String!]
	claimsUserIDGT: String
	claimsUserIDGTE: String
	claimsUserIDLT: String
	claimsUserIDLTE: String
	claimsUserIDContains: String
	claimsUserIDHasPrefix: String
	claimsUserIDHasSuffix: String
	claimsUserIDEqualFold: String
	claimsUserIDContainsFold: String
	"""claims_username field predicates"""
	claimsUsername: String
	claimsUsernameNEQ: String
	claimsUsernameIn: [String!]
	claimsUsernameNotIn: [String!]
	claimsUsernameGT: String
	claimsUsernameGTE: String
	claimsUsernameLT: String
	claimsUsernameLTE: String
	claimsUsernameContains: String
	claimsUsernameHasPrefix: String
	claimsUsernameHasSuffix: String
	claimsUsernameEqualFold: String
	claimsUsernameContainsFold: String
	"""claims_email field predicates"""
	claimsEmail: String
	claimsEmailNEQ: String
	claimsEmailIn: [String!]
	claimsEmailNotIn: [String!]
	claimsEmailGT: String
	claimsEmailGTE: String
	claimsEmailLT: String
	claimsEmailLTE: String
	claimsEmailContains: String
	claimsEmailHasPrefix: String
	claimsEmailHasSuffix: String
	claimsEmailEqualFold: String
	claimsEmailContainsFold: String
	"""claims_email_verified field predicates"""
	claimsEmailVerified: Boolean
	claimsEmailVerifiedNEQ: Boolean
	"""claims_preferred_username field predicates"""
	claimsPreferredUsername: String
	claimsPreferredUsernameNEQ: String
	claimsPreferredUsernameIn: [String!]
	claimsPreferredUsernameNotIn: [String!]
	claimsPreferredUsernameGT: String
	claimsPreferredUsernameGTE: String
	claimsPreferredUsernameLT: String
	claimsPreferredUsernameLTE: String
	claimsPreferredUsernameContains: String
	claimsPreferredUsernameHasPrefix: String
	claimsPreferredUsernameHasSuffix: String
	claimsPreferredUsernameEqualFold: String
	claimsPreferredUsernameContainsFold: String
	"""connector_id field predicates"""
	connectorID: String
	connectorIDNEQ: String
	connectorIDIn: [String!]
	connectorIDNotIn: [String!]
	connectorIDGT: String
	connectorIDGTE: String
	connectorIDLT: String
	connectorIDLTE: String
	connectorIDContains: String
	connectorIDHasPrefix: String
	connectorIDHasSuffix: String
	connectorIDEqualFold: String
	connectorIDContainsFold: String
	"""token field predicates"""
	token: String
	tokenNEQ: String
	tokenIn: [String!]
	tokenNotIn: [String!]
	tokenGT: String
	tokenGTE: String
	tokenLT: String
	tokenLTE: String
	tokenContains: String
	tokenHasPrefix: String
	tokenHasSuffix: String
	tokenEqualFold: String
	tokenContainsFold: String
	"""obsolete_token field predicates"""
	obsoleteToken: String
	obsoleteTokenNEQ: String
	obsoleteTokenIn: [String!]
	obsoleteTokenNotIn: [String!]
	obsoleteTokenGT: String
	obsoleteTokenGTE: String
	obsoleteTokenLT: String
	obsoleteTokenLTE: String
	obsoleteTokenContains: String
	obsoleteTokenHasPrefix: String
	obsoleteTokenHasSuffix: String
	obsoleteTokenEqualFold: String
	obsoleteTokenContainsFold: String
	"""last_used field predicates"""
	lastUsed: Time
	lastUsedNEQ: Time
	lastUsedIn: [Time!]
	lastUsedNotIn: [Time!]
	lastUsedGT: Time
	lastUsedGTE: Time
	lastUsedLT: Time
	lastUsedLTE: Time
}
type Session implements Node {
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	createdBy: String
	updatedBy: String
	"""Sessions can derrive from the local (password auth), oauth, or app_password"""
	type: SessionType!
	"""The session may be disabled by the user or by automatic security policy"""
	disabled: Boolean!
	"""random 32 bytes encoded as base64"""
	token: String!
	"""The last known user-agent"""
	userAgent: String
	"""All IPs that have been associated with this session. Reverse-chronological order. The current IP is the first item in the slice"""
	ips: String!
	"""Sessions belong to users"""
	users: User
}
"""A connection to a list of items."""
type SessionConnection {
	"""A list of edges."""
	edges: [SessionEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response for createSession mutation"""
type SessionCreatePayload {
	"""Created session"""
	session: Session!
}
"""Return response for deleteSession mutation"""
type SessionDeletePayload {
	"""Deleted session ID"""
	deletedID: ID!
}
"""An edge in a connection."""
type SessionEdge {
	"""The item at the end of the edge."""
	node: Session
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""SessionType is enum for the field type"""
enum SessionType @goModel(model: "github.com/datumforge/datum/internal/ent/generated/session.Type") {
	local
	oauth
	app_password
}
"""Return response for updateSession mutation"""
type SessionUpdatePayload {
	"""Updated session"""
	session: Session!
}
"""
SessionWhereInput is used for filtering Session objects.
Input was generated by ent.
"""
input SessionWhereInput {
	not: SessionWhereInput
	and: [SessionWhereInput!]
	or: [SessionWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""created_by field predicates"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""updated_by field predicates"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""type field predicates"""
	type: SessionType
	typeNEQ: SessionType
	typeIn: [SessionType!]
	typeNotIn: [SessionType!]
	"""disabled field predicates"""
	disabled: Boolean
	disabledNEQ: Boolean
	"""token field predicates"""
	token: String
	tokenNEQ: String
	tokenIn: [String!]
	tokenNotIn: [String!]
	tokenGT: String
	tokenGTE: String
	tokenLT: String
	tokenLTE: String
	tokenContains: String
	tokenHasPrefix: String
	tokenHasSuffix: String
	tokenEqualFold: String
	tokenContainsFold: String
	"""user_agent field predicates"""
	userAgent: String
	userAgentNEQ: String
	userAgentIn: [String!]
	userAgentNotIn: [String!]
	userAgentGT: String
	userAgentGTE: String
	userAgentLT: String
	userAgentLTE: String
	userAgentContains: String
	userAgentHasPrefix: String
	userAgentHasSuffix: String
	userAgentIsNil: Boolean
	userAgentNotNil: Boolean
	userAgentEqualFold: String
	userAgentContainsFold: String
	"""ips field predicates"""
	ips: String
	ipsNEQ: String
	ipsIn: [String!]
	ipsNotIn: [String!]
	ipsGT: String
	ipsGTE: String
	ipsLT: String
	ipsLTE: String
	ipsContains: String
	ipsHasPrefix: String
	ipsHasSuffix: String
	ipsEqualFold: String
	ipsContainsFold: String
	"""users edge predicates"""
	hasUsers: Boolean
	hasUsersWith: [UserWhereInput!]
}
"""The builtin Time type"""
scalar Time
"""A Universally Unique Identifier (UUID)"""
scalar UUID
"""
UpdateEntitlementInput is used for update Entitlement object.
Input was generated by ent.
"""
input UpdateEntitlementInput {
	updatedAt: Time
	createdBy: String
	clearCreatedBy: Boolean
	updatedBy: String
	clearUpdatedBy: Boolean
	tier: EntitlementTier
	stripeCustomerID: String
	clearStripeCustomerID: Boolean
	stripeSubscriptionID: String
	clearStripeSubscriptionID: Boolean
	expiresAt: Time
	clearExpiresAt: Boolean
	cancelled: Boolean
}
"""
UpdateGroupInput is used for update Group object.
Input was generated by ent.
"""
input UpdateGroupInput {
	updatedAt: Time
	createdBy: String
	clearCreatedBy: Boolean
	updatedBy: String
	clearUpdatedBy: Boolean
	name: String
	description: String
	logoURL: String
	settingID: ID
	addUserIDs: [ID!]
	removeUserIDs: [ID!]
	clearUsers: Boolean
	ownerID: ID
	clearOwner: Boolean
}
"""
UpdateGroupSettingsInput is used for update GroupSettings object.
Input was generated by ent.
"""
input UpdateGroupSettingsInput {
	updatedAt: Time
	createdBy: String
	clearCreatedBy: Boolean
	updatedBy: String
	clearUpdatedBy: Boolean
	visibility: GroupSettingsVisibility
	joinPolicy: GroupSettingsJoinPolicy
}
"""
UpdateIntegrationInput is used for update Integration object.
Input was generated by ent.
"""
input UpdateIntegrationInput {
	updatedAt: Time
	createdBy: String
	clearCreatedBy: Boolean
	updatedBy: String
	clearUpdatedBy: Boolean
	name: String
	description: String
	clearDescription: Boolean
	ownerID: ID
	clearOwner: Boolean
}
"""
UpdateOrganizationInput is used for update Organization object.
Input was generated by ent.
"""
input UpdateOrganizationInput {
	updatedAt: Time
	createdBy: String
	clearCreatedBy: Boolean
	updatedBy: String
	clearUpdatedBy: Boolean
	name: String
	"""An optional description of the Organization"""
	description: String
	clearDescription: Boolean
	addUserIDs: [ID!]
	removeUserIDs: [ID!]
	clearUsers: Boolean
	addGroupIDs: [ID!]
	removeGroupIDs: [ID!]
	clearGroups: Boolean
	addIntegrationIDs: [ID!]
	removeIntegrationIDs: [ID!]
	clearIntegrations: Boolean
}
"""
UpdateOrganizationSettingsInput is used for update OrganizationSettings object.
Input was generated by ent.
"""
input UpdateOrganizationSettingsInput {
	updatedAt: Time
	createdBy: String
	clearCreatedBy: Boolean
	updatedBy: String
	clearUpdatedBy: Boolean
	domains: [String!]
	appendDomains: [String!]
	ssoCert: String
	ssoEntrypoint: String
	ssoIssuer: String
	"""Name of the person to contact for billing"""
	billingContact: String
	billingEmail: String
	billingPhone: String
	billingAddress: String
	"""Usually government-issued tax ID or business ID such as ABN in Australia"""
	taxIdentifier: String
}
"""
UpdatePersonalAccessTokenInput is used for update PersonalAccessToken object.
Input was generated by ent.
"""
input UpdatePersonalAccessTokenInput {
	updatedAt: Time
	createdBy: String
	clearCreatedBy: Boolean
	updatedBy: String
	clearUpdatedBy: Boolean
	name: String
	token: String
	abilities: [String!]
	appendAbilities: [String!]
	clearAbilities: Boolean
	expirationAt: Time
	lastUsedAt: Time
	clearLastUsedAt: Boolean
	userID: ID
}
"""
UpdateSessionInput is used for update Session object.
Input was generated by ent.
"""
input UpdateSessionInput {
	updatedAt: Time
	createdBy: String
	clearCreatedBy: Boolean
	updatedBy: String
	clearUpdatedBy: Boolean
	"""The session may be disabled by the user or by automatic security policy"""
	disabled: Boolean
	"""The last known user-agent"""
	userAgent: String
	clearUserAgent: Boolean
	"""All IPs that have been associated with this session. Reverse-chronological order. The current IP is the first item in the slice"""
	ips: String
	usersID: ID
	clearUsers: Boolean
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
	updatedAt: Time
	createdBy: String
	clearCreatedBy: Boolean
	updatedBy: String
	clearUpdatedBy: Boolean
	email: String
	firstName: String
	lastName: String
	"""The user's displayed 'friendly' name"""
	displayName: String
	"""user account is locked if unconfirmed or explicitly locked"""
	locked: Boolean
	"""URL of the user's remote avatar"""
	avatarRemoteURL: String
	clearAvatarRemoteURL: Boolean
	"""The user's local avatar file"""
	avatarLocalFile: String
	clearAvatarLocalFile: Boolean
	"""The time the user's (local) avatar was last updated"""
	avatarUpdatedAt: Time
	clearAvatarUpdatedAt: Boolean
	"""The time the user was silenced"""
	silencedAt: Time
	clearSilencedAt: Boolean
	"""The time the user was suspended"""
	suspendedAt: Time
	clearSuspendedAt: Boolean
	"""local Actor password recovery code generated during account creation"""
	recoveryCode: String
	clearRecoveryCode: Boolean
	addOrganizationIDs: [ID!]
	removeOrganizationIDs: [ID!]
	clearOrganizations: Boolean
	addSessionIDs: [ID!]
	removeSessionIDs: [ID!]
	clearSessions: Boolean
	addGroupIDs: [ID!]
	removeGroupIDs: [ID!]
	clearGroups: Boolean
	addPersonalAccessTokenIDs: [ID!]
	removePersonalAccessTokenIDs: [ID!]
	clearPersonalAccessTokens: Boolean
}
type User implements Node {
	id: ID!
	createdAt: Time!
	updatedAt: Time!
	createdBy: String
	updatedBy: String
	email: String!
	firstName: String!
	lastName: String!
	"""The user's displayed 'friendly' name"""
	displayName: String!
	"""user account is locked if unconfirmed or explicitly locked"""
	locked: Boolean!
	"""URL of the user's remote avatar"""
	avatarRemoteURL: String
	"""The user's local avatar file"""
	avatarLocalFile: String
	"""The time the user's (local) avatar was last updated"""
	avatarUpdatedAt: Time
	"""The time the user was silenced"""
	silencedAt: Time
	"""The time the user was suspended"""
	suspendedAt: Time
	organizations: [Organization!]
	sessions: [Session!]
	groups: [Group!]
	personalAccessTokens: [PersonalAccessToken!]
}
"""A connection to a list of items."""
type UserConnection {
	"""A list of edges."""
	edges: [UserEdge]
	"""Information to aid in pagination."""
	pageInfo: PageInfo!
	"""Identifies the total count of items in the connection."""
	totalCount: Int!
}
"""Return response for createUser mutation"""
type UserCreatePayload {
	"""Created user"""
	user: User!
}
"""Return response for deleteUser mutation"""
type UserDeletePayload {
	"""Deleted user ID"""
	deletedID: ID!
}
"""An edge in a connection."""
type UserEdge {
	"""The item at the end of the edge."""
	node: User
	"""A cursor for use in pagination."""
	cursor: Cursor!
}
"""Ordering options for User connections"""
input UserOrder {
	"""The ordering direction."""
	direction: OrderDirection! = ASC
	"""The field by which to order Users."""
	field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
	first_name
	last_name
	display_name
}
"""Return response for updateUser mutation"""
type UserUpdatePayload {
	"""Updated user"""
	user: User!
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
	not: UserWhereInput
	and: [UserWhereInput!]
	or: [UserWhereInput!]
	"""id field predicates"""
	id: ID
	idNEQ: ID
	idIn: [ID!]
	idNotIn: [ID!]
	idGT: ID
	idGTE: ID
	idLT: ID
	idLTE: ID
	idEqualFold: ID
	idContainsFold: ID
	"""created_at field predicates"""
	createdAt: Time
	createdAtNEQ: Time
	createdAtIn: [Time!]
	createdAtNotIn: [Time!]
	createdAtGT: Time
	createdAtGTE: Time
	createdAtLT: Time
	createdAtLTE: Time
	"""updated_at field predicates"""
	updatedAt: Time
	updatedAtNEQ: Time
	updatedAtIn: [Time!]
	updatedAtNotIn: [Time!]
	updatedAtGT: Time
	updatedAtGTE: Time
	updatedAtLT: Time
	updatedAtLTE: Time
	"""created_by field predicates"""
	createdBy: String
	createdByNEQ: String
	createdByIn: [String!]
	createdByNotIn: [String!]
	createdByGT: String
	createdByGTE: String
	createdByLT: String
	createdByLTE: String
	createdByContains: String
	createdByHasPrefix: String
	createdByHasSuffix: String
	createdByIsNil: Boolean
	createdByNotNil: Boolean
	createdByEqualFold: String
	createdByContainsFold: String
	"""updated_by field predicates"""
	updatedBy: String
	updatedByNEQ: String
	updatedByIn: [String!]
	updatedByNotIn: [String!]
	updatedByGT: String
	updatedByGTE: String
	updatedByLT: String
	updatedByLTE: String
	updatedByContains: String
	updatedByHasPrefix: String
	updatedByHasSuffix: String
	updatedByIsNil: Boolean
	updatedByNotNil: Boolean
	updatedByEqualFold: String
	updatedByContainsFold: String
	"""email field predicates"""
	email: String
	emailNEQ: String
	emailIn: [String!]
	emailNotIn: [String!]
	emailGT: String
	emailGTE: String
	emailLT: String
	emailLTE: String
	emailContains: String
	emailHasPrefix: String
	emailHasSuffix: String
	emailEqualFold: String
	emailContainsFold: String
	"""first_name field predicates"""
	firstName: String
	firstNameNEQ: String
	firstNameIn: [String!]
	firstNameNotIn: [String!]
	firstNameGT: String
	firstNameGTE: String
	firstNameLT: String
	firstNameLTE: String
	firstNameContains: String
	firstNameHasPrefix: String
	firstNameHasSuffix: String
	firstNameEqualFold: String
	firstNameContainsFold: String
	"""last_name field predicates"""
	lastName: String
	lastNameNEQ: String
	lastNameIn: [String!]
	lastNameNotIn: [String!]
	lastNameGT: String
	lastNameGTE: String
	lastNameLT: String
	lastNameLTE: String
	lastNameContains: String
	lastNameHasPrefix: String
	lastNameHasSuffix: String
	lastNameEqualFold: String
	lastNameContainsFold: String
	"""display_name field predicates"""
	displayName: String
	displayNameNEQ: String
	displayNameIn: [String!]
	displayNameNotIn: [String!]
	displayNameGT: String
	displayNameGTE: String
	displayNameLT: String
	displayNameLTE: String
	displayNameContains: String
	displayNameHasPrefix: String
	displayNameHasSuffix: String
	displayNameEqualFold: String
	displayNameContainsFold: String
	"""locked field predicates"""
	locked: Boolean
	lockedNEQ: Boolean
	"""avatar_remote_url field predicates"""
	avatarRemoteURL: String
	avatarRemoteURLNEQ: String
	avatarRemoteURLIn: [String!]
	avatarRemoteURLNotIn: [String!]
	avatarRemoteURLGT: String
	avatarRemoteURLGTE: String
	avatarRemoteURLLT: String
	avatarRemoteURLLTE: String
	avatarRemoteURLContains: String
	avatarRemoteURLHasPrefix: String
	avatarRemoteURLHasSuffix: String
	avatarRemoteURLIsNil: Boolean
	avatarRemoteURLNotNil: Boolean
	avatarRemoteURLEqualFold: String
	avatarRemoteURLContainsFold: String
	"""avatar_local_file field predicates"""
	avatarLocalFile: String
	avatarLocalFileNEQ: String
	avatarLocalFileIn: [String!]
	avatarLocalFileNotIn: [String!]
	avatarLocalFileGT: String
	avatarLocalFileGTE: String
	avatarLocalFileLT: String
	avatarLocalFileLTE: String
	avatarLocalFileContains: String
	avatarLocalFileHasPrefix: String
	avatarLocalFileHasSuffix: String
	avatarLocalFileIsNil: Boolean
	avatarLocalFileNotNil: Boolean
	avatarLocalFileEqualFold: String
	avatarLocalFileContainsFold: String
	"""avatar_updated_at field predicates"""
	avatarUpdatedAt: Time
	avatarUpdatedAtNEQ: Time
	avatarUpdatedAtIn: [Time!]
	avatarUpdatedAtNotIn: [Time!]
	avatarUpdatedAtGT: Time
	avatarUpdatedAtGTE: Time
	avatarUpdatedAtLT: Time
	avatarUpdatedAtLTE: Time
	avatarUpdatedAtIsNil: Boolean
	avatarUpdatedAtNotNil: Boolean
	"""silenced_at field predicates"""
	silencedAt: Time
	silencedAtNEQ: Time
	silencedAtIn: [Time!]
	silencedAtNotIn: [Time!]
	silencedAtGT: Time
	silencedAtGTE: Time
	silencedAtLT: Time
	silencedAtLTE: Time
	silencedAtIsNil: Boolean
	silencedAtNotNil: Boolean
	"""suspended_at field predicates"""
	suspendedAt: Time
	suspendedAtNEQ: Time
	suspendedAtIn: [Time!]
	suspendedAtNotIn: [Time!]
	suspendedAtGT: Time
	suspendedAtGTE: Time
	suspendedAtLT: Time
	suspendedAtLTE: Time
	suspendedAtIsNil: Boolean
	suspendedAtNotNil: Boolean
	"""organizations edge predicates"""
	hasOrganizations: Boolean
	hasOrganizationsWith: [OrganizationWhereInput!]
	"""sessions edge predicates"""
	hasSessions: Boolean
	hasSessionsWith: [SessionWhereInput!]
	"""groups edge predicates"""
	hasGroups: Boolean
	hasGroupsWith: [GroupWhereInput!]
	"""personal_access_tokens edge predicates"""
	hasPersonalAccessTokens: Boolean
	hasPersonalAccessTokensWith: [PersonalAccessTokenWhereInput!]
}
type _Service {
	sdl: String
}

extend schema
  @link(
    url: "https://specs.apollo.dev/federation/v2.3"
    import: [
      "@key",
      "@interfaceObject",
      "@shareable",
      "@inaccessible",
      "@override",
      "@provides",
      "@requires",
      "@tag"
    ]
  )
