type APIToken implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """a description of the token's purpose"""
  description: String
  """when the token expires"""
  expiresAt: Time
  id: ID!
  lastUsedAt: Time
  """the name associated with the token"""
  name: String!
  owner: Organization
  ownerID: ID
  scopes: [String!]
  """tags associated with the object"""
  tags: [String!]
  token: String!
  updatedAt: Time
  updatedBy: String
}

"""Return response for createBulkAPIToken mutation"""
type APITokenBulkCreatePayload {
  """Created apiTokens"""
  apiTokens: [APIToken!]
}

"""A connection to a list of items."""
type APITokenConnection {
  """A list of edges."""
  edges: [APITokenEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createAPIToken mutation"""
type APITokenCreatePayload {
  """Created apiToken"""
  apiToken: APIToken!
}

"""Return response for deleteAPIToken mutation"""
type APITokenDeletePayload {
  """Deleted apiToken ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type APITokenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: APIToken
}

"""Return response for updateAPIToken mutation"""
type APITokenUpdatePayload {
  """Updated apiToken"""
  apiToken: APIToken!
}

"""
APITokenWhereInput is used for filtering APIToken objects.
Input was generated by ent.
"""
input APITokenWhereInput {
  and: [APITokenWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """expires_at field predicates"""
  expiresAt: Time
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtIn: [Time!]
  expiresAtIsNil: Boolean
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtNEQ: Time
  expiresAtNotIn: [Time!]
  expiresAtNotNil: Boolean
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """last_used_at field predicates"""
  lastUsedAt: Time
  lastUsedAtGT: Time
  lastUsedAtGTE: Time
  lastUsedAtIn: [Time!]
  lastUsedAtIsNil: Boolean
  lastUsedAtLT: Time
  lastUsedAtLTE: Time
  lastUsedAtNEQ: Time
  lastUsedAtNotIn: [Time!]
  lastUsedAtNotNil: Boolean
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: APITokenWhereInput
  or: [APITokenWhereInput!]
  """owner_id field predicates"""
  ownerID: ID
  ownerIDContains: ID
  ownerIDContainsFold: ID
  ownerIDEqualFold: ID
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIn: [ID!]
  ownerIDIsNil: Boolean
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDNEQ: ID
  ownerIDNotIn: [ID!]
  ownerIDNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""
CreateAPITokenInput is used for create APIToken object.
Input was generated by ent.
"""
input CreateAPITokenInput {
  createdAt: Time
  createdBy: String
  """a description of the token's purpose"""
  description: String
  """when the token expires"""
  expiresAt: Time
  lastUsedAt: Time
  """the name associated with the token"""
  name: String!
  ownerID: ID
  scopes: [String!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""
CreateDocumentDataInput is used for create DocumentData object.
Input was generated by ent.
"""
input CreateDocumentDataInput {
  createdAt: Time
  createdBy: String
  """the json data of the document"""
  data: JSON!
  ownerID: ID
  """tags associated with the object"""
  tags: [String!]
  templateID: ID!
  updatedAt: Time
  updatedBy: String
}

"""
CreateEntitlementInput is used for create Entitlement object.
Input was generated by ent.
"""
input CreateEntitlementInput {
  """whether or not the customer has cancelled their entitlement - usually used in conjunction with expires and expires at"""
  cancelled: Boolean
  createdAt: Time
  createdBy: String
  eventIDs: [ID!]
  """whether or not the customers entitlement expires - expires_at will show the time"""
  expires: Boolean
  """the time at which a customer's entitlement will expire, e.g. they've cancelled but paid through the end of the month"""
  expiresAt: Time
  """used to store references to external systems, e.g. Stripe"""
  externalCustomerID: String
  """used to store references to external systems, e.g. Stripe"""
  externalSubscriptionID: String
  featureIDs: [ID!]
  ownerID: ID
  """tags associated with the object"""
  tags: [String!]
  tier: EntitlementTier
  updatedAt: Time
  updatedBy: String
}

"""
CreateEventInput is used for create Event object.
Input was generated by ent.
"""
input CreateEventInput {
  correlationID: String
  createdAt: Time
  createdBy: String
  entitlementIDs: [ID!]
  eventID: String
  eventType: String!
  featureIDs: [ID!]
  groupIDs: [ID!]
  hushIDs: [ID!]
  integrationIDs: [ID!]
  inviteIDs: [ID!]
  metadata: Map
  oauth2tokenIDs: [ID!]
  organizationIDs: [ID!]
  personalAccessTokenIDs: [ID!]
  subscriberIDs: [ID!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  userIDs: [ID!]
  webhookIDs: [ID!]
}

"""
CreateFeatureInput is used for create Feature object.
Input was generated by ent.
"""
input CreateFeatureInput {
  createdAt: Time
  createdBy: String
  description: String
  enabled: Boolean
  entitlementIDs: [ID!]
  eventIDs: [ID!]
  global: Boolean
  groupIDs: [ID!]
  name: String!
  organizationIDs: [ID!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  userIDs: [ID!]
}

"""
CreateFileInput is used for create File object.
Input was generated by ent.
"""
input CreateFileInput {
  annotation: String
  category: String
  contentType: String!
  createdAt: Time
  createdBy: String
  fileExtension: String!
  fileName: String!
  fileSize: Int
  groupIDs: [ID!]
  organizationIDs: [ID!]
  storeKey: String!
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  userID: ID
}

"""
CreateGroupInput is used for create Group object.
Input was generated by ent.
"""
input CreateGroupInput {
  createdAt: Time
  createdBy: String
  createGroupSettings: CreateGroupSettingInput
  """the groups description"""
  description: String
  """The group's displayed 'friendly' name"""
  displayName: String
  eventIDs: [ID!]
  featureIDs: [ID!]
  fileIDs: [ID!]
  """the URL to an auto generated gravatar image for the group"""
  gravatarLogoURL: String
  integrationIDs: [ID!]
  """the URL to an image uploaded by the customer for the groups avatar image"""
  logoURL: String
  """the name of the group - must be unique within the organization"""
  name: String!
  ownerID: ID
  settingID: ID!
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  userIDs: [ID!]
}

"""
CreateGroupMembershipInput is used for create GroupMembership object.
Input was generated by ent.
"""
input CreateGroupMembershipInput {
  createdAt: Time
  createdBy: String
  eventIDs: [ID!]
  groupID: ID!
  role: GroupMembershipRole
  updatedAt: Time
  updatedBy: String
  userID: ID!
}

"""
CreateGroupSettingInput is used for create GroupSetting object.
Input was generated by ent.
"""
input CreateGroupSettingInput {
  createdAt: Time
  createdBy: String
  groupID: ID
  """the policy governing ability to freely join a group, whether it requires an invitation, application, or either"""
  joinPolicy: GroupSettingJoinPolicy
  """whether to sync group members to github groups"""
  syncToGithub: Boolean
  """whether to sync group members to slack groups"""
  syncToSlack: Boolean
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  """whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization"""
  visibility: GroupSettingVisibility
}

"""
CreateHushInput is used for create Hush object.
Input was generated by ent.
"""
input CreateHushInput {
  createdAt: Time
  createdBy: String
  """a description of the hush value or purpose, such as github PAT"""
  description: String
  eventIDs: [ID!]
  integrationIDs: [ID!]
  """the kind of secret, such as sshkey, certificate, api token, etc."""
  kind: String
  """the logical name of the corresponding hush secret or it's general grouping"""
  name: String!
  organizationIDs: [ID!]
  """the generic name of a secret associated with the organization"""
  secretName: String
  """the secret value"""
  secretValue: String
  updatedAt: Time
  updatedBy: String
}

"""
CreateIntegrationInput is used for create Integration object.
Input was generated by ent.
"""
input CreateIntegrationInput {
  createdAt: Time
  createdBy: String
  """a description of the integration"""
  description: String
  eventIDs: [ID!]
  kind: String
  """the name of the integration - must be unique within the organization"""
  name: String!
  oauth2tokenIDs: [ID!]
  ownerID: ID
  secretIDs: [ID!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  webhookIDs: [ID!]
}

"""
CreateInviteInput is used for create Invite object.
Input was generated by ent.
"""
input CreateInviteInput {
  createdAt: Time
  createdBy: String
  eventIDs: [ID!]
  """the expiration date of the invitation token which defaults to 14 days in the future from creation"""
  expires: Time!
  ownerID: ID
  """the email used as input to generate the invitation token and is the destination person the invitation is sent to who is required to accept to join the organization"""
  recipient: String!
  """the user who initiated the invitation"""
  requestorID: String!
  role: InviteRole
  """the number of attempts made to perform email send of the invitation, maximum of 5"""
  sendAttempts: Int
  """the status of the invitation"""
  status: InviteInviteStatus
  updatedAt: Time
  updatedBy: String
}

"""
CreateOauthProviderInput is used for create OauthProvider object.
Input was generated by ent.
"""
input CreateOauthProviderInput {
  """the auth style, 0: auto detect 1: third party log in 2: log in with username and password"""
  authStyle: Uint!
  """the auth url of the provider"""
  authURL: String!
  """the client id for the oauth provider"""
  clientID: String!
  """the client secret"""
  clientSecret: String!
  createdAt: Time
  createdBy: String
  """the URL to request user information by token"""
  infoURL: String!
  """the oauth provider's name"""
  name: String!
  ownerID: ID
  """the redirect url"""
  redirectURL: String!
  """the scopes"""
  scopes: String!
  """tags associated with the object"""
  tags: [String!]
  """the token url of the provider"""
  tokenURL: String!
  updatedAt: Time
  updatedBy: String
}

"""
CreateOhAuthTooTokenInput is used for create OhAuthTooToken object.
Input was generated by ent.
"""
input CreateOhAuthTooTokenInput {
  claimsEmail: String!
  claimsEmailVerified: Boolean!
  claimsGroups: [String!]
  claimsPreferredUsername: String!
  claimsUserID: String!
  claimsUsername: String!
  clientID: String!
  connectorData: [String!]
  connectorID: String!
  eventIDs: [ID!]
  integrationIDs: [ID!]
  lastUsed: Time
  nonce: String!
  scopes: [String!]
  """tags associated with the object"""
  tags: [String!]
}

"""
CreateOrganizationInput is used for create Organization object.
Input was generated by ent.
"""
input CreateOrganizationInput {
  apiTokenIDs: [ID!]
  """URL of the user's remote avatar"""
  avatarRemoteURL: String
  createdAt: Time
  createdBy: String
  createOrgSettings: CreateOrganizationSettingInput
  """Whether the organization has a dedicated database"""
  dedicatedDb: Boolean
  """An optional description of the organization"""
  description: String
  """The organization's displayed 'friendly' name"""
  displayName: String
  documentdatumIDs: [ID!]
  entitlementIDs: [ID!]
  eventIDs: [ID!]
  featureIDs: [ID!]
  fileIDs: [ID!]
  groupIDs: [ID!]
  integrationIDs: [ID!]
  inviteIDs: [ID!]
  """the name of the organization"""
  name: String!
  oauthproviderIDs: [ID!]
  parentID: ID
  personalAccessTokenIDs: [ID!]
  """orgs directly associated with a user"""
  personalOrg: Boolean
  secretIDs: [ID!]
  settingID: ID
  subscriberIDs: [ID!]
  """tags associated with the object"""
  tags: [String!]
  templateIDs: [ID!]
  updatedAt: Time
  updatedBy: String
  userIDs: [ID!]
  webhookIDs: [ID!]
}

"""
CreateOrganizationSettingInput is used for create OrganizationSetting object.
Input was generated by ent.
"""
input CreateOrganizationSettingInput {
  """Address to send billing information to"""
  billingAddress: String
  """Name of the person to contact for billing"""
  billingContact: String
  """Email address of the person to contact for billing"""
  billingEmail: String
  """Phone number to contact for billing"""
  billingPhone: String
  createdAt: Time
  createdBy: String
  """domains associated with the organization"""
  domains: [String!]
  """geographical location of the organization"""
  geoLocation: OrganizationSettingRegion
  organizationID: ID
  """tags associated with the object"""
  tags: [String!]
  """Usually government-issued tax ID or business ID such as ABN in Australia"""
  taxIdentifier: String
  updatedAt: Time
  updatedBy: String
}

"""
CreateOrgMembershipInput is used for create OrgMembership object.
Input was generated by ent.
"""
input CreateOrgMembershipInput {
  createdAt: Time
  createdBy: String
  eventIDs: [ID!]
  organizationID: ID!
  role: OrgMembershipRole
  updatedAt: Time
  updatedBy: String
  userID: ID!
}

"""
CreatePersonalAccessTokenInput is used for create PersonalAccessToken object.
Input was generated by ent.
"""
input CreatePersonalAccessTokenInput {
  createdAt: Time
  createdBy: String
  """a description of the token's purpose"""
  description: String
  eventIDs: [ID!]
  """when the token expires"""
  expiresAt: Time!
  lastUsedAt: Time
  """the name associated with the token"""
  name: String!
  organizationIDs: [ID!]
  ownerID: ID!
  scopes: [String!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""
CreateSubscriberInput is used for create Subscriber object.
Input was generated by ent.
"""
input CreateSubscriberInput {
  createdAt: Time
  createdBy: String
  """email address of the subscriber"""
  email: String!
  eventIDs: [ID!]
  ownerID: ID
  """phone number of the subscriber"""
  phoneNumber: String
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""
CreateTemplateInput is used for create Template object.
Input was generated by ent.
"""
input CreateTemplateInput {
  createdAt: Time
  createdBy: String
  """the description of the template"""
  description: String
  documentIDs: [ID!]
  """the jsonschema object of the template"""
  jsonconfig: JSON!
  """the name of the template"""
  name: String!
  ownerID: ID
  """tags associated with the object"""
  tags: [String!]
  """the type of the template, either a provided template or an implementation (document)"""
  templateType: TemplateDocumentType
  """the uischema for the template to render in the UI"""
  uischema: JSON
  updatedAt: Time
  updatedBy: String
}

"""
CreateTFASettingInput is used for create TFASetting object.
Input was generated by ent.
"""
input CreateTFASettingInput {
  createdAt: Time
  createdBy: String
  ownerID: ID
  """tags associated with the object"""
  tags: [String!]
  """specifies a user may complete authentication by verifying a TOTP code delivered through an authenticator app"""
  totpAllowed: Boolean
  updatedAt: Time
  updatedBy: String
}

"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  """auth provider used to register the account"""
  authProvider: UserAuthProvider
  """The user's local avatar file"""
  avatarLocalFile: String
  """URL of the user's remote avatar"""
  avatarRemoteURL: String
  """The time the user's (local) avatar was last updated"""
  avatarUpdatedAt: Time
  createdAt: Time
  createdBy: String
  """The user's displayed 'friendly' name"""
  displayName: String!
  email: String!
  emailVerificationTokenIDs: [ID!]
  eventIDs: [ID!]
  featureIDs: [ID!]
  fileIDs: [ID!]
  firstName: String
  groupIDs: [ID!]
  lastName: String
  """the time the user was last seen"""
  lastSeen: Time
  organizationIDs: [ID!]
  """user password hash"""
  password: String
  passwordResetTokenIDs: [ID!]
  personalAccessTokenIDs: [ID!]
  """the user's role"""
  role: UserRole
  settingID: ID!
  """the Subject of the user JWT"""
  sub: String
  """tags associated with the object"""
  tags: [String!]
  tfaSettingIDs: [ID!]
  updatedAt: Time
  updatedBy: String
  webauthnIDs: [ID!]
}

"""
CreateUserSettingInput is used for create UserSetting object.
Input was generated by ent.
"""
input CreateUserSettingInput {
  createdAt: Time
  createdBy: String
  defaultOrgID: ID
  """whether the user has confirmed their email address"""
  emailConfirmed: Boolean
  """whether the user has two factor authentication enabled"""
  isTfaEnabled: Boolean
  """specifies a user may complete authentication by verifying a WebAuthn capable device"""
  isWebauthnAllowed: Boolean
  """user account is locked if unconfirmed or explicitly locked"""
  locked: Boolean
  """The time notifications regarding the user were silenced"""
  silencedAt: Time
  """status of the user account"""
  status: UserSettingUserStatus
  """The time the user was suspended"""
  suspendedAt: Time
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  userID: ID
}

"""
CreateWebhookInput is used for create Webhook object.
Input was generated by ent.
"""
input CreateWebhookInput {
  createdAt: Time
  createdBy: String
  """a description of the webhook"""
  description: String
  """the url to send the webhook to"""
  destinationURL: String!
  """indicates if the webhook is active and enabled"""
  enabled: Boolean
  eventIDs: [ID!]
  """the number of failures"""
  failures: Int
  integrationIDs: [ID!]
  """the last error message"""
  lastError: String
  """the last response"""
  lastResponse: String
  """the name of the webhook"""
  name: String!
  ownerID: ID
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor

type DocumentData implements Node {
  createdAt: Time
  createdBy: String
  """the json data of the document"""
  data: JSON!
  deletedAt: Time
  deletedBy: String
  id: ID!
  owner: Organization
  ownerID: ID
  """tags associated with the object"""
  tags: [String!]
  template: Template!
  """the template id of the document"""
  templateID: ID!
  updatedAt: Time
  updatedBy: String
}

"""Return response for createBulkDocumentData mutation"""
type DocumentDataBulkCreatePayload {
  """Created documentData"""
  documentData: [DocumentData!]
}

"""A connection to a list of items."""
type DocumentDataConnection {
  """A list of edges."""
  edges: [DocumentDataEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createDocumentData mutation"""
type DocumentDataCreatePayload {
  """Created documentData"""
  documentData: DocumentData!
}

"""Return response for deleteDocumentData mutation"""
type DocumentDataDeletePayload {
  """Deleted documentData ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type DocumentDataEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: DocumentData
}

type DocumentDataHistory implements Node {
  createdAt: Time
  createdBy: String
  """the json data of the document"""
  data: JSON!
  deletedAt: Time
  deletedBy: String
  historyTime: Time!
  id: ID!
  operation: DocumentDataHistoryOpType!
  ownerID: String
  ref: String
  """tags associated with the object"""
  tags: [String!]
  """the template id of the document"""
  templateID: String!
  updatedAt: Time
  updatedBy: String
}

"""A connection to a list of items."""
type DocumentDataHistoryConnection {
  """A list of edges."""
  edges: [DocumentDataHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type DocumentDataHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: DocumentDataHistory
}

"""DocumentDataHistoryOpType is enum for the field operation"""
enum DocumentDataHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""
DocumentDataHistoryWhereInput is used for filtering DocumentDataHistory objects.
Input was generated by ent.
"""
input DocumentDataHistoryWhereInput {
  and: [DocumentDataHistoryWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: DocumentDataHistoryWhereInput
  """operation field predicates"""
  operation: DocumentDataHistoryOpType
  operationIn: [DocumentDataHistoryOpType!]
  operationNEQ: DocumentDataHistoryOpType
  operationNotIn: [DocumentDataHistoryOpType!]
  or: [DocumentDataHistoryWhereInput!]
  """owner_id field predicates"""
  ownerID: String
  ownerIDContains: String
  ownerIDContainsFold: String
  ownerIDEqualFold: String
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIn: [String!]
  ownerIDIsNil: Boolean
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDNEQ: String
  ownerIDNotIn: [String!]
  ownerIDNotNil: Boolean
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """template_id field predicates"""
  templateID: String
  templateIDContains: String
  templateIDContainsFold: String
  templateIDEqualFold: String
  templateIDGT: String
  templateIDGTE: String
  templateIDHasPrefix: String
  templateIDHasSuffix: String
  templateIDIn: [String!]
  templateIDLT: String
  templateIDLTE: String
  templateIDNEQ: String
  templateIDNotIn: [String!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""Return response for updateDocumentData mutation"""
type DocumentDataUpdatePayload {
  """Updated documentData"""
  documentData: DocumentData!
}

"""
DocumentDataWhereInput is used for filtering DocumentData objects.
Input was generated by ent.
"""
input DocumentDataWhereInput {
  and: [DocumentDataWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """template edge predicates"""
  hasTemplate: Boolean
  hasTemplateWith: [TemplateWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: DocumentDataWhereInput
  or: [DocumentDataWhereInput!]
  """owner_id field predicates"""
  ownerID: ID
  ownerIDContains: ID
  ownerIDContainsFold: ID
  ownerIDEqualFold: ID
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIn: [ID!]
  ownerIDIsNil: Boolean
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDNEQ: ID
  ownerIDNotIn: [ID!]
  ownerIDNotNil: Boolean
  """template_id field predicates"""
  templateID: ID
  templateIDContains: ID
  templateIDContainsFold: ID
  templateIDEqualFold: ID
  templateIDGT: ID
  templateIDGTE: ID
  templateIDHasPrefix: ID
  templateIDHasSuffix: ID
  templateIDIn: [ID!]
  templateIDLT: ID
  templateIDLTE: ID
  templateIDNEQ: ID
  templateIDNotIn: [ID!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

type Dummy {
  done: Boolean!
  id: ID!
  text: String!
}

type Entitlement implements Node {
  """whether or not the customer has cancelled their entitlement - usually used in conjunction with expires and expires at"""
  cancelled: Boolean!
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  events: [Event!]
  """whether or not the customers entitlement expires - expires_at will show the time"""
  expires: Boolean!
  """the time at which a customer's entitlement will expire, e.g. they've cancelled but paid through the end of the month"""
  expiresAt: Time
  """used to store references to external systems, e.g. Stripe"""
  externalCustomerID: String
  """used to store references to external systems, e.g. Stripe"""
  externalSubscriptionID: String
  features: [Feature!]
  id: ID!
  owner: Organization
  ownerID: ID
  """tags associated with the object"""
  tags: [String!]
  tier: EntitlementTier!
  updatedAt: Time
  updatedBy: String
}

"""Return response for createBulkEntitlement mutation"""
type EntitlementBulkCreatePayload {
  """Created entitlements"""
  entitlements: [Entitlement!]
}

"""A connection to a list of items."""
type EntitlementConnection {
  """A list of edges."""
  edges: [EntitlementEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createEntitlement mutation"""
type EntitlementCreatePayload {
  """Created entitlement"""
  entitlement: Entitlement!
}

"""Return response for deleteEntitlement mutation"""
type EntitlementDeletePayload {
  """Deleted entitlement ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type EntitlementEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Entitlement
}

type EntitlementHistory implements Node {
  """whether or not the customer has cancelled their entitlement - usually used in conjunction with expires and expires at"""
  cancelled: Boolean!
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """whether or not the customers entitlement expires - expires_at will show the time"""
  expires: Boolean!
  """the time at which a customer's entitlement will expire, e.g. they've cancelled but paid through the end of the month"""
  expiresAt: Time
  """used to store references to external systems, e.g. Stripe"""
  externalCustomerID: String
  """used to store references to external systems, e.g. Stripe"""
  externalSubscriptionID: String
  historyTime: Time!
  id: ID!
  operation: EntitlementHistoryOpType!
  ownerID: String
  ref: String
  """tags associated with the object"""
  tags: [String!]
  tier: EntitlementHistoryTier!
  updatedAt: Time
  updatedBy: String
}

"""A connection to a list of items."""
type EntitlementHistoryConnection {
  """A list of edges."""
  edges: [EntitlementHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type EntitlementHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: EntitlementHistory
}

"""EntitlementHistoryOpType is enum for the field operation"""
enum EntitlementHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""EntitlementHistoryTier is enum for the field tier"""
enum EntitlementHistoryTier @goModel(model: "github.com/datumforge/datum/internal/ent/enums.Tier") {
  FREE
  PRO
  ENTERPRISE
}

"""
EntitlementHistoryWhereInput is used for filtering EntitlementHistory objects.
Input was generated by ent.
"""
input EntitlementHistoryWhereInput {
  and: [EntitlementHistoryWhereInput!]
  """cancelled field predicates"""
  cancelled: Boolean
  cancelledNEQ: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """expires field predicates"""
  expires: Boolean
  """expires_at field predicates"""
  expiresAt: Time
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtIn: [Time!]
  expiresAtIsNil: Boolean
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtNEQ: Time
  expiresAtNotIn: [Time!]
  expiresAtNotNil: Boolean
  expiresNEQ: Boolean
  """external_customer_id field predicates"""
  externalCustomerID: String
  externalCustomerIDContains: String
  externalCustomerIDContainsFold: String
  externalCustomerIDEqualFold: String
  externalCustomerIDGT: String
  externalCustomerIDGTE: String
  externalCustomerIDHasPrefix: String
  externalCustomerIDHasSuffix: String
  externalCustomerIDIn: [String!]
  externalCustomerIDIsNil: Boolean
  externalCustomerIDLT: String
  externalCustomerIDLTE: String
  externalCustomerIDNEQ: String
  externalCustomerIDNotIn: [String!]
  externalCustomerIDNotNil: Boolean
  """external_subscription_id field predicates"""
  externalSubscriptionID: String
  externalSubscriptionIDContains: String
  externalSubscriptionIDContainsFold: String
  externalSubscriptionIDEqualFold: String
  externalSubscriptionIDGT: String
  externalSubscriptionIDGTE: String
  externalSubscriptionIDHasPrefix: String
  externalSubscriptionIDHasSuffix: String
  externalSubscriptionIDIn: [String!]
  externalSubscriptionIDIsNil: Boolean
  externalSubscriptionIDLT: String
  externalSubscriptionIDLTE: String
  externalSubscriptionIDNEQ: String
  externalSubscriptionIDNotIn: [String!]
  externalSubscriptionIDNotNil: Boolean
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: EntitlementHistoryWhereInput
  """operation field predicates"""
  operation: EntitlementHistoryOpType
  operationIn: [EntitlementHistoryOpType!]
  operationNEQ: EntitlementHistoryOpType
  operationNotIn: [EntitlementHistoryOpType!]
  or: [EntitlementHistoryWhereInput!]
  """owner_id field predicates"""
  ownerID: String
  ownerIDContains: String
  ownerIDContainsFold: String
  ownerIDEqualFold: String
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIn: [String!]
  ownerIDIsNil: Boolean
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDNEQ: String
  ownerIDNotIn: [String!]
  ownerIDNotNil: Boolean
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """tier field predicates"""
  tier: EntitlementHistoryTier
  tierIn: [EntitlementHistoryTier!]
  tierNEQ: EntitlementHistoryTier
  tierNotIn: [EntitlementHistoryTier!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""EntitlementTier is enum for the field tier"""
enum EntitlementTier @goModel(model: "github.com/datumforge/datum/internal/ent/enums.Tier") {
  FREE
  PRO
  ENTERPRISE
}

"""Return response for updateEntitlement mutation"""
type EntitlementUpdatePayload {
  """Updated entitlement"""
  entitlement: Entitlement!
}

"""
EntitlementWhereInput is used for filtering Entitlement objects.
Input was generated by ent.
"""
input EntitlementWhereInput {
  and: [EntitlementWhereInput!]
  """cancelled field predicates"""
  cancelled: Boolean
  cancelledNEQ: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """expires field predicates"""
  expires: Boolean
  """expires_at field predicates"""
  expiresAt: Time
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtIn: [Time!]
  expiresAtIsNil: Boolean
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtNEQ: Time
  expiresAtNotIn: [Time!]
  expiresAtNotNil: Boolean
  expiresNEQ: Boolean
  """external_customer_id field predicates"""
  externalCustomerID: String
  externalCustomerIDContains: String
  externalCustomerIDContainsFold: String
  externalCustomerIDEqualFold: String
  externalCustomerIDGT: String
  externalCustomerIDGTE: String
  externalCustomerIDHasPrefix: String
  externalCustomerIDHasSuffix: String
  externalCustomerIDIn: [String!]
  externalCustomerIDIsNil: Boolean
  externalCustomerIDLT: String
  externalCustomerIDLTE: String
  externalCustomerIDNEQ: String
  externalCustomerIDNotIn: [String!]
  externalCustomerIDNotNil: Boolean
  """external_subscription_id field predicates"""
  externalSubscriptionID: String
  externalSubscriptionIDContains: String
  externalSubscriptionIDContainsFold: String
  externalSubscriptionIDEqualFold: String
  externalSubscriptionIDGT: String
  externalSubscriptionIDGTE: String
  externalSubscriptionIDHasPrefix: String
  externalSubscriptionIDHasSuffix: String
  externalSubscriptionIDIn: [String!]
  externalSubscriptionIDIsNil: Boolean
  externalSubscriptionIDLT: String
  externalSubscriptionIDLTE: String
  externalSubscriptionIDNEQ: String
  externalSubscriptionIDNotIn: [String!]
  externalSubscriptionIDNotNil: Boolean
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """features edge predicates"""
  hasFeatures: Boolean
  hasFeaturesWith: [FeatureWhereInput!]
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: EntitlementWhereInput
  or: [EntitlementWhereInput!]
  """owner_id field predicates"""
  ownerID: ID
  ownerIDContains: ID
  ownerIDContainsFold: ID
  ownerIDEqualFold: ID
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIn: [ID!]
  ownerIDIsNil: Boolean
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDNEQ: ID
  ownerIDNotIn: [ID!]
  ownerIDNotNil: Boolean
  """tier field predicates"""
  tier: EntitlementTier
  tierIn: [EntitlementTier!]
  tierNEQ: EntitlementTier
  tierNotIn: [EntitlementTier!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

type Event implements Node {
  correlationID: String
  createdAt: Time
  createdBy: String
  entitlement: [Entitlement!]
  eventID: String
  eventType: String!
  feature: [Feature!]
  group: [Group!]
  groupmembership: [GroupMembership!]
  hush: [Hush!]
  id: ID!
  integration: [Integration!]
  invite: [Invite!]
  metadata: Map
  oauth2token: [OhAuthTooToken!]
  organization: [Organization!]
  orgmembership: [OrgMembership!]
  personalAccessToken: [PersonalAccessToken!]
  subscriber: [Subscriber!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  user: [User!]
  webhook: [Webhook!]
}

"""Return response for createBulkEvent mutation"""
type EventBulkCreatePayload {
  """Created events"""
  events: [Event!]
}

"""A connection to a list of items."""
type EventConnection {
  """A list of edges."""
  edges: [EventEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createEvent mutation"""
type EventCreatePayload {
  """Created event"""
  event: Event!
}

"""Return response for deleteEvent mutation"""
type EventDeletePayload {
  """Deleted event ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type EventEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Event
}

type EventHistory implements Node {
  correlationID: String
  createdAt: Time
  createdBy: String
  eventID: String
  eventType: String!
  historyTime: Time!
  id: ID!
  metadata: Map
  operation: EventHistoryOpType!
  ref: String
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""A connection to a list of items."""
type EventHistoryConnection {
  """A list of edges."""
  edges: [EventHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type EventHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: EventHistory
}

"""EventHistoryOpType is enum for the field operation"""
enum EventHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""
EventHistoryWhereInput is used for filtering EventHistory objects.
Input was generated by ent.
"""
input EventHistoryWhereInput {
  and: [EventHistoryWhereInput!]
  """correlation_id field predicates"""
  correlationID: String
  correlationIDContains: String
  correlationIDContainsFold: String
  correlationIDEqualFold: String
  correlationIDGT: String
  correlationIDGTE: String
  correlationIDHasPrefix: String
  correlationIDHasSuffix: String
  correlationIDIn: [String!]
  correlationIDIsNil: Boolean
  correlationIDLT: String
  correlationIDLTE: String
  correlationIDNEQ: String
  correlationIDNotIn: [String!]
  correlationIDNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """event_id field predicates"""
  eventID: String
  eventIDContains: String
  eventIDContainsFold: String
  eventIDEqualFold: String
  eventIDGT: String
  eventIDGTE: String
  eventIDHasPrefix: String
  eventIDHasSuffix: String
  eventIDIn: [String!]
  eventIDIsNil: Boolean
  eventIDLT: String
  eventIDLTE: String
  eventIDNEQ: String
  eventIDNotIn: [String!]
  eventIDNotNil: Boolean
  """event_type field predicates"""
  eventType: String
  eventTypeContains: String
  eventTypeContainsFold: String
  eventTypeEqualFold: String
  eventTypeGT: String
  eventTypeGTE: String
  eventTypeHasPrefix: String
  eventTypeHasSuffix: String
  eventTypeIn: [String!]
  eventTypeLT: String
  eventTypeLTE: String
  eventTypeNEQ: String
  eventTypeNotIn: [String!]
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: EventHistoryWhereInput
  """operation field predicates"""
  operation: EventHistoryOpType
  operationIn: [EventHistoryOpType!]
  operationNEQ: EventHistoryOpType
  operationNotIn: [EventHistoryOpType!]
  or: [EventHistoryWhereInput!]
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""Return response for updateEvent mutation"""
type EventUpdatePayload {
  """Updated event"""
  event: Event!
}

"""
EventWhereInput is used for filtering Event objects.
Input was generated by ent.
"""
input EventWhereInput {
  and: [EventWhereInput!]
  """correlation_id field predicates"""
  correlationID: String
  correlationIDContains: String
  correlationIDContainsFold: String
  correlationIDEqualFold: String
  correlationIDGT: String
  correlationIDGTE: String
  correlationIDHasPrefix: String
  correlationIDHasSuffix: String
  correlationIDIn: [String!]
  correlationIDIsNil: Boolean
  correlationIDLT: String
  correlationIDLTE: String
  correlationIDNEQ: String
  correlationIDNotIn: [String!]
  correlationIDNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """event_id field predicates"""
  eventID: String
  eventIDContains: String
  eventIDContainsFold: String
  eventIDEqualFold: String
  eventIDGT: String
  eventIDGTE: String
  eventIDHasPrefix: String
  eventIDHasSuffix: String
  eventIDIn: [String!]
  eventIDIsNil: Boolean
  eventIDLT: String
  eventIDLTE: String
  eventIDNEQ: String
  eventIDNotIn: [String!]
  eventIDNotNil: Boolean
  """event_type field predicates"""
  eventType: String
  eventTypeContains: String
  eventTypeContainsFold: String
  eventTypeEqualFold: String
  eventTypeGT: String
  eventTypeGTE: String
  eventTypeHasPrefix: String
  eventTypeHasSuffix: String
  eventTypeIn: [String!]
  eventTypeLT: String
  eventTypeLTE: String
  eventTypeNEQ: String
  eventTypeNotIn: [String!]
  """entitlement edge predicates"""
  hasEntitlement: Boolean
  hasEntitlementWith: [EntitlementWhereInput!]
  """feature edge predicates"""
  hasFeature: Boolean
  hasFeatureWith: [FeatureWhereInput!]
  """group edge predicates"""
  hasGroup: Boolean
  """groupmembership edge predicates"""
  hasGroupmembership: Boolean
  hasGroupmembershipWith: [GroupMembershipWhereInput!]
  hasGroupWith: [GroupWhereInput!]
  """hush edge predicates"""
  hasHush: Boolean
  hasHushWith: [HushWhereInput!]
  """integration edge predicates"""
  hasIntegration: Boolean
  hasIntegrationWith: [IntegrationWhereInput!]
  """invite edge predicates"""
  hasInvite: Boolean
  hasInviteWith: [InviteWhereInput!]
  """oauth2token edge predicates"""
  hasOauth2token: Boolean
  hasOauth2tokenWith: [OhAuthTooTokenWhereInput!]
  """organization edge predicates"""
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
  """orgmembership edge predicates"""
  hasOrgmembership: Boolean
  hasOrgmembershipWith: [OrgMembershipWhereInput!]
  """personal_access_token edge predicates"""
  hasPersonalAccessToken: Boolean
  hasPersonalAccessTokenWith: [PersonalAccessTokenWhereInput!]
  """subscriber edge predicates"""
  hasSubscriber: Boolean
  hasSubscriberWith: [SubscriberWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """webhook edge predicates"""
  hasWebhook: Boolean
  hasWebhookWith: [WebhookWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: EventWhereInput
  or: [EventWhereInput!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

type Feature implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  description: String
  enabled: Boolean!
  entitlements: [Entitlement!]
  events: [Event!]
  global: Boolean!
  groups: [Group!]
  id: ID!
  name: String!
  organizations: [Organization!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  users: [User!]
}

"""Return response for createBulkFeature mutation"""
type FeatureBulkCreatePayload {
  """Created features"""
  features: [Feature!]
}

"""A connection to a list of items."""
type FeatureConnection {
  """A list of edges."""
  edges: [FeatureEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createFeature mutation"""
type FeatureCreatePayload {
  """Created feature"""
  feature: Feature!
}

"""Return response for deleteFeature mutation"""
type FeatureDeletePayload {
  """Deleted feature ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type FeatureEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Feature
}

type FeatureHistory implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  description: String
  enabled: Boolean!
  global: Boolean!
  historyTime: Time!
  id: ID!
  name: String!
  operation: FeatureHistoryOpType!
  ref: String
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""A connection to a list of items."""
type FeatureHistoryConnection {
  """A list of edges."""
  edges: [FeatureHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type FeatureHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: FeatureHistory
}

"""FeatureHistoryOpType is enum for the field operation"""
enum FeatureHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""
FeatureHistoryWhereInput is used for filtering FeatureHistory objects.
Input was generated by ent.
"""
input FeatureHistoryWhereInput {
  and: [FeatureHistoryWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """description field predicates"""
  description: String
  descriptionContains: String
  descriptionContainsFold: String
  descriptionEqualFold: String
  descriptionGT: String
  descriptionGTE: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIn: [String!]
  descriptionIsNil: Boolean
  descriptionLT: String
  descriptionLTE: String
  descriptionNEQ: String
  descriptionNotIn: [String!]
  descriptionNotNil: Boolean
  """enabled field predicates"""
  enabled: Boolean
  enabledNEQ: Boolean
  """global field predicates"""
  global: Boolean
  globalNEQ: Boolean
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: FeatureHistoryWhereInput
  """operation field predicates"""
  operation: FeatureHistoryOpType
  operationIn: [FeatureHistoryOpType!]
  operationNEQ: FeatureHistoryOpType
  operationNotIn: [FeatureHistoryOpType!]
  or: [FeatureHistoryWhereInput!]
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""Return response for updateFeature mutation"""
type FeatureUpdatePayload {
  """Updated feature"""
  feature: Feature!
}

"""
FeatureWhereInput is used for filtering Feature objects.
Input was generated by ent.
"""
input FeatureWhereInput {
  and: [FeatureWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """description field predicates"""
  description: String
  descriptionContains: String
  descriptionContainsFold: String
  descriptionEqualFold: String
  descriptionGT: String
  descriptionGTE: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIn: [String!]
  descriptionIsNil: Boolean
  descriptionLT: String
  descriptionLTE: String
  descriptionNEQ: String
  descriptionNotIn: [String!]
  descriptionNotNil: Boolean
  """enabled field predicates"""
  enabled: Boolean
  enabledNEQ: Boolean
  """global field predicates"""
  global: Boolean
  globalNEQ: Boolean
  """entitlements edge predicates"""
  hasEntitlements: Boolean
  hasEntitlementsWith: [EntitlementWhereInput!]
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """groups edge predicates"""
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """organizations edge predicates"""
  hasOrganizations: Boolean
  hasOrganizationsWith: [OrganizationWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: FeatureWhereInput
  or: [FeatureWhereInput!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

type File implements Node {
  annotation: String
  category: String
  contentType: String!
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  fileExtension: String!
  fileName: String!
  fileSize: Int
  group: [Group!]
  id: ID!
  organization: [Organization!]
  storeKey: String!
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  user: User
}

"""Return response for createBulkFile mutation"""
type FileBulkCreatePayload {
  """Created files"""
  files: [File!]
}

"""A connection to a list of items."""
type FileConnection {
  """A list of edges."""
  edges: [FileEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createFile mutation"""
type FileCreatePayload {
  """Created file"""
  file: File!
}

"""Return response for deleteFile mutation"""
type FileDeletePayload {
  """Deleted file ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type FileEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: File
}

type FileHistory implements Node {
  annotation: String
  category: String
  contentType: String!
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  fileExtension: String!
  fileName: String!
  fileSize: Int
  historyTime: Time!
  id: ID!
  operation: FileHistoryOpType!
  ref: String
  storeKey: String!
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""A connection to a list of items."""
type FileHistoryConnection {
  """A list of edges."""
  edges: [FileHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type FileHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: FileHistory
}

"""FileHistoryOpType is enum for the field operation"""
enum FileHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""
FileHistoryWhereInput is used for filtering FileHistory objects.
Input was generated by ent.
"""
input FileHistoryWhereInput {
  and: [FileHistoryWhereInput!]
  """annotation field predicates"""
  annotation: String
  annotationContains: String
  annotationContainsFold: String
  annotationEqualFold: String
  annotationGT: String
  annotationGTE: String
  annotationHasPrefix: String
  annotationHasSuffix: String
  annotationIn: [String!]
  annotationIsNil: Boolean
  annotationLT: String
  annotationLTE: String
  annotationNEQ: String
  annotationNotIn: [String!]
  annotationNotNil: Boolean
  """category field predicates"""
  category: String
  categoryContains: String
  categoryContainsFold: String
  categoryEqualFold: String
  categoryGT: String
  categoryGTE: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIn: [String!]
  categoryIsNil: Boolean
  categoryLT: String
  categoryLTE: String
  categoryNEQ: String
  categoryNotIn: [String!]
  categoryNotNil: Boolean
  """content_type field predicates"""
  contentType: String
  contentTypeContains: String
  contentTypeContainsFold: String
  contentTypeEqualFold: String
  contentTypeGT: String
  contentTypeGTE: String
  contentTypeHasPrefix: String
  contentTypeHasSuffix: String
  contentTypeIn: [String!]
  contentTypeLT: String
  contentTypeLTE: String
  contentTypeNEQ: String
  contentTypeNotIn: [String!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """file_extension field predicates"""
  fileExtension: String
  fileExtensionContains: String
  fileExtensionContainsFold: String
  fileExtensionEqualFold: String
  fileExtensionGT: String
  fileExtensionGTE: String
  fileExtensionHasPrefix: String
  fileExtensionHasSuffix: String
  fileExtensionIn: [String!]
  fileExtensionLT: String
  fileExtensionLTE: String
  fileExtensionNEQ: String
  fileExtensionNotIn: [String!]
  """file_name field predicates"""
  fileName: String
  fileNameContains: String
  fileNameContainsFold: String
  fileNameEqualFold: String
  fileNameGT: String
  fileNameGTE: String
  fileNameHasPrefix: String
  fileNameHasSuffix: String
  fileNameIn: [String!]
  fileNameLT: String
  fileNameLTE: String
  fileNameNEQ: String
  fileNameNotIn: [String!]
  """file_size field predicates"""
  fileSize: Int
  fileSizeGT: Int
  fileSizeGTE: Int
  fileSizeIn: [Int!]
  fileSizeIsNil: Boolean
  fileSizeLT: Int
  fileSizeLTE: Int
  fileSizeNEQ: Int
  fileSizeNotIn: [Int!]
  fileSizeNotNil: Boolean
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: FileHistoryWhereInput
  """operation field predicates"""
  operation: FileHistoryOpType
  operationIn: [FileHistoryOpType!]
  operationNEQ: FileHistoryOpType
  operationNotIn: [FileHistoryOpType!]
  or: [FileHistoryWhereInput!]
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """store_key field predicates"""
  storeKey: String
  storeKeyContains: String
  storeKeyContainsFold: String
  storeKeyEqualFold: String
  storeKeyGT: String
  storeKeyGTE: String
  storeKeyHasPrefix: String
  storeKeyHasSuffix: String
  storeKeyIn: [String!]
  storeKeyLT: String
  storeKeyLTE: String
  storeKeyNEQ: String
  storeKeyNotIn: [String!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""Return response for updateFile mutation"""
type FileUpdatePayload {
  """Updated file"""
  file: File!
}

"""
FileWhereInput is used for filtering File objects.
Input was generated by ent.
"""
input FileWhereInput {
  and: [FileWhereInput!]
  """annotation field predicates"""
  annotation: String
  annotationContains: String
  annotationContainsFold: String
  annotationEqualFold: String
  annotationGT: String
  annotationGTE: String
  annotationHasPrefix: String
  annotationHasSuffix: String
  annotationIn: [String!]
  annotationIsNil: Boolean
  annotationLT: String
  annotationLTE: String
  annotationNEQ: String
  annotationNotIn: [String!]
  annotationNotNil: Boolean
  """category field predicates"""
  category: String
  categoryContains: String
  categoryContainsFold: String
  categoryEqualFold: String
  categoryGT: String
  categoryGTE: String
  categoryHasPrefix: String
  categoryHasSuffix: String
  categoryIn: [String!]
  categoryIsNil: Boolean
  categoryLT: String
  categoryLTE: String
  categoryNEQ: String
  categoryNotIn: [String!]
  categoryNotNil: Boolean
  """content_type field predicates"""
  contentType: String
  contentTypeContains: String
  contentTypeContainsFold: String
  contentTypeEqualFold: String
  contentTypeGT: String
  contentTypeGTE: String
  contentTypeHasPrefix: String
  contentTypeHasSuffix: String
  contentTypeIn: [String!]
  contentTypeLT: String
  contentTypeLTE: String
  contentTypeNEQ: String
  contentTypeNotIn: [String!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """file_extension field predicates"""
  fileExtension: String
  fileExtensionContains: String
  fileExtensionContainsFold: String
  fileExtensionEqualFold: String
  fileExtensionGT: String
  fileExtensionGTE: String
  fileExtensionHasPrefix: String
  fileExtensionHasSuffix: String
  fileExtensionIn: [String!]
  fileExtensionLT: String
  fileExtensionLTE: String
  fileExtensionNEQ: String
  fileExtensionNotIn: [String!]
  """file_name field predicates"""
  fileName: String
  fileNameContains: String
  fileNameContainsFold: String
  fileNameEqualFold: String
  fileNameGT: String
  fileNameGTE: String
  fileNameHasPrefix: String
  fileNameHasSuffix: String
  fileNameIn: [String!]
  fileNameLT: String
  fileNameLTE: String
  fileNameNEQ: String
  fileNameNotIn: [String!]
  """file_size field predicates"""
  fileSize: Int
  fileSizeGT: Int
  fileSizeGTE: Int
  fileSizeIn: [Int!]
  fileSizeIsNil: Boolean
  fileSizeLT: Int
  fileSizeLTE: Int
  fileSizeNEQ: Int
  fileSizeNotIn: [Int!]
  fileSizeNotNil: Boolean
  """group edge predicates"""
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
  """organization edge predicates"""
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: FileWhereInput
  or: [FileWhereInput!]
  """store_key field predicates"""
  storeKey: String
  storeKeyContains: String
  storeKeyContainsFold: String
  storeKeyEqualFold: String
  storeKeyGT: String
  storeKeyGTE: String
  storeKeyHasPrefix: String
  storeKeyHasSuffix: String
  storeKeyIn: [String!]
  storeKeyLT: String
  storeKeyLTE: String
  storeKeyNEQ: String
  storeKeyNotIn: [String!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

union GlobalSearchResult = OrganizationSearchResult | GroupSearchResult | UserSearchResult | SubscriberSearchResult

type GlobalSearchResultConnection {
  nodes: [GlobalSearchResult!]!
  page: PageInfo!
}

directive @goField(forceResolver: Boolean, name: String, omittable: Boolean) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION

directive @goModel(model: String, models: [String!], forceGenerate: Boolean) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

type Group implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """the groups description"""
  description: String
  """The group's displayed 'friendly' name"""
  displayName: String!
  events: [Event!]
  features: [Feature!]
  files: [File!]
  """the URL to an auto generated gravatar image for the group"""
  gravatarLogoURL: String
  id: ID!
  integrations: [Integration!]
  """the URL to an image uploaded by the customer for the groups avatar image"""
  logoURL: String
  members: [GroupMembership!]
  """the name of the group - must be unique within the organization"""
  name: String!
  owner: Organization
  ownerID: ID
  setting: GroupSetting!
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  users: [User!]
}

"""Return response for createBulkGroup mutation"""
type GroupBulkCreatePayload {
  """Created groups"""
  groups: [Group!]
}

"""A connection to a list of items."""
type GroupConnection {
  """A list of edges."""
  edges: [GroupEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createGroup mutation"""
type GroupCreatePayload {
  """Created group"""
  group: Group!
}

"""Return response for deleteGroup mutation"""
type GroupDeletePayload {
  """Deleted group ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type GroupEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Group
}

type GroupHistory implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """the groups description"""
  description: String
  """The group's displayed 'friendly' name"""
  displayName: String!
  """the URL to an auto generated gravatar image for the group"""
  gravatarLogoURL: String
  historyTime: Time!
  id: ID!
  """the URL to an image uploaded by the customer for the groups avatar image"""
  logoURL: String
  """the name of the group - must be unique within the organization"""
  name: String!
  operation: GroupHistoryOpType!
  ownerID: String
  ref: String
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""A connection to a list of items."""
type GroupHistoryConnection {
  """A list of edges."""
  edges: [GroupHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type GroupHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: GroupHistory
}

"""GroupHistoryOpType is enum for the field operation"""
enum GroupHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""Ordering options for GroupHistory connections"""
input GroupHistoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order GroupHistories."""
  field: GroupHistoryOrderField!
}

"""Properties by which GroupHistory connections can be ordered."""
enum GroupHistoryOrderField {
  name
  display_name
}

"""
GroupHistoryWhereInput is used for filtering GroupHistory objects.
Input was generated by ent.
"""
input GroupHistoryWhereInput {
  and: [GroupHistoryWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """display_name field predicates"""
  displayName: String
  displayNameContains: String
  displayNameContainsFold: String
  displayNameEqualFold: String
  displayNameGT: String
  displayNameGTE: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIn: [String!]
  displayNameLT: String
  displayNameLTE: String
  displayNameNEQ: String
  displayNameNotIn: [String!]
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: GroupHistoryWhereInput
  """operation field predicates"""
  operation: GroupHistoryOpType
  operationIn: [GroupHistoryOpType!]
  operationNEQ: GroupHistoryOpType
  operationNotIn: [GroupHistoryOpType!]
  or: [GroupHistoryWhereInput!]
  """owner_id field predicates"""
  ownerID: String
  ownerIDContains: String
  ownerIDContainsFold: String
  ownerIDEqualFold: String
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIn: [String!]
  ownerIDIsNil: Boolean
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDNEQ: String
  ownerIDNotIn: [String!]
  ownerIDNotNil: Boolean
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

type GroupMembership implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  events: [Event!]
  group: Group!
  groupID: ID!
  id: ID!
  role: GroupMembershipRole!
  updatedAt: Time
  updatedBy: String
  user: User!
  userID: ID!
}

"""Return response for createBulkGroupMembership mutation"""
type GroupMembershipBulkCreatePayload {
  """Created groupMemberships"""
  groupMemberships: [GroupMembership!]
}

"""A connection to a list of items."""
type GroupMembershipConnection {
  """A list of edges."""
  edges: [GroupMembershipEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createGroupMembership mutation"""
type GroupMembershipCreatePayload {
  """Created groupMembership"""
  groupMembership: GroupMembership!
}

"""Return response for deleteGroupMembership mutation"""
type GroupMembershipDeletePayload {
  """Deleted groupMembership ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type GroupMembershipEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: GroupMembership
}

type GroupMembershipHistory implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  groupID: String!
  historyTime: Time!
  id: ID!
  operation: GroupMembershipHistoryOpType!
  ref: String
  role: GroupMembershipHistoryRole!
  updatedAt: Time
  updatedBy: String
  userID: String!
}

"""A connection to a list of items."""
type GroupMembershipHistoryConnection {
  """A list of edges."""
  edges: [GroupMembershipHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type GroupMembershipHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: GroupMembershipHistory
}

"""GroupMembershipHistoryOpType is enum for the field operation"""
enum GroupMembershipHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""GroupMembershipHistoryRole is enum for the field role"""
enum GroupMembershipHistoryRole @goModel(model: "github.com/datumforge/datum/internal/ent/enums.Role") {
  ADMIN
  MEMBER
  USER
}

"""
GroupMembershipHistoryWhereInput is used for filtering GroupMembershipHistory objects.
Input was generated by ent.
"""
input GroupMembershipHistoryWhereInput {
  and: [GroupMembershipHistoryWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """group_id field predicates"""
  groupID: String
  groupIDContains: String
  groupIDContainsFold: String
  groupIDEqualFold: String
  groupIDGT: String
  groupIDGTE: String
  groupIDHasPrefix: String
  groupIDHasSuffix: String
  groupIDIn: [String!]
  groupIDLT: String
  groupIDLTE: String
  groupIDNEQ: String
  groupIDNotIn: [String!]
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: GroupMembershipHistoryWhereInput
  """operation field predicates"""
  operation: GroupMembershipHistoryOpType
  operationIn: [GroupMembershipHistoryOpType!]
  operationNEQ: GroupMembershipHistoryOpType
  operationNotIn: [GroupMembershipHistoryOpType!]
  or: [GroupMembershipHistoryWhereInput!]
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """role field predicates"""
  role: GroupMembershipHistoryRole
  roleIn: [GroupMembershipHistoryRole!]
  roleNEQ: GroupMembershipHistoryRole
  roleNotIn: [GroupMembershipHistoryRole!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
  """user_id field predicates"""
  userID: String
  userIDContains: String
  userIDContainsFold: String
  userIDEqualFold: String
  userIDGT: String
  userIDGTE: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDIn: [String!]
  userIDLT: String
  userIDLTE: String
  userIDNEQ: String
  userIDNotIn: [String!]
}

"""GroupMembershipRole is enum for the field role"""
enum GroupMembershipRole @goModel(model: "github.com/datumforge/datum/internal/ent/enums.Role") {
  ADMIN
  MEMBER
  USER
}

"""Return response for updateGroupMembership mutation"""
type GroupMembershipUpdatePayload {
  """Updated groupMembership"""
  groupMembership: GroupMembership!
}

"""
GroupMembershipWhereInput is used for filtering GroupMembership objects.
Input was generated by ent.
"""
input GroupMembershipWhereInput {
  and: [GroupMembershipWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  groupID: String
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: GroupMembershipWhereInput
  or: [GroupMembershipWhereInput!]
  """role field predicates"""
  role: GroupMembershipRole
  roleIn: [GroupMembershipRole!]
  roleNEQ: GroupMembershipRole
  roleNotIn: [GroupMembershipRole!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
  userID: String
}

"""Ordering options for Group connections"""
input GroupOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Groups."""
  field: GroupOrderField!
}

"""Properties by which Group connections can be ordered."""
enum GroupOrderField {
  name
  display_name
}

type GroupSearchResult {
  groups: [Group!]
}

type GroupSetting implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  group: Group
  """the group id associated with the settings"""
  groupID: ID
  id: ID!
  """the policy governing ability to freely join a group, whether it requires an invitation, application, or either"""
  joinPolicy: GroupSettingJoinPolicy!
  """whether to sync group members to github groups"""
  syncToGithub: Boolean
  """whether to sync group members to slack groups"""
  syncToSlack: Boolean
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  """whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization"""
  visibility: GroupSettingVisibility!
}

"""Return response for createBulkGroupSetting mutation"""
type GroupSettingBulkCreatePayload {
  """Created groupSettings"""
  groupSettings: [GroupSetting!]
}

"""A connection to a list of items."""
type GroupSettingConnection {
  """A list of edges."""
  edges: [GroupSettingEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createGroupSetting mutation"""
type GroupSettingCreatePayload {
  """Created groupSetting"""
  groupSetting: GroupSetting!
}

"""Return response for deleteGroupSetting mutation"""
type GroupSettingDeletePayload {
  """Deleted groupSetting ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type GroupSettingEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: GroupSetting
}

type GroupSettingHistory implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """the group id associated with the settings"""
  groupID: String
  historyTime: Time!
  id: ID!
  """the policy governing ability to freely join a group, whether it requires an invitation, application, or either"""
  joinPolicy: GroupSettingHistoryJoinPolicy!
  operation: GroupSettingHistoryOpType!
  ref: String
  """whether to sync group members to github groups"""
  syncToGithub: Boolean
  """whether to sync group members to slack groups"""
  syncToSlack: Boolean
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  """whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization"""
  visibility: GroupSettingHistoryVisibility!
}

"""A connection to a list of items."""
type GroupSettingHistoryConnection {
  """A list of edges."""
  edges: [GroupSettingHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type GroupSettingHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: GroupSettingHistory
}

"""GroupSettingHistoryJoinPolicy is enum for the field join_policy"""
enum GroupSettingHistoryJoinPolicy @goModel(model: "github.com/datumforge/datum/internal/ent/enums.JoinPolicy") {
  OPEN
  INVITE_ONLY
  APPLICATION_ONLY
  INVITE_OR_APPLICATION
}

"""GroupSettingHistoryOpType is enum for the field operation"""
enum GroupSettingHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""GroupSettingHistoryVisibility is enum for the field visibility"""
enum GroupSettingHistoryVisibility @goModel(model: "github.com/datumforge/datum/internal/ent/enums.Visibility") {
  PUBLIC
  PRIVATE
}

"""
GroupSettingHistoryWhereInput is used for filtering GroupSettingHistory objects.
Input was generated by ent.
"""
input GroupSettingHistoryWhereInput {
  and: [GroupSettingHistoryWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """group_id field predicates"""
  groupID: String
  groupIDContains: String
  groupIDContainsFold: String
  groupIDEqualFold: String
  groupIDGT: String
  groupIDGTE: String
  groupIDHasPrefix: String
  groupIDHasSuffix: String
  groupIDIn: [String!]
  groupIDIsNil: Boolean
  groupIDLT: String
  groupIDLTE: String
  groupIDNEQ: String
  groupIDNotIn: [String!]
  groupIDNotNil: Boolean
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """join_policy field predicates"""
  joinPolicy: GroupSettingHistoryJoinPolicy
  joinPolicyIn: [GroupSettingHistoryJoinPolicy!]
  joinPolicyNEQ: GroupSettingHistoryJoinPolicy
  joinPolicyNotIn: [GroupSettingHistoryJoinPolicy!]
  not: GroupSettingHistoryWhereInput
  """operation field predicates"""
  operation: GroupSettingHistoryOpType
  operationIn: [GroupSettingHistoryOpType!]
  operationNEQ: GroupSettingHistoryOpType
  operationNotIn: [GroupSettingHistoryOpType!]
  or: [GroupSettingHistoryWhereInput!]
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """sync_to_github field predicates"""
  syncToGithub: Boolean
  syncToGithubIsNil: Boolean
  syncToGithubNEQ: Boolean
  syncToGithubNotNil: Boolean
  """sync_to_slack field predicates"""
  syncToSlack: Boolean
  syncToSlackIsNil: Boolean
  syncToSlackNEQ: Boolean
  syncToSlackNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
  """visibility field predicates"""
  visibility: GroupSettingHistoryVisibility
  visibilityIn: [GroupSettingHistoryVisibility!]
  visibilityNEQ: GroupSettingHistoryVisibility
  visibilityNotIn: [GroupSettingHistoryVisibility!]
}

"""GroupSettingJoinPolicy is enum for the field join_policy"""
enum GroupSettingJoinPolicy @goModel(model: "github.com/datumforge/datum/internal/ent/enums.JoinPolicy") {
  OPEN
  INVITE_ONLY
  APPLICATION_ONLY
  INVITE_OR_APPLICATION
}

"""Return response for updateGroupSetting mutation"""
type GroupSettingUpdatePayload {
  """Updated groupSetting"""
  groupSetting: GroupSetting!
}

"""GroupSettingVisibility is enum for the field visibility"""
enum GroupSettingVisibility @goModel(model: "github.com/datumforge/datum/internal/ent/enums.Visibility") {
  PUBLIC
  PRIVATE
}

"""
GroupSettingWhereInput is used for filtering GroupSetting objects.
Input was generated by ent.
"""
input GroupSettingWhereInput {
  and: [GroupSettingWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """group_id field predicates"""
  groupID: ID
  groupIDContains: ID
  groupIDContainsFold: ID
  groupIDEqualFold: ID
  groupIDGT: ID
  groupIDGTE: ID
  groupIDHasPrefix: ID
  groupIDHasSuffix: ID
  groupIDIn: [ID!]
  groupIDIsNil: Boolean
  groupIDLT: ID
  groupIDLTE: ID
  groupIDNEQ: ID
  groupIDNotIn: [ID!]
  groupIDNotNil: Boolean
  """group edge predicates"""
  hasGroup: Boolean
  hasGroupWith: [GroupWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """join_policy field predicates"""
  joinPolicy: GroupSettingJoinPolicy
  joinPolicyIn: [GroupSettingJoinPolicy!]
  joinPolicyNEQ: GroupSettingJoinPolicy
  joinPolicyNotIn: [GroupSettingJoinPolicy!]
  not: GroupSettingWhereInput
  or: [GroupSettingWhereInput!]
  """sync_to_github field predicates"""
  syncToGithub: Boolean
  syncToGithubIsNil: Boolean
  syncToGithubNEQ: Boolean
  syncToGithubNotNil: Boolean
  """sync_to_slack field predicates"""
  syncToSlack: Boolean
  syncToSlackIsNil: Boolean
  syncToSlackNEQ: Boolean
  syncToSlackNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
  """visibility field predicates"""
  visibility: GroupSettingVisibility
  visibilityIn: [GroupSettingVisibility!]
  visibilityNEQ: GroupSettingVisibility
  visibilityNotIn: [GroupSettingVisibility!]
}

"""Return response for updateGroup mutation"""
type GroupUpdatePayload {
  """Updated group"""
  group: Group!
}

"""
GroupWhereInput is used for filtering Group objects.
Input was generated by ent.
"""
input GroupWhereInput {
  and: [GroupWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """display_name field predicates"""
  displayName: String
  displayNameContains: String
  displayNameContainsFold: String
  displayNameEqualFold: String
  displayNameGT: String
  displayNameGTE: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIn: [String!]
  displayNameLT: String
  displayNameLTE: String
  displayNameNEQ: String
  displayNameNotIn: [String!]
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """features edge predicates"""
  hasFeatures: Boolean
  hasFeaturesWith: [FeatureWhereInput!]
  """files edge predicates"""
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """integrations edge predicates"""
  hasIntegrations: Boolean
  hasIntegrationsWith: [IntegrationWhereInput!]
  """members edge predicates"""
  hasMembers: Boolean
  hasMembersWith: [GroupMembershipWhereInput!]
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """setting edge predicates"""
  hasSetting: Boolean
  hasSettingWith: [GroupSettingWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: GroupWhereInput
  or: [GroupWhereInput!]
  """owner_id field predicates"""
  ownerID: ID
  ownerIDContains: ID
  ownerIDContainsFold: ID
  ownerIDEqualFold: ID
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIn: [ID!]
  ownerIDIsNil: Boolean
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDNEQ: ID
  ownerIDNotIn: [ID!]
  ownerIDNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

type Hush implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """a description of the hush value or purpose, such as github PAT"""
  description: String
  events: [Event!]
  id: ID!
  """the integration associated with the secret"""
  integrations: [Integration!]
  """the kind of secret, such as sshkey, certificate, api token, etc."""
  kind: String
  """the logical name of the corresponding hush secret or it's general grouping"""
  name: String!
  organization: [Organization!]
  """the generic name of a secret associated with the organization"""
  secretName: String
  updatedAt: Time
  updatedBy: String
}

"""Return response for createBulkHush mutation"""
type HushBulkCreatePayload {
  """Created hushs"""
  hushes: [Hush!]
}

"""A connection to a list of items."""
type HushConnection {
  """A list of edges."""
  edges: [HushEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createHush mutation"""
type HushCreatePayload {
  """Created hush"""
  hush: Hush!
}

"""Return response for deleteHush mutation"""
type HushDeletePayload {
  """Deleted hush ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type HushEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Hush
}

type HushHistory implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """a description of the hush value or purpose, such as github PAT"""
  description: String
  historyTime: Time!
  id: ID!
  """the kind of secret, such as sshkey, certificate, api token, etc."""
  kind: String
  """the logical name of the corresponding hush secret or it's general grouping"""
  name: String!
  operation: HushHistoryOpType!
  ref: String
  """the generic name of a secret associated with the organization"""
  secretName: String
  updatedAt: Time
  updatedBy: String
}

"""A connection to a list of items."""
type HushHistoryConnection {
  """A list of edges."""
  edges: [HushHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type HushHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: HushHistory
}

"""HushHistoryOpType is enum for the field operation"""
enum HushHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""Ordering options for HushHistory connections"""
input HushHistoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order HushHistories."""
  field: HushHistoryOrderField!
}

"""Properties by which HushHistory connections can be ordered."""
enum HushHistoryOrderField {
  name
  kind
}

"""
HushHistoryWhereInput is used for filtering HushHistory objects.
Input was generated by ent.
"""
input HushHistoryWhereInput {
  and: [HushHistoryWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """kind field predicates"""
  kind: String
  kindContains: String
  kindContainsFold: String
  kindEqualFold: String
  kindGT: String
  kindGTE: String
  kindHasPrefix: String
  kindHasSuffix: String
  kindIn: [String!]
  kindIsNil: Boolean
  kindLT: String
  kindLTE: String
  kindNEQ: String
  kindNotIn: [String!]
  kindNotNil: Boolean
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: HushHistoryWhereInput
  """operation field predicates"""
  operation: HushHistoryOpType
  operationIn: [HushHistoryOpType!]
  operationNEQ: HushHistoryOpType
  operationNotIn: [HushHistoryOpType!]
  or: [HushHistoryWhereInput!]
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """secret_name field predicates"""
  secretName: String
  secretNameContains: String
  secretNameContainsFold: String
  secretNameEqualFold: String
  secretNameGT: String
  secretNameGTE: String
  secretNameHasPrefix: String
  secretNameHasSuffix: String
  secretNameIn: [String!]
  secretNameIsNil: Boolean
  secretNameLT: String
  secretNameLTE: String
  secretNameNEQ: String
  secretNameNotIn: [String!]
  secretNameNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""Ordering options for Hush connections"""
input HushOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Hushes."""
  field: HushOrderField!
}

"""Properties by which Hush connections can be ordered."""
enum HushOrderField {
  name
  kind
}

"""Return response for updateHush mutation"""
type HushUpdatePayload {
  """Updated hush"""
  hush: Hush!
}

"""
HushWhereInput is used for filtering Hush objects.
Input was generated by ent.
"""
input HushWhereInput {
  and: [HushWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """integrations edge predicates"""
  hasIntegrations: Boolean
  hasIntegrationsWith: [IntegrationWhereInput!]
  """organization edge predicates"""
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """kind field predicates"""
  kind: String
  kindContains: String
  kindContainsFold: String
  kindEqualFold: String
  kindGT: String
  kindGTE: String
  kindHasPrefix: String
  kindHasSuffix: String
  kindIn: [String!]
  kindIsNil: Boolean
  kindLT: String
  kindLTE: String
  kindNEQ: String
  kindNotIn: [String!]
  kindNotNil: Boolean
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: HushWhereInput
  or: [HushWhereInput!]
  """secret_name field predicates"""
  secretName: String
  secretNameContains: String
  secretNameContainsFold: String
  secretNameEqualFold: String
  secretNameGT: String
  secretNameGTE: String
  secretNameHasPrefix: String
  secretNameHasSuffix: String
  secretNameIn: [String!]
  secretNameIsNil: Boolean
  secretNameLT: String
  secretNameLTE: String
  secretNameNEQ: String
  secretNameNotIn: [String!]
  secretNameNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

type Integration implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """a description of the integration"""
  description: String
  events: [Event!]
  id: ID!
  kind: String
  """the name of the integration - must be unique within the organization"""
  name: String!
  """the oauth2 tokens associated with the integration"""
  oauth2tokens: [OhAuthTooToken!]
  owner: Organization
  ownerID: ID
  """the secrets associated with the integration"""
  secrets: [Hush!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  webhooks: [Webhook!]
}

"""Return response for createBulkIntegration mutation"""
type IntegrationBulkCreatePayload {
  """Created integrations"""
  integrations: [Integration!]
}

"""A connection to a list of items."""
type IntegrationConnection {
  """A list of edges."""
  edges: [IntegrationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createIntegration mutation"""
type IntegrationCreatePayload {
  """Created integration"""
  integration: Integration!
}

"""Return response for deleteIntegration mutation"""
type IntegrationDeletePayload {
  """Deleted integration ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type IntegrationEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Integration
}

type IntegrationHistory implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """a description of the integration"""
  description: String
  historyTime: Time!
  id: ID!
  kind: String
  """the name of the integration - must be unique within the organization"""
  name: String!
  operation: IntegrationHistoryOpType!
  ownerID: String
  ref: String
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""A connection to a list of items."""
type IntegrationHistoryConnection {
  """A list of edges."""
  edges: [IntegrationHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type IntegrationHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: IntegrationHistory
}

"""IntegrationHistoryOpType is enum for the field operation"""
enum IntegrationHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""Ordering options for IntegrationHistory connections"""
input IntegrationHistoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order IntegrationHistories."""
  field: IntegrationHistoryOrderField!
}

"""Properties by which IntegrationHistory connections can be ordered."""
enum IntegrationHistoryOrderField {
  name
  kind
}

"""
IntegrationHistoryWhereInput is used for filtering IntegrationHistory objects.
Input was generated by ent.
"""
input IntegrationHistoryWhereInput {
  and: [IntegrationHistoryWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """kind field predicates"""
  kind: String
  kindContains: String
  kindContainsFold: String
  kindEqualFold: String
  kindGT: String
  kindGTE: String
  kindHasPrefix: String
  kindHasSuffix: String
  kindIn: [String!]
  kindIsNil: Boolean
  kindLT: String
  kindLTE: String
  kindNEQ: String
  kindNotIn: [String!]
  kindNotNil: Boolean
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: IntegrationHistoryWhereInput
  """operation field predicates"""
  operation: IntegrationHistoryOpType
  operationIn: [IntegrationHistoryOpType!]
  operationNEQ: IntegrationHistoryOpType
  operationNotIn: [IntegrationHistoryOpType!]
  or: [IntegrationHistoryWhereInput!]
  """owner_id field predicates"""
  ownerID: String
  ownerIDContains: String
  ownerIDContainsFold: String
  ownerIDEqualFold: String
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIn: [String!]
  ownerIDIsNil: Boolean
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDNEQ: String
  ownerIDNotIn: [String!]
  ownerIDNotNil: Boolean
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""Ordering options for Integration connections"""
input IntegrationOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Integrations."""
  field: IntegrationOrderField!
}

"""Properties by which Integration connections can be ordered."""
enum IntegrationOrderField {
  name
  kind
}

"""Return response for updateIntegration mutation"""
type IntegrationUpdatePayload {
  """Updated integration"""
  integration: Integration!
}

"""
IntegrationWhereInput is used for filtering Integration objects.
Input was generated by ent.
"""
input IntegrationWhereInput {
  and: [IntegrationWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """oauth2tokens edge predicates"""
  hasOauth2tokens: Boolean
  hasOauth2tokensWith: [OhAuthTooTokenWhereInput!]
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """secrets edge predicates"""
  hasSecrets: Boolean
  hasSecretsWith: [HushWhereInput!]
  """webhooks edge predicates"""
  hasWebhooks: Boolean
  hasWebhooksWith: [WebhookWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """kind field predicates"""
  kind: String
  kindContains: String
  kindContainsFold: String
  kindEqualFold: String
  kindGT: String
  kindGTE: String
  kindHasPrefix: String
  kindHasSuffix: String
  kindIn: [String!]
  kindIsNil: Boolean
  kindLT: String
  kindLTE: String
  kindNEQ: String
  kindNotIn: [String!]
  kindNotNil: Boolean
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: IntegrationWhereInput
  or: [IntegrationWhereInput!]
  """owner_id field predicates"""
  ownerID: ID
  ownerIDContains: ID
  ownerIDContainsFold: ID
  ownerIDEqualFold: ID
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIn: [ID!]
  ownerIDIsNil: Boolean
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDNEQ: ID
  ownerIDNotIn: [ID!]
  ownerIDNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

type Invite implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  events: [Event!]
  """the expiration date of the invitation token which defaults to 14 days in the future from creation"""
  expires: Time!
  id: ID!
  owner: Organization
  ownerID: ID
  """the email used as input to generate the invitation token and is the destination person the invitation is sent to who is required to accept to join the organization"""
  recipient: String!
  """the user who initiated the invitation"""
  requestorID: String!
  role: InviteRole!
  """the number of attempts made to perform email send of the invitation, maximum of 5"""
  sendAttempts: Int!
  """the status of the invitation"""
  status: InviteInviteStatus!
  updatedAt: Time
  updatedBy: String
}

"""Return response for createBulkInvite mutation"""
type InviteBulkCreatePayload {
  """Created invites"""
  invites: [Invite!]
}

"""A connection to a list of items."""
type InviteConnection {
  """A list of edges."""
  edges: [InviteEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createInvite mutation"""
type InviteCreatePayload {
  """Created invite"""
  invite: Invite!
}

"""Return response for deleteInvite mutation"""
type InviteDeletePayload {
  """Deleted invite ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type InviteEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Invite
}

"""InviteInviteStatus is enum for the field status"""
enum InviteInviteStatus @goModel(model: "github.com/datumforge/datum/internal/ent/enums.InviteStatus") {
  INVITATION_SENT
  APPROVAL_REQUIRED
  INVITATION_ACCEPTED
  INVITATION_EXPIRED
}

"""InviteRole is enum for the field role"""
enum InviteRole @goModel(model: "github.com/datumforge/datum/internal/ent/enums.Role") {
  ADMIN
  MEMBER
  USER
}

"""Return response for updateInvite mutation"""
type InviteUpdatePayload {
  """Updated invite"""
  invite: Invite!
}

"""
InviteWhereInput is used for filtering Invite objects.
Input was generated by ent.
"""
input InviteWhereInput {
  and: [InviteWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """expires field predicates"""
  expires: Time
  expiresGT: Time
  expiresGTE: Time
  expiresIn: [Time!]
  expiresLT: Time
  expiresLTE: Time
  expiresNEQ: Time
  expiresNotIn: [Time!]
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: InviteWhereInput
  or: [InviteWhereInput!]
  """owner_id field predicates"""
  ownerID: ID
  ownerIDContains: ID
  ownerIDContainsFold: ID
  ownerIDEqualFold: ID
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIn: [ID!]
  ownerIDIsNil: Boolean
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDNEQ: ID
  ownerIDNotIn: [ID!]
  ownerIDNotNil: Boolean
  """recipient field predicates"""
  recipient: String
  recipientContains: String
  recipientContainsFold: String
  recipientEqualFold: String
  recipientGT: String
  recipientGTE: String
  recipientHasPrefix: String
  recipientHasSuffix: String
  recipientIn: [String!]
  recipientLT: String
  recipientLTE: String
  recipientNEQ: String
  recipientNotIn: [String!]
  """requestor_id field predicates"""
  requestorID: String
  requestorIDContains: String
  requestorIDContainsFold: String
  requestorIDEqualFold: String
  requestorIDGT: String
  requestorIDGTE: String
  requestorIDHasPrefix: String
  requestorIDHasSuffix: String
  requestorIDIn: [String!]
  requestorIDLT: String
  requestorIDLTE: String
  requestorIDNEQ: String
  requestorIDNotIn: [String!]
  """role field predicates"""
  role: InviteRole
  roleIn: [InviteRole!]
  roleNEQ: InviteRole
  roleNotIn: [InviteRole!]
  """send_attempts field predicates"""
  sendAttempts: Int
  sendAttemptsGT: Int
  sendAttemptsGTE: Int
  sendAttemptsIn: [Int!]
  sendAttemptsLT: Int
  sendAttemptsLTE: Int
  sendAttemptsNEQ: Int
  sendAttemptsNotIn: [Int!]
  """status field predicates"""
  status: InviteInviteStatus
  statusIn: [InviteInviteStatus!]
  statusNEQ: InviteInviteStatus
  statusNotIn: [InviteInviteStatus!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""A valid JSON string."""
scalar JSON

"""The builtin Map type"""
scalar Map

type Mutation {
  """Create a new apiToken"""
  createAPIToken(
    """values of the apiToken"""
    input: CreateAPITokenInput!
  ): APITokenCreatePayload!
  """Create multiple new apiTokens"""
  createBulkAPIToken(
    """values of the apiToken"""
    input: [CreateAPITokenInput!]
  ): APITokenBulkCreatePayload!
  """Create multiple new apiTokens via file upload"""
  createBulkCSVAPIToken(
    """csv file containing values of the apiToken"""
    input: Upload!
  ): APITokenBulkCreatePayload!
  """Create multiple new documentData via file upload"""
  createBulkCSVDocumentData(
    """csv file containing values of the documentData"""
    input: Upload!
  ): DocumentDataBulkCreatePayload!
  """Create multiple new entitlements via file upload"""
  createBulkCSVEntitlement(
    """csv file containing values of the entitlement"""
    input: Upload!
  ): EntitlementBulkCreatePayload!
  """Create multiple new events via file upload"""
  createBulkCSVEvent(
    """csv file containing values of the event"""
    input: Upload!
  ): EventBulkCreatePayload!
  """Create multiple new features via file upload"""
  createBulkCSVFeature(
    """csv file containing values of the feature"""
    input: Upload!
  ): FeatureBulkCreatePayload!
  """Create multiple new files via file upload"""
  createBulkCSVFile(
    """csv file containing values of the file"""
    input: Upload!
  ): FileBulkCreatePayload!
  """Create multiple new groups via file upload"""
  createBulkCSVGroup(
    """csv file containing values of the group"""
    input: Upload!
  ): GroupBulkCreatePayload!
  """Create multiple new groupMemberships via file upload"""
  createBulkCSVGroupMembership(
    """csv file containing values of the groupMembership"""
    input: Upload!
  ): GroupMembershipBulkCreatePayload!
  """Create multiple new groupSettings via file upload"""
  createBulkCSVGroupSetting(
    """csv file containing values of the groupSetting"""
    input: Upload!
  ): GroupSettingBulkCreatePayload!
  """Create multiple new hushs via file upload"""
  createBulkCSVHush(
    """csv file containing values of the hush"""
    input: Upload!
  ): HushBulkCreatePayload!
  """Create multiple new integrations via file upload"""
  createBulkCSVIntegration(
    """csv file containing values of the integration"""
    input: Upload!
  ): IntegrationBulkCreatePayload!
  """Create multiple new invites via file upload"""
  createBulkCSVInvite(
    """csv file containing values of the invite"""
    input: Upload!
  ): InviteBulkCreatePayload!
  """Create multiple new oauthProviders via file upload"""
  createBulkCSVOauthProvider(
    """csv file containing values of the oauthProvider"""
    input: Upload!
  ): OauthProviderBulkCreatePayload!
  """Create multiple new ohAuthTooTokens via file upload"""
  createBulkCSVOhAuthTooToken(
    """csv file containing values of the ohAuthTooToken"""
    input: Upload!
  ): OhAuthTooTokenBulkCreatePayload!
  """Create multiple new organizations via file upload"""
  createBulkCSVOrganization(
    """csv file containing values of the organization"""
    input: Upload!
  ): OrganizationBulkCreatePayload!
  """Create multiple new organizationSettings via file upload"""
  createBulkCSVOrganizationSetting(
    """csv file containing values of the organizationSetting"""
    input: Upload!
  ): OrganizationSettingBulkCreatePayload!
  """Create multiple new orgMemberships via file upload"""
  createBulkCSVOrgMembership(
    """csv file containing values of the orgMembership"""
    input: Upload!
  ): OrgMembershipBulkCreatePayload!
  """Create multiple new personalAccessTokens via file upload"""
  createBulkCSVPersonalAccessToken(
    """csv file containing values of the personalAccessToken"""
    input: Upload!
  ): PersonalAccessTokenBulkCreatePayload!
  """Create new subscribers via CSV file"""
  createBulkCSVSubscriber(
    """values of the subscriber"""
    input: Upload!
  ): SubscriberBulkCreatePayload!
  """Create multiple new templates via file upload"""
  createBulkCSVTemplate(
    """csv file containing values of the template"""
    input: Upload!
  ): TemplateBulkCreatePayload!
  """Create multiple new userSettings via file upload"""
  createBulkCSVUserSetting(
    """csv file containing values of the userSetting"""
    input: Upload!
  ): UserSettingBulkCreatePayload!
  """Create multiple new webhooks via file upload"""
  createBulkCSVWebhook(
    """csv file containing values of the webhook"""
    input: Upload!
  ): WebhookBulkCreatePayload!
  """Create multiple new documentData"""
  createBulkDocumentData(
    """values of the documentData"""
    input: [CreateDocumentDataInput!]
  ): DocumentDataBulkCreatePayload!
  """Create multiple new entitlements"""
  createBulkEntitlement(
    """values of the entitlement"""
    input: [CreateEntitlementInput!]
  ): EntitlementBulkCreatePayload!
  """Create multiple new events"""
  createBulkEvent(
    """values of the event"""
    input: [CreateEventInput!]
  ): EventBulkCreatePayload!
  """Create multiple new features"""
  createBulkFeature(
    """values of the feature"""
    input: [CreateFeatureInput!]
  ): FeatureBulkCreatePayload!
  """Create multiple new files"""
  createBulkFile(
    """values of the file"""
    input: [CreateFileInput!]
  ): FileBulkCreatePayload!
  """Create multiple new groups"""
  createBulkGroup(
    """values of the group"""
    input: [CreateGroupInput!]
  ): GroupBulkCreatePayload!
  """Create multiple new groupMemberships"""
  createBulkGroupMembership(
    """values of the groupMembership"""
    input: [CreateGroupMembershipInput!]
  ): GroupMembershipBulkCreatePayload!
  """Create multiple new groupSettings"""
  createBulkGroupSetting(
    """values of the groupSetting"""
    input: [CreateGroupSettingInput!]
  ): GroupSettingBulkCreatePayload!
  """Create multiple new hushs"""
  createBulkHush(
    """values of the hush"""
    input: [CreateHushInput!]
  ): HushBulkCreatePayload!
  """Create multiple new integrations"""
  createBulkIntegration(
    """values of the integration"""
    input: [CreateIntegrationInput!]
  ): IntegrationBulkCreatePayload!
  """Create multiple new invites"""
  createBulkInvite(
    """values of the invite"""
    input: [CreateInviteInput!]
  ): InviteBulkCreatePayload!
  """Create multiple new oauthProviders"""
  createBulkOauthProvider(
    """values of the oauthProvider"""
    input: [CreateOauthProviderInput!]
  ): OauthProviderBulkCreatePayload!
  """Create multiple new ohAuthTooTokens"""
  createBulkOhAuthTooToken(
    """values of the ohAuthTooToken"""
    input: [CreateOhAuthTooTokenInput!]
  ): OhAuthTooTokenBulkCreatePayload!
  """Create multiple new organizations"""
  createBulkOrganization(
    """values of the organization"""
    input: [CreateOrganizationInput!]
  ): OrganizationBulkCreatePayload!
  """Create multiple new organizationSettings"""
  createBulkOrganizationSetting(
    """values of the organizationSetting"""
    input: [CreateOrganizationSettingInput!]
  ): OrganizationSettingBulkCreatePayload!
  """Create multiple new orgMemberships"""
  createBulkOrgMembership(
    """values of the orgMembership"""
    input: [CreateOrgMembershipInput!]
  ): OrgMembershipBulkCreatePayload!
  """Create multiple new personalAccessTokens"""
  createBulkPersonalAccessToken(
    """values of the personalAccessToken"""
    input: [CreatePersonalAccessTokenInput!]
  ): PersonalAccessTokenBulkCreatePayload!
  """Create new subscribers"""
  createBulkSubscriber(
    """values of the subscriber"""
    input: [CreateSubscriberInput!]
  ): SubscriberBulkCreatePayload!
  """Create multiple new templates"""
  createBulkTemplate(
    """values of the template"""
    input: [CreateTemplateInput!]
  ): TemplateBulkCreatePayload!
  """Create multiple new userSettings"""
  createBulkUserSetting(
    """values of the userSetting"""
    input: [CreateUserSettingInput!]
  ): UserSettingBulkCreatePayload!
  """Create multiple new webhooks"""
  createBulkWebhook(
    """values of the webhook"""
    input: [CreateWebhookInput!]
  ): WebhookBulkCreatePayload!
  """Create a new documentData"""
  createDocumentData(
    """values of the documentData"""
    input: CreateDocumentDataInput!
  ): DocumentDataCreatePayload!
  """Create a new entitlement"""
  createEntitlement(
    """values of the entitlement"""
    input: CreateEntitlementInput!
  ): EntitlementCreatePayload!
  """Create a new event"""
  createEvent(
    """values of the event"""
    input: CreateEventInput!
  ): EventCreatePayload!
  """Create a new feature"""
  createFeature(
    """values of the feature"""
    input: CreateFeatureInput!
  ): FeatureCreatePayload!
  """Create a new file"""
  createFile(
    """values of the file"""
    input: CreateFileInput!
  ): FileCreatePayload!
  """Create a new group"""
  createGroup(
    """values of the group"""
    input: CreateGroupInput!
  ): GroupCreatePayload!
  """Create a new groupMembership"""
  createGroupMembership(
    """values of the groupMembership"""
    input: CreateGroupMembershipInput!
  ): GroupMembershipCreatePayload!
  """Create a new groupSetting"""
  createGroupSetting(
    """values of the groupSetting"""
    input: CreateGroupSettingInput!
  ): GroupSettingCreatePayload!
  """Create a new hush"""
  createHush(
    """values of the hush"""
    input: CreateHushInput!
  ): HushCreatePayload!
  """Create a new integration"""
  createIntegration(
    """values of the integration"""
    input: CreateIntegrationInput!
  ): IntegrationCreatePayload!
  """Create a new invite"""
  createInvite(
    """values of the invite"""
    input: CreateInviteInput!
  ): InviteCreatePayload!
  """Create a new oauthProvider"""
  createOauthProvider(
    """values of the oauthProvider"""
    input: CreateOauthProviderInput!
  ): OauthProviderCreatePayload!
  """Create a new ohAuthTooToken"""
  createOhAuthTooToken(
    """values of the ohAuthTooToken"""
    input: CreateOhAuthTooTokenInput!
  ): OhAuthTooTokenCreatePayload!
  """Create a new organization"""
  createOrganization(
    """values of the organization"""
    input: CreateOrganizationInput!
  ): OrganizationCreatePayload!
  """Create a new organizationSetting"""
  createOrganizationSetting(
    """values of the organizationSetting"""
    input: CreateOrganizationSettingInput!
  ): OrganizationSettingCreatePayload!
  """Create a new orgMembership"""
  createOrgMembership(
    """values of the orgMembership"""
    input: CreateOrgMembershipInput!
  ): OrgMembershipCreatePayload!
  """Create a new personalAccessToken"""
  createPersonalAccessToken(
    """values of the personalAccessToken"""
    input: CreatePersonalAccessTokenInput!
  ): PersonalAccessTokenCreatePayload!
  """Create a new subscriber"""
  createSubscriber(
    """values of the subscriber"""
    input: CreateSubscriberInput!
  ): SubscriberCreatePayload!
  """Create a new template"""
  createTemplate(
    """values of the template"""
    input: CreateTemplateInput!
  ): TemplateCreatePayload!
  """Create a new tfaSetting"""
  createTFASetting(
    """values of the tfaSetting"""
    input: CreateTFASettingInput!
  ): TFASettingCreatePayload!
  """Create a new user"""
  createUser(
    """values of the user"""
    input: CreateUserInput!
  ): UserCreatePayload!
  """Create a new userSetting"""
  createUserSetting(
    """values of the userSetting"""
    input: CreateUserSettingInput!
  ): UserSettingCreatePayload!
  """Create a new webhook"""
  createWebhook(
    """values of the webhook"""
    input: CreateWebhookInput!
  ): WebhookCreatePayload!
  """Delete an existing apiToken"""
  deleteAPIToken(
    """ID of the apiToken"""
    id: ID!
  ): APITokenDeletePayload!
  """Delete an existing documentData"""
  deleteDocumentData(
    """ID of the documentData"""
    id: ID!
  ): DocumentDataDeletePayload!
  """Delete an existing entitlement"""
  deleteEntitlement(
    """ID of the entitlement"""
    id: ID!
  ): EntitlementDeletePayload!
  """Delete an existing event"""
  deleteEvent(
    """ID of the event"""
    id: ID!
  ): EventDeletePayload!
  """Delete an existing feature"""
  deleteFeature(
    """ID of the feature"""
    id: ID!
  ): FeatureDeletePayload!
  """Delete an existing file"""
  deleteFile(
    """ID of the file"""
    id: ID!
  ): FileDeletePayload!
  """Delete an existing group"""
  deleteGroup(
    """ID of the group"""
    id: ID!
  ): GroupDeletePayload!
  """Delete an existing groupMembership"""
  deleteGroupMembership(
    """ID of the groupMembership"""
    id: ID!
  ): GroupMembershipDeletePayload!
  """Delete an existing groupSetting"""
  deleteGroupSetting(
    """ID of the groupSetting"""
    id: ID!
  ): GroupSettingDeletePayload!
  """Delete an existing hush"""
  deleteHush(
    """ID of the hush"""
    id: ID!
  ): HushDeletePayload!
  """Delete an existing integration"""
  deleteIntegration(
    """ID of the integration"""
    id: ID!
  ): IntegrationDeletePayload!
  """Delete an existing invite"""
  deleteInvite(
    """ID of the invite"""
    id: ID!
  ): InviteDeletePayload!
  """Delete an existing oauthProvider"""
  deleteOauthProvider(
    """ID of the oauthProvider"""
    id: ID!
  ): OauthProviderDeletePayload!
  """Delete an existing ohAuthTooToken"""
  deleteOhAuthTooToken(
    """ID of the ohAuthTooToken"""
    id: ID!
  ): OhAuthTooTokenDeletePayload!
  """Delete an existing organization"""
  deleteOrganization(
    """ID of the organization"""
    id: ID!
  ): OrganizationDeletePayload!
  """Delete an existing organizationSetting"""
  deleteOrganizationSetting(
    """ID of the organizationSetting"""
    id: ID!
  ): OrganizationSettingDeletePayload!
  """Delete an existing orgMembership"""
  deleteOrgMembership(
    """ID of the orgMembership"""
    id: ID!
  ): OrgMembershipDeletePayload!
  """Delete an existing personalAccessToken"""
  deletePersonalAccessToken(
    """ID of the personalAccessToken"""
    id: ID!
  ): PersonalAccessTokenDeletePayload!
  """Delete an existing subscriber by Email"""
  deleteSubscriber(
    """Email of the subscriber"""
    email: String!
    """OwnerID of the subscriber"""
    ownerID: ID
  ): SubscriberDeletePayload!
  """Delete an existing template"""
  deleteTemplate(
    """ID of the template"""
    id: ID!
  ): TemplateDeletePayload!
  """Delete an existing user"""
  deleteUser(
    """ID of the user"""
    id: ID!
  ): UserDeletePayload!
  """Delete an existing userSetting"""
  deleteUserSetting(
    """ID of the userSetting"""
    id: ID!
  ): UserSettingDeletePayload!
  """Delete an existing webhook"""
  deleteWebhook(
    """ID of the webhook"""
    id: ID!
  ): WebhookDeletePayload!
  postMessageTo(content: String!, subscriber: String!): ID!
  """Update an existing apiToken"""
  updateAPIToken(
    """ID of the apiToken"""
    id: ID!
    """New values for the apiToken"""
    input: UpdateAPITokenInput!
  ): APITokenUpdatePayload!
  """Update an existing documentData"""
  updateDocumentData(
    """ID of the documentData"""
    id: ID!
    """New values for the documentData"""
    input: UpdateDocumentDataInput!
  ): DocumentDataUpdatePayload!
  """Update an existing entitlement"""
  updateEntitlement(
    """ID of the entitlement"""
    id: ID!
    """New values for the entitlement"""
    input: UpdateEntitlementInput!
  ): EntitlementUpdatePayload!
  """Update an existing event"""
  updateEvent(
    """ID of the event"""
    id: ID!
    """New values for the event"""
    input: UpdateEventInput!
  ): EventUpdatePayload!
  """Update an existing feature"""
  updateFeature(
    """ID of the feature"""
    id: ID!
    """New values for the feature"""
    input: UpdateFeatureInput!
  ): FeatureUpdatePayload!
  """Update an existing file"""
  updateFile(
    """ID of the file"""
    id: ID!
    """New values for the file"""
    input: UpdateFileInput!
  ): FileUpdatePayload!
  """Update an existing group"""
  updateGroup(
    """ID of the group"""
    id: ID!
    """New values for the group"""
    input: UpdateGroupInput!
  ): GroupUpdatePayload!
  """Update an existing groupMembership"""
  updateGroupMembership(
    """ID of the groupMembership"""
    id: ID!
    """New values for the groupMembership"""
    input: UpdateGroupMembershipInput!
  ): GroupMembershipUpdatePayload!
  """Update an existing groupSetting"""
  updateGroupSetting(
    """ID of the groupSetting"""
    id: ID!
    """New values for the groupSetting"""
    input: UpdateGroupSettingInput!
  ): GroupSettingUpdatePayload!
  """Update an existing hush"""
  updateHush(
    """ID of the hush"""
    id: ID!
    """New values for the hush"""
    input: UpdateHushInput!
  ): HushUpdatePayload!
  """Update an existing integration"""
  updateIntegration(
    """ID of the integration"""
    id: ID!
    """New values for the integration"""
    input: UpdateIntegrationInput!
  ): IntegrationUpdatePayload!
  """Update an existing invite"""
  updateInvite(
    """ID of the invite"""
    id: ID!
    """New values for the invite"""
    input: UpdateInviteInput!
  ): InviteUpdatePayload!
  """Update an existing oauthProvider"""
  updateOauthProvider(
    """ID of the oauthProvider"""
    id: ID!
    """New values for the oauthProvider"""
    input: UpdateOauthProviderInput!
  ): OauthProviderUpdatePayload!
  """Update an existing ohAuthTooToken"""
  updateOhAuthTooToken(
    """ID of the ohAuthTooToken"""
    id: ID!
    """New values for the ohAuthTooToken"""
    input: UpdateOhAuthTooTokenInput!
  ): OhAuthTooTokenUpdatePayload!
  """Update an existing organization"""
  updateOrganization(
    """ID of the organization"""
    id: ID!
    """New values for the organization"""
    input: UpdateOrganizationInput!
  ): OrganizationUpdatePayload!
  """Update an existing organizationSetting"""
  updateOrganizationSetting(
    """ID of the organizationSetting"""
    id: ID!
    """New values for the organizationSetting"""
    input: UpdateOrganizationSettingInput!
  ): OrganizationSettingUpdatePayload!
  """Update an existing orgMembership"""
  updateOrgMembership(
    """ID of the orgMembership"""
    id: ID!
    """New values for the orgMembership"""
    input: UpdateOrgMembershipInput!
  ): OrgMembershipUpdatePayload!
  """Update an existing personalAccessToken"""
  updatePersonalAccessToken(
    """ID of the personalAccessToken"""
    id: ID!
    """New values for the personalAccessToken"""
    input: UpdatePersonalAccessTokenInput!
  ): PersonalAccessTokenUpdatePayload!
  """Update an existing subscriber"""
  updateSubscriber(
    """Email of the subscriber"""
    email: String!
    """New values for the subscriber"""
    input: UpdateSubscriberInput!
  ): SubscriberUpdatePayload!
  """Update an existing template"""
  updateTemplate(
    """ID of the template"""
    id: ID!
    """New values for the template"""
    input: UpdateTemplateInput!
  ): TemplateUpdatePayload!
  """Update an existing tfaSetting"""
  updateTFASetting(
    """New values for the tfaSetting"""
    input: UpdateTFASettingInput!
  ): TFASettingUpdatePayload!
  """Update an existing user"""
  updateUser(
    """ID of the user"""
    id: ID!
    """New values for the user"""
    input: UpdateUserInput!
  ): UserUpdatePayload!
  """Update an existing userSetting"""
  updateUserSetting(
    """ID of the userSetting"""
    id: ID!
    """New values for the userSetting"""
    input: UpdateUserSettingInput!
  ): UserSettingUpdatePayload!
  """Update an existing webhook"""
  updateWebhook(
    """ID of the webhook"""
    id: ID!
    """New values for the webhook"""
    input: UpdateWebhookInput!
  ): WebhookUpdatePayload!
}

"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "github.com/datumforge/datum/internal/ent/generated.Noder") {
  """The id of the object."""
  id: ID!
}

type OauthProvider implements Node {
  """the auth style, 0: auto detect 1: third party log in 2: log in with username and password"""
  authStyle: Uint!
  """the auth url of the provider"""
  authURL: String!
  """the client id for the oauth provider"""
  clientID: String!
  """the client secret"""
  clientSecret: String!
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  id: ID!
  """the URL to request user information by token"""
  infoURL: String!
  """the oauth provider's name"""
  name: String!
  owner: Organization
  ownerID: ID
  """the redirect url"""
  redirectURL: String!
  """the scopes"""
  scopes: String!
  """tags associated with the object"""
  tags: [String!]
  """the token url of the provider"""
  tokenURL: String!
  updatedAt: Time
  updatedBy: String
}

"""Return response for createBulkOauthProvider mutation"""
type OauthProviderBulkCreatePayload {
  """Created oauthProviders"""
  oauthProviders: [OauthProvider!]
}

"""A connection to a list of items."""
type OauthProviderConnection {
  """A list of edges."""
  edges: [OauthProviderEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createOauthProvider mutation"""
type OauthProviderCreatePayload {
  """Created oauthProvider"""
  oauthProvider: OauthProvider!
}

"""Return response for deleteOauthProvider mutation"""
type OauthProviderDeletePayload {
  """Deleted oauthProvider ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type OauthProviderEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: OauthProvider
}

type OauthProviderHistory implements Node {
  """the auth style, 0: auto detect 1: third party log in 2: log in with username and password"""
  authStyle: Uint!
  """the auth url of the provider"""
  authURL: String!
  """the client id for the oauth provider"""
  clientID: String!
  """the client secret"""
  clientSecret: String!
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  historyTime: Time!
  id: ID!
  """the URL to request user information by token"""
  infoURL: String!
  """the oauth provider's name"""
  name: String!
  operation: OauthProviderHistoryOpType!
  ownerID: String
  """the redirect url"""
  redirectURL: String!
  ref: String
  """the scopes"""
  scopes: String!
  """tags associated with the object"""
  tags: [String!]
  """the token url of the provider"""
  tokenURL: String!
  updatedAt: Time
  updatedBy: String
}

"""A connection to a list of items."""
type OauthProviderHistoryConnection {
  """A list of edges."""
  edges: [OauthProviderHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type OauthProviderHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: OauthProviderHistory
}

"""OauthProviderHistoryOpType is enum for the field operation"""
enum OauthProviderHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""
OauthProviderHistoryWhereInput is used for filtering OauthProviderHistory objects.
Input was generated by ent.
"""
input OauthProviderHistoryWhereInput {
  and: [OauthProviderHistoryWhereInput!]
  """auth_style field predicates"""
  authStyle: Uint
  authStyleGT: Uint
  authStyleGTE: Uint
  authStyleIn: [Uint!]
  authStyleLT: Uint
  authStyleLTE: Uint
  authStyleNEQ: Uint
  authStyleNotIn: [Uint!]
  """auth_url field predicates"""
  authURL: String
  authURLContains: String
  authURLContainsFold: String
  authURLEqualFold: String
  authURLGT: String
  authURLGTE: String
  authURLHasPrefix: String
  authURLHasSuffix: String
  authURLIn: [String!]
  authURLLT: String
  authURLLTE: String
  authURLNEQ: String
  authURLNotIn: [String!]
  """client_id field predicates"""
  clientID: String
  clientIDContains: String
  clientIDContainsFold: String
  clientIDEqualFold: String
  clientIDGT: String
  clientIDGTE: String
  clientIDHasPrefix: String
  clientIDHasSuffix: String
  clientIDIn: [String!]
  clientIDLT: String
  clientIDLTE: String
  clientIDNEQ: String
  clientIDNotIn: [String!]
  """client_secret field predicates"""
  clientSecret: String
  clientSecretContains: String
  clientSecretContainsFold: String
  clientSecretEqualFold: String
  clientSecretGT: String
  clientSecretGTE: String
  clientSecretHasPrefix: String
  clientSecretHasSuffix: String
  clientSecretIn: [String!]
  clientSecretLT: String
  clientSecretLTE: String
  clientSecretNEQ: String
  clientSecretNotIn: [String!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """info_url field predicates"""
  infoURL: String
  infoURLContains: String
  infoURLContainsFold: String
  infoURLEqualFold: String
  infoURLGT: String
  infoURLGTE: String
  infoURLHasPrefix: String
  infoURLHasSuffix: String
  infoURLIn: [String!]
  infoURLLT: String
  infoURLLTE: String
  infoURLNEQ: String
  infoURLNotIn: [String!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: OauthProviderHistoryWhereInput
  """operation field predicates"""
  operation: OauthProviderHistoryOpType
  operationIn: [OauthProviderHistoryOpType!]
  operationNEQ: OauthProviderHistoryOpType
  operationNotIn: [OauthProviderHistoryOpType!]
  or: [OauthProviderHistoryWhereInput!]
  """owner_id field predicates"""
  ownerID: String
  ownerIDContains: String
  ownerIDContainsFold: String
  ownerIDEqualFold: String
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIn: [String!]
  ownerIDIsNil: Boolean
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDNEQ: String
  ownerIDNotIn: [String!]
  ownerIDNotNil: Boolean
  """redirect_url field predicates"""
  redirectURL: String
  redirectURLContains: String
  redirectURLContainsFold: String
  redirectURLEqualFold: String
  redirectURLGT: String
  redirectURLGTE: String
  redirectURLHasPrefix: String
  redirectURLHasSuffix: String
  redirectURLIn: [String!]
  redirectURLLT: String
  redirectURLLTE: String
  redirectURLNEQ: String
  redirectURLNotIn: [String!]
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """scopes field predicates"""
  scopes: String
  scopesContains: String
  scopesContainsFold: String
  scopesEqualFold: String
  scopesGT: String
  scopesGTE: String
  scopesHasPrefix: String
  scopesHasSuffix: String
  scopesIn: [String!]
  scopesLT: String
  scopesLTE: String
  scopesNEQ: String
  scopesNotIn: [String!]
  """token_url field predicates"""
  tokenURL: String
  tokenURLContains: String
  tokenURLContainsFold: String
  tokenURLEqualFold: String
  tokenURLGT: String
  tokenURLGTE: String
  tokenURLHasPrefix: String
  tokenURLHasSuffix: String
  tokenURLIn: [String!]
  tokenURLLT: String
  tokenURLLTE: String
  tokenURLNEQ: String
  tokenURLNotIn: [String!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""Return response for updateOauthProvider mutation"""
type OauthProviderUpdatePayload {
  """Updated oauthProvider"""
  oauthProvider: OauthProvider!
}

"""
OauthProviderWhereInput is used for filtering OauthProvider objects.
Input was generated by ent.
"""
input OauthProviderWhereInput {
  and: [OauthProviderWhereInput!]
  """auth_style field predicates"""
  authStyle: Uint
  authStyleGT: Uint
  authStyleGTE: Uint
  authStyleIn: [Uint!]
  authStyleLT: Uint
  authStyleLTE: Uint
  authStyleNEQ: Uint
  authStyleNotIn: [Uint!]
  """auth_url field predicates"""
  authURL: String
  authURLContains: String
  authURLContainsFold: String
  authURLEqualFold: String
  authURLGT: String
  authURLGTE: String
  authURLHasPrefix: String
  authURLHasSuffix: String
  authURLIn: [String!]
  authURLLT: String
  authURLLTE: String
  authURLNEQ: String
  authURLNotIn: [String!]
  """client_id field predicates"""
  clientID: String
  clientIDContains: String
  clientIDContainsFold: String
  clientIDEqualFold: String
  clientIDGT: String
  clientIDGTE: String
  clientIDHasPrefix: String
  clientIDHasSuffix: String
  clientIDIn: [String!]
  clientIDLT: String
  clientIDLTE: String
  clientIDNEQ: String
  clientIDNotIn: [String!]
  """client_secret field predicates"""
  clientSecret: String
  clientSecretContains: String
  clientSecretContainsFold: String
  clientSecretEqualFold: String
  clientSecretGT: String
  clientSecretGTE: String
  clientSecretHasPrefix: String
  clientSecretHasSuffix: String
  clientSecretIn: [String!]
  clientSecretLT: String
  clientSecretLTE: String
  clientSecretNEQ: String
  clientSecretNotIn: [String!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """info_url field predicates"""
  infoURL: String
  infoURLContains: String
  infoURLContainsFold: String
  infoURLEqualFold: String
  infoURLGT: String
  infoURLGTE: String
  infoURLHasPrefix: String
  infoURLHasSuffix: String
  infoURLIn: [String!]
  infoURLLT: String
  infoURLLTE: String
  infoURLNEQ: String
  infoURLNotIn: [String!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: OauthProviderWhereInput
  or: [OauthProviderWhereInput!]
  """owner_id field predicates"""
  ownerID: ID
  ownerIDContains: ID
  ownerIDContainsFold: ID
  ownerIDEqualFold: ID
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIn: [ID!]
  ownerIDIsNil: Boolean
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDNEQ: ID
  ownerIDNotIn: [ID!]
  ownerIDNotNil: Boolean
  """redirect_url field predicates"""
  redirectURL: String
  redirectURLContains: String
  redirectURLContainsFold: String
  redirectURLEqualFold: String
  redirectURLGT: String
  redirectURLGTE: String
  redirectURLHasPrefix: String
  redirectURLHasSuffix: String
  redirectURLIn: [String!]
  redirectURLLT: String
  redirectURLLTE: String
  redirectURLNEQ: String
  redirectURLNotIn: [String!]
  """scopes field predicates"""
  scopes: String
  scopesContains: String
  scopesContainsFold: String
  scopesEqualFold: String
  scopesGT: String
  scopesGTE: String
  scopesHasPrefix: String
  scopesHasSuffix: String
  scopesIn: [String!]
  scopesLT: String
  scopesLTE: String
  scopesNEQ: String
  scopesNotIn: [String!]
  """token_url field predicates"""
  tokenURL: String
  tokenURLContains: String
  tokenURLContainsFold: String
  tokenURLEqualFold: String
  tokenURLGT: String
  tokenURLGTE: String
  tokenURLHasPrefix: String
  tokenURLHasSuffix: String
  tokenURLIn: [String!]
  tokenURLLT: String
  tokenURLLTE: String
  tokenURLNEQ: String
  tokenURLNotIn: [String!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

type OhAuthTooToken implements Node {
  claimsEmail: String!
  claimsEmailVerified: Boolean!
  claimsGroups: [String!]
  claimsPreferredUsername: String!
  claimsUserID: String!
  claimsUsername: String!
  clientID: String!
  connectorData: [String!]
  connectorID: String!
  events: [Event!]
  id: ID!
  integration: [Integration!]
  lastUsed: Time!
  nonce: String!
  scopes: [String!]
  """tags associated with the object"""
  tags: [String!]
}

"""Return response for createBulkOhAuthTooToken mutation"""
type OhAuthTooTokenBulkCreatePayload {
  """Created ohAuthTooTokens"""
  ohAuthTooTokens: [OhAuthTooToken!]
}

"""A connection to a list of items."""
type OhAuthTooTokenConnection {
  """A list of edges."""
  edges: [OhAuthTooTokenEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createOhAuthTooToken mutation"""
type OhAuthTooTokenCreatePayload {
  """Created ohAuthTooToken"""
  ohAuthTooToken: OhAuthTooToken!
}

"""Return response for deleteOhAuthTooToken mutation"""
type OhAuthTooTokenDeletePayload {
  """Deleted ohAuthTooToken ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type OhAuthTooTokenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: OhAuthTooToken
}

"""Return response for updateOhAuthTooToken mutation"""
type OhAuthTooTokenUpdatePayload {
  """Updated ohAuthTooToken"""
  ohAuthTooToken: OhAuthTooToken!
}

"""
OhAuthTooTokenWhereInput is used for filtering OhAuthTooToken objects.
Input was generated by ent.
"""
input OhAuthTooTokenWhereInput {
  and: [OhAuthTooTokenWhereInput!]
  """claims_email field predicates"""
  claimsEmail: String
  claimsEmailContains: String
  claimsEmailContainsFold: String
  claimsEmailEqualFold: String
  claimsEmailGT: String
  claimsEmailGTE: String
  claimsEmailHasPrefix: String
  claimsEmailHasSuffix: String
  claimsEmailIn: [String!]
  claimsEmailLT: String
  claimsEmailLTE: String
  claimsEmailNEQ: String
  claimsEmailNotIn: [String!]
  """claims_email_verified field predicates"""
  claimsEmailVerified: Boolean
  claimsEmailVerifiedNEQ: Boolean
  """claims_preferred_username field predicates"""
  claimsPreferredUsername: String
  claimsPreferredUsernameContains: String
  claimsPreferredUsernameContainsFold: String
  claimsPreferredUsernameEqualFold: String
  claimsPreferredUsernameGT: String
  claimsPreferredUsernameGTE: String
  claimsPreferredUsernameHasPrefix: String
  claimsPreferredUsernameHasSuffix: String
  claimsPreferredUsernameIn: [String!]
  claimsPreferredUsernameLT: String
  claimsPreferredUsernameLTE: String
  claimsPreferredUsernameNEQ: String
  claimsPreferredUsernameNotIn: [String!]
  """claims_user_id field predicates"""
  claimsUserID: String
  claimsUserIDContains: String
  claimsUserIDContainsFold: String
  claimsUserIDEqualFold: String
  claimsUserIDGT: String
  claimsUserIDGTE: String
  claimsUserIDHasPrefix: String
  claimsUserIDHasSuffix: String
  claimsUserIDIn: [String!]
  claimsUserIDLT: String
  claimsUserIDLTE: String
  claimsUserIDNEQ: String
  claimsUserIDNotIn: [String!]
  """claims_username field predicates"""
  claimsUsername: String
  claimsUsernameContains: String
  claimsUsernameContainsFold: String
  claimsUsernameEqualFold: String
  claimsUsernameGT: String
  claimsUsernameGTE: String
  claimsUsernameHasPrefix: String
  claimsUsernameHasSuffix: String
  claimsUsernameIn: [String!]
  claimsUsernameLT: String
  claimsUsernameLTE: String
  claimsUsernameNEQ: String
  claimsUsernameNotIn: [String!]
  """client_id field predicates"""
  clientID: String
  clientIDContains: String
  clientIDContainsFold: String
  clientIDEqualFold: String
  clientIDGT: String
  clientIDGTE: String
  clientIDHasPrefix: String
  clientIDHasSuffix: String
  clientIDIn: [String!]
  clientIDLT: String
  clientIDLTE: String
  clientIDNEQ: String
  clientIDNotIn: [String!]
  """connector_id field predicates"""
  connectorID: String
  connectorIDContains: String
  connectorIDContainsFold: String
  connectorIDEqualFold: String
  connectorIDGT: String
  connectorIDGTE: String
  connectorIDHasPrefix: String
  connectorIDHasSuffix: String
  connectorIDIn: [String!]
  connectorIDLT: String
  connectorIDLTE: String
  connectorIDNEQ: String
  connectorIDNotIn: [String!]
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """integration edge predicates"""
  hasIntegration: Boolean
  hasIntegrationWith: [IntegrationWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """last_used field predicates"""
  lastUsed: Time
  lastUsedGT: Time
  lastUsedGTE: Time
  lastUsedIn: [Time!]
  lastUsedLT: Time
  lastUsedLTE: Time
  lastUsedNEQ: Time
  lastUsedNotIn: [Time!]
  """nonce field predicates"""
  nonce: String
  nonceContains: String
  nonceContainsFold: String
  nonceEqualFold: String
  nonceGT: String
  nonceGTE: String
  nonceHasPrefix: String
  nonceHasSuffix: String
  nonceIn: [String!]
  nonceLT: String
  nonceLTE: String
  nonceNEQ: String
  nonceNotIn: [String!]
  not: OhAuthTooTokenWhereInput
  or: [OhAuthTooTokenWhereInput!]
}

"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}

type Organization implements Node {
  apiTokens: [APIToken!]
  """URL of the user's remote avatar"""
  avatarRemoteURL: String
  children(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Organizations returned from the connection."""
    orderBy: OrganizationOrder
    """Filtering options for Organizations returned from the connection."""
    where: OrganizationWhereInput
  ): OrganizationConnection!
  createdAt: Time
  createdBy: String
  """Whether the organization has a dedicated database"""
  dedicatedDb: Boolean!
  deletedAt: Time
  deletedBy: String
  """An optional description of the organization"""
  description: String
  """The organization's displayed 'friendly' name"""
  displayName: String!
  documentdata: [DocumentData!]
  entitlements: [Entitlement!]
  events: [Event!]
  features: [Feature!]
  files: [File!]
  groups: [Group!]
  id: ID!
  integrations: [Integration!]
  invites: [Invite!]
  members: [OrgMembership!]
  """the name of the organization"""
  name: String!
  oauthprovider: [OauthProvider!]
  parent: Organization
  personalAccessTokens: [PersonalAccessToken!]
  """orgs directly associated with a user"""
  personalOrg: Boolean
  secrets: [Hush!]
  setting: OrganizationSetting
  subscribers: [Subscriber!]
  """tags associated with the object"""
  tags: [String!]
  templates: [Template!]
  updatedAt: Time
  updatedBy: String
  users: [User!]
  webhooks: [Webhook!]
}

"""Return response for createBulkOrganization mutation"""
type OrganizationBulkCreatePayload {
  """Created organizations"""
  organizations: [Organization!]
}

"""A connection to a list of items."""
type OrganizationConnection {
  """A list of edges."""
  edges: [OrganizationEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createOrganization mutation"""
type OrganizationCreatePayload {
  """Created organization"""
  organization: Organization!
}

"""Return response for deleteOrganization mutation"""
type OrganizationDeletePayload {
  """Deleted organization ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type OrganizationEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Organization
}

type OrganizationHistory implements Node {
  """URL of the user's remote avatar"""
  avatarRemoteURL: String
  createdAt: Time
  createdBy: String
  """Whether the organization has a dedicated database"""
  dedicatedDb: Boolean!
  deletedAt: Time
  deletedBy: String
  """An optional description of the organization"""
  description: String
  """The organization's displayed 'friendly' name"""
  displayName: String!
  historyTime: Time!
  id: ID!
  """the name of the organization"""
  name: String!
  operation: OrganizationHistoryOpType!
  """orgs directly associated with a user"""
  personalOrg: Boolean
  ref: String
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""A connection to a list of items."""
type OrganizationHistoryConnection {
  """A list of edges."""
  edges: [OrganizationHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type OrganizationHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: OrganizationHistory
}

"""OrganizationHistoryOpType is enum for the field operation"""
enum OrganizationHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""Ordering options for OrganizationHistory connections"""
input OrganizationHistoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order OrganizationHistories."""
  field: OrganizationHistoryOrderField!
}

"""Properties by which OrganizationHistory connections can be ordered."""
enum OrganizationHistoryOrderField {
  name
  display_name
}

"""
OrganizationHistoryWhereInput is used for filtering OrganizationHistory objects.
Input was generated by ent.
"""
input OrganizationHistoryWhereInput {
  and: [OrganizationHistoryWhereInput!]
  """avatar_remote_url field predicates"""
  avatarRemoteURL: String
  avatarRemoteURLContains: String
  avatarRemoteURLContainsFold: String
  avatarRemoteURLEqualFold: String
  avatarRemoteURLGT: String
  avatarRemoteURLGTE: String
  avatarRemoteURLHasPrefix: String
  avatarRemoteURLHasSuffix: String
  avatarRemoteURLIn: [String!]
  avatarRemoteURLIsNil: Boolean
  avatarRemoteURLLT: String
  avatarRemoteURLLTE: String
  avatarRemoteURLNEQ: String
  avatarRemoteURLNotIn: [String!]
  avatarRemoteURLNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """display_name field predicates"""
  displayName: String
  displayNameContains: String
  displayNameContainsFold: String
  displayNameEqualFold: String
  displayNameGT: String
  displayNameGTE: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIn: [String!]
  displayNameLT: String
  displayNameLTE: String
  displayNameNEQ: String
  displayNameNotIn: [String!]
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: OrganizationHistoryWhereInput
  """operation field predicates"""
  operation: OrganizationHistoryOpType
  operationIn: [OrganizationHistoryOpType!]
  operationNEQ: OrganizationHistoryOpType
  operationNotIn: [OrganizationHistoryOpType!]
  or: [OrganizationHistoryWhereInput!]
  """parent_organization_id field predicates"""
  parentOrganizationID: ID
  parentOrganizationIDContains: ID
  parentOrganizationIDContainsFold: ID
  parentOrganizationIDEqualFold: ID
  parentOrganizationIDGT: ID
  parentOrganizationIDGTE: ID
  parentOrganizationIDHasPrefix: ID
  parentOrganizationIDHasSuffix: ID
  parentOrganizationIDIn: [ID!]
  parentOrganizationIDIsNil: Boolean
  parentOrganizationIDLT: ID
  parentOrganizationIDLTE: ID
  parentOrganizationIDNEQ: ID
  parentOrganizationIDNotIn: [ID!]
  parentOrganizationIDNotNil: Boolean
  """personal_org field predicates"""
  personalOrg: Boolean
  personalOrgIsNil: Boolean
  personalOrgNEQ: Boolean
  personalOrgNotNil: Boolean
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""Ordering options for Organization connections"""
input OrganizationOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Organizations."""
  field: OrganizationOrderField!
}

"""Properties by which Organization connections can be ordered."""
enum OrganizationOrderField {
  name
  display_name
}

type OrganizationSearchResult {
  organizations: [Organization!]
}

type OrganizationSetting implements Node {
  """Address to send billing information to"""
  billingAddress: String
  """Name of the person to contact for billing"""
  billingContact: String
  """Email address of the person to contact for billing"""
  billingEmail: String
  """Phone number to contact for billing"""
  billingPhone: String
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """domains associated with the organization"""
  domains: [String!]
  """geographical location of the organization"""
  geoLocation: OrganizationSettingRegion
  id: ID!
  organization: Organization
  """the ID of the organization the settings belong to"""
  organizationID: ID
  """tags associated with the object"""
  tags: [String!]
  """Usually government-issued tax ID or business ID such as ABN in Australia"""
  taxIdentifier: String
  updatedAt: Time
  updatedBy: String
}

"""Return response for createBulkOrganizationSetting mutation"""
type OrganizationSettingBulkCreatePayload {
  """Created organizationSettings"""
  organizationSettings: [OrganizationSetting!]
}

"""A connection to a list of items."""
type OrganizationSettingConnection {
  """A list of edges."""
  edges: [OrganizationSettingEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createOrganizationSetting mutation"""
type OrganizationSettingCreatePayload {
  """Created organizationSetting"""
  organizationSetting: OrganizationSetting!
}

"""Return response for deleteOrganizationSetting mutation"""
type OrganizationSettingDeletePayload {
  """Deleted organizationSetting ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type OrganizationSettingEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: OrganizationSetting
}

type OrganizationSettingHistory implements Node {
  """Address to send billing information to"""
  billingAddress: String
  """Name of the person to contact for billing"""
  billingContact: String
  """Email address of the person to contact for billing"""
  billingEmail: String
  """Phone number to contact for billing"""
  billingPhone: String
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """domains associated with the organization"""
  domains: [String!]
  """geographical location of the organization"""
  geoLocation: OrganizationSettingHistoryRegion
  historyTime: Time!
  id: ID!
  operation: OrganizationSettingHistoryOpType!
  """the ID of the organization the settings belong to"""
  organizationID: String
  ref: String
  """tags associated with the object"""
  tags: [String!]
  """Usually government-issued tax ID or business ID such as ABN in Australia"""
  taxIdentifier: String
  updatedAt: Time
  updatedBy: String
}

"""A connection to a list of items."""
type OrganizationSettingHistoryConnection {
  """A list of edges."""
  edges: [OrganizationSettingHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type OrganizationSettingHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: OrganizationSettingHistory
}

"""OrganizationSettingHistoryOpType is enum for the field operation"""
enum OrganizationSettingHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""OrganizationSettingHistoryRegion is enum for the field geo_location"""
enum OrganizationSettingHistoryRegion @goModel(model: "github.com/datumforge/datum/internal/ent/enums.Region") {
  AMER
  EMEA
  APAC
}

"""
OrganizationSettingHistoryWhereInput is used for filtering OrganizationSettingHistory objects.
Input was generated by ent.
"""
input OrganizationSettingHistoryWhereInput {
  and: [OrganizationSettingHistoryWhereInput!]
  """billing_address field predicates"""
  billingAddress: String
  billingAddressContains: String
  billingAddressContainsFold: String
  billingAddressEqualFold: String
  billingAddressGT: String
  billingAddressGTE: String
  billingAddressHasPrefix: String
  billingAddressHasSuffix: String
  billingAddressIn: [String!]
  billingAddressIsNil: Boolean
  billingAddressLT: String
  billingAddressLTE: String
  billingAddressNEQ: String
  billingAddressNotIn: [String!]
  billingAddressNotNil: Boolean
  """billing_contact field predicates"""
  billingContact: String
  billingContactContains: String
  billingContactContainsFold: String
  billingContactEqualFold: String
  billingContactGT: String
  billingContactGTE: String
  billingContactHasPrefix: String
  billingContactHasSuffix: String
  billingContactIn: [String!]
  billingContactIsNil: Boolean
  billingContactLT: String
  billingContactLTE: String
  billingContactNEQ: String
  billingContactNotIn: [String!]
  billingContactNotNil: Boolean
  """billing_email field predicates"""
  billingEmail: String
  billingEmailContains: String
  billingEmailContainsFold: String
  billingEmailEqualFold: String
  billingEmailGT: String
  billingEmailGTE: String
  billingEmailHasPrefix: String
  billingEmailHasSuffix: String
  billingEmailIn: [String!]
  billingEmailIsNil: Boolean
  billingEmailLT: String
  billingEmailLTE: String
  billingEmailNEQ: String
  billingEmailNotIn: [String!]
  billingEmailNotNil: Boolean
  """billing_phone field predicates"""
  billingPhone: String
  billingPhoneContains: String
  billingPhoneContainsFold: String
  billingPhoneEqualFold: String
  billingPhoneGT: String
  billingPhoneGTE: String
  billingPhoneHasPrefix: String
  billingPhoneHasSuffix: String
  billingPhoneIn: [String!]
  billingPhoneIsNil: Boolean
  billingPhoneLT: String
  billingPhoneLTE: String
  billingPhoneNEQ: String
  billingPhoneNotIn: [String!]
  billingPhoneNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """geo_location field predicates"""
  geoLocation: OrganizationSettingHistoryRegion
  geoLocationIn: [OrganizationSettingHistoryRegion!]
  geoLocationIsNil: Boolean
  geoLocationNEQ: OrganizationSettingHistoryRegion
  geoLocationNotIn: [OrganizationSettingHistoryRegion!]
  geoLocationNotNil: Boolean
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: OrganizationSettingHistoryWhereInput
  """operation field predicates"""
  operation: OrganizationSettingHistoryOpType
  operationIn: [OrganizationSettingHistoryOpType!]
  operationNEQ: OrganizationSettingHistoryOpType
  operationNotIn: [OrganizationSettingHistoryOpType!]
  or: [OrganizationSettingHistoryWhereInput!]
  """organization_id field predicates"""
  organizationID: String
  organizationIDContains: String
  organizationIDContainsFold: String
  organizationIDEqualFold: String
  organizationIDGT: String
  organizationIDGTE: String
  organizationIDHasPrefix: String
  organizationIDHasSuffix: String
  organizationIDIn: [String!]
  organizationIDIsNil: Boolean
  organizationIDLT: String
  organizationIDLTE: String
  organizationIDNEQ: String
  organizationIDNotIn: [String!]
  organizationIDNotNil: Boolean
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """tax_identifier field predicates"""
  taxIdentifier: String
  taxIdentifierContains: String
  taxIdentifierContainsFold: String
  taxIdentifierEqualFold: String
  taxIdentifierGT: String
  taxIdentifierGTE: String
  taxIdentifierHasPrefix: String
  taxIdentifierHasSuffix: String
  taxIdentifierIn: [String!]
  taxIdentifierIsNil: Boolean
  taxIdentifierLT: String
  taxIdentifierLTE: String
  taxIdentifierNEQ: String
  taxIdentifierNotIn: [String!]
  taxIdentifierNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""OrganizationSettingRegion is enum for the field geo_location"""
enum OrganizationSettingRegion @goModel(model: "github.com/datumforge/datum/internal/ent/enums.Region") {
  AMER
  EMEA
  APAC
}

"""Return response for updateOrganizationSetting mutation"""
type OrganizationSettingUpdatePayload {
  """Updated organizationSetting"""
  organizationSetting: OrganizationSetting!
}

"""
OrganizationSettingWhereInput is used for filtering OrganizationSetting objects.
Input was generated by ent.
"""
input OrganizationSettingWhereInput {
  and: [OrganizationSettingWhereInput!]
  """billing_address field predicates"""
  billingAddress: String
  billingAddressContains: String
  billingAddressContainsFold: String
  billingAddressEqualFold: String
  billingAddressGT: String
  billingAddressGTE: String
  billingAddressHasPrefix: String
  billingAddressHasSuffix: String
  billingAddressIn: [String!]
  billingAddressIsNil: Boolean
  billingAddressLT: String
  billingAddressLTE: String
  billingAddressNEQ: String
  billingAddressNotIn: [String!]
  billingAddressNotNil: Boolean
  """billing_contact field predicates"""
  billingContact: String
  billingContactContains: String
  billingContactContainsFold: String
  billingContactEqualFold: String
  billingContactGT: String
  billingContactGTE: String
  billingContactHasPrefix: String
  billingContactHasSuffix: String
  billingContactIn: [String!]
  billingContactIsNil: Boolean
  billingContactLT: String
  billingContactLTE: String
  billingContactNEQ: String
  billingContactNotIn: [String!]
  billingContactNotNil: Boolean
  """billing_email field predicates"""
  billingEmail: String
  billingEmailContains: String
  billingEmailContainsFold: String
  billingEmailEqualFold: String
  billingEmailGT: String
  billingEmailGTE: String
  billingEmailHasPrefix: String
  billingEmailHasSuffix: String
  billingEmailIn: [String!]
  billingEmailIsNil: Boolean
  billingEmailLT: String
  billingEmailLTE: String
  billingEmailNEQ: String
  billingEmailNotIn: [String!]
  billingEmailNotNil: Boolean
  """billing_phone field predicates"""
  billingPhone: String
  billingPhoneContains: String
  billingPhoneContainsFold: String
  billingPhoneEqualFold: String
  billingPhoneGT: String
  billingPhoneGTE: String
  billingPhoneHasPrefix: String
  billingPhoneHasSuffix: String
  billingPhoneIn: [String!]
  billingPhoneIsNil: Boolean
  billingPhoneLT: String
  billingPhoneLTE: String
  billingPhoneNEQ: String
  billingPhoneNotIn: [String!]
  billingPhoneNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """geo_location field predicates"""
  geoLocation: OrganizationSettingRegion
  geoLocationIn: [OrganizationSettingRegion!]
  geoLocationIsNil: Boolean
  geoLocationNEQ: OrganizationSettingRegion
  geoLocationNotIn: [OrganizationSettingRegion!]
  geoLocationNotNil: Boolean
  """organization edge predicates"""
  hasOrganization: Boolean
  hasOrganizationWith: [OrganizationWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: OrganizationSettingWhereInput
  or: [OrganizationSettingWhereInput!]
  """organization_id field predicates"""
  organizationID: ID
  organizationIDContains: ID
  organizationIDContainsFold: ID
  organizationIDEqualFold: ID
  organizationIDGT: ID
  organizationIDGTE: ID
  organizationIDHasPrefix: ID
  organizationIDHasSuffix: ID
  organizationIDIn: [ID!]
  organizationIDIsNil: Boolean
  organizationIDLT: ID
  organizationIDLTE: ID
  organizationIDNEQ: ID
  organizationIDNotIn: [ID!]
  organizationIDNotNil: Boolean
  """tax_identifier field predicates"""
  taxIdentifier: String
  taxIdentifierContains: String
  taxIdentifierContainsFold: String
  taxIdentifierEqualFold: String
  taxIdentifierGT: String
  taxIdentifierGTE: String
  taxIdentifierHasPrefix: String
  taxIdentifierHasSuffix: String
  taxIdentifierIn: [String!]
  taxIdentifierIsNil: Boolean
  taxIdentifierLT: String
  taxIdentifierLTE: String
  taxIdentifierNEQ: String
  taxIdentifierNotIn: [String!]
  taxIdentifierNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""Return response for updateOrganization mutation"""
type OrganizationUpdatePayload {
  """Updated organization"""
  organization: Organization!
}

"""
OrganizationWhereInput is used for filtering Organization objects.
Input was generated by ent.
"""
input OrganizationWhereInput {
  and: [OrganizationWhereInput!]
  """avatar_remote_url field predicates"""
  avatarRemoteURL: String
  avatarRemoteURLContains: String
  avatarRemoteURLContainsFold: String
  avatarRemoteURLEqualFold: String
  avatarRemoteURLGT: String
  avatarRemoteURLGTE: String
  avatarRemoteURLHasPrefix: String
  avatarRemoteURLHasSuffix: String
  avatarRemoteURLIn: [String!]
  avatarRemoteURLIsNil: Boolean
  avatarRemoteURLLT: String
  avatarRemoteURLLTE: String
  avatarRemoteURLNEQ: String
  avatarRemoteURLNotIn: [String!]
  avatarRemoteURLNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """display_name field predicates"""
  displayName: String
  displayNameContains: String
  displayNameContainsFold: String
  displayNameEqualFold: String
  displayNameGT: String
  displayNameGTE: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIn: [String!]
  displayNameLT: String
  displayNameLTE: String
  displayNameNEQ: String
  displayNameNotIn: [String!]
  """api_tokens edge predicates"""
  hasAPITokens: Boolean
  hasAPITokensWith: [APITokenWhereInput!]
  """children edge predicates"""
  hasChildren: Boolean
  hasChildrenWith: [OrganizationWhereInput!]
  """documentdata edge predicates"""
  hasDocumentdata: Boolean
  hasDocumentdataWith: [DocumentDataWhereInput!]
  """entitlements edge predicates"""
  hasEntitlements: Boolean
  hasEntitlementsWith: [EntitlementWhereInput!]
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """features edge predicates"""
  hasFeatures: Boolean
  hasFeaturesWith: [FeatureWhereInput!]
  """files edge predicates"""
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """groups edge predicates"""
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """integrations edge predicates"""
  hasIntegrations: Boolean
  hasIntegrationsWith: [IntegrationWhereInput!]
  """invites edge predicates"""
  hasInvites: Boolean
  hasInvitesWith: [InviteWhereInput!]
  """members edge predicates"""
  hasMembers: Boolean
  hasMembersWith: [OrgMembershipWhereInput!]
  """oauthprovider edge predicates"""
  hasOauthprovider: Boolean
  hasOauthproviderWith: [OauthProviderWhereInput!]
  """parent edge predicates"""
  hasParent: Boolean
  hasParentWith: [OrganizationWhereInput!]
  """personal_access_tokens edge predicates"""
  hasPersonalAccessTokens: Boolean
  hasPersonalAccessTokensWith: [PersonalAccessTokenWhereInput!]
  """secrets edge predicates"""
  hasSecrets: Boolean
  hasSecretsWith: [HushWhereInput!]
  """setting edge predicates"""
  hasSetting: Boolean
  hasSettingWith: [OrganizationSettingWhereInput!]
  """subscribers edge predicates"""
  hasSubscribers: Boolean
  hasSubscribersWith: [SubscriberWhereInput!]
  """templates edge predicates"""
  hasTemplates: Boolean
  hasTemplatesWith: [TemplateWhereInput!]
  """users edge predicates"""
  hasUsers: Boolean
  hasUsersWith: [UserWhereInput!]
  """webhooks edge predicates"""
  hasWebhooks: Boolean
  hasWebhooksWith: [WebhookWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: OrganizationWhereInput
  or: [OrganizationWhereInput!]
  """parent_organization_id field predicates"""
  parentOrganizationID: ID
  parentOrganizationIDContains: ID
  parentOrganizationIDContainsFold: ID
  parentOrganizationIDEqualFold: ID
  parentOrganizationIDGT: ID
  parentOrganizationIDGTE: ID
  parentOrganizationIDHasPrefix: ID
  parentOrganizationIDHasSuffix: ID
  parentOrganizationIDIn: [ID!]
  parentOrganizationIDIsNil: Boolean
  parentOrganizationIDLT: ID
  parentOrganizationIDLTE: ID
  parentOrganizationIDNEQ: ID
  parentOrganizationIDNotIn: [ID!]
  parentOrganizationIDNotNil: Boolean
  """personal_org field predicates"""
  personalOrg: Boolean
  personalOrgIsNil: Boolean
  personalOrgNEQ: Boolean
  personalOrgNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

type OrgMembership implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  events: [Event!]
  id: ID!
  organization: Organization!
  organizationID: ID!
  role: OrgMembershipRole!
  updatedAt: Time
  updatedBy: String
  user: User!
  userID: ID!
}

"""Return response for createBulkOrgMembership mutation"""
type OrgMembershipBulkCreatePayload {
  """Created orgMemberships"""
  orgMemberships: [OrgMembership!]
}

"""A connection to a list of items."""
type OrgMembershipConnection {
  """A list of edges."""
  edges: [OrgMembershipEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createOrgMembership mutation"""
type OrgMembershipCreatePayload {
  """Created orgMembership"""
  orgMembership: OrgMembership!
}

"""Return response for deleteOrgMembership mutation"""
type OrgMembershipDeletePayload {
  """Deleted orgMembership ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type OrgMembershipEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: OrgMembership
}

type OrgMembershipHistory implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  historyTime: Time!
  id: ID!
  operation: OrgMembershipHistoryOpType!
  organizationID: String!
  ref: String
  role: OrgMembershipHistoryRole!
  updatedAt: Time
  updatedBy: String
  userID: String!
}

"""A connection to a list of items."""
type OrgMembershipHistoryConnection {
  """A list of edges."""
  edges: [OrgMembershipHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type OrgMembershipHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: OrgMembershipHistory
}

"""OrgMembershipHistoryOpType is enum for the field operation"""
enum OrgMembershipHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""OrgMembershipHistoryRole is enum for the field role"""
enum OrgMembershipHistoryRole @goModel(model: "github.com/datumforge/datum/internal/ent/enums.Role") {
  ADMIN
  MEMBER
  USER
  OWNER
}

"""
OrgMembershipHistoryWhereInput is used for filtering OrgMembershipHistory objects.
Input was generated by ent.
"""
input OrgMembershipHistoryWhereInput {
  and: [OrgMembershipHistoryWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: OrgMembershipHistoryWhereInput
  """operation field predicates"""
  operation: OrgMembershipHistoryOpType
  operationIn: [OrgMembershipHistoryOpType!]
  operationNEQ: OrgMembershipHistoryOpType
  operationNotIn: [OrgMembershipHistoryOpType!]
  or: [OrgMembershipHistoryWhereInput!]
  """organization_id field predicates"""
  organizationID: String
  organizationIDContains: String
  organizationIDContainsFold: String
  organizationIDEqualFold: String
  organizationIDGT: String
  organizationIDGTE: String
  organizationIDHasPrefix: String
  organizationIDHasSuffix: String
  organizationIDIn: [String!]
  organizationIDLT: String
  organizationIDLTE: String
  organizationIDNEQ: String
  organizationIDNotIn: [String!]
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """role field predicates"""
  role: OrgMembershipHistoryRole
  roleIn: [OrgMembershipHistoryRole!]
  roleNEQ: OrgMembershipHistoryRole
  roleNotIn: [OrgMembershipHistoryRole!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
  """user_id field predicates"""
  userID: String
  userIDContains: String
  userIDContainsFold: String
  userIDEqualFold: String
  userIDGT: String
  userIDGTE: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDIn: [String!]
  userIDLT: String
  userIDLTE: String
  userIDNEQ: String
  userIDNotIn: [String!]
}

"""OrgMembershipRole is enum for the field role"""
enum OrgMembershipRole @goModel(model: "github.com/datumforge/datum/internal/ent/enums.Role") {
  ADMIN
  MEMBER
  USER
  OWNER
}

"""Return response for updateOrgMembership mutation"""
type OrgMembershipUpdatePayload {
  """Updated orgMembership"""
  orgMembership: OrgMembership!
}

"""
OrgMembershipWhereInput is used for filtering OrgMembership objects.
Input was generated by ent.
"""
input OrgMembershipWhereInput {
  and: [OrgMembershipWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: OrgMembershipWhereInput
  or: [OrgMembershipWhereInput!]
  organizationID: String
  """role field predicates"""
  role: OrgMembershipRole
  roleIn: [OrgMembershipRole!]
  roleNEQ: OrgMembershipRole
  roleNotIn: [OrgMembershipRole!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
  userID: String
}

"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

type PersonalAccessToken implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """a description of the token's purpose"""
  description: String
  events: [Event!]
  """when the token expires"""
  expiresAt: Time!
  id: ID!
  lastUsedAt: Time
  """the name associated with the token"""
  name: String!
  """the organization(s) the token is associated with"""
  organizations: [Organization!]
  owner: User!
  scopes: [String!]
  """tags associated with the object"""
  tags: [String!]
  token: String!
  updatedAt: Time
  updatedBy: String
}

"""Return response for createBulkPersonalAccessToken mutation"""
type PersonalAccessTokenBulkCreatePayload {
  """Created personalAccessTokens"""
  personalAccessTokens: [PersonalAccessToken!]
}

"""A connection to a list of items."""
type PersonalAccessTokenConnection {
  """A list of edges."""
  edges: [PersonalAccessTokenEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createPersonalAccessToken mutation"""
type PersonalAccessTokenCreatePayload {
  """Created personalAccessToken"""
  personalAccessToken: PersonalAccessToken!
}

"""Return response for deletePersonalAccessToken mutation"""
type PersonalAccessTokenDeletePayload {
  """Deleted personalAccessToken ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type PersonalAccessTokenEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: PersonalAccessToken
}

"""Return response for updatePersonalAccessToken mutation"""
type PersonalAccessTokenUpdatePayload {
  """Updated personalAccessToken"""
  personalAccessToken: PersonalAccessToken!
}

"""
PersonalAccessTokenWhereInput is used for filtering PersonalAccessToken objects.
Input was generated by ent.
"""
input PersonalAccessTokenWhereInput {
  and: [PersonalAccessTokenWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """expires_at field predicates"""
  expiresAt: Time
  expiresAtGT: Time
  expiresAtGTE: Time
  expiresAtIn: [Time!]
  expiresAtLT: Time
  expiresAtLTE: Time
  expiresAtNEQ: Time
  expiresAtNotIn: [Time!]
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """organizations edge predicates"""
  hasOrganizations: Boolean
  hasOrganizationsWith: [OrganizationWhereInput!]
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """last_used_at field predicates"""
  lastUsedAt: Time
  lastUsedAtGT: Time
  lastUsedAtGTE: Time
  lastUsedAtIn: [Time!]
  lastUsedAtIsNil: Boolean
  lastUsedAtLT: Time
  lastUsedAtLTE: Time
  lastUsedAtNEQ: Time
  lastUsedAtNotIn: [Time!]
  lastUsedAtNotNil: Boolean
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: PersonalAccessTokenWhereInput
  or: [PersonalAccessTokenWhereInput!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

type Query {
  """Look up apiToken by ID"""
  apiToken(
    """ID of the apiToken"""
    id: ID!
  ): APIToken!
  apiTokens(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for APITokens returned from the connection."""
    where: APITokenWhereInput
  ): APITokenConnection!
  """Look up documentData by ID"""
  documentData(
    """ID of the documentData"""
    id: ID!
  ): DocumentData!
  documentDataHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for DocumentDataHistories returned from the connection."""
    where: DocumentDataHistoryWhereInput
  ): DocumentDataHistoryConnection!
  documentDataSlice(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for DocumentDataSlice returned from the connection."""
    where: DocumentDataWhereInput
  ): DocumentDataConnection!
  """Look up entitlement by ID"""
  entitlement(
    """ID of the entitlement"""
    id: ID!
  ): Entitlement!
  entitlementHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for EntitlementHistories returned from the connection."""
    where: EntitlementHistoryWhereInput
  ): EntitlementHistoryConnection!
  entitlements(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for Entitlements returned from the connection."""
    where: EntitlementWhereInput
  ): EntitlementConnection!
  """Look up event by ID"""
  event(
    """ID of the event"""
    id: ID!
  ): Event!
  eventHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for EventHistories returned from the connection."""
    where: EventHistoryWhereInput
  ): EventHistoryConnection!
  events(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for Events returned from the connection."""
    where: EventWhereInput
  ): EventConnection!
  """Look up feature by ID"""
  feature(
    """ID of the feature"""
    id: ID!
  ): Feature!
  featureHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for FeatureHistories returned from the connection."""
    where: FeatureHistoryWhereInput
  ): FeatureHistoryConnection!
  features(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for Features returned from the connection."""
    where: FeatureWhereInput
  ): FeatureConnection!
  """Look up file by ID"""
  file(
    """ID of the file"""
    id: ID!
  ): File!
  fileHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for FileHistories returned from the connection."""
    where: FileHistoryWhereInput
  ): FileHistoryConnection!
  files(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for Files returned from the connection."""
    where: FileWhereInput
  ): FileConnection!
  """Look up group by ID"""
  group(
    """ID of the group"""
    id: ID!
  ): Group!
  groupHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for GroupHistories returned from the connection."""
    orderBy: GroupHistoryOrder
    """Filtering options for GroupHistories returned from the connection."""
    where: GroupHistoryWhereInput
  ): GroupHistoryConnection!
  """Look up groupMembership by ID"""
  groupMembership(
    """ID of the groupMembership"""
    id: ID!
  ): GroupMembership!
  groupMembershipHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for GroupMembershipHistories returned from the connection."""
    where: GroupMembershipHistoryWhereInput
  ): GroupMembershipHistoryConnection!
  groupMemberships(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for GroupMemberships returned from the connection."""
    where: GroupMembershipWhereInput
  ): GroupMembershipConnection!
  groups(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Groups returned from the connection."""
    orderBy: GroupOrder
    """Filtering options for Groups returned from the connection."""
    where: GroupWhereInput
  ): GroupConnection!
  """Look up groupSetting by ID"""
  groupSetting(
    """ID of the groupSetting"""
    id: ID!
  ): GroupSetting!
  groupSettingHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for GroupSettingHistories returned from the connection."""
    where: GroupSettingHistoryWhereInput
  ): GroupSettingHistoryConnection!
  groupSettings(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for GroupSettings returned from the connection."""
    where: GroupSettingWhereInput
  ): GroupSettingConnection!
  """Look up hush by ID"""
  hush(
    """ID of the hush"""
    id: ID!
  ): Hush!
  hushes(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Hushes returned from the connection."""
    orderBy: HushOrder
    """Filtering options for Hushes returned from the connection."""
    where: HushWhereInput
  ): HushConnection!
  hushHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for HushHistories returned from the connection."""
    orderBy: HushHistoryOrder
    """Filtering options for HushHistories returned from the connection."""
    where: HushHistoryWhereInput
  ): HushHistoryConnection!
  """Look up integration by ID"""
  integration(
    """ID of the integration"""
    id: ID!
  ): Integration!
  integrationHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for IntegrationHistories returned from the connection."""
    orderBy: IntegrationHistoryOrder
    """Filtering options for IntegrationHistories returned from the connection."""
    where: IntegrationHistoryWhereInput
  ): IntegrationHistoryConnection!
  integrations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Integrations returned from the connection."""
    orderBy: IntegrationOrder
    """Filtering options for Integrations returned from the connection."""
    where: IntegrationWhereInput
  ): IntegrationConnection!
  """Look up invite by ID"""
  invite(
    """ID of the invite"""
    id: ID!
  ): Invite!
  invites(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for Invites returned from the connection."""
    where: InviteWhereInput
  ): InviteConnection!
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  """Look up oauthProvider by ID"""
  oauthProvider(
    """ID of the oauthProvider"""
    id: ID!
  ): OauthProvider!
  oauthProviderHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for OauthProviderHistories returned from the connection."""
    where: OauthProviderHistoryWhereInput
  ): OauthProviderHistoryConnection!
  oauthProviders(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for OauthProviders returned from the connection."""
    where: OauthProviderWhereInput
  ): OauthProviderConnection!
  """Look up ohAuthTooToken by ID"""
  ohAuthTooToken(
    """ID of the ohAuthTooToken"""
    id: ID!
  ): OhAuthTooToken!
  ohAuthTooTokens(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for OhAuthTooTokens returned from the connection."""
    where: OhAuthTooTokenWhereInput
  ): OhAuthTooTokenConnection!
  """Look up organization by ID"""
  organization(
    """ID of the organization"""
    id: ID!
  ): Organization!
  organizationHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for OrganizationHistories returned from the connection."""
    orderBy: OrganizationHistoryOrder
    """Filtering options for OrganizationHistories returned from the connection."""
    where: OrganizationHistoryWhereInput
  ): OrganizationHistoryConnection!
  organizations(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Organizations returned from the connection."""
    orderBy: OrganizationOrder
    """Filtering options for Organizations returned from the connection."""
    where: OrganizationWhereInput
  ): OrganizationConnection!
  """Look up organizationSetting by ID"""
  organizationSetting(
    """ID of the organizationSetting"""
    id: ID!
  ): OrganizationSetting!
  organizationSettingHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for OrganizationSettingHistories returned from the connection."""
    where: OrganizationSettingHistoryWhereInput
  ): OrganizationSettingHistoryConnection!
  organizationSettings(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for OrganizationSettings returned from the connection."""
    where: OrganizationSettingWhereInput
  ): OrganizationSettingConnection!
  """Look up orgMembership by ID"""
  orgMembership(
    """ID of the orgMembership"""
    id: ID!
  ): OrgMembership!
  orgMembershipHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for OrgMembershipHistories returned from the connection."""
    where: OrgMembershipHistoryWhereInput
  ): OrgMembershipHistoryConnection!
  orgMemberships(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for OrgMemberships returned from the connection."""
    where: OrgMembershipWhereInput
  ): OrgMembershipConnection!
  """Look up personalAccessToken by ID"""
  personalAccessToken(
    """ID of the personalAccessToken"""
    id: ID!
  ): PersonalAccessToken!
  personalAccessTokens(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for PersonalAccessTokens returned from the connection."""
    where: PersonalAccessTokenWhereInput
  ): PersonalAccessTokenConnection!
  """Search across organizations, groups, and users"""
  search(
    """Search query"""
    query: String!
  ): GlobalSearchResultConnection
  """Look up subscriber by Email"""
  subscriber(
    """Email of the subscriber"""
    email: String!
  ): Subscriber!
  subscribers(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for Subscribers returned from the connection."""
    where: SubscriberWhereInput
  ): SubscriberConnection!
  """Look up template by ID"""
  template(
    """ID of the template"""
    id: ID!
  ): Template!
  templateHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for TemplateHistories returned from the connection."""
    orderBy: TemplateHistoryOrder
    """Filtering options for TemplateHistories returned from the connection."""
    where: TemplateHistoryWhereInput
  ): TemplateHistoryConnection!
  templates(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Templates returned from the connection."""
    orderBy: TemplateOrder
    """Filtering options for Templates returned from the connection."""
    where: TemplateWhereInput
  ): TemplateConnection!
  """Look up tfaSetting for the current user"""
  tfaSetting(
    """ID of the tfaSetting"""
    id: ID
  ): TFASetting!
  tfaSettings(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for TFASettings returned from the connection."""
    where: TFASettingWhereInput
  ): TFASettingConnection!
  """Look up user by ID"""
  user(
    """ID of the user"""
    id: ID!
  ): User!
  userHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for UserHistories returned from the connection."""
    orderBy: UserHistoryOrder
    """Filtering options for UserHistories returned from the connection."""
    where: UserHistoryWhereInput
  ): UserHistoryConnection!
  users(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Users returned from the connection."""
    orderBy: UserOrder
    """Filtering options for Users returned from the connection."""
    where: UserWhereInput
  ): UserConnection!
  """Look up userSetting by ID"""
  userSetting(
    """ID of the userSetting"""
    id: ID!
  ): UserSetting!
  userSettingHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for UserSettingHistories returned from the connection."""
    where: UserSettingHistoryWhereInput
  ): UserSettingHistoryConnection!
  userSettings(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Filtering options for UserSettings returned from the connection."""
    where: UserSettingWhereInput
  ): UserSettingConnection!
  """Look up webhook by ID"""
  webhook(
    """ID of the webhook"""
    id: ID!
  ): Webhook!
  webhookHistories(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for WebhookHistories returned from the connection."""
    orderBy: WebhookHistoryOrder
    """Filtering options for WebhookHistories returned from the connection."""
    where: WebhookHistoryWhereInput
  ): WebhookHistoryConnection!
  webhooks(
    """Returns the elements in the list that come after the specified cursor."""
    after: Cursor
    """Returns the elements in the list that come before the specified cursor."""
    before: Cursor
    """Returns the first _n_ elements from the list."""
    first: Int
    """Returns the last _n_ elements from the list."""
    last: Int
    """Ordering options for Webhooks returned from the connection."""
    orderBy: WebhookOrder
    """Filtering options for Webhooks returned from the connection."""
    where: WebhookWhereInput
  ): WebhookConnection!
}

type Subscriber implements Node {
  """indicates if the subscriber is active or not, active users will have at least one verified contact method"""
  active: Boolean!
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """email address of the subscriber"""
  email: String!
  events: [Event!]
  id: ID!
  owner: Organization
  ownerID: ID
  """phone number of the subscriber"""
  phoneNumber: String
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  """indicates if the email address has been verified"""
  verifiedEmail: Boolean!
  """indicates if the phone number has been verified"""
  verifiedPhone: Boolean!
}

"""Return response for createBulkSubscriber mutation"""
type SubscriberBulkCreatePayload {
  """Created subscribers"""
  subscribers: [Subscriber!]
}

"""A connection to a list of items."""
type SubscriberConnection {
  """A list of edges."""
  edges: [SubscriberEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createSubscriber mutation"""
type SubscriberCreatePayload {
  """Created subscriber"""
  subscriber: Subscriber!
}

"""Return response for deleteSubscriber mutation"""
type SubscriberDeletePayload {
  """Deleted subscriber email"""
  email: String!
}

"""An edge in a connection."""
type SubscriberEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Subscriber
}

type SubscriberSearchResult {
  subscribers: [Subscriber!]
}

"""Return response for updateSubscriber mutation"""
type SubscriberUpdatePayload {
  """Updated subscriber"""
  subscriber: Subscriber!
}

"""
SubscriberWhereInput is used for filtering Subscriber objects.
Input was generated by ent.
"""
input SubscriberWhereInput {
  """active field predicates"""
  active: Boolean
  activeNEQ: Boolean
  and: [SubscriberWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """email field predicates"""
  email: String
  emailContains: String
  emailContainsFold: String
  emailEqualFold: String
  emailGT: String
  emailGTE: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIn: [String!]
  emailLT: String
  emailLTE: String
  emailNEQ: String
  emailNotIn: [String!]
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: SubscriberWhereInput
  or: [SubscriberWhereInput!]
  """owner_id field predicates"""
  ownerID: ID
  ownerIDContains: ID
  ownerIDContainsFold: ID
  ownerIDEqualFold: ID
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIn: [ID!]
  ownerIDIsNil: Boolean
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDNEQ: ID
  ownerIDNotIn: [ID!]
  ownerIDNotNil: Boolean
  """phone_number field predicates"""
  phoneNumber: String
  phoneNumberContains: String
  phoneNumberContainsFold: String
  phoneNumberEqualFold: String
  phoneNumberGT: String
  phoneNumberGTE: String
  phoneNumberHasPrefix: String
  phoneNumberHasSuffix: String
  phoneNumberIn: [String!]
  phoneNumberIsNil: Boolean
  phoneNumberLT: String
  phoneNumberLTE: String
  phoneNumberNEQ: String
  phoneNumberNotIn: [String!]
  phoneNumberNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
  """verified_email field predicates"""
  verifiedEmail: Boolean
  verifiedEmailNEQ: Boolean
  """verified_phone field predicates"""
  verifiedPhone: Boolean
  verifiedPhoneNEQ: Boolean
}

type Subscription {
  subscribe(subscriber: String!): String!
}

type Template implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """the description of the template"""
  description: String
  documents: [DocumentData!]
  id: ID!
  """the jsonschema object of the template"""
  jsonconfig: JSON!
  """the name of the template"""
  name: String!
  owner: Organization
  ownerID: ID
  """tags associated with the object"""
  tags: [String!]
  """the type of the template, either a provided template or an implementation (document)"""
  templateType: TemplateDocumentType!
  """the uischema for the template to render in the UI"""
  uischema: JSON
  updatedAt: Time
  updatedBy: String
}

"""Return response for createBulkTemplate mutation"""
type TemplateBulkCreatePayload {
  """Created templates"""
  templates: [Template!]
}

"""A connection to a list of items."""
type TemplateConnection {
  """A list of edges."""
  edges: [TemplateEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createTemplate mutation"""
type TemplateCreatePayload {
  """Created template"""
  template: Template!
}

"""Return response for deleteTemplate mutation"""
type TemplateDeletePayload {
  """Deleted template ID"""
  deletedID: ID!
}

"""TemplateDocumentType is enum for the field template_type"""
enum TemplateDocumentType @goModel(model: "github.com/datumforge/datum/internal/ent/enums.DocumentType") {
  ROOTTEMPLATE
  DOCUMENT
}

"""An edge in a connection."""
type TemplateEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Template
}

type TemplateHistory implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """the description of the template"""
  description: String
  historyTime: Time!
  id: ID!
  """the jsonschema object of the template"""
  jsonconfig: JSON!
  """the name of the template"""
  name: String!
  operation: TemplateHistoryOpType!
  ownerID: String
  ref: String
  """tags associated with the object"""
  tags: [String!]
  """the type of the template, either a provided template or an implementation (document)"""
  templateType: TemplateHistoryDocumentType!
  """the uischema for the template to render in the UI"""
  uischema: JSON
  updatedAt: Time
  updatedBy: String
}

"""A connection to a list of items."""
type TemplateHistoryConnection {
  """A list of edges."""
  edges: [TemplateHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""TemplateHistoryDocumentType is enum for the field template_type"""
enum TemplateHistoryDocumentType @goModel(model: "github.com/datumforge/datum/internal/ent/enums.DocumentType") {
  ROOTTEMPLATE
  DOCUMENT
}

"""An edge in a connection."""
type TemplateHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: TemplateHistory
}

"""TemplateHistoryOpType is enum for the field operation"""
enum TemplateHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""Ordering options for TemplateHistory connections"""
input TemplateHistoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order TemplateHistories."""
  field: TemplateHistoryOrderField!
}

"""Properties by which TemplateHistory connections can be ordered."""
enum TemplateHistoryOrderField {
  name
}

"""
TemplateHistoryWhereInput is used for filtering TemplateHistory objects.
Input was generated by ent.
"""
input TemplateHistoryWhereInput {
  and: [TemplateHistoryWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """description field predicates"""
  description: String
  descriptionContains: String
  descriptionContainsFold: String
  descriptionEqualFold: String
  descriptionGT: String
  descriptionGTE: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIn: [String!]
  descriptionIsNil: Boolean
  descriptionLT: String
  descriptionLTE: String
  descriptionNEQ: String
  descriptionNotIn: [String!]
  descriptionNotNil: Boolean
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: TemplateHistoryWhereInput
  """operation field predicates"""
  operation: TemplateHistoryOpType
  operationIn: [TemplateHistoryOpType!]
  operationNEQ: TemplateHistoryOpType
  operationNotIn: [TemplateHistoryOpType!]
  or: [TemplateHistoryWhereInput!]
  """owner_id field predicates"""
  ownerID: String
  ownerIDContains: String
  ownerIDContainsFold: String
  ownerIDEqualFold: String
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIn: [String!]
  ownerIDIsNil: Boolean
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDNEQ: String
  ownerIDNotIn: [String!]
  ownerIDNotNil: Boolean
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """template_type field predicates"""
  templateType: TemplateHistoryDocumentType
  templateTypeIn: [TemplateHistoryDocumentType!]
  templateTypeNEQ: TemplateHistoryDocumentType
  templateTypeNotIn: [TemplateHistoryDocumentType!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""Ordering options for Template connections"""
input TemplateOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Templates."""
  field: TemplateOrderField!
}

"""Properties by which Template connections can be ordered."""
enum TemplateOrderField {
  name
}

"""Return response for updateTemplate mutation"""
type TemplateUpdatePayload {
  """Updated template"""
  template: Template!
}

"""
TemplateWhereInput is used for filtering Template objects.
Input was generated by ent.
"""
input TemplateWhereInput {
  and: [TemplateWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """description field predicates"""
  description: String
  descriptionContains: String
  descriptionContainsFold: String
  descriptionEqualFold: String
  descriptionGT: String
  descriptionGTE: String
  descriptionHasPrefix: String
  descriptionHasSuffix: String
  descriptionIn: [String!]
  descriptionIsNil: Boolean
  descriptionLT: String
  descriptionLTE: String
  descriptionNEQ: String
  descriptionNotIn: [String!]
  descriptionNotNil: Boolean
  """documents edge predicates"""
  hasDocuments: Boolean
  hasDocumentsWith: [DocumentDataWhereInput!]
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: TemplateWhereInput
  or: [TemplateWhereInput!]
  """owner_id field predicates"""
  ownerID: ID
  ownerIDContains: ID
  ownerIDContainsFold: ID
  ownerIDEqualFold: ID
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIn: [ID!]
  ownerIDIsNil: Boolean
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDNEQ: ID
  ownerIDNotIn: [ID!]
  ownerIDNotNil: Boolean
  """template_type field predicates"""
  templateType: TemplateDocumentType
  templateTypeIn: [TemplateDocumentType!]
  templateTypeNEQ: TemplateDocumentType
  templateTypeNotIn: [TemplateDocumentType!]
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

type TFASetting implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  id: ID!
  owner: User
  """recovery codes for 2fa"""
  recoveryCodes: [String!]
  """tags associated with the object"""
  tags: [String!]
  """TFA secret for the user"""
  tfaSecret: String
  """specifies a user may complete authentication by verifying a TOTP code delivered through an authenticator app"""
  totpAllowed: Boolean
  updatedAt: Time
  updatedBy: String
  """specifies if the TFA device has been verified"""
  verified: Boolean!
}

"""A connection to a list of items."""
type TFASettingConnection {
  """A list of edges."""
  edges: [TFASettingEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createTFASetting mutation"""
type TFASettingCreatePayload {
  """Created tfaSetting"""
  tfaSetting: TFASetting!
}

"""An edge in a connection."""
type TFASettingEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: TFASetting
}

"""Return response for updateTFASetting mutation"""
type TFASettingUpdatePayload {
  """Updated tfaSetting"""
  tfaSetting: TFASetting!
}

"""
TFASettingWhereInput is used for filtering TFASetting objects.
Input was generated by ent.
"""
input TFASettingWhereInput {
  and: [TFASettingWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  not: TFASettingWhereInput
  or: [TFASettingWhereInput!]
  """tfa_secret field predicates"""
  tfaSecret: String
  tfaSecretContains: String
  tfaSecretContainsFold: String
  tfaSecretEqualFold: String
  tfaSecretGT: String
  tfaSecretGTE: String
  tfaSecretHasPrefix: String
  tfaSecretHasSuffix: String
  tfaSecretIn: [String!]
  tfaSecretIsNil: Boolean
  tfaSecretLT: String
  tfaSecretLTE: String
  tfaSecretNEQ: String
  tfaSecretNotIn: [String!]
  tfaSecretNotNil: Boolean
  """totp_allowed field predicates"""
  totpAllowed: Boolean
  totpAllowedIsNil: Boolean
  totpAllowedNEQ: Boolean
  totpAllowedNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
  """verified field predicates"""
  verified: Boolean
  verifiedNEQ: Boolean
}

"""The builtin Time type"""
scalar Time

"""The builtin Uint type"""
scalar Uint

"""
UpdateAPITokenInput is used for update APIToken object.
Input was generated by ent.
"""
input UpdateAPITokenInput {
  appendScopes: [String!]
  appendTags: [String!]
  clearDescription: Boolean
  clearLastUsedAt: Boolean
  clearOwner: Boolean
  clearScopes: Boolean
  clearTags: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  """a description of the token's purpose"""
  description: String
  lastUsedAt: Time
  """the name associated with the token"""
  name: String
  ownerID: ID
  scopes: [String!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""
UpdateDocumentDataInput is used for update DocumentData object.
Input was generated by ent.
"""
input UpdateDocumentDataInput {
  appendTags: [String!]
  clearOwner: Boolean
  clearTags: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  """the json data of the document"""
  data: JSON
  ownerID: ID
  """tags associated with the object"""
  tags: [String!]
  templateID: ID
  updatedAt: Time
  updatedBy: String
}

"""
UpdateEntitlementInput is used for update Entitlement object.
Input was generated by ent.
"""
input UpdateEntitlementInput {
  addEventIDs: [ID!]
  addFeatureIDs: [ID!]
  appendTags: [String!]
  """whether or not the customer has cancelled their entitlement - usually used in conjunction with expires and expires at"""
  cancelled: Boolean
  clearEvents: Boolean
  clearExpiresAt: Boolean
  clearExternalCustomerID: Boolean
  clearExternalSubscriptionID: Boolean
  clearFeatures: Boolean
  clearOwner: Boolean
  clearTags: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  """whether or not the customers entitlement expires - expires_at will show the time"""
  expires: Boolean
  """the time at which a customer's entitlement will expire, e.g. they've cancelled but paid through the end of the month"""
  expiresAt: Time
  """used to store references to external systems, e.g. Stripe"""
  externalCustomerID: String
  """used to store references to external systems, e.g. Stripe"""
  externalSubscriptionID: String
  ownerID: ID
  removeEventIDs: [ID!]
  removeFeatureIDs: [ID!]
  """tags associated with the object"""
  tags: [String!]
  tier: EntitlementTier
  updatedAt: Time
  updatedBy: String
}

"""
UpdateEventInput is used for update Event object.
Input was generated by ent.
"""
input UpdateEventInput {
  addEntitlementIDs: [ID!]
  addFeatureIDs: [ID!]
  addGroupIDs: [ID!]
  addHushIDs: [ID!]
  addIntegrationIDs: [ID!]
  addInviteIDs: [ID!]
  addOauth2tokenIDs: [ID!]
  addOrganizationIDs: [ID!]
  addPersonalAccessTokenIDs: [ID!]
  addSubscriberIDs: [ID!]
  addUserIDs: [ID!]
  addWebhookIDs: [ID!]
  appendTags: [String!]
  clearCorrelationID: Boolean
  clearEntitlement: Boolean
  clearEventID: Boolean
  clearFeature: Boolean
  clearGroup: Boolean
  clearHush: Boolean
  clearIntegration: Boolean
  clearInvite: Boolean
  clearMetadata: Boolean
  clearOauth2token: Boolean
  clearOrganization: Boolean
  clearPersonalAccessToken: Boolean
  clearSubscriber: Boolean
  clearTags: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  clearUser: Boolean
  clearWebhook: Boolean
  correlationID: String
  eventID: String
  eventType: String
  metadata: Map
  removeEntitlementIDs: [ID!]
  removeFeatureIDs: [ID!]
  removeGroupIDs: [ID!]
  removeHushIDs: [ID!]
  removeIntegrationIDs: [ID!]
  removeInviteIDs: [ID!]
  removeOauth2tokenIDs: [ID!]
  removeOrganizationIDs: [ID!]
  removePersonalAccessTokenIDs: [ID!]
  removeSubscriberIDs: [ID!]
  removeUserIDs: [ID!]
  removeWebhookIDs: [ID!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""
UpdateFeatureInput is used for update Feature object.
Input was generated by ent.
"""
input UpdateFeatureInput {
  addEntitlementIDs: [ID!]
  addEventIDs: [ID!]
  addGroupIDs: [ID!]
  addOrganizationIDs: [ID!]
  addUserIDs: [ID!]
  appendTags: [String!]
  clearDescription: Boolean
  clearEntitlements: Boolean
  clearEvents: Boolean
  clearGroups: Boolean
  clearOrganizations: Boolean
  clearTags: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  clearUsers: Boolean
  description: String
  enabled: Boolean
  global: Boolean
  removeEntitlementIDs: [ID!]
  removeEventIDs: [ID!]
  removeGroupIDs: [ID!]
  removeOrganizationIDs: [ID!]
  removeUserIDs: [ID!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""
UpdateFileInput is used for update File object.
Input was generated by ent.
"""
input UpdateFileInput {
  addGroupIDs: [ID!]
  addOrganizationIDs: [ID!]
  annotation: String
  appendTags: [String!]
  category: String
  clearAnnotation: Boolean
  clearCategory: Boolean
  clearFileSize: Boolean
  clearGroup: Boolean
  clearOrganization: Boolean
  clearTags: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  clearUser: Boolean
  contentType: String
  fileExtension: String
  fileName: String
  fileSize: Int
  removeGroupIDs: [ID!]
  removeOrganizationIDs: [ID!]
  storeKey: String
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  userID: ID
}

"""
UpdateGroupInput is used for update Group object.
Input was generated by ent.
"""
input UpdateGroupInput {
  addEventIDs: [ID!]
  addFeatureIDs: [ID!]
  addFileIDs: [ID!]
  addGroupMembers: [CreateGroupMembershipInput!]
  addIntegrationIDs: [ID!]
  addUserIDs: [ID!]
  appendTags: [String!]
  clearDescription: Boolean
  clearEvents: Boolean
  clearFeatures: Boolean
  clearFiles: Boolean
  clearGravatarLogoURL: Boolean
  clearIntegrations: Boolean
  clearLogoURL: Boolean
  clearOwner: Boolean
  clearTags: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  clearUsers: Boolean
  """the groups description"""
  description: String
  """The group's displayed 'friendly' name"""
  displayName: String
  """the URL to an auto generated gravatar image for the group"""
  gravatarLogoURL: String
  """the URL to an image uploaded by the customer for the groups avatar image"""
  logoURL: String
  """the name of the group - must be unique within the organization"""
  name: String
  ownerID: ID
  removeEventIDs: [ID!]
  removeFeatureIDs: [ID!]
  removeFileIDs: [ID!]
  removeIntegrationIDs: [ID!]
  removeUserIDs: [ID!]
  settingID: ID
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  updateGroupSettings: UpdateGroupSettingInput
}

"""
UpdateGroupMembershipInput is used for update GroupMembership object.
Input was generated by ent.
"""
input UpdateGroupMembershipInput {
  addEventIDs: [ID!]
  clearEvents: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  removeEventIDs: [ID!]
  role: GroupMembershipRole
  updatedAt: Time
  updatedBy: String
}

"""
UpdateGroupSettingInput is used for update GroupSetting object.
Input was generated by ent.
"""
input UpdateGroupSettingInput {
  appendTags: [String!]
  clearGroup: Boolean
  clearSyncToGithub: Boolean
  clearSyncToSlack: Boolean
  clearTags: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  groupID: ID
  """the policy governing ability to freely join a group, whether it requires an invitation, application, or either"""
  joinPolicy: GroupSettingJoinPolicy
  """whether to sync group members to github groups"""
  syncToGithub: Boolean
  """whether to sync group members to slack groups"""
  syncToSlack: Boolean
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  """whether the group is visible to it's members / owners only or if it's searchable by anyone within the organization"""
  visibility: GroupSettingVisibility
}

"""
UpdateHushInput is used for update Hush object.
Input was generated by ent.
"""
input UpdateHushInput {
  addEventIDs: [ID!]
  addIntegrationIDs: [ID!]
  addOrganizationIDs: [ID!]
  clearDescription: Boolean
  clearEvents: Boolean
  clearIntegrations: Boolean
  clearKind: Boolean
  clearOrganization: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  """a description of the hush value or purpose, such as github PAT"""
  description: String
  """the kind of secret, such as sshkey, certificate, api token, etc."""
  kind: String
  """the logical name of the corresponding hush secret or it's general grouping"""
  name: String
  removeEventIDs: [ID!]
  removeIntegrationIDs: [ID!]
  removeOrganizationIDs: [ID!]
  updatedAt: Time
  updatedBy: String
}

"""
UpdateIntegrationInput is used for update Integration object.
Input was generated by ent.
"""
input UpdateIntegrationInput {
  addEventIDs: [ID!]
  addOauth2tokenIDs: [ID!]
  addSecretIDs: [ID!]
  addWebhookIDs: [ID!]
  appendTags: [String!]
  clearDescription: Boolean
  clearEvents: Boolean
  clearKind: Boolean
  clearOauth2tokens: Boolean
  clearOwner: Boolean
  clearSecrets: Boolean
  clearTags: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  clearWebhooks: Boolean
  """a description of the integration"""
  description: String
  kind: String
  """the name of the integration - must be unique within the organization"""
  name: String
  ownerID: ID
  removeEventIDs: [ID!]
  removeOauth2tokenIDs: [ID!]
  removeSecretIDs: [ID!]
  removeWebhookIDs: [ID!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""
UpdateInviteInput is used for update Invite object.
Input was generated by ent.
"""
input UpdateInviteInput {
  addEventIDs: [ID!]
  clearEvents: Boolean
  clearOwner: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  """the expiration date of the invitation token which defaults to 14 days in the future from creation"""
  expires: Time
  ownerID: ID
  """the email used as input to generate the invitation token and is the destination person the invitation is sent to who is required to accept to join the organization"""
  recipient: String
  removeEventIDs: [ID!]
  role: InviteRole
  """the number of attempts made to perform email send of the invitation, maximum of 5"""
  sendAttempts: Int
  """the status of the invitation"""
  status: InviteInviteStatus
  updatedAt: Time
  updatedBy: String
}

"""
UpdateOauthProviderInput is used for update OauthProvider object.
Input was generated by ent.
"""
input UpdateOauthProviderInput {
  appendTags: [String!]
  """the auth style, 0: auto detect 1: third party log in 2: log in with username and password"""
  authStyle: Uint
  """the auth url of the provider"""
  authURL: String
  clearOwner: Boolean
  clearTags: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  """the client id for the oauth provider"""
  clientID: String
  """the client secret"""
  clientSecret: String
  """the URL to request user information by token"""
  infoURL: String
  """the oauth provider's name"""
  name: String
  ownerID: ID
  """the redirect url"""
  redirectURL: String
  """the scopes"""
  scopes: String
  """tags associated with the object"""
  tags: [String!]
  """the token url of the provider"""
  tokenURL: String
  updatedAt: Time
  updatedBy: String
}

"""
UpdateOhAuthTooTokenInput is used for update OhAuthTooToken object.
Input was generated by ent.
"""
input UpdateOhAuthTooTokenInput {
  addEventIDs: [ID!]
  addIntegrationIDs: [ID!]
  appendClaimsGroups: [String!]
  appendConnectorData: [String!]
  appendScopes: [String!]
  appendTags: [String!]
  claimsEmail: String
  claimsEmailVerified: Boolean
  claimsGroups: [String!]
  claimsPreferredUsername: String
  claimsUserID: String
  claimsUsername: String
  clearClaimsGroups: Boolean
  clearConnectorData: Boolean
  clearEvents: Boolean
  clearIntegration: Boolean
  clearScopes: Boolean
  clearTags: Boolean
  clientID: String
  connectorData: [String!]
  connectorID: String
  lastUsed: Time
  nonce: String
  removeEventIDs: [ID!]
  removeIntegrationIDs: [ID!]
  scopes: [String!]
  """tags associated with the object"""
  tags: [String!]
}

"""
UpdateOrganizationInput is used for update Organization object.
Input was generated by ent.
"""
input UpdateOrganizationInput {
  addAPITokenIDs: [ID!]
  addDocumentdatumIDs: [ID!]
  addEntitlementIDs: [ID!]
  addEventIDs: [ID!]
  addFeatureIDs: [ID!]
  addFileIDs: [ID!]
  addGroupIDs: [ID!]
  addIntegrationIDs: [ID!]
  addInviteIDs: [ID!]
  addOauthproviderIDs: [ID!]
  addOrgMembers: [CreateOrgMembershipInput!]
  addPersonalAccessTokenIDs: [ID!]
  addSecretIDs: [ID!]
  addSubscriberIDs: [ID!]
  addTemplateIDs: [ID!]
  addUserIDs: [ID!]
  addWebhookIDs: [ID!]
  appendTags: [String!]
  """URL of the user's remote avatar"""
  avatarRemoteURL: String
  clearAPITokens: Boolean
  clearAvatarRemoteURL: Boolean
  clearDescription: Boolean
  clearDocumentdata: Boolean
  clearEntitlements: Boolean
  clearEvents: Boolean
  clearFeatures: Boolean
  clearFiles: Boolean
  clearGroups: Boolean
  clearIntegrations: Boolean
  clearInvites: Boolean
  clearOauthprovider: Boolean
  clearPersonalAccessTokens: Boolean
  clearSecrets: Boolean
  clearSetting: Boolean
  clearSubscribers: Boolean
  clearTags: Boolean
  clearTemplates: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  clearUsers: Boolean
  clearWebhooks: Boolean
  """An optional description of the organization"""
  description: String
  """The organization's displayed 'friendly' name"""
  displayName: String
  """the name of the organization"""
  name: String
  removeAPITokenIDs: [ID!]
  removeDocumentdatumIDs: [ID!]
  removeEntitlementIDs: [ID!]
  removeEventIDs: [ID!]
  removeFeatureIDs: [ID!]
  removeFileIDs: [ID!]
  removeGroupIDs: [ID!]
  removeIntegrationIDs: [ID!]
  removeInviteIDs: [ID!]
  removeOauthproviderIDs: [ID!]
  removePersonalAccessTokenIDs: [ID!]
  removeSecretIDs: [ID!]
  removeSubscriberIDs: [ID!]
  removeTemplateIDs: [ID!]
  removeUserIDs: [ID!]
  removeWebhookIDs: [ID!]
  settingID: ID
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  updateOrgSettings: UpdateOrganizationSettingInput
}

"""
UpdateOrganizationSettingInput is used for update OrganizationSetting object.
Input was generated by ent.
"""
input UpdateOrganizationSettingInput {
  appendDomains: [String!]
  appendTags: [String!]
  """Address to send billing information to"""
  billingAddress: String
  """Name of the person to contact for billing"""
  billingContact: String
  """Email address of the person to contact for billing"""
  billingEmail: String
  """Phone number to contact for billing"""
  billingPhone: String
  clearBillingAddress: Boolean
  clearBillingContact: Boolean
  clearBillingEmail: Boolean
  clearBillingPhone: Boolean
  clearDomains: Boolean
  clearGeoLocation: Boolean
  clearOrganization: Boolean
  clearTags: Boolean
  clearTaxIdentifier: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  """domains associated with the organization"""
  domains: [String!]
  """geographical location of the organization"""
  geoLocation: OrganizationSettingRegion
  organizationID: ID
  """tags associated with the object"""
  tags: [String!]
  """Usually government-issued tax ID or business ID such as ABN in Australia"""
  taxIdentifier: String
  updatedAt: Time
  updatedBy: String
}

"""
UpdateOrgMembershipInput is used for update OrgMembership object.
Input was generated by ent.
"""
input UpdateOrgMembershipInput {
  addEventIDs: [ID!]
  clearEvents: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  removeEventIDs: [ID!]
  role: OrgMembershipRole
  updatedAt: Time
  updatedBy: String
}

"""
UpdatePersonalAccessTokenInput is used for update PersonalAccessToken object.
Input was generated by ent.
"""
input UpdatePersonalAccessTokenInput {
  addEventIDs: [ID!]
  addOrganizationIDs: [ID!]
  appendScopes: [String!]
  appendTags: [String!]
  clearDescription: Boolean
  clearEvents: Boolean
  clearLastUsedAt: Boolean
  clearOrganizations: Boolean
  clearScopes: Boolean
  clearTags: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  """a description of the token's purpose"""
  description: String
  lastUsedAt: Time
  """the name associated with the token"""
  name: String
  removeEventIDs: [ID!]
  removeOrganizationIDs: [ID!]
  scopes: [String!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""
UpdateSubscriberInput is used for update Subscriber object.
Input was generated by ent.
"""
input UpdateSubscriberInput {
  addEventIDs: [ID!]
  appendTags: [String!]
  clearEvents: Boolean
  clearOwner: Boolean
  clearPhoneNumber: Boolean
  clearTags: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  """email address of the subscriber"""
  email: String
  ownerID: ID
  """phone number of the subscriber"""
  phoneNumber: String
  removeEventIDs: [ID!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""
UpdateTemplateInput is used for update Template object.
Input was generated by ent.
"""
input UpdateTemplateInput {
  addDocumentIDs: [ID!]
  appendTags: [String!]
  clearDescription: Boolean
  clearDocuments: Boolean
  clearOwner: Boolean
  clearTags: Boolean
  clearUischema: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  """the description of the template"""
  description: String
  """the jsonschema object of the template"""
  jsonconfig: JSON
  """the name of the template"""
  name: String
  ownerID: ID
  removeDocumentIDs: [ID!]
  """tags associated with the object"""
  tags: [String!]
  """the type of the template, either a provided template or an implementation (document)"""
  templateType: TemplateDocumentType
  """the uischema for the template to render in the UI"""
  uischema: JSON
  updatedAt: Time
  updatedBy: String
}

"""
UpdateTFASettingInput is used for update TFASetting object.
Input was generated by ent.
"""
input UpdateTFASettingInput {
  appendTags: [String!]
  clearTags: Boolean
  clearTotpAllowed: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  """Whether to regenerate backup codes"""
  regenBackupCodes: Boolean
  """tags associated with the object"""
  tags: [String!]
  """specifies a user may complete authentication by verifying a TOTP code delivered through an authenticator app"""
  totpAllowed: Boolean
  updatedAt: Time
  updatedBy: String
  """specifies if the TFA device has been verified"""
  verified: Boolean
}

"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  addEmailVerificationTokenIDs: [ID!]
  addEventIDs: [ID!]
  addFeatureIDs: [ID!]
  addFileIDs: [ID!]
  addGroupIDs: [ID!]
  addOrganizationIDs: [ID!]
  addPasswordResetTokenIDs: [ID!]
  addPersonalAccessTokenIDs: [ID!]
  addTfaSettingIDs: [ID!]
  addWebauthnIDs: [ID!]
  appendTags: [String!]
  """auth provider used to register the account"""
  authProvider: UserAuthProvider
  """The user's local avatar file"""
  avatarLocalFile: String
  """URL of the user's remote avatar"""
  avatarRemoteURL: String
  """The time the user's (local) avatar was last updated"""
  avatarUpdatedAt: Time
  clearAvatarLocalFile: Boolean
  clearAvatarRemoteURL: Boolean
  clearAvatarUpdatedAt: Boolean
  clearEmailVerificationTokens: Boolean
  clearEvents: Boolean
  clearFeatures: Boolean
  clearFiles: Boolean
  clearFirstName: Boolean
  clearGroups: Boolean
  clearLastName: Boolean
  clearLastSeen: Boolean
  clearOrganizations: Boolean
  clearPassword: Boolean
  clearPasswordResetTokens: Boolean
  clearPersonalAccessTokens: Boolean
  clearRole: Boolean
  clearSub: Boolean
  clearTags: Boolean
  clearTfaSettings: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  clearWebauthn: Boolean
  """The user's displayed 'friendly' name"""
  displayName: String
  email: String
  firstName: String
  lastName: String
  """the time the user was last seen"""
  lastSeen: Time
  """user password hash"""
  password: String
  removeEmailVerificationTokenIDs: [ID!]
  removeEventIDs: [ID!]
  removeFeatureIDs: [ID!]
  removeFileIDs: [ID!]
  removeGroupIDs: [ID!]
  removeOrganizationIDs: [ID!]
  removePasswordResetTokenIDs: [ID!]
  removePersonalAccessTokenIDs: [ID!]
  removeTfaSettingIDs: [ID!]
  removeWebauthnIDs: [ID!]
  """the user's role"""
  role: UserRole
  settingID: ID
  """the Subject of the user JWT"""
  sub: String
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""
UpdateUserSettingInput is used for update UserSetting object.
Input was generated by ent.
"""
input UpdateUserSettingInput {
  appendTags: [String!]
  clearDefaultOrg: Boolean
  clearIsTfaEnabled: Boolean
  clearIsWebauthnAllowed: Boolean
  clearSilencedAt: Boolean
  clearSuspendedAt: Boolean
  clearTags: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  clearUser: Boolean
  defaultOrgID: ID
  """whether the user has confirmed their email address"""
  emailConfirmed: Boolean
  """whether the user has two factor authentication enabled"""
  isTfaEnabled: Boolean
  """specifies a user may complete authentication by verifying a WebAuthn capable device"""
  isWebauthnAllowed: Boolean
  """user account is locked if unconfirmed or explicitly locked"""
  locked: Boolean
  """The time notifications regarding the user were silenced"""
  silencedAt: Time
  """status of the user account"""
  status: UserSettingUserStatus
  """The time the user was suspended"""
  suspendedAt: Time
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  userID: ID
}

"""
UpdateWebhookInput is used for update Webhook object.
Input was generated by ent.
"""
input UpdateWebhookInput {
  addEventIDs: [ID!]
  addIntegrationIDs: [ID!]
  appendTags: [String!]
  clearDescription: Boolean
  clearEvents: Boolean
  clearFailures: Boolean
  clearIntegrations: Boolean
  clearLastError: Boolean
  clearLastResponse: Boolean
  clearOwner: Boolean
  clearTags: Boolean
  clearUpdatedAt: Boolean
  clearUpdatedBy: Boolean
  """a description of the webhook"""
  description: String
  """the url to send the webhook to"""
  destinationURL: String
  """indicates if the webhook is active and enabled"""
  enabled: Boolean
  """the number of failures"""
  failures: Int
  """the last error message"""
  lastError: String
  """the last response"""
  lastResponse: String
  """the name of the webhook"""
  name: String
  ownerID: ID
  removeEventIDs: [ID!]
  removeIntegrationIDs: [ID!]
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

scalar Upload

type User implements Node {
  """auth provider used to register the account"""
  authProvider: UserAuthProvider!
  """The user's local avatar file"""
  avatarLocalFile: String
  """URL of the user's remote avatar"""
  avatarRemoteURL: String
  """The time the user's (local) avatar was last updated"""
  avatarUpdatedAt: Time
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """The user's displayed 'friendly' name"""
  displayName: String!
  email: String!
  events: [Event!]
  features: [Feature!]
  files: [File!]
  firstName: String
  groupMemberships: [GroupMembership!]
  groups: [Group!]
  id: ID!
  lastName: String
  """the time the user was last seen"""
  lastSeen: Time
  organizations: [Organization!]
  orgMemberships: [OrgMembership!]
  personalAccessTokens: [PersonalAccessToken!]
  """the user's role"""
  role: UserRole
  setting: UserSetting!
  """the Subject of the user JWT"""
  sub: String
  """tags associated with the object"""
  tags: [String!]
  tfaSettings: [TFASetting!]
  updatedAt: Time
  updatedBy: String
}

"""UserAuthProvider is enum for the field auth_provider"""
enum UserAuthProvider @goModel(model: "github.com/datumforge/datum/internal/ent/enums.AuthProvider") {
  CREDENTIALS
  GOOGLE
  GITHUB
  WEBAUTHN
}

"""Return response for createBulkUser mutation"""
type UserBulkCreatePayload {
  """Created users"""
  users: [User!]
}

"""A connection to a list of items."""
type UserConnection {
  """A list of edges."""
  edges: [UserEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createUser mutation"""
type UserCreatePayload {
  """Created user"""
  user: User!
}

"""Return response for deleteUser mutation"""
type UserDeletePayload {
  """Deleted user ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type UserEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: User
}

type UserHistory implements Node {
  """auth provider used to register the account"""
  authProvider: UserHistoryAuthProvider!
  """The user's local avatar file"""
  avatarLocalFile: String
  """URL of the user's remote avatar"""
  avatarRemoteURL: String
  """The time the user's (local) avatar was last updated"""
  avatarUpdatedAt: Time
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """The user's displayed 'friendly' name"""
  displayName: String!
  email: String!
  firstName: String
  historyTime: Time!
  id: ID!
  lastName: String
  """the time the user was last seen"""
  lastSeen: Time
  operation: UserHistoryOpType!
  ref: String
  """the user's role"""
  role: UserHistoryRole
  """the Subject of the user JWT"""
  sub: String
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""UserHistoryAuthProvider is enum for the field auth_provider"""
enum UserHistoryAuthProvider @goModel(model: "github.com/datumforge/datum/internal/ent/enums.AuthProvider") {
  CREDENTIALS
  GOOGLE
  GITHUB
  WEBAUTHN
}

"""A connection to a list of items."""
type UserHistoryConnection {
  """A list of edges."""
  edges: [UserHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type UserHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: UserHistory
}

"""UserHistoryOpType is enum for the field operation"""
enum UserHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""Ordering options for UserHistory connections"""
input UserHistoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order UserHistories."""
  field: UserHistoryOrderField!
}

"""Properties by which UserHistory connections can be ordered."""
enum UserHistoryOrderField {
  first_name
  last_name
  display_name
}

"""UserHistoryRole is enum for the field role"""
enum UserHistoryRole @goModel(model: "github.com/datumforge/datum/internal/ent/enums.Role") {
  ADMIN
  MEMBER
  USER
}

"""
UserHistoryWhereInput is used for filtering UserHistory objects.
Input was generated by ent.
"""
input UserHistoryWhereInput {
  and: [UserHistoryWhereInput!]
  """auth_provider field predicates"""
  authProvider: UserHistoryAuthProvider
  authProviderIn: [UserHistoryAuthProvider!]
  authProviderNEQ: UserHistoryAuthProvider
  authProviderNotIn: [UserHistoryAuthProvider!]
  """avatar_local_file field predicates"""
  avatarLocalFile: String
  avatarLocalFileContains: String
  avatarLocalFileContainsFold: String
  avatarLocalFileEqualFold: String
  avatarLocalFileGT: String
  avatarLocalFileGTE: String
  avatarLocalFileHasPrefix: String
  avatarLocalFileHasSuffix: String
  avatarLocalFileIn: [String!]
  avatarLocalFileIsNil: Boolean
  avatarLocalFileLT: String
  avatarLocalFileLTE: String
  avatarLocalFileNEQ: String
  avatarLocalFileNotIn: [String!]
  avatarLocalFileNotNil: Boolean
  """avatar_remote_url field predicates"""
  avatarRemoteURL: String
  avatarRemoteURLContains: String
  avatarRemoteURLContainsFold: String
  avatarRemoteURLEqualFold: String
  avatarRemoteURLGT: String
  avatarRemoteURLGTE: String
  avatarRemoteURLHasPrefix: String
  avatarRemoteURLHasSuffix: String
  avatarRemoteURLIn: [String!]
  avatarRemoteURLIsNil: Boolean
  avatarRemoteURLLT: String
  avatarRemoteURLLTE: String
  avatarRemoteURLNEQ: String
  avatarRemoteURLNotIn: [String!]
  avatarRemoteURLNotNil: Boolean
  """avatar_updated_at field predicates"""
  avatarUpdatedAt: Time
  avatarUpdatedAtGT: Time
  avatarUpdatedAtGTE: Time
  avatarUpdatedAtIn: [Time!]
  avatarUpdatedAtIsNil: Boolean
  avatarUpdatedAtLT: Time
  avatarUpdatedAtLTE: Time
  avatarUpdatedAtNEQ: Time
  avatarUpdatedAtNotIn: [Time!]
  avatarUpdatedAtNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """display_name field predicates"""
  displayName: String
  displayNameContains: String
  displayNameContainsFold: String
  displayNameEqualFold: String
  displayNameGT: String
  displayNameGTE: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIn: [String!]
  displayNameLT: String
  displayNameLTE: String
  displayNameNEQ: String
  displayNameNotIn: [String!]
  """email field predicates"""
  email: String
  emailContains: String
  emailContainsFold: String
  emailEqualFold: String
  emailGT: String
  emailGTE: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIn: [String!]
  emailLT: String
  emailLTE: String
  emailNEQ: String
  emailNotIn: [String!]
  """first_name field predicates"""
  firstName: String
  firstNameContains: String
  firstNameContainsFold: String
  firstNameEqualFold: String
  firstNameGT: String
  firstNameGTE: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameIn: [String!]
  firstNameIsNil: Boolean
  firstNameLT: String
  firstNameLTE: String
  firstNameNEQ: String
  firstNameNotIn: [String!]
  firstNameNotNil: Boolean
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """last_name field predicates"""
  lastName: String
  lastNameContains: String
  lastNameContainsFold: String
  lastNameEqualFold: String
  lastNameGT: String
  lastNameGTE: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameIn: [String!]
  lastNameIsNil: Boolean
  lastNameLT: String
  lastNameLTE: String
  lastNameNEQ: String
  lastNameNotIn: [String!]
  lastNameNotNil: Boolean
  """last_seen field predicates"""
  lastSeen: Time
  lastSeenGT: Time
  lastSeenGTE: Time
  lastSeenIn: [Time!]
  lastSeenIsNil: Boolean
  lastSeenLT: Time
  lastSeenLTE: Time
  lastSeenNEQ: Time
  lastSeenNotIn: [Time!]
  lastSeenNotNil: Boolean
  not: UserHistoryWhereInput
  """operation field predicates"""
  operation: UserHistoryOpType
  operationIn: [UserHistoryOpType!]
  operationNEQ: UserHistoryOpType
  operationNotIn: [UserHistoryOpType!]
  or: [UserHistoryWhereInput!]
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """role field predicates"""
  role: UserHistoryRole
  roleIn: [UserHistoryRole!]
  roleIsNil: Boolean
  roleNEQ: UserHistoryRole
  roleNotIn: [UserHistoryRole!]
  roleNotNil: Boolean
  """sub field predicates"""
  sub: String
  subContains: String
  subContainsFold: String
  subEqualFold: String
  subGT: String
  subGTE: String
  subHasPrefix: String
  subHasSuffix: String
  subIn: [String!]
  subIsNil: Boolean
  subLT: String
  subLTE: String
  subNEQ: String
  subNotIn: [String!]
  subNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}

"""Properties by which User connections can be ordered."""
enum UserOrderField {
  first_name
  last_name
  display_name
}

"""UserRole is enum for the field role"""
enum UserRole @goModel(model: "github.com/datumforge/datum/internal/ent/enums.Role") {
  ADMIN
  MEMBER
  USER
}

type UserSearchResult {
  users: [User!]
}

type UserSetting implements Node {
  createdAt: Time
  createdBy: String
  """organization to load on user login"""
  defaultOrg: Organization
  deletedAt: Time
  deletedBy: String
  """whether the user has confirmed their email address"""
  emailConfirmed: Boolean!
  id: ID!
  """whether the user has two factor authentication enabled"""
  isTfaEnabled: Boolean
  """specifies a user may complete authentication by verifying a WebAuthn capable device"""
  isWebauthnAllowed: Boolean
  """user account is locked if unconfirmed or explicitly locked"""
  locked: Boolean!
  """The time notifications regarding the user were silenced"""
  silencedAt: Time
  """status of the user account"""
  status: UserSettingUserStatus!
  """The time the user was suspended"""
  suspendedAt: Time
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  user: User
  userID: ID
}

"""Return response for createBulkUserSetting mutation"""
type UserSettingBulkCreatePayload {
  """Created userSettings"""
  userSettings: [UserSetting!]
}

"""A connection to a list of items."""
type UserSettingConnection {
  """A list of edges."""
  edges: [UserSettingEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createUserSetting mutation"""
type UserSettingCreatePayload {
  """Created userSetting"""
  userSetting: UserSetting!
}

"""Return response for deleteUserSetting mutation"""
type UserSettingDeletePayload {
  """Deleted userSetting ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type UserSettingEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: UserSetting
}

type UserSettingHistory implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """whether the user has confirmed their email address"""
  emailConfirmed: Boolean!
  historyTime: Time!
  id: ID!
  """whether the user has two factor authentication enabled"""
  isTfaEnabled: Boolean
  """specifies a user may complete authentication by verifying a WebAuthn capable device"""
  isWebauthnAllowed: Boolean
  """user account is locked if unconfirmed or explicitly locked"""
  locked: Boolean!
  operation: UserSettingHistoryOpType!
  ref: String
  """The time notifications regarding the user were silenced"""
  silencedAt: Time
  """status of the user account"""
  status: UserSettingHistoryUserStatus!
  """The time the user was suspended"""
  suspendedAt: Time
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
  userID: String
}

"""A connection to a list of items."""
type UserSettingHistoryConnection {
  """A list of edges."""
  edges: [UserSettingHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type UserSettingHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: UserSettingHistory
}

"""UserSettingHistoryOpType is enum for the field operation"""
enum UserSettingHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""UserSettingHistoryUserStatus is enum for the field status"""
enum UserSettingHistoryUserStatus @goModel(model: "github.com/datumforge/datum/internal/ent/enums.UserStatus") {
  ACTIVE
  INACTIVE
  DEACTIVATED
  SUSPENDED
}

"""
UserSettingHistoryWhereInput is used for filtering UserSettingHistory objects.
Input was generated by ent.
"""
input UserSettingHistoryWhereInput {
  and: [UserSettingHistoryWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """email_confirmed field predicates"""
  emailConfirmed: Boolean
  emailConfirmedNEQ: Boolean
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """is_tfa_enabled field predicates"""
  isTfaEnabled: Boolean
  isTfaEnabledIsNil: Boolean
  isTfaEnabledNEQ: Boolean
  isTfaEnabledNotNil: Boolean
  """is_webauthn_allowed field predicates"""
  isWebauthnAllowed: Boolean
  isWebauthnAllowedIsNil: Boolean
  isWebauthnAllowedNEQ: Boolean
  isWebauthnAllowedNotNil: Boolean
  """locked field predicates"""
  locked: Boolean
  lockedNEQ: Boolean
  not: UserSettingHistoryWhereInput
  """operation field predicates"""
  operation: UserSettingHistoryOpType
  operationIn: [UserSettingHistoryOpType!]
  operationNEQ: UserSettingHistoryOpType
  operationNotIn: [UserSettingHistoryOpType!]
  or: [UserSettingHistoryWhereInput!]
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """silenced_at field predicates"""
  silencedAt: Time
  silencedAtGT: Time
  silencedAtGTE: Time
  silencedAtIn: [Time!]
  silencedAtIsNil: Boolean
  silencedAtLT: Time
  silencedAtLTE: Time
  silencedAtNEQ: Time
  silencedAtNotIn: [Time!]
  silencedAtNotNil: Boolean
  """status field predicates"""
  status: UserSettingHistoryUserStatus
  statusIn: [UserSettingHistoryUserStatus!]
  statusNEQ: UserSettingHistoryUserStatus
  statusNotIn: [UserSettingHistoryUserStatus!]
  """suspended_at field predicates"""
  suspendedAt: Time
  suspendedAtGT: Time
  suspendedAtGTE: Time
  suspendedAtIn: [Time!]
  suspendedAtIsNil: Boolean
  suspendedAtLT: Time
  suspendedAtLTE: Time
  suspendedAtNEQ: Time
  suspendedAtNotIn: [Time!]
  suspendedAtNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
  """user_id field predicates"""
  userID: String
  userIDContains: String
  userIDContainsFold: String
  userIDEqualFold: String
  userIDGT: String
  userIDGTE: String
  userIDHasPrefix: String
  userIDHasSuffix: String
  userIDIn: [String!]
  userIDIsNil: Boolean
  userIDLT: String
  userIDLTE: String
  userIDNEQ: String
  userIDNotIn: [String!]
  userIDNotNil: Boolean
}

"""Return response for updateUserSetting mutation"""
type UserSettingUpdatePayload {
  """Updated userSetting"""
  userSetting: UserSetting!
}

"""UserSettingUserStatus is enum for the field status"""
enum UserSettingUserStatus @goModel(model: "github.com/datumforge/datum/internal/ent/enums.UserStatus") {
  ACTIVE
  INACTIVE
  DEACTIVATED
  SUSPENDED
}

"""
UserSettingWhereInput is used for filtering UserSetting objects.
Input was generated by ent.
"""
input UserSettingWhereInput {
  and: [UserSettingWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """email_confirmed field predicates"""
  emailConfirmed: Boolean
  emailConfirmedNEQ: Boolean
  """default_org edge predicates"""
  hasDefaultOrg: Boolean
  hasDefaultOrgWith: [OrganizationWhereInput!]
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """is_tfa_enabled field predicates"""
  isTfaEnabled: Boolean
  isTfaEnabledIsNil: Boolean
  isTfaEnabledNEQ: Boolean
  isTfaEnabledNotNil: Boolean
  """is_webauthn_allowed field predicates"""
  isWebauthnAllowed: Boolean
  isWebauthnAllowedIsNil: Boolean
  isWebauthnAllowedNEQ: Boolean
  isWebauthnAllowedNotNil: Boolean
  """locked field predicates"""
  locked: Boolean
  lockedNEQ: Boolean
  not: UserSettingWhereInput
  or: [UserSettingWhereInput!]
  """silenced_at field predicates"""
  silencedAt: Time
  silencedAtGT: Time
  silencedAtGTE: Time
  silencedAtIn: [Time!]
  silencedAtIsNil: Boolean
  silencedAtLT: Time
  silencedAtLTE: Time
  silencedAtNEQ: Time
  silencedAtNotIn: [Time!]
  silencedAtNotNil: Boolean
  """status field predicates"""
  status: UserSettingUserStatus
  statusIn: [UserSettingUserStatus!]
  statusNEQ: UserSettingUserStatus
  statusNotIn: [UserSettingUserStatus!]
  """suspended_at field predicates"""
  suspendedAt: Time
  suspendedAtGT: Time
  suspendedAtGTE: Time
  suspendedAtIn: [Time!]
  suspendedAtIsNil: Boolean
  suspendedAtLT: Time
  suspendedAtLTE: Time
  suspendedAtNEQ: Time
  suspendedAtNotIn: [Time!]
  suspendedAtNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
  """user_id field predicates"""
  userID: ID
  userIDContains: ID
  userIDContainsFold: ID
  userIDEqualFold: ID
  userIDGT: ID
  userIDGTE: ID
  userIDHasPrefix: ID
  userIDHasSuffix: ID
  userIDIn: [ID!]
  userIDIsNil: Boolean
  userIDLT: ID
  userIDLTE: ID
  userIDNEQ: ID
  userIDNotIn: [ID!]
  userIDNotNil: Boolean
}

"""Return response for updateUser mutation"""
type UserUpdatePayload {
  """Updated user"""
  user: User!
}

"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  and: [UserWhereInput!]
  """auth_provider field predicates"""
  authProvider: UserAuthProvider
  authProviderIn: [UserAuthProvider!]
  authProviderNEQ: UserAuthProvider
  authProviderNotIn: [UserAuthProvider!]
  """avatar_local_file field predicates"""
  avatarLocalFile: String
  avatarLocalFileContains: String
  avatarLocalFileContainsFold: String
  avatarLocalFileEqualFold: String
  avatarLocalFileGT: String
  avatarLocalFileGTE: String
  avatarLocalFileHasPrefix: String
  avatarLocalFileHasSuffix: String
  avatarLocalFileIn: [String!]
  avatarLocalFileIsNil: Boolean
  avatarLocalFileLT: String
  avatarLocalFileLTE: String
  avatarLocalFileNEQ: String
  avatarLocalFileNotIn: [String!]
  avatarLocalFileNotNil: Boolean
  """avatar_remote_url field predicates"""
  avatarRemoteURL: String
  avatarRemoteURLContains: String
  avatarRemoteURLContainsFold: String
  avatarRemoteURLEqualFold: String
  avatarRemoteURLGT: String
  avatarRemoteURLGTE: String
  avatarRemoteURLHasPrefix: String
  avatarRemoteURLHasSuffix: String
  avatarRemoteURLIn: [String!]
  avatarRemoteURLIsNil: Boolean
  avatarRemoteURLLT: String
  avatarRemoteURLLTE: String
  avatarRemoteURLNEQ: String
  avatarRemoteURLNotIn: [String!]
  avatarRemoteURLNotNil: Boolean
  """avatar_updated_at field predicates"""
  avatarUpdatedAt: Time
  avatarUpdatedAtGT: Time
  avatarUpdatedAtGTE: Time
  avatarUpdatedAtIn: [Time!]
  avatarUpdatedAtIsNil: Boolean
  avatarUpdatedAtLT: Time
  avatarUpdatedAtLTE: Time
  avatarUpdatedAtNEQ: Time
  avatarUpdatedAtNotIn: [Time!]
  avatarUpdatedAtNotNil: Boolean
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """display_name field predicates"""
  displayName: String
  displayNameContains: String
  displayNameContainsFold: String
  displayNameEqualFold: String
  displayNameGT: String
  displayNameGTE: String
  displayNameHasPrefix: String
  displayNameHasSuffix: String
  displayNameIn: [String!]
  displayNameLT: String
  displayNameLTE: String
  displayNameNEQ: String
  displayNameNotIn: [String!]
  """email field predicates"""
  email: String
  emailContains: String
  emailContainsFold: String
  emailEqualFold: String
  emailGT: String
  emailGTE: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailIn: [String!]
  emailLT: String
  emailLTE: String
  emailNEQ: String
  emailNotIn: [String!]
  """first_name field predicates"""
  firstName: String
  firstNameContains: String
  firstNameContainsFold: String
  firstNameEqualFold: String
  firstNameGT: String
  firstNameGTE: String
  firstNameHasPrefix: String
  firstNameHasSuffix: String
  firstNameIn: [String!]
  firstNameIsNil: Boolean
  firstNameLT: String
  firstNameLTE: String
  firstNameNEQ: String
  firstNameNotIn: [String!]
  firstNameNotNil: Boolean
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """features edge predicates"""
  hasFeatures: Boolean
  hasFeaturesWith: [FeatureWhereInput!]
  """files edge predicates"""
  hasFiles: Boolean
  hasFilesWith: [FileWhereInput!]
  """group_memberships edge predicates"""
  hasGroupMemberships: Boolean
  hasGroupMembershipsWith: [GroupMembershipWhereInput!]
  """groups edge predicates"""
  hasGroups: Boolean
  hasGroupsWith: [GroupWhereInput!]
  """organizations edge predicates"""
  hasOrganizations: Boolean
  hasOrganizationsWith: [OrganizationWhereInput!]
  """org_memberships edge predicates"""
  hasOrgMemberships: Boolean
  hasOrgMembershipsWith: [OrgMembershipWhereInput!]
  """personal_access_tokens edge predicates"""
  hasPersonalAccessTokens: Boolean
  hasPersonalAccessTokensWith: [PersonalAccessTokenWhereInput!]
  """setting edge predicates"""
  hasSetting: Boolean
  hasSettingWith: [UserSettingWhereInput!]
  """tfa_settings edge predicates"""
  hasTfaSettings: Boolean
  hasTfaSettingsWith: [TFASettingWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """last_name field predicates"""
  lastName: String
  lastNameContains: String
  lastNameContainsFold: String
  lastNameEqualFold: String
  lastNameGT: String
  lastNameGTE: String
  lastNameHasPrefix: String
  lastNameHasSuffix: String
  lastNameIn: [String!]
  lastNameIsNil: Boolean
  lastNameLT: String
  lastNameLTE: String
  lastNameNEQ: String
  lastNameNotIn: [String!]
  lastNameNotNil: Boolean
  """last_seen field predicates"""
  lastSeen: Time
  lastSeenGT: Time
  lastSeenGTE: Time
  lastSeenIn: [Time!]
  lastSeenIsNil: Boolean
  lastSeenLT: Time
  lastSeenLTE: Time
  lastSeenNEQ: Time
  lastSeenNotIn: [Time!]
  lastSeenNotNil: Boolean
  not: UserWhereInput
  or: [UserWhereInput!]
  """role field predicates"""
  role: UserRole
  roleIn: [UserRole!]
  roleIsNil: Boolean
  roleNEQ: UserRole
  roleNotIn: [UserRole!]
  roleNotNil: Boolean
  """sub field predicates"""
  sub: String
  subContains: String
  subContainsFold: String
  subEqualFold: String
  subGT: String
  subGTE: String
  subHasPrefix: String
  subHasSuffix: String
  subIn: [String!]
  subIsNil: Boolean
  subLT: String
  subLTE: String
  subNEQ: String
  subNotIn: [String!]
  subNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

type Webhook implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """a description of the webhook"""
  description: String
  """the url to send the webhook to"""
  destinationURL: String!
  """indicates if the webhook is active and enabled"""
  enabled: Boolean!
  events: [Event!]
  """the number of failures"""
  failures: Int
  id: ID!
  integrations: [Integration!]
  """the last error message"""
  lastError: String
  """the last response"""
  lastResponse: String
  """the name of the webhook"""
  name: String!
  owner: Organization
  ownerID: ID
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""Return response for createBulkWebhook mutation"""
type WebhookBulkCreatePayload {
  """Created webhooks"""
  webhooks: [Webhook!]
}

"""A connection to a list of items."""
type WebhookConnection {
  """A list of edges."""
  edges: [WebhookEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""Return response for createWebhook mutation"""
type WebhookCreatePayload {
  """Created webhook"""
  webhook: Webhook!
}

"""Return response for deleteWebhook mutation"""
type WebhookDeletePayload {
  """Deleted webhook ID"""
  deletedID: ID!
}

"""An edge in a connection."""
type WebhookEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: Webhook
}

type WebhookHistory implements Node {
  createdAt: Time
  createdBy: String
  deletedAt: Time
  deletedBy: String
  """a description of the webhook"""
  description: String
  """the url to send the webhook to"""
  destinationURL: String!
  """indicates if the webhook is active and enabled"""
  enabled: Boolean!
  """the number of failures"""
  failures: Int
  historyTime: Time!
  id: ID!
  """the last error message"""
  lastError: String
  """the last response"""
  lastResponse: String
  """the name of the webhook"""
  name: String!
  operation: WebhookHistoryOpType!
  ownerID: String
  ref: String
  """tags associated with the object"""
  tags: [String!]
  updatedAt: Time
  updatedBy: String
}

"""A connection to a list of items."""
type WebhookHistoryConnection {
  """A list of edges."""
  edges: [WebhookHistoryEdge]
  """Information to aid in pagination."""
  pageInfo: PageInfo!
  """Identifies the total count of items in the connection."""
  totalCount: Int!
}

"""An edge in a connection."""
type WebhookHistoryEdge {
  """A cursor for use in pagination."""
  cursor: Cursor!
  """The item at the end of the edge."""
  node: WebhookHistory
}

"""WebhookHistoryOpType is enum for the field operation"""
enum WebhookHistoryOpType @goModel(model: "github.com/datumforge/enthistory.OpType") {
  INSERT
  UPDATE
  DELETE
}

"""Ordering options for WebhookHistory connections"""
input WebhookHistoryOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order WebhookHistories."""
  field: WebhookHistoryOrderField!
}

"""Properties by which WebhookHistory connections can be ordered."""
enum WebhookHistoryOrderField {
  name
  url
}

"""
WebhookHistoryWhereInput is used for filtering WebhookHistory objects.
Input was generated by ent.
"""
input WebhookHistoryWhereInput {
  and: [WebhookHistoryWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """destination_url field predicates"""
  destinationURL: String
  destinationURLContains: String
  destinationURLContainsFold: String
  destinationURLEqualFold: String
  destinationURLGT: String
  destinationURLGTE: String
  destinationURLHasPrefix: String
  destinationURLHasSuffix: String
  destinationURLIn: [String!]
  destinationURLLT: String
  destinationURLLTE: String
  destinationURLNEQ: String
  destinationURLNotIn: [String!]
  """enabled field predicates"""
  enabled: Boolean
  enabledNEQ: Boolean
  """failures field predicates"""
  failures: Int
  failuresGT: Int
  failuresGTE: Int
  failuresIn: [Int!]
  failuresIsNil: Boolean
  failuresLT: Int
  failuresLTE: Int
  failuresNEQ: Int
  failuresNotIn: [Int!]
  failuresNotNil: Boolean
  """history_time field predicates"""
  historyTime: Time
  historyTimeGT: Time
  historyTimeGTE: Time
  historyTimeIn: [Time!]
  historyTimeLT: Time
  historyTimeLTE: Time
  historyTimeNEQ: Time
  historyTimeNotIn: [Time!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """last_error field predicates"""
  lastError: String
  lastErrorContains: String
  lastErrorContainsFold: String
  lastErrorEqualFold: String
  lastErrorGT: String
  lastErrorGTE: String
  lastErrorHasPrefix: String
  lastErrorHasSuffix: String
  lastErrorIn: [String!]
  lastErrorIsNil: Boolean
  lastErrorLT: String
  lastErrorLTE: String
  lastErrorNEQ: String
  lastErrorNotIn: [String!]
  lastErrorNotNil: Boolean
  """last_response field predicates"""
  lastResponse: String
  lastResponseContains: String
  lastResponseContainsFold: String
  lastResponseEqualFold: String
  lastResponseGT: String
  lastResponseGTE: String
  lastResponseHasPrefix: String
  lastResponseHasSuffix: String
  lastResponseIn: [String!]
  lastResponseIsNil: Boolean
  lastResponseLT: String
  lastResponseLTE: String
  lastResponseNEQ: String
  lastResponseNotIn: [String!]
  lastResponseNotNil: Boolean
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: WebhookHistoryWhereInput
  """operation field predicates"""
  operation: WebhookHistoryOpType
  operationIn: [WebhookHistoryOpType!]
  operationNEQ: WebhookHistoryOpType
  operationNotIn: [WebhookHistoryOpType!]
  or: [WebhookHistoryWhereInput!]
  """owner_id field predicates"""
  ownerID: String
  ownerIDContains: String
  ownerIDContainsFold: String
  ownerIDEqualFold: String
  ownerIDGT: String
  ownerIDGTE: String
  ownerIDHasPrefix: String
  ownerIDHasSuffix: String
  ownerIDIn: [String!]
  ownerIDIsNil: Boolean
  ownerIDLT: String
  ownerIDLTE: String
  ownerIDNEQ: String
  ownerIDNotIn: [String!]
  ownerIDNotNil: Boolean
  """ref field predicates"""
  ref: String
  refContains: String
  refContainsFold: String
  refEqualFold: String
  refGT: String
  refGTE: String
  refHasPrefix: String
  refHasSuffix: String
  refIn: [String!]
  refIsNil: Boolean
  refLT: String
  refLTE: String
  refNEQ: String
  refNotIn: [String!]
  refNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}

"""Ordering options for Webhook connections"""
input WebhookOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Webhooks."""
  field: WebhookOrderField!
}

"""Properties by which Webhook connections can be ordered."""
enum WebhookOrderField {
  name
  url
}

"""Return response for updateWebhook mutation"""
type WebhookUpdatePayload {
  """Updated webhook"""
  webhook: Webhook!
}

"""
WebhookWhereInput is used for filtering Webhook objects.
Input was generated by ent.
"""
input WebhookWhereInput {
  and: [WebhookWhereInput!]
  """created_at field predicates"""
  createdAt: Time
  createdAtGT: Time
  createdAtGTE: Time
  createdAtIn: [Time!]
  createdAtIsNil: Boolean
  createdAtLT: Time
  createdAtLTE: Time
  createdAtNEQ: Time
  createdAtNotIn: [Time!]
  createdAtNotNil: Boolean
  """created_by field predicates"""
  createdBy: String
  createdByContains: String
  createdByContainsFold: String
  createdByEqualFold: String
  createdByGT: String
  createdByGTE: String
  createdByHasPrefix: String
  createdByHasSuffix: String
  createdByIn: [String!]
  createdByIsNil: Boolean
  createdByLT: String
  createdByLTE: String
  createdByNEQ: String
  createdByNotIn: [String!]
  createdByNotNil: Boolean
  """deleted_at field predicates"""
  deletedAt: Time
  deletedAtGT: Time
  deletedAtGTE: Time
  deletedAtIn: [Time!]
  deletedAtIsNil: Boolean
  deletedAtLT: Time
  deletedAtLTE: Time
  deletedAtNEQ: Time
  deletedAtNotIn: [Time!]
  deletedAtNotNil: Boolean
  """deleted_by field predicates"""
  deletedBy: String
  deletedByContains: String
  deletedByContainsFold: String
  deletedByEqualFold: String
  deletedByGT: String
  deletedByGTE: String
  deletedByHasPrefix: String
  deletedByHasSuffix: String
  deletedByIn: [String!]
  deletedByIsNil: Boolean
  deletedByLT: String
  deletedByLTE: String
  deletedByNEQ: String
  deletedByNotIn: [String!]
  deletedByNotNil: Boolean
  """destination_url field predicates"""
  destinationURL: String
  destinationURLContains: String
  destinationURLContainsFold: String
  destinationURLEqualFold: String
  destinationURLGT: String
  destinationURLGTE: String
  destinationURLHasPrefix: String
  destinationURLHasSuffix: String
  destinationURLIn: [String!]
  destinationURLLT: String
  destinationURLLTE: String
  destinationURLNEQ: String
  destinationURLNotIn: [String!]
  """enabled field predicates"""
  enabled: Boolean
  enabledNEQ: Boolean
  """failures field predicates"""
  failures: Int
  failuresGT: Int
  failuresGTE: Int
  failuresIn: [Int!]
  failuresIsNil: Boolean
  failuresLT: Int
  failuresLTE: Int
  failuresNEQ: Int
  failuresNotIn: [Int!]
  failuresNotNil: Boolean
  """events edge predicates"""
  hasEvents: Boolean
  hasEventsWith: [EventWhereInput!]
  """integrations edge predicates"""
  hasIntegrations: Boolean
  hasIntegrationsWith: [IntegrationWhereInput!]
  """owner edge predicates"""
  hasOwner: Boolean
  hasOwnerWith: [OrganizationWhereInput!]
  """id field predicates"""
  id: ID
  idContainsFold: ID
  idEqualFold: ID
  idGT: ID
  idGTE: ID
  idIn: [ID!]
  idLT: ID
  idLTE: ID
  idNEQ: ID
  idNotIn: [ID!]
  """last_error field predicates"""
  lastError: String
  lastErrorContains: String
  lastErrorContainsFold: String
  lastErrorEqualFold: String
  lastErrorGT: String
  lastErrorGTE: String
  lastErrorHasPrefix: String
  lastErrorHasSuffix: String
  lastErrorIn: [String!]
  lastErrorIsNil: Boolean
  lastErrorLT: String
  lastErrorLTE: String
  lastErrorNEQ: String
  lastErrorNotIn: [String!]
  lastErrorNotNil: Boolean
  """last_response field predicates"""
  lastResponse: String
  lastResponseContains: String
  lastResponseContainsFold: String
  lastResponseEqualFold: String
  lastResponseGT: String
  lastResponseGTE: String
  lastResponseHasPrefix: String
  lastResponseHasSuffix: String
  lastResponseIn: [String!]
  lastResponseIsNil: Boolean
  lastResponseLT: String
  lastResponseLTE: String
  lastResponseNEQ: String
  lastResponseNotIn: [String!]
  lastResponseNotNil: Boolean
  """name field predicates"""
  name: String
  nameContains: String
  nameContainsFold: String
  nameEqualFold: String
  nameGT: String
  nameGTE: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameIn: [String!]
  nameLT: String
  nameLTE: String
  nameNEQ: String
  nameNotIn: [String!]
  not: WebhookWhereInput
  or: [WebhookWhereInput!]
  """owner_id field predicates"""
  ownerID: ID
  ownerIDContains: ID
  ownerIDContainsFold: ID
  ownerIDEqualFold: ID
  ownerIDGT: ID
  ownerIDGTE: ID
  ownerIDHasPrefix: ID
  ownerIDHasSuffix: ID
  ownerIDIn: [ID!]
  ownerIDIsNil: Boolean
  ownerIDLT: ID
  ownerIDLTE: ID
  ownerIDNEQ: ID
  ownerIDNotIn: [ID!]
  ownerIDNotNil: Boolean
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtIn: [Time!]
  updatedAtIsNil: Boolean
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtNEQ: Time
  updatedAtNotIn: [Time!]
  updatedAtNotNil: Boolean
  """updated_by field predicates"""
  updatedBy: String
  updatedByContains: String
  updatedByContainsFold: String
  updatedByEqualFold: String
  updatedByGT: String
  updatedByGTE: String
  updatedByHasPrefix: String
  updatedByHasSuffix: String
  updatedByIn: [String!]
  updatedByIsNil: Boolean
  updatedByLT: String
  updatedByLTE: String
  updatedByNEQ: String
  updatedByNotIn: [String!]
  updatedByNotNil: Boolean
}
